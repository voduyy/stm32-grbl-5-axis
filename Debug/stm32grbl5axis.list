
stm32grbl5axis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd94  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  0800bea4  0800bea4  0001bea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c568  0800c568  0001c568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c56c  0800c56c  0001c56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  20000000  0800c570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001c48  200001e4  0800c754  000201e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000280  20001e2c  0800c754  00021e2c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00026c62  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006679  00000000  00000000  00046e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f612  00000000  00000000  0004d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010e8  00000000  00000000  0005cb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003398  00000000  00000000  0005dbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000bc46  00000000  00000000  00060f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005397  00000000  00000000  0006cbc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00071f5d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000032f8  00000000  00000000  00071fdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800be8c 	.word	0x0800be8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800be8c 	.word	0x0800be8c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_frsub>:
 8000a94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a98:	e002      	b.n	8000aa0 <__addsf3>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_fsub>:
 8000a9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa0 <__addsf3>:
 8000aa0:	0042      	lsls	r2, r0, #1
 8000aa2:	bf1f      	itttt	ne
 8000aa4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa8:	ea92 0f03 	teqne	r2, r3
 8000aac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab4:	d06a      	beq.n	8000b8c <__addsf3+0xec>
 8000ab6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000abe:	bfc1      	itttt	gt
 8000ac0:	18d2      	addgt	r2, r2, r3
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	4048      	eorgt	r0, r1
 8000ac6:	4041      	eorgt	r1, r0
 8000ac8:	bfb8      	it	lt
 8000aca:	425b      	neglt	r3, r3
 8000acc:	2b19      	cmp	r3, #25
 8000ace:	bf88      	it	hi
 8000ad0:	4770      	bxhi	lr
 8000ad2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ad6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ada:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aee:	bf18      	it	ne
 8000af0:	4249      	negne	r1, r1
 8000af2:	ea92 0f03 	teq	r2, r3
 8000af6:	d03f      	beq.n	8000b78 <__addsf3+0xd8>
 8000af8:	f1a2 0201 	sub.w	r2, r2, #1
 8000afc:	fa41 fc03 	asr.w	ip, r1, r3
 8000b00:	eb10 000c 	adds.w	r0, r0, ip
 8000b04:	f1c3 0320 	rsb	r3, r3, #32
 8000b08:	fa01 f103 	lsl.w	r1, r1, r3
 8000b0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b10:	d502      	bpl.n	8000b18 <__addsf3+0x78>
 8000b12:	4249      	negs	r1, r1
 8000b14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b1c:	d313      	bcc.n	8000b46 <__addsf3+0xa6>
 8000b1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b22:	d306      	bcc.n	8000b32 <__addsf3+0x92>
 8000b24:	0840      	lsrs	r0, r0, #1
 8000b26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b2a:	f102 0201 	add.w	r2, r2, #1
 8000b2e:	2afe      	cmp	r2, #254	; 0xfe
 8000b30:	d251      	bcs.n	8000bd6 <__addsf3+0x136>
 8000b32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b3a:	bf08      	it	eq
 8000b3c:	f020 0001 	biceq.w	r0, r0, #1
 8000b40:	ea40 0003 	orr.w	r0, r0, r3
 8000b44:	4770      	bx	lr
 8000b46:	0049      	lsls	r1, r1, #1
 8000b48:	eb40 0000 	adc.w	r0, r0, r0
 8000b4c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	d1ed      	bne.n	8000b32 <__addsf3+0x92>
 8000b56:	fab0 fc80 	clz	ip, r0
 8000b5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b66:	bfaa      	itet	ge
 8000b68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b6c:	4252      	neglt	r2, r2
 8000b6e:	4318      	orrge	r0, r3
 8000b70:	bfbc      	itt	lt
 8000b72:	40d0      	lsrlt	r0, r2
 8000b74:	4318      	orrlt	r0, r3
 8000b76:	4770      	bx	lr
 8000b78:	f092 0f00 	teq	r2, #0
 8000b7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b80:	bf06      	itte	eq
 8000b82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b86:	3201      	addeq	r2, #1
 8000b88:	3b01      	subne	r3, #1
 8000b8a:	e7b5      	b.n	8000af8 <__addsf3+0x58>
 8000b8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b94:	bf18      	it	ne
 8000b96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9a:	d021      	beq.n	8000be0 <__addsf3+0x140>
 8000b9c:	ea92 0f03 	teq	r2, r3
 8000ba0:	d004      	beq.n	8000bac <__addsf3+0x10c>
 8000ba2:	f092 0f00 	teq	r2, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	4608      	moveq	r0, r1
 8000baa:	4770      	bx	lr
 8000bac:	ea90 0f01 	teq	r0, r1
 8000bb0:	bf1c      	itt	ne
 8000bb2:	2000      	movne	r0, #0
 8000bb4:	4770      	bxne	lr
 8000bb6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bba:	d104      	bne.n	8000bc6 <__addsf3+0x126>
 8000bbc:	0040      	lsls	r0, r0, #1
 8000bbe:	bf28      	it	cs
 8000bc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc4:	4770      	bx	lr
 8000bc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bca:	bf3c      	itt	cc
 8000bcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd0:	4770      	bxcc	lr
 8000bd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	4770      	bx	lr
 8000be0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be4:	bf16      	itet	ne
 8000be6:	4608      	movne	r0, r1
 8000be8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bec:	4601      	movne	r1, r0
 8000bee:	0242      	lsls	r2, r0, #9
 8000bf0:	bf06      	itte	eq
 8000bf2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf6:	ea90 0f01 	teqeq	r0, r1
 8000bfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_ui2f>:
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e004      	b.n	8000c10 <__aeabi_i2f+0x8>
 8000c06:	bf00      	nop

08000c08 <__aeabi_i2f>:
 8000c08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	bf48      	it	mi
 8000c0e:	4240      	negmi	r0, r0
 8000c10:	ea5f 0c00 	movs.w	ip, r0
 8000c14:	bf08      	it	eq
 8000c16:	4770      	bxeq	lr
 8000c18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	f04f 0000 	mov.w	r0, #0
 8000c22:	e01c      	b.n	8000c5e <__aeabi_l2f+0x2a>

08000c24 <__aeabi_ul2f>:
 8000c24:	ea50 0201 	orrs.w	r2, r0, r1
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e00a      	b.n	8000c48 <__aeabi_l2f+0x14>
 8000c32:	bf00      	nop

08000c34 <__aeabi_l2f>:
 8000c34:	ea50 0201 	orrs.w	r2, r0, r1
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__aeabi_l2f+0x14>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	ea5f 0c01 	movs.w	ip, r1
 8000c4c:	bf02      	ittt	eq
 8000c4e:	4684      	moveq	ip, r0
 8000c50:	4601      	moveq	r1, r0
 8000c52:	2000      	moveq	r0, #0
 8000c54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c58:	bf08      	it	eq
 8000c5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c62:	fabc f28c 	clz	r2, ip
 8000c66:	3a08      	subs	r2, #8
 8000c68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c6c:	db10      	blt.n	8000c90 <__aeabi_l2f+0x5c>
 8000c6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c72:	4463      	add	r3, ip
 8000c74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c78:	f1c2 0220 	rsb	r2, r2, #32
 8000c7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c80:	fa20 f202 	lsr.w	r2, r0, r2
 8000c84:	eb43 0002 	adc.w	r0, r3, r2
 8000c88:	bf08      	it	eq
 8000c8a:	f020 0001 	biceq.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	f102 0220 	add.w	r2, r2, #32
 8000c94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c98:	f1c2 0220 	rsb	r2, r2, #32
 8000c9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca4:	eb43 0002 	adc.w	r0, r3, r2
 8000ca8:	bf08      	it	eq
 8000caa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_fmul>:
 8000cb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb8:	bf1e      	ittt	ne
 8000cba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cbe:	ea92 0f0c 	teqne	r2, ip
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d06f      	beq.n	8000da8 <__aeabi_fmul+0xf8>
 8000cc8:	441a      	add	r2, r3
 8000cca:	ea80 0c01 	eor.w	ip, r0, r1
 8000cce:	0240      	lsls	r0, r0, #9
 8000cd0:	bf18      	it	ne
 8000cd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cd6:	d01e      	beq.n	8000d16 <__aeabi_fmul+0x66>
 8000cd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ce4:	fba0 3101 	umull	r3, r1, r0, r1
 8000ce8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf0:	bf3e      	ittt	cc
 8000cf2:	0049      	lslcc	r1, r1, #1
 8000cf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cf8:	005b      	lslcc	r3, r3, #1
 8000cfa:	ea40 0001 	orr.w	r0, r0, r1
 8000cfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d02:	2afd      	cmp	r2, #253	; 0xfd
 8000d04:	d81d      	bhi.n	8000d42 <__aeabi_fmul+0x92>
 8000d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d0e:	bf08      	it	eq
 8000d10:	f020 0001 	biceq.w	r0, r0, #1
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d1e:	bf08      	it	eq
 8000d20:	0249      	lsleq	r1, r1, #9
 8000d22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d2a:	3a7f      	subs	r2, #127	; 0x7f
 8000d2c:	bfc2      	ittt	gt
 8000d2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d36:	4770      	bxgt	lr
 8000d38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	dc5d      	bgt.n	8000e00 <__aeabi_fmul+0x150>
 8000d44:	f112 0f19 	cmn.w	r2, #25
 8000d48:	bfdc      	itt	le
 8000d4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d4e:	4770      	bxle	lr
 8000d50:	f1c2 0200 	rsb	r2, r2, #0
 8000d54:	0041      	lsls	r1, r0, #1
 8000d56:	fa21 f102 	lsr.w	r1, r1, r2
 8000d5a:	f1c2 0220 	rsb	r2, r2, #32
 8000d5e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d62:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d66:	f140 0000 	adc.w	r0, r0, #0
 8000d6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d6e:	bf08      	it	eq
 8000d70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d74:	4770      	bx	lr
 8000d76:	f092 0f00 	teq	r2, #0
 8000d7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d7e:	bf02      	ittt	eq
 8000d80:	0040      	lsleq	r0, r0, #1
 8000d82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d86:	3a01      	subeq	r2, #1
 8000d88:	d0f9      	beq.n	8000d7e <__aeabi_fmul+0xce>
 8000d8a:	ea40 000c 	orr.w	r0, r0, ip
 8000d8e:	f093 0f00 	teq	r3, #0
 8000d92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0049      	lsleq	r1, r1, #1
 8000d9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d9e:	3b01      	subeq	r3, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fmul+0xe6>
 8000da2:	ea41 010c 	orr.w	r1, r1, ip
 8000da6:	e78f      	b.n	8000cc8 <__aeabi_fmul+0x18>
 8000da8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dac:	ea92 0f0c 	teq	r2, ip
 8000db0:	bf18      	it	ne
 8000db2:	ea93 0f0c 	teqne	r3, ip
 8000db6:	d00a      	beq.n	8000dce <__aeabi_fmul+0x11e>
 8000db8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dbc:	bf18      	it	ne
 8000dbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dc2:	d1d8      	bne.n	8000d76 <__aeabi_fmul+0xc6>
 8000dc4:	ea80 0001 	eor.w	r0, r0, r1
 8000dc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dcc:	4770      	bx	lr
 8000dce:	f090 0f00 	teq	r0, #0
 8000dd2:	bf17      	itett	ne
 8000dd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dd8:	4608      	moveq	r0, r1
 8000dda:	f091 0f00 	teqne	r1, #0
 8000dde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000de2:	d014      	beq.n	8000e0e <__aeabi_fmul+0x15e>
 8000de4:	ea92 0f0c 	teq	r2, ip
 8000de8:	d101      	bne.n	8000dee <__aeabi_fmul+0x13e>
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	d10f      	bne.n	8000e0e <__aeabi_fmul+0x15e>
 8000dee:	ea93 0f0c 	teq	r3, ip
 8000df2:	d103      	bne.n	8000dfc <__aeabi_fmul+0x14c>
 8000df4:	024b      	lsls	r3, r1, #9
 8000df6:	bf18      	it	ne
 8000df8:	4608      	movne	r0, r1
 8000dfa:	d108      	bne.n	8000e0e <__aeabi_fmul+0x15e>
 8000dfc:	ea80 0001 	eor.w	r0, r0, r1
 8000e00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bx	lr
 8000e0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e16:	4770      	bx	lr

08000e18 <__aeabi_fdiv>:
 8000e18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e20:	bf1e      	ittt	ne
 8000e22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e26:	ea92 0f0c 	teqne	r2, ip
 8000e2a:	ea93 0f0c 	teqne	r3, ip
 8000e2e:	d069      	beq.n	8000f04 <__aeabi_fdiv+0xec>
 8000e30:	eba2 0203 	sub.w	r2, r2, r3
 8000e34:	ea80 0c01 	eor.w	ip, r0, r1
 8000e38:	0249      	lsls	r1, r1, #9
 8000e3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e3e:	d037      	beq.n	8000eb0 <__aeabi_fdiv+0x98>
 8000e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e50:	428b      	cmp	r3, r1
 8000e52:	bf38      	it	cc
 8000e54:	005b      	lslcc	r3, r3, #1
 8000e56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	bf24      	itt	cs
 8000e62:	1a5b      	subcs	r3, r3, r1
 8000e64:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e6c:	bf24      	itt	cs
 8000e6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e7a:	bf24      	itt	cs
 8000e7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e88:	bf24      	itt	cs
 8000e8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	bf18      	it	ne
 8000e96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e9a:	d1e0      	bne.n	8000e5e <__aeabi_fdiv+0x46>
 8000e9c:	2afd      	cmp	r2, #253	; 0xfd
 8000e9e:	f63f af50 	bhi.w	8000d42 <__aeabi_fmul+0x92>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ea8:	bf08      	it	eq
 8000eaa:	f020 0001 	biceq.w	r0, r0, #1
 8000eae:	4770      	bx	lr
 8000eb0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eb4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eb8:	327f      	adds	r2, #127	; 0x7f
 8000eba:	bfc2      	ittt	gt
 8000ebc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ec4:	4770      	bxgt	lr
 8000ec6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	3a01      	subs	r2, #1
 8000ed0:	e737      	b.n	8000d42 <__aeabi_fmul+0x92>
 8000ed2:	f092 0f00 	teq	r2, #0
 8000ed6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eda:	bf02      	ittt	eq
 8000edc:	0040      	lsleq	r0, r0, #1
 8000ede:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ee2:	3a01      	subeq	r2, #1
 8000ee4:	d0f9      	beq.n	8000eda <__aeabi_fdiv+0xc2>
 8000ee6:	ea40 000c 	orr.w	r0, r0, ip
 8000eea:	f093 0f00 	teq	r3, #0
 8000eee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0049      	lsleq	r1, r1, #1
 8000ef6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000efa:	3b01      	subeq	r3, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fdiv+0xda>
 8000efe:	ea41 010c 	orr.w	r1, r1, ip
 8000f02:	e795      	b.n	8000e30 <__aeabi_fdiv+0x18>
 8000f04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f08:	ea92 0f0c 	teq	r2, ip
 8000f0c:	d108      	bne.n	8000f20 <__aeabi_fdiv+0x108>
 8000f0e:	0242      	lsls	r2, r0, #9
 8000f10:	f47f af7d 	bne.w	8000e0e <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	f47f af70 	bne.w	8000dfc <__aeabi_fmul+0x14c>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e776      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f20:	ea93 0f0c 	teq	r3, ip
 8000f24:	d104      	bne.n	8000f30 <__aeabi_fdiv+0x118>
 8000f26:	024b      	lsls	r3, r1, #9
 8000f28:	f43f af4c 	beq.w	8000dc4 <__aeabi_fmul+0x114>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e76e      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f34:	bf18      	it	ne
 8000f36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	d1ca      	bne.n	8000ed2 <__aeabi_fdiv+0xba>
 8000f3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f40:	f47f af5c 	bne.w	8000dfc <__aeabi_fmul+0x14c>
 8000f44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f48:	f47f af3c 	bne.w	8000dc4 <__aeabi_fmul+0x114>
 8000f4c:	e75f      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f4e:	bf00      	nop

08000f50 <__gesf2>:
 8000f50:	f04f 3cff 	mov.w	ip, #4294967295
 8000f54:	e006      	b.n	8000f64 <__cmpsf2+0x4>
 8000f56:	bf00      	nop

08000f58 <__lesf2>:
 8000f58:	f04f 0c01 	mov.w	ip, #1
 8000f5c:	e002      	b.n	8000f64 <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__cmpsf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f74:	bf18      	it	ne
 8000f76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f7a:	d011      	beq.n	8000fa0 <__cmpsf2+0x40>
 8000f7c:	b001      	add	sp, #4
 8000f7e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f82:	bf18      	it	ne
 8000f84:	ea90 0f01 	teqne	r0, r1
 8000f88:	bf58      	it	pl
 8000f8a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f8e:	bf88      	it	hi
 8000f90:	17c8      	asrhi	r0, r1, #31
 8000f92:	bf38      	it	cc
 8000f94:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f98:	bf18      	it	ne
 8000f9a:	f040 0001 	orrne.w	r0, r0, #1
 8000f9e:	4770      	bx	lr
 8000fa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa4:	d102      	bne.n	8000fac <__cmpsf2+0x4c>
 8000fa6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000faa:	d105      	bne.n	8000fb8 <__cmpsf2+0x58>
 8000fac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb0:	d1e4      	bne.n	8000f7c <__cmpsf2+0x1c>
 8000fb2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fb6:	d0e1      	beq.n	8000f7c <__cmpsf2+0x1c>
 8000fb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_cfrcmple>:
 8000fc0:	4684      	mov	ip, r0
 8000fc2:	4608      	mov	r0, r1
 8000fc4:	4661      	mov	r1, ip
 8000fc6:	e7ff      	b.n	8000fc8 <__aeabi_cfcmpeq>

08000fc8 <__aeabi_cfcmpeq>:
 8000fc8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fca:	f7ff ffc9 	bl	8000f60 <__cmpsf2>
 8000fce:	2800      	cmp	r0, #0
 8000fd0:	bf48      	it	mi
 8000fd2:	f110 0f00 	cmnmi.w	r0, #0
 8000fd6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fd8 <__aeabi_fcmpeq>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff fff4 	bl	8000fc8 <__aeabi_cfcmpeq>
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2001      	moveq	r0, #1
 8000fe4:	2000      	movne	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_fcmplt>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff ffea 	bl	8000fc8 <__aeabi_cfcmpeq>
 8000ff4:	bf34      	ite	cc
 8000ff6:	2001      	movcc	r0, #1
 8000ff8:	2000      	movcs	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmple>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffe0 	bl	8000fc8 <__aeabi_cfcmpeq>
 8001008:	bf94      	ite	ls
 800100a:	2001      	movls	r0, #1
 800100c:	2000      	movhi	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_fcmpge>:
 8001014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001018:	f7ff ffd2 	bl	8000fc0 <__aeabi_cfrcmple>
 800101c:	bf94      	ite	ls
 800101e:	2001      	movls	r0, #1
 8001020:	2000      	movhi	r0, #0
 8001022:	f85d fb08 	ldr.w	pc, [sp], #8
 8001026:	bf00      	nop

08001028 <__aeabi_fcmpgt>:
 8001028:	f84d ed08 	str.w	lr, [sp, #-8]!
 800102c:	f7ff ffc8 	bl	8000fc0 <__aeabi_cfrcmple>
 8001030:	bf34      	ite	cc
 8001032:	2001      	movcc	r0, #1
 8001034:	2000      	movcs	r0, #0
 8001036:	f85d fb08 	ldr.w	pc, [sp], #8
 800103a:	bf00      	nop

0800103c <__aeabi_fcmpun>:
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	d102      	bne.n	8001050 <__aeabi_fcmpun+0x14>
 800104a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800104e:	d108      	bne.n	8001062 <__aeabi_fcmpun+0x26>
 8001050:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001054:	d102      	bne.n	800105c <__aeabi_fcmpun+0x20>
 8001056:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105a:	d102      	bne.n	8001062 <__aeabi_fcmpun+0x26>
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	f04f 0001 	mov.w	r0, #1
 8001066:	4770      	bx	lr

08001068 <__aeabi_f2iz>:
 8001068:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800106c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001070:	d30f      	bcc.n	8001092 <__aeabi_f2iz+0x2a>
 8001072:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001076:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107a:	d90d      	bls.n	8001098 <__aeabi_f2iz+0x30>
 800107c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001084:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001088:	fa23 f002 	lsr.w	r0, r3, r2
 800108c:	bf18      	it	ne
 800108e:	4240      	negne	r0, r0
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2iz+0x3a>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d105      	bne.n	80010ae <__aeabi_f2iz+0x46>
 80010a2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010a6:	bf08      	it	eq
 80010a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010ac:	4770      	bx	lr
 80010ae:	f04f 0000 	mov.w	r0, #0
 80010b2:	4770      	bx	lr

080010b4 <__aeabi_f2uiz>:
 80010b4:	0042      	lsls	r2, r0, #1
 80010b6:	d20e      	bcs.n	80010d6 <__aeabi_f2uiz+0x22>
 80010b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010bc:	d30b      	bcc.n	80010d6 <__aeabi_f2uiz+0x22>
 80010be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c6:	d409      	bmi.n	80010dc <__aeabi_f2uiz+0x28>
 80010c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d0:	fa23 f002 	lsr.w	r0, r3, r2
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0000 	mov.w	r0, #0
 80010da:	4770      	bx	lr
 80010dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e0:	d101      	bne.n	80010e6 <__aeabi_f2uiz+0x32>
 80010e2:	0242      	lsls	r2, r0, #9
 80010e4:	d102      	bne.n	80010ec <__aeabi_f2uiz+0x38>
 80010e6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ea:	4770      	bx	lr
 80010ec:	f04f 0000 	mov.w	r0, #0
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80010f4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80010f8:	4b02      	ldr	r3, [pc, #8]	; (8001104 <NVIC_PriorityGroupConfig+0x10>)
 80010fa:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80010fe:	60d8      	str	r0, [r3, #12]
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001108:	78c3      	ldrb	r3, [r0, #3]
 800110a:	b95b      	cbnz	r3, 8001124 <NVIC_Init+0x1c>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800110c:	2101      	movs	r1, #1
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800110e:	7803      	ldrb	r3, [r0, #0]
 8001110:	4814      	ldr	r0, [pc, #80]	; (8001164 <NVIC_Init+0x5c>)
 8001112:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001114:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001118:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800111e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }
}
 8001122:	4770      	bx	lr
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <NVIC_Init+0x60>)
    tmpsub = tmpsub >> tmppriority;
 8001126:	210f      	movs	r1, #15
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001128:	68da      	ldr	r2, [r3, #12]
{
 800112a:	b470      	push	{r4, r5, r6}
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800112c:	43d2      	mvns	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800112e:	2401      	movs	r4, #1
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001130:	7885      	ldrb	r5, [r0, #2]
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001132:	7843      	ldrb	r3, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001134:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8001138:	f1c2 0604 	rsb	r6, r2, #4
    tmpsub = tmpsub >> tmppriority;
 800113c:	fa21 f202 	lsr.w	r2, r1, r2
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001140:	402a      	ands	r2, r5
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001142:	40b3      	lsls	r3, r6
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001144:	7801      	ldrb	r1, [r0, #0]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001146:	4313      	orrs	r3, r2
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <NVIC_Init+0x5c>)
    tmppriority = tmppriority << 0x04;
 800114a:	011b      	lsls	r3, r3, #4
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800114c:	f001 051f 	and.w	r5, r1, #31
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001150:	1850      	adds	r0, r2, r1
 8001152:	b2db      	uxtb	r3, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001154:	40ac      	lsls	r4, r5
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001156:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800115a:	0949      	lsrs	r1, r1, #5
 800115c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
}
 8001160:	bc70      	pop	{r4, r5, r6}
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800116c:	7983      	ldrb	r3, [r0, #6]
 800116e:	b333      	cbz	r3, 80011be <EXTI_Init+0x52>
{
 8001170:	b430      	push	{r4, r5}
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001172:	6804      	ldr	r4, [r0, #0]
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <EXTI_Init+0x78>)
 8001176:	43e1      	mvns	r1, r4
 8001178:	681d      	ldr	r5, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800117a:	7902      	ldrb	r2, [r0, #4]
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800117c:	400d      	ands	r5, r1
 800117e:	601d      	str	r5, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001180:	685d      	ldr	r5, [r3, #4]
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001182:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001186:	4029      	ands	r1, r5
 8001188:	6059      	str	r1, [r3, #4]
    tmp += EXTI_InitStruct->EXTI_Mode;
 800118a:	f502 3282 	add.w	r2, r2, #66560	; 0x10400

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800118e:	6815      	ldr	r5, [r2, #0]
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001190:	7941      	ldrb	r1, [r0, #5]
    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001192:	432c      	orrs	r4, r5
 8001194:	6014      	str	r4, [r2, #0]
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001196:	6802      	ldr	r2, [r0, #0]
 8001198:	689c      	ldr	r4, [r3, #8]
 800119a:	43d0      	mvns	r0, r2
 800119c:	4004      	ands	r4, r0
 800119e:	609c      	str	r4, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80011a0:	68dc      	ldr	r4, [r3, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80011a2:	2910      	cmp	r1, #16
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80011a4:	ea00 0004 	and.w	r0, r0, r4
 80011a8:	60d8      	str	r0, [r3, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80011aa:	d013      	beq.n	80011d4 <EXTI_Init+0x68>
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80011ac:	bc30      	pop	{r4, r5}
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80011ae:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80011b2:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80011b6:	6819      	ldr	r1, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
}
 80011bc:	4770      	bx	lr
    tmp += EXTI_InitStruct->EXTI_Mode;
 80011be:	7903      	ldrb	r3, [r0, #4]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80011c0:	6801      	ldr	r1, [r0, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;
 80011c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011c6:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	ea22 0201 	bic.w	r2, r2, r1
 80011d0:	601a      	str	r2, [r3, #0]
}
 80011d2:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80011d4:	6899      	ldr	r1, [r3, #8]
}
 80011d6:	bc30      	pop	{r4, r5}
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80011d8:	4311      	orrs	r1, r2
 80011da:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80011dc:	68d9      	ldr	r1, [r3, #12]
 80011de:	430a      	orrs	r2, r1
 80011e0:	60da      	str	r2, [r3, #12]
}
 80011e2:	4770      	bx	lr
 80011e4:	40010400 	.word	0x40010400

080011e8 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <EXTI_GetITStatus+0x18>)
 80011ea:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	4003      	ands	r3, r0
 80011f0:	d004      	beq.n	80011fc <EXTI_GetITStatus+0x14>
 80011f2:	4202      	tst	r2, r0
 80011f4:	bf14      	ite	ne
 80011f6:	2001      	movne	r0, #1
 80011f8:	2000      	moveq	r0, #0
 80011fa:	4770      	bx	lr
 80011fc:	4618      	mov	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80011fe:	4770      	bx	lr
 8001200:	40010400 	.word	0x40010400

08001204 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001204:	4b01      	ldr	r3, [pc, #4]	; (800120c <EXTI_ClearITPendingBit+0x8>)
 8001206:	6158      	str	r0, [r3, #20]
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40010400 	.word	0x40010400

08001210 <FLASH_Unlock>:
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <FLASH_Unlock+0xc>)
 8001212:	4903      	ldr	r1, [pc, #12]	; (8001220 <FLASH_Unlock+0x10>)
 8001214:	4a03      	ldr	r2, [pc, #12]	; (8001224 <FLASH_Unlock+0x14>)
 8001216:	6059      	str	r1, [r3, #4]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	4770      	bx	lr
 800121c:	40022000 	.word	0x40022000
 8001220:	45670123 	.word	0x45670123
 8001224:	cdef89ab 	.word	0xcdef89ab

08001228 <FLASH_ErasePage>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001228:	4938      	ldr	r1, [pc, #224]	; (800130c <FLASH_ErasePage+0xe4>)
 800122a:	68cb      	ldr	r3, [r1, #12]
 800122c:	f013 0f01 	tst.w	r3, #1
 8001230:	68cb      	ldr	r3, [r1, #12]
 8001232:	d103      	bne.n	800123c <FLASH_ErasePage+0x14>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001234:	075b      	lsls	r3, r3, #29
 8001236:	d538      	bpl.n	80012aa <FLASH_ErasePage+0x82>
    { 
      flashstatus = FLASH_ERROR_PG;
 8001238:	2002      	movs	r0, #2
 800123a:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800123c:	07db      	lsls	r3, r3, #31
 800123e:	d42c      	bmi.n	800129a <FLASH_ErasePage+0x72>
 8001240:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001244:	4a31      	ldr	r2, [pc, #196]	; (800130c <FLASH_ErasePage+0xe4>)
 8001246:	68d1      	ldr	r1, [r2, #12]
 8001248:	0749      	lsls	r1, r1, #29
 800124a:	d505      	bpl.n	8001258 <FLASH_ErasePage+0x30>
      flashstatus = FLASH_ERROR_PG;
 800124c:	2002      	movs	r0, #2
  status = FLASH_GetBank1Status();
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
  {
    status = FLASH_GetBank1Status();
    Timeout--;
 800124e:	3b01      	subs	r3, #1
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf08      	it	eq
 8001254:	2005      	moveq	r0, #5
 8001256:	4770      	bx	lr
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001258:	68d2      	ldr	r2, [r2, #12]
 800125a:	06d2      	lsls	r2, r2, #27
 800125c:	d41a      	bmi.n	8001294 <FLASH_ErasePage+0x6c>
  if(Timeout == 0x00 )
 800125e:	2b01      	cmp	r3, #1
 8001260:	d021      	beq.n	80012a6 <FLASH_ErasePage+0x7e>
    FLASH->CR|= CR_PER_Set;
 8001262:	4a2a      	ldr	r2, [pc, #168]	; (800130c <FLASH_ErasePage+0xe4>)
 8001264:	6913      	ldr	r3, [r2, #16]
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
 800126c:	6150      	str	r0, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
 800126e:	6913      	ldr	r3, [r2, #16]
 8001270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001274:	6113      	str	r3, [r2, #16]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001276:	68d3      	ldr	r3, [r2, #12]
 8001278:	f013 0f01 	tst.w	r3, #1
 800127c:	68d3      	ldr	r3, [r2, #12]
 800127e:	d119      	bne.n	80012b4 <FLASH_ErasePage+0x8c>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001280:	075b      	lsls	r3, r3, #29
 8001282:	d53b      	bpl.n	80012fc <FLASH_ErasePage+0xd4>
      flashstatus = FLASH_ERROR_PG;
 8001284:	2002      	movs	r0, #2
    FLASH->CR &= CR_PER_Reset;
 8001286:	f641 71fd 	movw	r1, #8189	; 0x1ffd
 800128a:	4a20      	ldr	r2, [pc, #128]	; (800130c <FLASH_ErasePage+0xe4>)
 800128c:	6913      	ldr	r3, [r2, #16]
 800128e:	400b      	ands	r3, r1
 8001290:	6113      	str	r3, [r2, #16]
 8001292:	4770      	bx	lr
        flashstatus = FLASH_ERROR_WRP;
 8001294:	2003      	movs	r0, #3
    Timeout--;
 8001296:	3b01      	subs	r3, #1
 8001298:	e7da      	b.n	8001250 <FLASH_ErasePage+0x28>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <FLASH_ErasePage+0xe8>)
 800129c:	68ca      	ldr	r2, [r1, #12]
 800129e:	07d2      	lsls	r2, r2, #31
 80012a0:	d5d0      	bpl.n	8001244 <FLASH_ErasePage+0x1c>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80012a2:	3b01      	subs	r3, #1
 80012a4:	d1fa      	bne.n	800129c <FLASH_ErasePage+0x74>
    status = FLASH_TIMEOUT;
 80012a6:	2005      	movs	r0, #5
 80012a8:	4770      	bx	lr
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012aa:	68cb      	ldr	r3, [r1, #12]
 80012ac:	06d9      	lsls	r1, r3, #27
 80012ae:	d5d8      	bpl.n	8001262 <FLASH_ErasePage+0x3a>
        flashstatus = FLASH_ERROR_WRP;
 80012b0:	2003      	movs	r0, #3
 80012b2:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80012b4:	07d9      	lsls	r1, r3, #31
 80012b6:	d409      	bmi.n	80012cc <FLASH_ErasePage+0xa4>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80012b8:	68d3      	ldr	r3, [r2, #12]
 80012ba:	075b      	lsls	r3, r3, #29
 80012bc:	d4e2      	bmi.n	8001284 <FLASH_ErasePage+0x5c>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012be:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80012c0:	f013 0f10 	tst.w	r3, #16
 80012c4:	bf14      	ite	ne
 80012c6:	2003      	movne	r0, #3
 80012c8:	2004      	moveq	r0, #4
 80012ca:	e7dc      	b.n	8001286 <FLASH_ErasePage+0x5e>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <FLASH_ErasePage+0xe8>)
 80012ce:	68d1      	ldr	r1, [r2, #12]
 80012d0:	07c9      	lsls	r1, r1, #31
 80012d2:	d408      	bmi.n	80012e6 <FLASH_ErasePage+0xbe>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80012d4:	68d1      	ldr	r1, [r2, #12]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	0749      	lsls	r1, r1, #29
 80012da:	d508      	bpl.n	80012ee <FLASH_ErasePage+0xc6>
      flashstatus = FLASH_ERROR_PG;
 80012dc:	2002      	movs	r0, #2
    status = FLASH_TIMEOUT;
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bf08      	it	eq
 80012e2:	2005      	moveq	r0, #5
 80012e4:	e7cf      	b.n	8001286 <FLASH_ErasePage+0x5e>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80012e6:	3b01      	subs	r3, #1
 80012e8:	d1f1      	bne.n	80012ce <FLASH_ErasePage+0xa6>
    status = FLASH_TIMEOUT;
 80012ea:	2005      	movs	r0, #5
 80012ec:	e7cb      	b.n	8001286 <FLASH_ErasePage+0x5e>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012ee:	68d2      	ldr	r2, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80012f0:	f012 0f10 	tst.w	r2, #16
 80012f4:	bf14      	ite	ne
 80012f6:	2003      	movne	r0, #3
 80012f8:	2004      	moveq	r0, #4
 80012fa:	e7f0      	b.n	80012de <FLASH_ErasePage+0xb6>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012fc:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_ERROR_WRP;
 80012fe:	f013 0f10 	tst.w	r3, #16
 8001302:	bf0c      	ite	eq
 8001304:	2004      	moveq	r0, #4
 8001306:	2003      	movne	r0, #3
 8001308:	e7bd      	b.n	8001286 <FLASH_ErasePage+0x5e>
 800130a:	bf00      	nop
 800130c:	40022000 	.word	0x40022000
 8001310:	000affff 	.word	0x000affff

08001314 <FLASH_ProgramHalfWord>:
{
 8001314:	b410      	push	{r4}
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001316:	4c39      	ldr	r4, [pc, #228]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
 8001318:	68e3      	ldr	r3, [r4, #12]
 800131a:	f013 0f01 	tst.w	r3, #1
 800131e:	68e3      	ldr	r3, [r4, #12]
 8001320:	d104      	bne.n	800132c <FLASH_ProgramHalfWord+0x18>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001322:	075b      	lsls	r3, r3, #29
 8001324:	d538      	bpl.n	8001398 <FLASH_ProgramHalfWord+0x84>
      flashstatus = FLASH_ERROR_PG;
 8001326:	2002      	movs	r0, #2
}
 8001328:	bc10      	pop	{r4}
 800132a:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800132c:	07db      	lsls	r3, r3, #31
 800132e:	d429      	bmi.n	8001384 <FLASH_ProgramHalfWord+0x70>
 8001330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001334:	4a31      	ldr	r2, [pc, #196]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
 8001336:	68d4      	ldr	r4, [r2, #12]
 8001338:	0764      	lsls	r4, r4, #29
 800133a:	d505      	bpl.n	8001348 <FLASH_ProgramHalfWord+0x34>
      flashstatus = FLASH_ERROR_PG;
 800133c:	2002      	movs	r0, #2
    Timeout--;
 800133e:	3b01      	subs	r3, #1
    status = FLASH_TIMEOUT;
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf08      	it	eq
 8001344:	2005      	moveq	r0, #5
 8001346:	e7ef      	b.n	8001328 <FLASH_ProgramHalfWord+0x14>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001348:	68d2      	ldr	r2, [r2, #12]
 800134a:	06d2      	lsls	r2, r2, #27
 800134c:	d417      	bmi.n	800137e <FLASH_ProgramHalfWord+0x6a>
  if(Timeout == 0x00 )
 800134e:	2b01      	cmp	r3, #1
 8001350:	d01f      	beq.n	8001392 <FLASH_ProgramHalfWord+0x7e>
    FLASH->CR |= CR_PG_Set;
 8001352:	4a2a      	ldr	r2, [pc, #168]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
 8001354:	6913      	ldr	r3, [r2, #16]
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 800135c:	8001      	strh	r1, [r0, #0]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800135e:	68d3      	ldr	r3, [r2, #12]
 8001360:	f013 0f01 	tst.w	r3, #1
 8001364:	68d3      	ldr	r3, [r2, #12]
 8001366:	d11c      	bne.n	80013a2 <FLASH_ProgramHalfWord+0x8e>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001368:	075b      	lsls	r3, r3, #29
 800136a:	d53f      	bpl.n	80013ec <FLASH_ProgramHalfWord+0xd8>
      flashstatus = FLASH_ERROR_PG;
 800136c:	2002      	movs	r0, #2
    FLASH->CR &= CR_PG_Reset;
 800136e:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8001372:	4a22      	ldr	r2, [pc, #136]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
}
 8001374:	bc10      	pop	{r4}
    FLASH->CR &= CR_PG_Reset;
 8001376:	6913      	ldr	r3, [r2, #16]
 8001378:	400b      	ands	r3, r1
 800137a:	6113      	str	r3, [r2, #16]
}
 800137c:	4770      	bx	lr
        flashstatus = FLASH_ERROR_WRP;
 800137e:	2003      	movs	r0, #3
    Timeout--;
 8001380:	3b01      	subs	r3, #1
 8001382:	e7dd      	b.n	8001340 <FLASH_ProgramHalfWord+0x2c>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001384:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001388:	68e2      	ldr	r2, [r4, #12]
 800138a:	07d2      	lsls	r2, r2, #31
 800138c:	d5d2      	bpl.n	8001334 <FLASH_ProgramHalfWord+0x20>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 800138e:	3b01      	subs	r3, #1
 8001390:	d1fa      	bne.n	8001388 <FLASH_ProgramHalfWord+0x74>
    status = FLASH_TIMEOUT;
 8001392:	2005      	movs	r0, #5
}
 8001394:	bc10      	pop	{r4}
 8001396:	4770      	bx	lr
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001398:	68e3      	ldr	r3, [r4, #12]
 800139a:	06dc      	lsls	r4, r3, #27
 800139c:	d5d9      	bpl.n	8001352 <FLASH_ProgramHalfWord+0x3e>
        flashstatus = FLASH_ERROR_WRP;
 800139e:	2003      	movs	r0, #3
 80013a0:	e7c2      	b.n	8001328 <FLASH_ProgramHalfWord+0x14>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80013a2:	07d9      	lsls	r1, r3, #31
 80013a4:	d409      	bmi.n	80013ba <FLASH_ProgramHalfWord+0xa6>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80013a6:	68d3      	ldr	r3, [r2, #12]
 80013a8:	075b      	lsls	r3, r3, #29
 80013aa:	d4df      	bmi.n	800136c <FLASH_ProgramHalfWord+0x58>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80013ac:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80013ae:	f013 0f10 	tst.w	r3, #16
 80013b2:	bf14      	ite	ne
 80013b4:	2003      	movne	r0, #3
 80013b6:	2004      	moveq	r0, #4
 80013b8:	e7d9      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80013ba:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80013be:	68d1      	ldr	r1, [r2, #12]
 80013c0:	07cc      	lsls	r4, r1, #31
 80013c2:	d408      	bmi.n	80013d6 <FLASH_ProgramHalfWord+0xc2>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80013c4:	68d1      	ldr	r1, [r2, #12]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	0749      	lsls	r1, r1, #29
 80013ca:	d508      	bpl.n	80013de <FLASH_ProgramHalfWord+0xca>
      flashstatus = FLASH_ERROR_PG;
 80013cc:	2002      	movs	r0, #2
    status = FLASH_TIMEOUT;
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf08      	it	eq
 80013d2:	2005      	moveq	r0, #5
 80013d4:	e7cb      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80013d6:	3b01      	subs	r3, #1
 80013d8:	d1f1      	bne.n	80013be <FLASH_ProgramHalfWord+0xaa>
    status = FLASH_TIMEOUT;
 80013da:	2005      	movs	r0, #5
 80013dc:	e7c7      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80013de:	68d2      	ldr	r2, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80013e0:	f012 0f10 	tst.w	r2, #16
 80013e4:	bf14      	ite	ne
 80013e6:	2003      	movne	r0, #3
 80013e8:	2004      	moveq	r0, #4
 80013ea:	e7f0      	b.n	80013ce <FLASH_ProgramHalfWord+0xba>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80013ec:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_ERROR_WRP;
 80013ee:	f013 0f10 	tst.w	r3, #16
 80013f2:	bf0c      	ite	eq
 80013f4:	2004      	moveq	r0, #4
 80013f6:	2003      	movne	r0, #3
 80013f8:	e7b9      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
 80013fa:	bf00      	nop
 80013fc:	40022000 	.word	0x40022000

08001400 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001400:	b430      	push	{r4, r5}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001402:	78cd      	ldrb	r5, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001404:	06eb      	lsls	r3, r5, #27
 8001406:	bf48      	it	mi
 8001408:	788b      	ldrbmi	r3, [r1, #2]
 800140a:	f005 040f 	and.w	r4, r5, #15
 800140e:	bf48      	it	mi
 8001410:	431c      	orrmi	r4, r3
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001412:	880b      	ldrh	r3, [r1, #0]
 8001414:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001418:	d032      	beq.n	8001480 <GPIO_Init+0x80>
 800141a:	2d48      	cmp	r5, #72	; 0x48
  {
    tmpreg = GPIOx->CRL;
 800141c:	6802      	ldr	r2, [r0, #0]
 800141e:	f000 8081 	beq.w	8001524 <GPIO_Init+0x124>
 8001422:	2d28      	cmp	r5, #40	; 0x28
 8001424:	f000 80b6 	beq.w	8001594 <GPIO_Init+0x194>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8001428:	07d9      	lsls	r1, r3, #31
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 800142a:	bf44      	itt	mi
 800142c:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001430:	4322      	orrmi	r2, r4
      if (currentpin == pos)
 8001432:	0799      	lsls	r1, r3, #30
        tmpreg &= ~pinmask;
 8001434:	bf44      	itt	mi
 8001436:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800143a:	ea42 1204 	orrmi.w	r2, r2, r4, lsl #4
      if (currentpin == pos)
 800143e:	0759      	lsls	r1, r3, #29
        tmpreg &= ~pinmask;
 8001440:	bf44      	itt	mi
 8001442:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001446:	ea42 2204 	orrmi.w	r2, r2, r4, lsl #8
      if (currentpin == pos)
 800144a:	0719      	lsls	r1, r3, #28
        tmpreg &= ~pinmask;
 800144c:	bf44      	itt	mi
 800144e:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001452:	ea42 3204 	orrmi.w	r2, r2, r4, lsl #12
      if (currentpin == pos)
 8001456:	06d9      	lsls	r1, r3, #27
        tmpreg &= ~pinmask;
 8001458:	bf44      	itt	mi
 800145a:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800145e:	ea42 4204 	orrmi.w	r2, r2, r4, lsl #16
      if (currentpin == pos)
 8001462:	0699      	lsls	r1, r3, #26
        tmpreg &= ~pinmask;
 8001464:	bf44      	itt	mi
 8001466:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800146a:	ea42 5204 	orrmi.w	r2, r2, r4, lsl #20
      if (currentpin == pos)
 800146e:	0659      	lsls	r1, r3, #25
        tmpreg &= ~pinmask;
 8001470:	bf44      	itt	mi
 8001472:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001476:	ea42 6204 	orrmi.w	r2, r2, r4, lsl #24
      if (currentpin == pos)
 800147a:	0619      	lsls	r1, r3, #24
 800147c:	d471      	bmi.n	8001562 <GPIO_Init+0x162>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800147e:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001480:	2bff      	cmp	r3, #255	; 0xff
 8001482:	d930      	bls.n	80014e6 <GPIO_Init+0xe6>
 8001484:	2d28      	cmp	r5, #40	; 0x28
  {
    tmpreg = GPIOx->CRH;
 8001486:	6842      	ldr	r2, [r0, #4]
 8001488:	d02f      	beq.n	80014ea <GPIO_Init+0xea>
 800148a:	2d48      	cmp	r5, #72	; 0x48
 800148c:	d06c      	beq.n	8001568 <GPIO_Init+0x168>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 800148e:	05d9      	lsls	r1, r3, #23
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8001490:	bf44      	itt	mi
 8001492:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001496:	4322      	orrmi	r2, r4
      if (currentpin == pos)
 8001498:	059d      	lsls	r5, r3, #22
        tmpreg &= ~pinmask;
 800149a:	bf44      	itt	mi
 800149c:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80014a0:	ea42 1204 	orrmi.w	r2, r2, r4, lsl #4
      if (currentpin == pos)
 80014a4:	0559      	lsls	r1, r3, #21
        tmpreg &= ~pinmask;
 80014a6:	bf44      	itt	mi
 80014a8:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80014ac:	ea42 2204 	orrmi.w	r2, r2, r4, lsl #8
      if (currentpin == pos)
 80014b0:	051d      	lsls	r5, r3, #20
        tmpreg &= ~pinmask;
 80014b2:	bf44      	itt	mi
 80014b4:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80014b8:	ea42 3204 	orrmi.w	r2, r2, r4, lsl #12
      if (currentpin == pos)
 80014bc:	04d9      	lsls	r1, r3, #19
        tmpreg &= ~pinmask;
 80014be:	bf44      	itt	mi
 80014c0:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80014c4:	ea42 4204 	orrmi.w	r2, r2, r4, lsl #16
      if (currentpin == pos)
 80014c8:	049d      	lsls	r5, r3, #18
        tmpreg &= ~pinmask;
 80014ca:	bf44      	itt	mi
 80014cc:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80014d0:	ea42 5204 	orrmi.w	r2, r2, r4, lsl #20
      if (currentpin == pos)
 80014d4:	0459      	lsls	r1, r3, #17
        tmpreg &= ~pinmask;
 80014d6:	bf44      	itt	mi
 80014d8:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80014dc:	ea42 6204 	orrmi.w	r2, r2, r4, lsl #24
      if (currentpin == pos)
 80014e0:	041d      	lsls	r5, r3, #16
 80014e2:	d43b      	bmi.n	800155c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80014e4:	6042      	str	r2, [r0, #4]
  }
}
 80014e6:	bc30      	pop	{r4, r5}
 80014e8:	4770      	bx	lr
      if (currentpin == pos)
 80014ea:	05d9      	lsls	r1, r3, #23
 80014ec:	f100 80d6 	bmi.w	800169c <GPIO_Init+0x29c>
 80014f0:	059d      	lsls	r5, r3, #22
 80014f2:	f100 80cb 	bmi.w	800168c <GPIO_Init+0x28c>
 80014f6:	0559      	lsls	r1, r3, #21
 80014f8:	f100 80c0 	bmi.w	800167c <GPIO_Init+0x27c>
 80014fc:	051d      	lsls	r5, r3, #20
 80014fe:	f100 80b5 	bmi.w	800166c <GPIO_Init+0x26c>
 8001502:	04d9      	lsls	r1, r3, #19
 8001504:	f100 80aa 	bmi.w	800165c <GPIO_Init+0x25c>
 8001508:	049d      	lsls	r5, r3, #18
 800150a:	f100 809f 	bmi.w	800164c <GPIO_Init+0x24c>
 800150e:	0459      	lsls	r1, r3, #17
 8001510:	f100 8094 	bmi.w	800163c <GPIO_Init+0x23c>
 8001514:	041b      	lsls	r3, r3, #16
 8001516:	d5e5      	bpl.n	80014e4 <GPIO_Init+0xe4>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 800151c:	f364 721f 	bfi	r2, r4, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001520:	6143      	str	r3, [r0, #20]
 8001522:	e7df      	b.n	80014e4 <GPIO_Init+0xe4>
      if (currentpin == pos)
 8001524:	07d9      	lsls	r1, r3, #31
 8001526:	f100 80e3 	bmi.w	80016f0 <GPIO_Init+0x2f0>
 800152a:	0799      	lsls	r1, r3, #30
 800152c:	f100 80d9 	bmi.w	80016e2 <GPIO_Init+0x2e2>
 8001530:	0759      	lsls	r1, r3, #29
 8001532:	f100 80cf 	bmi.w	80016d4 <GPIO_Init+0x2d4>
 8001536:	0719      	lsls	r1, r3, #28
 8001538:	f100 80c5 	bmi.w	80016c6 <GPIO_Init+0x2c6>
 800153c:	06d9      	lsls	r1, r3, #27
 800153e:	f100 80bb 	bmi.w	80016b8 <GPIO_Init+0x2b8>
 8001542:	0699      	lsls	r1, r3, #26
 8001544:	f100 80b1 	bmi.w	80016aa <GPIO_Init+0x2aa>
 8001548:	0659      	lsls	r1, r3, #25
 800154a:	f100 80d7 	bmi.w	80016fc <GPIO_Init+0x2fc>
 800154e:	0619      	lsls	r1, r3, #24
 8001550:	d595      	bpl.n	800147e <GPIO_Init+0x7e>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001552:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 8001554:	f364 721f 	bfi	r2, r4, #28, #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001558:	6101      	str	r1, [r0, #16]
 800155a:	e790      	b.n	800147e <GPIO_Init+0x7e>
        tmpreg |= (currentmode << pos);
 800155c:	f364 721f 	bfi	r2, r4, #28, #4
 8001560:	e7c0      	b.n	80014e4 <GPIO_Init+0xe4>
        tmpreg |= (currentmode << pos);
 8001562:	f364 721f 	bfi	r2, r4, #28, #4
 8001566:	e78a      	b.n	800147e <GPIO_Init+0x7e>
      if (currentpin == pos)
 8001568:	05d9      	lsls	r1, r3, #23
 800156a:	d448      	bmi.n	80015fe <GPIO_Init+0x1fe>
 800156c:	059d      	lsls	r5, r3, #22
 800156e:	d43e      	bmi.n	80015ee <GPIO_Init+0x1ee>
 8001570:	0559      	lsls	r1, r3, #21
 8001572:	d434      	bmi.n	80015de <GPIO_Init+0x1de>
 8001574:	051d      	lsls	r5, r3, #20
 8001576:	d42a      	bmi.n	80015ce <GPIO_Init+0x1ce>
 8001578:	04d9      	lsls	r1, r3, #19
 800157a:	d44f      	bmi.n	800161c <GPIO_Init+0x21c>
 800157c:	049d      	lsls	r5, r3, #18
 800157e:	d445      	bmi.n	800160c <GPIO_Init+0x20c>
 8001580:	0459      	lsls	r1, r3, #17
 8001582:	d453      	bmi.n	800162c <GPIO_Init+0x22c>
 8001584:	041d      	lsls	r5, r3, #16
 8001586:	d5ad      	bpl.n	80014e4 <GPIO_Init+0xe4>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 800158c:	f364 721f 	bfi	r2, r4, #28, #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001590:	6103      	str	r3, [r0, #16]
 8001592:	e7a7      	b.n	80014e4 <GPIO_Init+0xe4>
      if (currentpin == pos)
 8001594:	07d9      	lsls	r1, r3, #31
 8001596:	f100 80e2 	bmi.w	800175e <GPIO_Init+0x35e>
 800159a:	0799      	lsls	r1, r3, #30
 800159c:	f100 80d8 	bmi.w	8001750 <GPIO_Init+0x350>
 80015a0:	0759      	lsls	r1, r3, #29
 80015a2:	f100 80ce 	bmi.w	8001742 <GPIO_Init+0x342>
 80015a6:	0719      	lsls	r1, r3, #28
 80015a8:	f100 80c4 	bmi.w	8001734 <GPIO_Init+0x334>
 80015ac:	06d9      	lsls	r1, r3, #27
 80015ae:	f100 80ba 	bmi.w	8001726 <GPIO_Init+0x326>
 80015b2:	0699      	lsls	r1, r3, #26
 80015b4:	f100 80b0 	bmi.w	8001718 <GPIO_Init+0x318>
 80015b8:	0659      	lsls	r1, r3, #25
 80015ba:	f100 80a6 	bmi.w	800170a <GPIO_Init+0x30a>
 80015be:	0619      	lsls	r1, r3, #24
 80015c0:	f57f af5d 	bpl.w	800147e <GPIO_Init+0x7e>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80015c4:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 80015c6:	f364 721f 	bfi	r2, r4, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80015ca:	6141      	str	r1, [r0, #20]
 80015cc:	e757      	b.n	800147e <GPIO_Init+0x7e>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 80015d2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80015d6:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015da:	6101      	str	r1, [r0, #16]
 80015dc:	e7cc      	b.n	8001578 <GPIO_Init+0x178>
 80015de:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 80015e2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80015e6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015ea:	6101      	str	r1, [r0, #16]
 80015ec:	e7c2      	b.n	8001574 <GPIO_Init+0x174>
 80015ee:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 80015f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80015f6:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015fa:	6101      	str	r1, [r0, #16]
 80015fc:	e7b8      	b.n	8001570 <GPIO_Init+0x170>
 80015fe:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 8001602:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001606:	4322      	orrs	r2, r4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001608:	6101      	str	r1, [r0, #16]
 800160a:	e7af      	b.n	800156c <GPIO_Init+0x16c>
 800160c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 8001610:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001614:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001618:	6101      	str	r1, [r0, #16]
 800161a:	e7b1      	b.n	8001580 <GPIO_Init+0x180>
 800161c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 8001620:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001624:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001628:	6101      	str	r1, [r0, #16]
 800162a:	e7a7      	b.n	800157c <GPIO_Init+0x17c>
 800162c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 8001630:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001634:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001638:	6101      	str	r1, [r0, #16]
 800163a:	e7a3      	b.n	8001584 <GPIO_Init+0x184>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800163c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 8001640:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001644:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001648:	6141      	str	r1, [r0, #20]
 800164a:	e763      	b.n	8001514 <GPIO_Init+0x114>
 800164c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 8001650:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001654:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001658:	6141      	str	r1, [r0, #20]
 800165a:	e758      	b.n	800150e <GPIO_Init+0x10e>
 800165c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 8001660:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001664:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001668:	6141      	str	r1, [r0, #20]
 800166a:	e74d      	b.n	8001508 <GPIO_Init+0x108>
 800166c:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 8001670:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001674:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001678:	6141      	str	r1, [r0, #20]
 800167a:	e742      	b.n	8001502 <GPIO_Init+0x102>
 800167c:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 8001680:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001684:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001688:	6141      	str	r1, [r0, #20]
 800168a:	e737      	b.n	80014fc <GPIO_Init+0xfc>
 800168c:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 8001690:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8001694:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001698:	6141      	str	r1, [r0, #20]
 800169a:	e72c      	b.n	80014f6 <GPIO_Init+0xf6>
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 80016a0:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80016a4:	4322      	orrs	r2, r4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80016a6:	6141      	str	r1, [r0, #20]
 80016a8:	e722      	b.n	80014f0 <GPIO_Init+0xf0>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016aa:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 80016ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80016b0:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016b4:	6101      	str	r1, [r0, #16]
 80016b6:	e747      	b.n	8001548 <GPIO_Init+0x148>
 80016b8:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 80016ba:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80016be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016c2:	6101      	str	r1, [r0, #16]
 80016c4:	e73d      	b.n	8001542 <GPIO_Init+0x142>
 80016c6:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 80016c8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80016cc:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016d0:	6101      	str	r1, [r0, #16]
 80016d2:	e733      	b.n	800153c <GPIO_Init+0x13c>
 80016d4:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 80016d6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80016da:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016de:	6101      	str	r1, [r0, #16]
 80016e0:	e729      	b.n	8001536 <GPIO_Init+0x136>
 80016e2:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 80016e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80016e8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016ec:	6101      	str	r1, [r0, #16]
 80016ee:	e71f      	b.n	8001530 <GPIO_Init+0x130>
 80016f0:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 80016f2:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80016f6:	4322      	orrs	r2, r4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016f8:	6101      	str	r1, [r0, #16]
 80016fa:	e716      	b.n	800152a <GPIO_Init+0x12a>
 80016fc:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 80016fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001702:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001706:	6101      	str	r1, [r0, #16]
 8001708:	e721      	b.n	800154e <GPIO_Init+0x14e>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800170a:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 800170c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001710:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001714:	6141      	str	r1, [r0, #20]
 8001716:	e752      	b.n	80015be <GPIO_Init+0x1be>
 8001718:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 800171a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800171e:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001722:	6141      	str	r1, [r0, #20]
 8001724:	e748      	b.n	80015b8 <GPIO_Init+0x1b8>
 8001726:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 8001728:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800172c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001730:	6141      	str	r1, [r0, #20]
 8001732:	e73e      	b.n	80015b2 <GPIO_Init+0x1b2>
 8001734:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 8001736:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800173a:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800173e:	6141      	str	r1, [r0, #20]
 8001740:	e734      	b.n	80015ac <GPIO_Init+0x1ac>
 8001742:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 8001744:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001748:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800174c:	6141      	str	r1, [r0, #20]
 800174e:	e72a      	b.n	80015a6 <GPIO_Init+0x1a6>
 8001750:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 8001752:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8001756:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800175a:	6141      	str	r1, [r0, #20]
 800175c:	e720      	b.n	80015a0 <GPIO_Init+0x1a0>
 800175e:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 8001760:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001764:	4322      	orrs	r2, r4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001766:	6141      	str	r1, [r0, #20]
 8001768:	e717      	b.n	800159a <GPIO_Init+0x19a>
 800176a:	bf00      	nop

0800176c <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 800176c:	6880      	ldr	r0, [r0, #8]
}
 800176e:	b280      	uxth	r0, r0
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop

08001774 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8001774:	68c0      	ldr	r0, [r0, #12]
}
 8001776:	b280      	uxth	r0, r0
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop

0800177c <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 800177c:	6101      	str	r1, [r0, #16]
 800177e:	4770      	bx	lr

08001780 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8001780:	6141      	str	r1, [r0, #20]
 8001782:	4770      	bx	lr

08001784 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8001784:	b90a      	cbnz	r2, 800178a <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8001786:	6141      	str	r1, [r0, #20]
 8001788:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800178a:	6101      	str	r1, [r0, #16]
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001790:	2800      	cmp	r0, #0
  {
    tmpreg = AFIO->MAPR2;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <GPIO_PinRemapConfig+0x68>)
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001794:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
    tmpreg = AFIO->MAPR2;
 8001798:	bfb4      	ite	lt
 800179a:	69db      	ldrlt	r3, [r3, #28]
    tmpreg = AFIO->MAPR;
 800179c:	685b      	ldrge	r3, [r3, #4]
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 800179e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
{
 80017a2:	b430      	push	{r4, r5}
  tmp = GPIO_Remap & LSB_MASK;
 80017a4:	b284      	uxth	r4, r0
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80017a6:	d01e      	beq.n	80017e6 <GPIO_PinRemapConfig+0x56>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80017a8:	02c2      	lsls	r2, r0, #11
 80017aa:	d513      	bpl.n	80017d4 <GPIO_PinRemapConfig+0x44>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80017ac:	2203      	movs	r2, #3
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80017ae:	f3c0 4503 	ubfx	r5, r0, #16, #4
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80017b2:	40aa      	lsls	r2, r5
    tmpreg &= ~tmp1;
 80017b4:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80017b8:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }

  if (NewState != DISABLE)
 80017bc:	b119      	cbz	r1, 80017c6 <GPIO_PinRemapConfig+0x36>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 80017be:	0d42      	lsrs	r2, r0, #21
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	4094      	lsls	r4, r2
 80017c4:	4323      	orrs	r3, r4
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    AFIO->MAPR2 = tmpreg;
 80017c6:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <GPIO_PinRemapConfig+0x68>)
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80017c8:	2800      	cmp	r0, #0
    AFIO->MAPR2 = tmpreg;
 80017ca:	bfb4      	ite	lt
 80017cc:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 80017ce:	6053      	strge	r3, [r2, #4]
  }  
}
 80017d0:	bc30      	pop	{r4, r5}
 80017d2:	4770      	bx	lr
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80017d4:	0d42      	lsrs	r2, r0, #21
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	fa04 f202 	lsl.w	r2, r4, r2
 80017dc:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80017e0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80017e4:	e7ea      	b.n	80017bc <GPIO_PinRemapConfig+0x2c>
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80017e6:	4d04      	ldr	r5, [pc, #16]	; (80017f8 <GPIO_PinRemapConfig+0x68>)
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80017e8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80017ec:	686a      	ldr	r2, [r5, #4]
 80017ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017f2:	606a      	str	r2, [r5, #4]
 80017f4:	e7e2      	b.n	80017bc <GPIO_PinRemapConfig+0x2c>
 80017f6:	bf00      	nop
 80017f8:	40010000 	.word	0x40010000

080017fc <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80017fc:	b410      	push	{r4}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80017fe:	240f      	movs	r4, #15
 8001800:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8001804:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001808:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800180c:	f001 0103 	and.w	r1, r1, #3
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001810:	689a      	ldr	r2, [r3, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8001812:	0089      	lsls	r1, r1, #2
 8001814:	408c      	lsls	r4, r1
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001816:	ea22 0204 	bic.w	r2, r2, r4
 800181a:	609a      	str	r2, [r3, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	fa00 f101 	lsl.w	r1, r0, r1
 8001822:	4311      	orrs	r1, r2
 8001824:	6099      	str	r1, [r3, #8]
}
 8001826:	bc10      	pop	{r4}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop

0800182c <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 800182c:	4b01      	ldr	r3, [pc, #4]	; (8001834 <RCC_USBCLKConfig+0x8>)
 800182e:	6018      	str	r0, [r3, #0]
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	424200d8 	.word	0x424200d8

08001838 <RCC_APB2PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <RCC_APB2PeriphClockCmd+0x14>)
 800183a:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 800183c:	b919      	cbnz	r1, 8001846 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800183e:	ea23 0000 	bic.w	r0, r3, r0
 8001842:	6190      	str	r0, [r2, #24]
 8001844:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 8001846:	4318      	orrs	r0, r3
 8001848:	6190      	str	r0, [r2, #24]
 800184a:	4770      	bx	lr
 800184c:	40021000 	.word	0x40021000

08001850 <RCC_APB1PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <RCC_APB1PeriphClockCmd+0x14>)
 8001852:	69d3      	ldr	r3, [r2, #28]
  if (NewState != DISABLE)
 8001854:	b919      	cbnz	r1, 800185e <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001856:	ea23 0000 	bic.w	r0, r3, r0
 800185a:	61d0      	str	r0, [r2, #28]
 800185c:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1Periph;
 800185e:	4318      	orrs	r0, r3
 8001860:	61d0      	str	r0, [r2, #28]
 8001862:	4770      	bx	lr
 8001864:	40021000 	.word	0x40021000

08001868 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001868:	4a27      	ldr	r2, [pc, #156]	; (8001908 <TIM_TimeBaseInit+0xa0>)
  tmpcr1 = TIMx->CR1;  
 800186a:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800186c:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;  
 800186e:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001870:	d012      	beq.n	8001898 <TIM_TimeBaseInit+0x30>
 8001872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001876:	4290      	cmp	r0, r2
 8001878:	d00e      	beq.n	8001898 <TIM_TimeBaseInit+0x30>
 800187a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800187e:	d00b      	beq.n	8001898 <TIM_TimeBaseInit+0x30>
 8001880:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001884:	4290      	cmp	r0, r2
 8001886:	d007      	beq.n	8001898 <TIM_TimeBaseInit+0x30>
 8001888:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800188c:	4290      	cmp	r0, r2
 800188e:	d003      	beq.n	8001898 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001890:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001894:	4290      	cmp	r0, r2
 8001896:	d103      	bne.n	80018a0 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001898:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800189a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800189e:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80018a0:	4a1a      	ldr	r2, [pc, #104]	; (800190c <TIM_TimeBaseInit+0xa4>)
 80018a2:	4290      	cmp	r0, r2
 80018a4:	d027      	beq.n	80018f6 <TIM_TimeBaseInit+0x8e>
 80018a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018aa:	4290      	cmp	r0, r2
 80018ac:	d023      	beq.n	80018f6 <TIM_TimeBaseInit+0x8e>
{
 80018ae:	b470      	push	{r4, r5, r6}
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80018b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80018b4:	88ce      	ldrh	r6, [r1, #6]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80018b6:	888d      	ldrh	r5, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80018b8:	880c      	ldrh	r4, [r1, #0]
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80018ba:	b29b      	uxth	r3, r3
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80018bc:	f502 328c 	add.w	r2, r2, #71680	; 0x11800
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80018c0:	4333      	orrs	r3, r6
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80018c2:	4290      	cmp	r0, r2
  TIMx->CR1 = tmpcr1;
 80018c4:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80018c6:	8585      	strh	r5, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80018c8:	8504      	strh	r4, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80018ca:	d00e      	beq.n	80018ea <TIM_TimeBaseInit+0x82>
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <TIM_TimeBaseInit+0xa8>)
 80018ce:	4298      	cmp	r0, r3
 80018d0:	d00b      	beq.n	80018ea <TIM_TimeBaseInit+0x82>
 80018d2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80018d6:	4298      	cmp	r0, r3
 80018d8:	d007      	beq.n	80018ea <TIM_TimeBaseInit+0x82>
 80018da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018de:	4298      	cmp	r0, r3
 80018e0:	d003      	beq.n	80018ea <TIM_TimeBaseInit+0x82>
 80018e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018e6:	4298      	cmp	r0, r3
 80018e8:	d101      	bne.n	80018ee <TIM_TimeBaseInit+0x86>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80018ea:	7a0b      	ldrb	r3, [r1, #8]
 80018ec:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80018f2:	8283      	strh	r3, [r0, #20]
}
 80018f4:	4770      	bx	lr
  TIMx->CR1 = tmpcr1;
 80018f6:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80018f8:	888b      	ldrh	r3, [r1, #4]
 80018fa:	8583      	strh	r3, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80018fc:	880b      	ldrh	r3, [r1, #0]
 80018fe:	8503      	strh	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001900:	2301      	movs	r3, #1
 8001902:	8283      	strh	r3, [r0, #20]
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40012c00 	.word	0x40012c00
 800190c:	40001000 	.word	0x40001000
 8001910:	40013400 	.word	0x40013400

08001914 <TIM_OC1Init>:
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001914:	8c02      	ldrh	r2, [r0, #32]
{
 8001916:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001918:	f022 0201 	bic.w	r2, r2, #1
 800191c:	0412      	lsls	r2, r2, #16
 800191e:	0c12      	lsrs	r2, r2, #16
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001920:	890d      	ldrh	r5, [r1, #8]
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001922:	8402      	strh	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 8001924:	8c03      	ldrh	r3, [r0, #32]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001926:	884e      	ldrh	r6, [r1, #2]
  tmpcr2 =  TIMx->CR2;
 8001928:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800192a:	8b02      	ldrh	r2, [r0, #24]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800192c:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001930:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001932:	041b      	lsls	r3, r3, #16
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001934:	f022 0273 	bic.w	r2, r2, #115	; 0x73
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001938:	4e18      	ldr	r6, [pc, #96]	; (800199c <TIM_OC1Init+0x88>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800193a:	0c1b      	lsrs	r3, r3, #16
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 800193c:	0412      	lsls	r2, r2, #16
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800193e:	880f      	ldrh	r7, [r1, #0]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001940:	432b      	orrs	r3, r5
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001942:	0c12      	lsrs	r2, r2, #16
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001944:	42b0      	cmp	r0, r6
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001946:	b29b      	uxth	r3, r3
  tmpcr2 =  TIMx->CR2;
 8001948:	b2a4      	uxth	r4, r4
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800194a:	ea42 0207 	orr.w	r2, r2, r7
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 800194e:	d015      	beq.n	800197c <TIM_OC1Init+0x68>
 8001950:	4d13      	ldr	r5, [pc, #76]	; (80019a0 <TIM_OC1Init+0x8c>)
 8001952:	42a8      	cmp	r0, r5
 8001954:	d012      	beq.n	800197c <TIM_OC1Init+0x68>
 8001956:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800195a:	42a8      	cmp	r0, r5
 800195c:	d00e      	beq.n	800197c <TIM_OC1Init+0x68>
 800195e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001962:	42a8      	cmp	r0, r5
 8001964:	d00a      	beq.n	800197c <TIM_OC1Init+0x68>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8001966:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800196a:	42a8      	cmp	r0, r5
 800196c:	d006      	beq.n	800197c <TIM_OC1Init+0x68>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 800196e:	88c9      	ldrh	r1, [r1, #6]
  TIMx->CR2 = tmpcr2;
 8001970:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001972:	8302      	strh	r2, [r0, #24]
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001974:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8001976:	8681      	strh	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8001978:	8403      	strh	r3, [r0, #32]
}
 800197a:	4770      	bx	lr
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800197c:	894e      	ldrh	r6, [r1, #10]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800197e:	898d      	ldrh	r5, [r1, #12]
 8001980:	89cf      	ldrh	r7, [r1, #14]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8001982:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001986:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8001988:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800198c:	888e      	ldrh	r6, [r1, #4]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800198e:	433d      	orrs	r5, r7
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8001990:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001994:	432c      	orrs	r4, r5
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001996:	4333      	orrs	r3, r6
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001998:	b2a4      	uxth	r4, r4
 800199a:	e7e8      	b.n	800196e <TIM_OC1Init+0x5a>
 800199c:	40012c00 	.word	0x40012c00
 80019a0:	40013400 	.word	0x40013400

080019a4 <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019aa:	6003      	str	r3, [r0, #0]
 80019ac:	6042      	str	r2, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80019ae:	7203      	strb	r3, [r0, #8]
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop

080019b4 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80019b4:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 80019b6:	b929      	cbnz	r1, 80019c4 <TIM_Cmd+0x10>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	041b      	lsls	r3, r3, #16
 80019be:	0c1b      	lsrs	r3, r3, #16
 80019c0:	8003      	strh	r3, [r0, #0]
 80019c2:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_CEN;
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	8003      	strh	r3, [r0, #0]
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <TIM_CtrlPWMOutputs>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80019d0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  if (NewState != DISABLE)
 80019d4:	b921      	cbnz	r1, 80019e0 <TIM_CtrlPWMOutputs+0x10>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 80019d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019da:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80019de:	4770      	bx	lr
    TIMx->BDTR |= TIM_BDTR_MOE;
 80019e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80019ee:	4770      	bx	lr

080019f0 <TIM_ITConfig>:
 80019f0:	8983      	ldrh	r3, [r0, #12]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	b91a      	cbnz	r2, 80019fe <TIM_ITConfig+0xe>
 80019f6:	ea23 0101 	bic.w	r1, r3, r1
 80019fa:	8181      	strh	r1, [r0, #12]
 80019fc:	4770      	bx	lr
 80019fe:	4319      	orrs	r1, r3
 8001a00:	8181      	strh	r1, [r0, #12]
 8001a02:	4770      	bx	lr

08001a04 <TIM_OC1PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8001a04:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8001a06:	f023 0308 	bic.w	r3, r3, #8
 8001a0a:	041b      	lsls	r3, r3, #16
 8001a0c:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001a0e:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001a10:	8301      	strh	r1, [r0, #24]
 8001a12:	4770      	bx	lr

08001a14 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001a14:	43c9      	mvns	r1, r1
 8001a16:	b289      	uxth	r1, r1
 8001a18:	8201      	strh	r1, [r0, #16]
 8001a1a:	4770      	bx	lr

08001a1c <coolant_init>:

#include "grbl.h"


void coolant_init()
{
 8001a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_COOLANT_FLOOD_PORT, ENABLE);
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001a1e:	2410      	movs	r4, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001a20:	2703      	movs	r7, #3
{
 8001a22:	b083      	sub	sp, #12
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 8001a24:	ad02      	add	r5, sp, #8
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001a26:	4e12      	ldr	r6, [pc, #72]	; (8001a70 <coolant_init+0x54>)
	RCC_APB2PeriphClockCmd(RCC_COOLANT_FLOOD_PORT, ENABLE);
 8001a28:	2101      	movs	r1, #1
 8001a2a:	2008      	movs	r0, #8
 8001a2c:	f7ff ff04 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 8001a30:	f825 4d04 	strh.w	r4, [r5, #-4]!
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001a34:	4629      	mov	r1, r5
 8001a36:	4630      	mov	r0, r6
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001a38:	f88d 4007 	strb.w	r4, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001a3c:	f88d 7006 	strb.w	r7, [sp, #6]
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001a40:	f7ff fcde 	bl	8001400 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
 8001a44:	2101      	movs	r1, #1
 8001a46:	2008      	movs	r0, #8
 8001a48:	f7ff fef6 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001a4c:	2308      	movs	r3, #8
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 8001a4e:	4629      	mov	r1, r5
 8001a50:	4630      	mov	r0, r6
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001a52:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001a56:	f88d 7006 	strb.w	r7, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001a5a:	f88d 4007 	strb.w	r4, [sp, #7]
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 8001a5e:	f7ff fccf 	bl	8001400 <GPIO_Init>
#endif
  #else
#ifdef AVRTARGET
	COOLANT_FLOOD_PORT &= ~(1 << COOLANT_FLOOD_BIT);
#else
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001a62:	4621      	mov	r1, r4
 8001a64:	4630      	mov	r0, r6
 8001a66:	f7ff fe8b 	bl	8001780 <GPIO_ResetBits>
}
 8001a6a:	b003      	add	sp, #12
 8001a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40010c00 	.word	0x40010c00

08001a74 <coolant_get_state>:
{
 8001a74:	b508      	push	{r3, lr}
    if (bit_istrue(
 8001a76:	4803      	ldr	r0, [pc, #12]	; (8001a84 <coolant_get_state+0x10>)
 8001a78:	f7ff fe7c 	bl	8001774 <GPIO_ReadOutputData>
}
 8001a7c:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8001a80:	bd08      	pop	{r3, pc}
 8001a82:	bf00      	nop
 8001a84:	40010c00 	.word	0x40010c00

08001a88 <coolant_stop>:
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001a88:	2110      	movs	r1, #16
 8001a8a:	4801      	ldr	r0, [pc, #4]	; (8001a90 <coolant_stop+0x8>)
 8001a8c:	f7ff be78 	b.w	8001780 <GPIO_ResetBits>
 8001a90:	40010c00 	.word	0x40010c00

08001a94 <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant, 
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state(uint8_t mode)
{
 8001a94:	b510      	push	{r4, lr}
  if (sys.abort) { return; } // Block during abort.  
 8001a96:	4c09      	ldr	r4, [pc, #36]	; (8001abc <coolant_set_state+0x28>)
 8001a98:	7863      	ldrb	r3, [r4, #1]
 8001a9a:	b923      	cbnz	r3, 8001aa6 <coolant_set_state+0x12>
  
  if (mode == COOLANT_DISABLE) {
 8001a9c:	b120      	cbz	r0, 8001aa8 <coolant_set_state+0x14>
    coolant_stop(); 
  
  } else {
  
#if defined(AVRTARGET) || defined(STM32F103C8)
	  if (mode & COOLANT_FLOOD_ENABLE) {
 8001a9e:	0643      	lsls	r3, r0, #25
 8001aa0:	d407      	bmi.n	8001ab2 <coolant_set_state+0x1e>
        #endif
      }
    #endif
#endif  
  }
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	7323      	strb	r3, [r4, #12]
 8001aa6:	bd10      	pop	{r4, pc}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001aa8:	2110      	movs	r1, #16
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <coolant_set_state+0x2c>)
 8001aac:	f7ff fe68 	bl	8001780 <GPIO_ResetBits>
 8001ab0:	e7f7      	b.n	8001aa2 <coolant_set_state+0xe>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <coolant_set_state+0x2c>)
 8001ab6:	f7ff fe61 	bl	800177c <GPIO_SetBits>
 8001aba:	e7f2      	b.n	8001aa2 <coolant_set_state+0xe>
 8001abc:	20001b6c 	.word	0x20001b6c
 8001ac0:	40010c00 	.word	0x40010c00

08001ac4 <coolant_sync>:


// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
void coolant_sync(uint8_t mode)
{
 8001ac4:	b538      	push	{r3, r4, r5, lr}
  if (sys.state == STATE_CHECK_MODE) { return; }
 8001ac6:	4c0d      	ldr	r4, [pc, #52]	; (8001afc <coolant_sync+0x38>)
 8001ac8:	7823      	ldrb	r3, [r4, #0]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d004      	beq.n	8001ad8 <coolant_sync+0x14>
 8001ace:	4605      	mov	r5, r0
  protocol_buffer_synchronize(); // Ensure coolant turns on when specified in program.
 8001ad0:	f004 fa40 	bl	8005f54 <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.  
 8001ad4:	7863      	ldrb	r3, [r4, #1]
 8001ad6:	b103      	cbz	r3, 8001ada <coolant_sync+0x16>
 8001ad8:	bd38      	pop	{r3, r4, r5, pc}
  if (mode == COOLANT_DISABLE) {
 8001ada:	b125      	cbz	r5, 8001ae6 <coolant_sync+0x22>
	  if (mode & COOLANT_FLOOD_ENABLE) {
 8001adc:	066b      	lsls	r3, r5, #25
 8001ade:	d407      	bmi.n	8001af0 <coolant_sync+0x2c>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	7323      	strb	r3, [r4, #12]
 8001ae4:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001ae6:	2110      	movs	r1, #16
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <coolant_sync+0x3c>)
 8001aea:	f7ff fe49 	bl	8001780 <GPIO_ResetBits>
 8001aee:	e7f7      	b.n	8001ae0 <coolant_sync+0x1c>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001af0:	2110      	movs	r1, #16
 8001af2:	4803      	ldr	r0, [pc, #12]	; (8001b00 <coolant_sync+0x3c>)
 8001af4:	f7ff fe42 	bl	800177c <GPIO_SetBits>
 8001af8:	e7f2      	b.n	8001ae0 <coolant_sync+0x1c>
 8001afa:	bf00      	nop
 8001afc:	20001b6c 	.word	0x20001b6c
 8001b00:	40010c00 	.word	0x40010c00

08001b04 <eeprom_init>:
		nSize -= 4;
		nAddress += 4;
	}
}
void eeprom_init()
{
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <eeprom_init+0x30>)
 8001b06:	490c      	ldr	r1, [pc, #48]	; (8001b38 <eeprom_init+0x34>)
 8001b08:	b410      	push	{r4}
 8001b0a:	1c5c      	adds	r4, r3, #1
 8001b0c:	1b09      	subs	r1, r1, r4
 8001b0e:	f503 6080 	add.w	r0, r3, #1024	; 0x400
	uint16_t VarIdx = 0;
	uint8_t *pTmp = EE_Buffer;

	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
	{
		*pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 8001b12:	5cca      	ldrb	r2, [r1, r3]
 8001b14:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8001b18:	4298      	cmp	r0, r3
 8001b1a:	d1fa      	bne.n	8001b12 <eeprom_init+0xe>
	}

	if (EE_Buffer[0] != SETTINGS_VERSION)
 8001b1c:	7823      	ldrb	r3, [r4, #0]
 8001b1e:	2b0a      	cmp	r3, #10
 8001b20:	d006      	beq.n	8001b30 <eeprom_init+0x2c>
 8001b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b26:	21ff      	movs	r1, #255	; 0xff
 8001b28:	4804      	ldr	r0, [pc, #16]	; (8001b3c <eeprom_init+0x38>)
		for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
		{
			*pTmp++ = 0xFF;
		}
	}
}
 8001b2a:	bc10      	pop	{r4}
 8001b2c:	f009 b903 	b.w	800ad36 <memset>
 8001b30:	bc10      	pop	{r4}
 8001b32:	4770      	bx	lr
 8001b34:	200016bb 	.word	0x200016bb
 8001b38:	0801fc01 	.word	0x0801fc01
 8001b3c:	200016bc 	.word	0x200016bc

08001b40 <eeprom_get_char>:
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	return EE_Buffer[addr];
 8001b40:	4b01      	ldr	r3, [pc, #4]	; (8001b48 <eeprom_get_char+0x8>)
#endif
}
 8001b42:	5c18      	ldrb	r0, [r3, r0]
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	200016bc 	.word	0x200016bc

08001b4c <eeprom_put_char>:
	}
	
	sei(); // Restore interrupt flag state.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	EE_Buffer[addr] = new_value;
 8001b4c:	4b01      	ldr	r3, [pc, #4]	; (8001b54 <eeprom_put_char+0x8>)
 8001b4e:	5419      	strb	r1, [r3, r0]
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200016bc 	.word	0x200016bc

08001b58 <memcpy_to_eeprom_with_checksum>:
}

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
 8001b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b5c:	4606      	mov	r6, r0
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
 8001b5e:	2a00      	cmp	r2, #0
 8001b60:	d040      	beq.n	8001be4 <memcpy_to_eeprom_with_checksum+0x8c>
 8001b62:	2300      	movs	r3, #0
 8001b64:	4f21      	ldr	r7, [pc, #132]	; (8001bec <memcpy_to_eeprom_with_checksum+0x94>)
 8001b66:	1e44      	subs	r4, r0, #1
 8001b68:	443c      	add	r4, r7
 8001b6a:	188d      	adds	r5, r1, r2
 8001b6c:	2b00      	cmp	r3, #0
    checksum = (checksum << 1) || (checksum >> 7);
 8001b6e:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8001b72:	bf18      	it	ne
 8001b74:	2301      	movne	r3, #1
    checksum += *source;
 8001b76:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001b7a:	4403      	add	r3, r0
  for(; size > 0; size--) { 
 8001b7c:	42a9      	cmp	r1, r5
    checksum += *source;
 8001b7e:	b2db      	uxtb	r3, r3
	EE_Buffer[addr] = new_value;
 8001b80:	f804 0f01 	strb.w	r0, [r4, #1]!
  for(; size > 0; size--) { 
 8001b84:	d1f2      	bne.n	8001b6c <memcpy_to_eeprom_with_checksum+0x14>
 8001b86:	4416      	add	r6, r2
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001b88:	4819      	ldr	r0, [pc, #100]	; (8001bf0 <memcpy_to_eeprom_with_checksum+0x98>)
	EE_Buffer[addr] = new_value;
 8001b8a:	55bb      	strb	r3, [r7, r6]
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001b8c:	f7ff fb4c 	bl	8001228 <FLASH_ErasePage>
	if (FlashStatus != FLASH_COMPLETE)
 8001b90:	2804      	cmp	r0, #4
 8001b92:	d001      	beq.n	8001b98 <memcpy_to_eeprom_with_checksum+0x40>
 8001b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*pBuffer != 0xffff)
 8001b98:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8001b9c:	4d15      	ldr	r5, [pc, #84]	; (8001bf4 <memcpy_to_eeprom_with_checksum+0x9c>)
	if (FlashStatus != FLASH_COMPLETE)
 8001b9e:	4c14      	ldr	r4, [pc, #80]	; (8001bf0 <memcpy_to_eeprom_with_checksum+0x98>)
	while (nSize > 0)
 8001ba0:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8001bf8 <memcpy_to_eeprom_with_checksum+0xa0>
 8001ba4:	1eae      	subs	r6, r5, #2
		if (*pBuffer != 0xffff)
 8001ba6:	f835 1c04 	ldrh.w	r1, [r5, #-4]
 8001baa:	42b9      	cmp	r1, r7
 8001bac:	d002      	beq.n	8001bb4 <memcpy_to_eeprom_with_checksum+0x5c>
			FLASH_ProgramHalfWord(nAddress, *pBuffer++);
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7ff fbb0 	bl	8001314 <FLASH_ProgramHalfWord>
		if (*pBuffer != 0xffff)
 8001bb4:	8831      	ldrh	r1, [r6, #0]
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 8001bb6:	1ca0      	adds	r0, r4, #2
		if (*pBuffer != 0xffff)
 8001bb8:	42b9      	cmp	r1, r7
		nAddress += 4;
 8001bba:	f104 0404 	add.w	r4, r4, #4
		if (*pBuffer != 0xffff)
 8001bbe:	d009      	beq.n	8001bd4 <memcpy_to_eeprom_with_checksum+0x7c>
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 8001bc0:	f7ff fba8 	bl	8001314 <FLASH_ProgramHalfWord>
	while (nSize > 0)
 8001bc4:	4544      	cmp	r4, r8
 8001bc6:	f105 0504 	add.w	r5, r5, #4
 8001bca:	f106 0604 	add.w	r6, r6, #4
 8001bce:	d1ea      	bne.n	8001ba6 <memcpy_to_eeprom_with_checksum+0x4e>
 8001bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bd4:	4544      	cmp	r4, r8
 8001bd6:	f105 0504 	add.w	r5, r5, #4
 8001bda:	f106 0604 	add.w	r6, r6, #4
 8001bde:	d1e2      	bne.n	8001ba6 <memcpy_to_eeprom_with_checksum+0x4e>
 8001be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  unsigned char checksum = 0;
 8001be4:	4613      	mov	r3, r2
 8001be6:	4f01      	ldr	r7, [pc, #4]	; (8001bec <memcpy_to_eeprom_with_checksum+0x94>)
 8001be8:	e7ce      	b.n	8001b88 <memcpy_to_eeprom_with_checksum+0x30>
 8001bea:	bf00      	nop
 8001bec:	200016bc 	.word	0x200016bc
 8001bf0:	0801fc00 	.word	0x0801fc00
 8001bf4:	200016c0 	.word	0x200016c0
 8001bf8:	08020000 	.word	0x08020000

08001bfc <memcpy_from_eeprom_with_checksum>:
  eeprom_flush();
#endif
#endif
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
 8001bfc:	b4f0      	push	{r4, r5, r6, r7}
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
 8001bfe:	b1ca      	cbz	r2, 8001c34 <memcpy_from_eeprom_with_checksum+0x38>
 8001c00:	2300      	movs	r3, #0
 8001c02:	4f0e      	ldr	r7, [pc, #56]	; (8001c3c <memcpy_from_eeprom_with_checksum+0x40>)
 8001c04:	1e4d      	subs	r5, r1, #1
 8001c06:	443d      	add	r5, r7
 8001c08:	1886      	adds	r6, r0, r2
 8001c0a:	2b00      	cmp	r3, #0
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
 8001c0c:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8001c10:	bf18      	it	ne
 8001c12:	2301      	movne	r3, #1
	return EE_Buffer[addr];
 8001c14:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    checksum += data;    
    *(destination++) = data; 
 8001c18:	f800 4b01 	strb.w	r4, [r0], #1
    checksum += data;    
 8001c1c:	4423      	add	r3, r4
  for(; size > 0; size--) { 
 8001c1e:	42b0      	cmp	r0, r6
    checksum += data;    
 8001c20:	b2db      	uxtb	r3, r3
  for(; size > 0; size--) { 
 8001c22:	d1f2      	bne.n	8001c0a <memcpy_from_eeprom_with_checksum+0xe>
 8001c24:	4411      	add	r1, r2
  }
  return(checksum == eeprom_get_char(source));
 8001c26:	5c78      	ldrb	r0, [r7, r1]
}
 8001c28:	bcf0      	pop	{r4, r5, r6, r7}
 8001c2a:	1ac0      	subs	r0, r0, r3
 8001c2c:	fab0 f080 	clz	r0, r0
 8001c30:	0940      	lsrs	r0, r0, #5
 8001c32:	4770      	bx	lr
  unsigned char data, checksum = 0;
 8001c34:	4613      	mov	r3, r2
 8001c36:	4f01      	ldr	r7, [pc, #4]	; (8001c3c <memcpy_from_eeprom_with_checksum+0x40>)
 8001c38:	e7f5      	b.n	8001c26 <memcpy_from_eeprom_with_checksum+0x2a>
 8001c3a:	bf00      	nop
 8001c3c:	200016bc 	.word	0x200016bc

08001c40 <gc_init>:

#define FAIL(status) return(status);


void gc_init()
{
 8001c40:	b508      	push	{r3, lr}
  memset(&gc_state, 0, sizeof(parser_state_t));
 8001c42:	2100      	movs	r1, #0
 8001c44:	225c      	movs	r2, #92	; 0x5c
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <gc_init+0x24>)
 8001c48:	f009 f875 	bl	800ad36 <memset>

  // Load default G54 coordinate system.
  if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) {
 8001c4c:	4906      	ldr	r1, [pc, #24]	; (8001c68 <gc_init+0x28>)
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f005 fcf6 	bl	8007640 <settings_read_coord_data>
 8001c54:	b100      	cbz	r0, 8001c58 <gc_init+0x18>
 8001c56:	bd08      	pop	{r3, pc}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8001c58:	2007      	movs	r0, #7
  }
}
 8001c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8001c5e:	f004 bc63 	b.w	8006528 <report_status_message>
 8001c62:	bf00      	nop
 8001c64:	20001abc 	.word	0x20001abc
 8001c68:	20001aec 	.word	0x20001aec

08001c6c <gc_sync_position>:

// Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
// limit pull-off routines.
void gc_sync_position()
{
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 8001c6c:	4901      	ldr	r1, [pc, #4]	; (8001c74 <gc_sync_position+0x8>)
 8001c6e:	4802      	ldr	r0, [pc, #8]	; (8001c78 <gc_sync_position+0xc>)
 8001c70:	f007 bd0a 	b.w	8009688 <system_convert_array_steps_to_mpos>
 8001c74:	20001b98 	.word	0x20001b98
 8001c78:	20001ad8 	.word	0x20001ad8

08001c7c <gc_execute_line>:
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. In this function, all units and positions are converted and
// exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
// coordinates, respectively.
uint8_t gc_execute_line(char *line)
{
 8001c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c80:	4607      	mov	r7, r0
     updates these modes and commands as the block line is parser and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8001c82:	f8df 8298 	ldr.w	r8, [pc, #664]	; 8001f1c <gc_execute_line+0x2a0>
 8001c86:	2250      	movs	r2, #80	; 0x50
 8001c88:	2100      	movs	r1, #0
{
 8001c8a:	b09f      	sub	sp, #124	; 0x7c
  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8001c8c:	4640      	mov	r0, r8
 8001c8e:	f009 f852 	bl	800ad36 <memset>
  memcpy(&gc_block.modal,&gc_state.modal,sizeof(gc_modal_t)); // Copy current modes
 8001c92:	4b9e      	ldr	r3, [pc, #632]	; (8001f0c <gc_execute_line+0x290>)
 8001c94:	cb03      	ldmia	r3!, {r0, r1}
 8001c96:	881c      	ldrh	r4, [r3, #0]
 8001c98:	789a      	ldrb	r2, [r3, #2]
 8001c9a:	f8c8 0001 	str.w	r0, [r8, #1]
 8001c9e:	f8c8 1005 	str.w	r1, [r8, #5]
 8001ca2:	f8a8 4009 	strh.w	r4, [r8, #9]
 8001ca6:	f888 200b 	strb.w	r2, [r8, #11]
  uint16_t command_words = 0; // Tracks G and M command words. Also used for modal group violations.
  uint16_t value_words = 0; // Tracks value words.
  uint8_t gc_parser_flags = GC_PARSER_NONE;

  // Determine if the line is a jogging motion or a normal g-code block.
  if (line[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 8001caa:	783b      	ldrb	r3, [r7, #0]
 8001cac:	2b24      	cmp	r3, #36	; 0x24
 8001cae:	f000 811c 	beq.w	8001eea <gc_execute_line+0x26e>
 8001cb2:	2310      	movs	r3, #16
  char letter;
  float value;
  uint8_t int_value = 0;
  uint16_t mantissa = 0;
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
  else { char_counter = 0; }
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8001cb8:	2304      	movs	r3, #4
  uint8_t gc_parser_flags = GC_PARSER_NONE;
 8001cba:	9209      	str	r2, [sp, #36]	; 0x24
 8001cbc:	930a      	str	r3, [sp, #40]	; 0x28
            switch(int_value) {
              #ifdef ENABLE_M7
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
              #endif
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 8001cbe:	f04f 0900 	mov.w	r9, #0
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001cc2:	f817 a002 	ldrb.w	sl, [r7, r2]
 8001cc6:	f88d 2053 	strb.w	r2, [sp, #83]	; 0x53
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 8001cca:	464c      	mov	r4, r9
 8001ccc:	f8cd 9020 	str.w	r9, [sp, #32]
 8001cd0:	f8cd 9018 	str.w	r9, [sp, #24]
 8001cd4:	f8cd 901c 	str.w	r9, [sp, #28]
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001cd8:	f1ba 0f00 	cmp.w	sl, #0
 8001cdc:	f000 80e7 	beq.w	8001eae <gc_execute_line+0x232>
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 8001ce0:	f1aa 0541 	sub.w	r5, sl, #65	; 0x41
 8001ce4:	b2eb      	uxtb	r3, r5
 8001ce6:	2b19      	cmp	r3, #25
 8001ce8:	f200 82a2 	bhi.w	8002230 <gc_execute_line+0x5b4>
    char_counter++;
 8001cec:	1c53      	adds	r3, r2, #1
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8001cee:	f10d 0153 	add.w	r1, sp, #83	; 0x53
 8001cf2:	aa15      	add	r2, sp, #84	; 0x54
 8001cf4:	4638      	mov	r0, r7
    char_counter++;
 8001cf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8001cfa:	f002 f8ab 	bl	8003e54 <read_float>
 8001cfe:	2800      	cmp	r0, #0
 8001d00:	f000 829b 	beq.w	800223a <gc_execute_line+0x5be>
    int_value = truncf(value);
 8001d04:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 8001d08:	4658      	mov	r0, fp
 8001d0a:	f7ff f9d3 	bl	80010b4 <__aeabi_f2uiz>
 8001d0e:	b2c6      	uxtb	r6, r0
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001d10:	4630      	mov	r0, r6
 8001d12:	f7fe ff79 	bl	8000c08 <__aeabi_i2f>
 8001d16:	4601      	mov	r1, r0
 8001d18:	4658      	mov	r0, fp
 8001d1a:	f7fe febf 	bl	8000a9c <__aeabi_fsub>
 8001d1e:	497c      	ldr	r1, [pc, #496]	; (8001f10 <gc_execute_line+0x294>)
 8001d20:	f7fe ffc6 	bl	8000cb0 <__aeabi_fmul>
 8001d24:	f009 f8c4 	bl	800aeb0 <lroundf>
    switch(letter) {
 8001d28:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001d2c:	b282      	uxth	r2, r0
    switch(letter) {
 8001d2e:	d024      	beq.n	8001d7a <gc_execute_line+0xfe>
 8001d30:	f1ba 0f4d 	cmp.w	sl, #77	; 0x4d
 8001d34:	f040 8085 	bne.w	8001e42 <gc_execute_line+0x1c6>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [No Mxx.x commands]
 8001d38:	2a00      	cmp	r2, #0
 8001d3a:	f040 82b4 	bne.w	80022a6 <gc_execute_line+0x62a>
 8001d3e:	2e1e      	cmp	r6, #30
 8001d40:	f200 8102 	bhi.w	8001f48 <gc_execute_line+0x2cc>
 8001d44:	2201      	movs	r2, #1
 8001d46:	4973      	ldr	r1, [pc, #460]	; (8001f14 <gc_execute_line+0x298>)
 8001d48:	40b2      	lsls	r2, r6
 8001d4a:	420a      	tst	r2, r1
 8001d4c:	f040 8098 	bne.w	8001e80 <gc_execute_line+0x204>
 8001d50:	f412 7f40 	tst.w	r2, #768	; 0x300
 8001d54:	f040 80be 	bne.w	8001ed4 <gc_execute_line+0x258>
 8001d58:	f012 0f38 	tst.w	r2, #56	; 0x38
 8001d5c:	f000 80f4 	beq.w	8001f48 <gc_execute_line+0x2cc>
            switch(int_value) {
 8001d60:	2e04      	cmp	r6, #4
 8001d62:	f000 8200 	beq.w	8002166 <gc_execute_line+0x4ea>
 8001d66:	2e05      	cmp	r6, #5
 8001d68:	f000 8280 	beq.w	800226c <gc_execute_line+0x5f0>
 8001d6c:	2e03      	cmp	r6, #3
 8001d6e:	f000 8201 	beq.w	8002174 <gc_execute_line+0x4f8>
 8001d72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d76:	230c      	movs	r3, #12
 8001d78:	e08b      	b.n	8001e92 <gc_execute_line+0x216>
        switch(int_value) {
 8001d7a:	2e5e      	cmp	r6, #94	; 0x5e
 8001d7c:	f200 80e4 	bhi.w	8001f48 <gc_execute_line+0x2cc>
 8001d80:	e8df f016 	tbh	[pc, r6, lsl #1]
 8001d84:	00ce00ce 	.word	0x00ce00ce
 8001d88:	00ce00ce 	.word	0x00ce00ce
 8001d8c:	00e20153 	.word	0x00e20153
 8001d90:	00e200e2 	.word	0x00e200e2
 8001d94:	00e200e2 	.word	0x00e200e2
 8001d98:	00e2010d 	.word	0x00e2010d
 8001d9c:	00e200e2 	.word	0x00e200e2
 8001da0:	00e200e2 	.word	0x00e200e2
 8001da4:	011f00e2 	.word	0x011f00e2
 8001da8:	011f011f 	.word	0x011f011f
 8001dac:	01070107 	.word	0x01070107
 8001db0:	00e200e2 	.word	0x00e200e2
 8001db4:	00e200e2 	.word	0x00e200e2
 8001db8:	00e200e2 	.word	0x00e200e2
 8001dbc:	00e2010d 	.word	0x00e2010d
 8001dc0:	00e2010d 	.word	0x00e2010d
 8001dc4:	00e200e2 	.word	0x00e200e2
 8001dc8:	00e200e2 	.word	0x00e200e2
 8001dcc:	00e200e2 	.word	0x00e200e2
 8001dd0:	00e200ce 	.word	0x00e200ce
 8001dd4:	00e200f2 	.word	0x00e200f2
 8001dd8:	012500e2 	.word	0x012500e2
 8001ddc:	00e200e2 	.word	0x00e200e2
 8001de0:	00e200e2 	.word	0x00e200e2
 8001de4:	012500e2 	.word	0x012500e2
 8001de8:	00e200e2 	.word	0x00e200e2
 8001dec:	015300e2 	.word	0x015300e2
 8001df0:	01350135 	.word	0x01350135
 8001df4:	01350135 	.word	0x01350135
 8001df8:	01350135 	.word	0x01350135
 8001dfc:	013b00e2 	.word	0x013b00e2
 8001e00:	00e200e2 	.word	0x00e200e2
 8001e04:	00e200e2 	.word	0x00e200e2
 8001e08:	00e200e2 	.word	0x00e200e2
 8001e0c:	00e200e2 	.word	0x00e200e2
 8001e10:	00e200e2 	.word	0x00e200e2
 8001e14:	00e200e2 	.word	0x00e200e2
 8001e18:	00e200e2 	.word	0x00e200e2
 8001e1c:	00e200e2 	.word	0x00e200e2
 8001e20:	00e200e2 	.word	0x00e200e2
 8001e24:	00e2013f 	.word	0x00e2013f
 8001e28:	00e200e2 	.word	0x00e200e2
 8001e2c:	00e200e2 	.word	0x00e200e2
 8001e30:	00e200e2 	.word	0x00e200e2
 8001e34:	00e200e2 	.word	0x00e200e2
 8001e38:	01440144 	.word	0x01440144
 8001e3c:	014d010d 	.word	0x014d010d
 8001e40:	014d      	.short	0x014d
      default:

        /* Non-Command Words: This initial parsing phase only checks for repeats of the remaining
           legal g-code words and stores their value. Error-checking is performed later since some
           words (I,J,K,L,P,R) have multiple connotations and/or depend on the issued commands. */
        switch(letter){
 8001e42:	2d19      	cmp	r5, #25
 8001e44:	f200 8080 	bhi.w	8001f48 <gc_execute_line+0x2cc>
 8001e48:	e8df f015 	tbh	[pc, r5, lsl #1]
 8001e4c:	01830179 	.word	0x01830179
 8001e50:	007e007e 	.word	0x007e007e
 8001e54:	00fc007e 	.word	0x00fc007e
 8001e58:	007e007e 	.word	0x007e007e
 8001e5c:	011f010e 	.word	0x011f010e
 8001e60:	01310128 	.word	0x01310128
 8001e64:	0136007e 	.word	0x0136007e
 8001e68:	013e007e 	.word	0x013e007e
 8001e6c:	0143007e 	.word	0x0143007e
 8001e70:	014e0148 	.word	0x014e0148
 8001e74:	007e007e 	.word	0x007e007e
 8001e78:	015b007e 	.word	0x015b007e
 8001e7c:	016f0165 	.word	0x016f0165
            switch(int_value) {
 8001e80:	2e00      	cmp	r6, #0
 8001e82:	d066      	beq.n	8001f52 <gc_execute_line+0x2d6>
 8001e84:	2e01      	cmp	r6, #1
 8001e86:	d03d      	beq.n	8001f04 <gc_execute_line+0x288>
              default: gc_block.modal.program_flow = int_value; // Program end and reset
 8001e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e8c:	230b      	movs	r3, #11
 8001e8e:	f888 6008 	strb.w	r6, [r8, #8]
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8001e92:	fa44 f303 	asr.w	r3, r4, r3
 8001e96:	07d8      	lsls	r0, r3, #31
 8001e98:	f100 81ff 	bmi.w	800229a <gc_execute_line+0x61e>
        command_words |= bit(word_bit);
 8001e9c:	4314      	orrs	r4, r2
 8001e9e:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001ea2:	f817 a002 	ldrb.w	sl, [r7, r2]
 8001ea6:	f1ba 0f00 	cmp.w	sl, #0
 8001eaa:	f47f af19 	bne.w	8001ce0 <gc_execute_line+0x64>

  // [0. Non-specific/common error-checks and miscellaneous setup]:

  // Determine implicit axis command conditions. Axis words have been passed, but no explicit axis
  // command has been sent. If so, set axis command to current motion mode.
  if (axis_words) {
 8001eae:	9b06      	ldr	r3, [sp, #24]
 8001eb0:	b123      	cbz	r3, 8001ebc <gc_execute_line+0x240>
    if (!axis_command) { axis_command = AXIS_COMMAND_MOTION_MODE; } // Assign implicit motion-mode
 8001eb2:	9b07      	ldr	r3, [sp, #28]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf08      	it	eq
 8001eb8:	2302      	moveq	r3, #2
 8001eba:	9307      	str	r3, [sp, #28]
  }

  // Check for valid line number N value.
  if (bit_istrue(value_words,bit(WORD_N))) {
 8001ebc:	f019 0f20 	tst.w	r9, #32
 8001ec0:	f000 816a 	beq.w	8002198 <gc_execute_line+0x51c>
    // Line number value cannot be less than zero (done) or greater than max line number.
    if (gc_block.values.n > MAX_LINE_NUMBER) { FAIL(STATUS_GCODE_INVALID_LINE_NUMBER); } // [Exceeds max line number]
 8001ec4:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <gc_execute_line+0x29c>)
 8001ec6:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	f340 8164 	ble.w	8002198 <gc_execute_line+0x51c>
 8001ed0:	241b      	movs	r4, #27
 8001ed2:	e03a      	b.n	8001f4a <gc_execute_line+0x2ce>
            switch(int_value) {
 8001ed4:	2e08      	cmp	r6, #8
 8001ed6:	d055      	beq.n	8001f84 <gc_execute_line+0x308>
 8001ed8:	2e09      	cmp	r6, #9
 8001eda:	d141      	bne.n	8001f60 <gc_execute_line+0x2e4>
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee2:	f888 3009 	strb.w	r3, [r8, #9]
 8001ee6:	230d      	movs	r3, #13
 8001ee8:	e7d3      	b.n	8001e92 <gc_execute_line+0x216>
	gc_block.modal.motion = MOTION_MODE_LINEAR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f888 3001 	strb.w	r3, [r8, #1]
    gc_parser_flags |= GC_PARSER_JOG_MOTION;
 8001ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ef2:	2311      	movs	r3, #17
    gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ef8:	2305      	movs	r3, #5
 8001efa:	f888 2002 	strb.w	r2, [r8, #2]
 8001efe:	930a      	str	r3, [sp, #40]	; 0x28
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
 8001f00:	2203      	movs	r2, #3
 8001f02:	e6dc      	b.n	8001cbe <gc_execute_line+0x42>
            switch(int_value) {
 8001f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f08:	230b      	movs	r3, #11
 8001f0a:	e7c2      	b.n	8001e92 <gc_execute_line+0x216>
 8001f0c:	20001abc 	.word	0x20001abc
 8001f10:	42c80000 	.word	0x42c80000
 8001f14:	40000007 	.word	0x40000007
 8001f18:	00989680 	.word	0x00989680
 8001f1c:	20001b18 	.word	0x20001b18
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8001f20:	9b07      	ldr	r3, [sp, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f040 8313 	bne.w	800254e <gc_execute_line+0x8d2>
            if (int_value == 38){
 8001f28:	2e26      	cmp	r6, #38	; 0x26
            gc_block.modal.motion = int_value;
 8001f2a:	f888 6001 	strb.w	r6, [r8, #1]
            if (int_value == 38){
 8001f2e:	f040 81b6 	bne.w	800229e <gc_execute_line+0x622>
              if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) {
 8001f32:	f1a2 0314 	sub.w	r3, r2, #20
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2b1e      	cmp	r3, #30
 8001f3a:	d805      	bhi.n	8001f48 <gc_execute_line+0x2cc>
 8001f3c:	49c6      	ldr	r1, [pc, #792]	; (8002258 <gc_execute_line+0x5dc>)
 8001f3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f42:	07de      	lsls	r6, r3, #31
 8001f44:	f100 811d 	bmi.w	8002182 <gc_execute_line+0x506>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
      if (gc_block.values.l != 20) {
        if (gc_block.values.l == 2) {
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
        } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported L]
 8001f48:	2414      	movs	r4, #20
  }

  // TODO: % to denote start of program.

  return(STATUS_OK);
}
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	b01f      	add	sp, #124	; 0x7c
 8001f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              case 0: gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED; break; // Program pause
 8001f52:	2303      	movs	r3, #3
 8001f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f58:	f888 3008 	strb.w	r3, [r8, #8]
 8001f5c:	230b      	movs	r3, #11
 8001f5e:	e798      	b.n	8001e92 <gc_execute_line+0x216>
            switch(int_value) {
 8001f60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f64:	230d      	movs	r3, #13
 8001f66:	e794      	b.n	8001e92 <gc_execute_line+0x216>
        switch(int_value) {
 8001f68:	2107      	movs	r1, #7
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8001f6a:	2a00      	cmp	r2, #0
 8001f6c:	f040 819b 	bne.w	80022a6 <gc_execute_line+0x62a>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8001f70:	fa44 f301 	asr.w	r3, r4, r1
 8001f74:	07dd      	lsls	r5, r3, #31
 8001f76:	f100 8190 	bmi.w	800229a <gc_execute_line+0x61e>
        command_words |= bit(word_bit);
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	408b      	lsls	r3, r1
 8001f7e:	431c      	orrs	r4, r3
 8001f80:	b2a4      	uxth	r4, r4
        break;
 8001f82:	e78c      	b.n	8001e9e <gc_execute_line+0x222>
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 8001f84:	2340      	movs	r3, #64	; 0x40
 8001f86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f8a:	f888 3009 	strb.w	r3, [r8, #9]
 8001f8e:	230d      	movs	r3, #13
 8001f90:	e77f      	b.n	8001e92 <gc_execute_line+0x216>
            gc_block.modal.units = 21 - int_value;
 8001f92:	f1c6 0315 	rsb	r3, r6, #21
 8001f96:	f888 3003 	strb.w	r3, [r8, #3]
            break;
 8001f9a:	2106      	movs	r1, #6
 8001f9c:	e7e5      	b.n	8001f6a <gc_execute_line+0x2ee>
            if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 8001f9e:	2a00      	cmp	r2, #0
 8001fa0:	f040 8173 	bne.w	800228a <gc_execute_line+0x60e>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8001fa4:	9b07      	ldr	r3, [sp, #28]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f040 82d1 	bne.w	800254e <gc_execute_line+0x8d2>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001fac:	2e1c      	cmp	r6, #28
            gc_block.non_modal_command = int_value;
 8001fae:	f888 6000 	strb.w	r6, [r8]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001fb2:	f000 817f 	beq.w	80022b4 <gc_execute_line+0x638>
 8001fb6:	2e1e      	cmp	r6, #30
 8001fb8:	f000 817c 	beq.w	80022b4 <gc_execute_line+0x638>
              axis_command = AXIS_COMMAND_NON_MODAL;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	9307      	str	r3, [sp, #28]
 8001fc0:	e03b      	b.n	800203a <gc_execute_line+0x3be>
            gc_block.modal.plane_select = int_value - 17;
 8001fc2:	f1a6 0311 	sub.w	r3, r6, #17
 8001fc6:	f888 3005 	strb.w	r3, [r8, #5]
            break;
 8001fca:	2102      	movs	r1, #2
 8001fcc:	e7cd      	b.n	8001f6a <gc_execute_line+0x2ee>
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict] }
 8001fce:	9b07      	ldr	r3, [sp, #28]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f040 82bc 	bne.w	800254e <gc_execute_line+0x8d2>
            if (int_value == 49) { // G49
 8001fd6:	2e31      	cmp	r6, #49	; 0x31
 8001fd8:	f000 816f 	beq.w	80022ba <gc_execute_line+0x63e>
            } else if (mantissa == 10) { // G43.1
 8001fdc:	2a0a      	cmp	r2, #10
 8001fde:	d1b3      	bne.n	8001f48 <gc_execute_line+0x2cc>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f888 3006 	strb.w	r3, [r8, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8001fe6:	2303      	movs	r3, #3
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 8001fe8:	2108      	movs	r1, #8
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8001fea:	9307      	str	r3, [sp, #28]
 8001fec:	e7c0      	b.n	8001f70 <gc_execute_line+0x2f4>
            gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 8001fee:	f1a6 0336 	sub.w	r3, r6, #54	; 0x36
 8001ff2:	f888 3007 	strb.w	r3, [r8, #7]
            break;
 8001ff6:	2109      	movs	r1, #9
 8001ff8:	e7b7      	b.n	8001f6a <gc_execute_line+0x2ee>
            if (mantissa != 0) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G61.1 not supported]
 8001ffa:	2a00      	cmp	r2, #0
 8001ffc:	d1a4      	bne.n	8001f48 <gc_execute_line+0x2cc>
 8001ffe:	210a      	movs	r1, #10
 8002000:	e7b6      	b.n	8001f70 <gc_execute_line+0x2f4>
            gc_block.modal.motion = int_value;
 8002002:	2350      	movs	r3, #80	; 0x50
 8002004:	2101      	movs	r1, #1
 8002006:	f888 3001 	strb.w	r3, [r8, #1]
 800200a:	e7ae      	b.n	8001f6a <gc_execute_line+0x2ee>
            if (mantissa == 0) {
 800200c:	2a00      	cmp	r2, #0
 800200e:	f040 8134 	bne.w	800227a <gc_execute_line+0x5fe>
              gc_block.modal.distance = int_value - 90;
 8002012:	f1a6 035a 	sub.w	r3, r6, #90	; 0x5a
 8002016:	f888 3004 	strb.w	r3, [r8, #4]
 800201a:	2103      	movs	r1, #3
 800201c:	e7a8      	b.n	8001f70 <gc_execute_line+0x2f4>
            gc_block.modal.feed_rate = 94 - int_value;
 800201e:	f1c6 035e 	rsb	r3, r6, #94	; 0x5e
 8002022:	f888 3002 	strb.w	r3, [r8, #2]
            break;
 8002026:	2105      	movs	r1, #5
 8002028:	e79f      	b.n	8001f6a <gc_execute_line+0x2ee>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 800202a:	2e1c      	cmp	r6, #28
            gc_block.non_modal_command = int_value;
 800202c:	f888 6000 	strb.w	r6, [r8]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002030:	f000 8108 	beq.w	8002244 <gc_execute_line+0x5c8>
 8002034:	2e1e      	cmp	r6, #30
 8002036:	f000 8105 	beq.w	8002244 <gc_execute_line+0x5c8>
 800203a:	2e5c      	cmp	r6, #92	; 0x5c
 800203c:	f000 8102 	beq.w	8002244 <gc_execute_line+0x5c8>
 8002040:	2100      	movs	r1, #0
 8002042:	e792      	b.n	8001f6a <gc_execute_line+0x2ee>
          case 'F': word_bit = WORD_F; gc_block.values.f = value; break;
 8002044:	2501      	movs	r5, #1
 8002046:	2300      	movs	r3, #0
 8002048:	f8c8 b00c 	str.w	fp, [r8, #12]
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 800204c:	fa49 f303 	asr.w	r3, r9, r3
 8002050:	07da      	lsls	r2, r3, #31
 8002052:	d415      	bmi.n	8002080 <gc_execute_line+0x404>
          if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 8002054:	4658      	mov	r0, fp
 8002056:	2100      	movs	r1, #0
 8002058:	f7fe ffc8 	bl	8000fec <__aeabi_fcmplt>
 800205c:	2800      	cmp	r0, #0
 800205e:	f040 8158 	bne.w	8002312 <gc_execute_line+0x696>
        value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 8002062:	ea45 0909 	orr.w	r9, r5, r9
 8002066:	e71a      	b.n	8001e9e <gc_execute_line+0x222>
          case 'I': word_bit = WORD_I; gc_block.values.ijk[X_AXIS] = value; ijk_words |= (1<<X_AXIS); break;
 8002068:	9b08      	ldr	r3, [sp, #32]
 800206a:	2502      	movs	r5, #2
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	9308      	str	r3, [sp, #32]
 8002072:	2301      	movs	r3, #1
 8002074:	f8c8 b010 	str.w	fp, [r8, #16]
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8002078:	fa49 f303 	asr.w	r3, r9, r3
 800207c:	07db      	lsls	r3, r3, #31
 800207e:	d5f0      	bpl.n	8002062 <gc_execute_line+0x3e6>
 8002080:	2419      	movs	r4, #25
}
 8002082:	4620      	mov	r0, r4
 8002084:	b01f      	add	sp, #124	; 0x7c
 8002086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS); break;
 800208a:	9b08      	ldr	r3, [sp, #32]
 800208c:	f8c8 b014 	str.w	fp, [r8, #20]
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	9308      	str	r3, [sp, #32]
 8002096:	2504      	movs	r5, #4
 8002098:	2302      	movs	r3, #2
 800209a:	e7ed      	b.n	8002078 <gc_execute_line+0x3fc>
          case 'K': word_bit = WORD_K; gc_block.values.ijk[Z_AXIS] = value; ijk_words |= (1<<Z_AXIS); break;
 800209c:	9b08      	ldr	r3, [sp, #32]
 800209e:	f8c8 b018 	str.w	fp, [r8, #24]
 80020a2:	f043 0304 	orr.w	r3, r3, #4
 80020a6:	9308      	str	r3, [sp, #32]
 80020a8:	2508      	movs	r5, #8
 80020aa:	2303      	movs	r3, #3
 80020ac:	e7e4      	b.n	8002078 <gc_execute_line+0x3fc>
          case 'L': word_bit = WORD_L; gc_block.values.l = int_value; break;
 80020ae:	f888 6024 	strb.w	r6, [r8, #36]	; 0x24
 80020b2:	2510      	movs	r5, #16
 80020b4:	2304      	movs	r3, #4
 80020b6:	e7df      	b.n	8002078 <gc_execute_line+0x3fc>
          case 'N': word_bit = WORD_N; gc_block.values.n = truncf(value); break;
 80020b8:	4658      	mov	r0, fp
 80020ba:	f7fe ffd5 	bl	8001068 <__aeabi_f2iz>
 80020be:	2520      	movs	r5, #32
 80020c0:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
 80020c4:	2305      	movs	r3, #5
 80020c6:	e7c1      	b.n	800204c <gc_execute_line+0x3d0>
          case 'P': word_bit = WORD_P; gc_block.values.p = value; break;
 80020c8:	f8c8 b02c 	str.w	fp, [r8, #44]	; 0x2c
 80020cc:	2540      	movs	r5, #64	; 0x40
 80020ce:	2306      	movs	r3, #6
 80020d0:	e7bc      	b.n	800204c <gc_execute_line+0x3d0>
          case 'R': word_bit = WORD_R; gc_block.values.r = value; break;
 80020d2:	f8c8 b030 	str.w	fp, [r8, #48]	; 0x30
 80020d6:	2580      	movs	r5, #128	; 0x80
 80020d8:	2307      	movs	r3, #7
 80020da:	e7cd      	b.n	8002078 <gc_execute_line+0x3fc>
          case 'S': word_bit = WORD_S; gc_block.values.s = value; break;
 80020dc:	f8c8 b034 	str.w	fp, [r8, #52]	; 0x34
 80020e0:	f44f 7580 	mov.w	r5, #256	; 0x100
 80020e4:	2308      	movs	r3, #8
 80020e6:	e7b1      	b.n	800204c <gc_execute_line+0x3d0>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 80020e8:	495c      	ldr	r1, [pc, #368]	; (800225c <gc_execute_line+0x5e0>)
 80020ea:	4658      	mov	r0, fp
 80020ec:	f7fe ff9c 	bl	8001028 <__aeabi_fcmpgt>
 80020f0:	2800      	cmp	r0, #0
 80020f2:	f040 8291 	bne.w	8002618 <gc_execute_line+0x99c>
					gc_block.values.t = int_value;
 80020f6:	f888 6038 	strb.w	r6, [r8, #56]	; 0x38
				break;
 80020fa:	f44f 7500 	mov.w	r5, #512	; 0x200
 80020fe:	2309      	movs	r3, #9
 8002100:	e7a4      	b.n	800204c <gc_execute_line+0x3d0>
		  case 'X': word_bit = WORD_X; gc_block.values.xyz[X_AXIS] = value; axis_words |= (1<<X_AXIS); break;
 8002102:	9b06      	ldr	r3, [sp, #24]
 8002104:	f8c8 b03c 	str.w	fp, [r8, #60]	; 0x3c
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	9306      	str	r3, [sp, #24]
 800210e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002112:	230a      	movs	r3, #10
 8002114:	e7b0      	b.n	8002078 <gc_execute_line+0x3fc>
          case 'Y': word_bit = WORD_Y; gc_block.values.xyz[Y_AXIS] = value; axis_words |= (1<<Y_AXIS); break;
 8002116:	9b06      	ldr	r3, [sp, #24]
 8002118:	f8c8 b040 	str.w	fp, [r8, #64]	; 0x40
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	9306      	str	r3, [sp, #24]
 8002122:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8002126:	230b      	movs	r3, #11
 8002128:	e7a6      	b.n	8002078 <gc_execute_line+0x3fc>
          case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXIS); break;
 800212a:	9b06      	ldr	r3, [sp, #24]
 800212c:	f8c8 b044 	str.w	fp, [r8, #68]	; 0x44
 8002130:	f043 0304 	orr.w	r3, r3, #4
 8002134:	9306      	str	r3, [sp, #24]
 8002136:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800213a:	230c      	movs	r3, #12
 800213c:	e79c      	b.n	8002078 <gc_execute_line+0x3fc>
		  case 'A': word_bit = WORD_A; gc_block.values.xyz[A_AXIS] = value; axis_words |= (1<<A_AXIS); break;
 800213e:	9b06      	ldr	r3, [sp, #24]
 8002140:	f8c8 b048 	str.w	fp, [r8, #72]	; 0x48
 8002144:	f043 0308 	orr.w	r3, r3, #8
 8002148:	9306      	str	r3, [sp, #24]
 800214a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 800214e:	230d      	movs	r3, #13
 8002150:	e792      	b.n	8002078 <gc_execute_line+0x3fc>
          case 'B': word_bit = WORD_B; gc_block.values.xyz[B_AXIS] = value; axis_words |= (1<<B_AXIS); break;
 8002152:	9b06      	ldr	r3, [sp, #24]
 8002154:	f8c8 b04c 	str.w	fp, [r8, #76]	; 0x4c
 8002158:	f043 0310 	orr.w	r3, r3, #16
 800215c:	9306      	str	r3, [sp, #24]
 800215e:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8002162:	230e      	movs	r3, #14
 8002164:	e788      	b.n	8002078 <gc_execute_line+0x3fc>
              case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
 8002166:	2320      	movs	r3, #32
 8002168:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800216c:	f888 300a 	strb.w	r3, [r8, #10]
 8002170:	230c      	movs	r3, #12
 8002172:	e68e      	b.n	8001e92 <gc_execute_line+0x216>
              case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
 8002174:	2310      	movs	r3, #16
 8002176:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800217a:	f888 300a 	strb.w	r3, [r8, #10]
 800217e:	230c      	movs	r3, #12
 8002180:	e687      	b.n	8001e92 <gc_execute_line+0x216>
              gc_block.modal.motion += (mantissa/10)+100;
 8002182:	4b37      	ldr	r3, [pc, #220]	; (8002260 <gc_execute_line+0x5e4>)
 8002184:	2101      	movs	r1, #1
 8002186:	fba3 2302 	umull	r2, r3, r3, r2
 800218a:	08db      	lsrs	r3, r3, #3
 800218c:	3b76      	subs	r3, #118	; 0x76
 800218e:	f888 3001 	strb.w	r3, [r8, #1]
            axis_command = AXIS_COMMAND_MOTION_MODE;
 8002192:	2302      	movs	r3, #2
 8002194:	9307      	str	r3, [sp, #28]
 8002196:	e6eb      	b.n	8001f70 <gc_execute_line+0x2f4>
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8002198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 8085 	bne.w	80022aa <gc_execute_line+0x62e>
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 80021a0:	f898 3002 	ldrb.w	r3, [r8, #2]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	f000 810d 	beq.w	80023c4 <gc_execute_line+0x748>
      if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN) { // Last state is also G94
 80021aa:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <gc_execute_line+0x5e8>)
 80021ac:	785b      	ldrb	r3, [r3, #1]
 80021ae:	b93b      	cbnz	r3, 80021c0 <gc_execute_line+0x544>
        if (bit_istrue(value_words,bit(WORD_F))) {
 80021b0:	f019 0f01 	tst.w	r9, #1
 80021b4:	f040 80a0 	bne.w	80022f8 <gc_execute_line+0x67c>
          gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <gc_execute_line+0x5e8>)
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	f8c8 300c 	str.w	r3, [r8, #12]
  if (bit_isfalse(value_words,bit(WORD_S))) { gc_block.values.s = gc_state.spindle_speed; }
 80021c0:	f419 7f80 	tst.w	r9, #256	; 0x100
 80021c4:	d103      	bne.n	80021ce <gc_execute_line+0x552>
 80021c6:	4b27      	ldr	r3, [pc, #156]	; (8002264 <gc_execute_line+0x5e8>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  if (gc_block.non_modal_command == NON_MODAL_DWELL) {
 80021ce:	f898 5000 	ldrb.w	r5, [r8]
 80021d2:	2d04      	cmp	r5, #4
 80021d4:	f000 80b1 	beq.w	800233a <gc_execute_line+0x6be>
  switch (gc_block.modal.plane_select) {
 80021d8:	f898 3005 	ldrb.w	r3, [r8, #5]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80a3 	beq.w	8002328 <gc_execute_line+0x6ac>
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	f040 8097 	bne.w	8002316 <gc_execute_line+0x69a>
 80021e8:	2600      	movs	r6, #0
 80021ea:	2702      	movs	r7, #2
      axis_linear = Y_AXIS;
 80021ec:	930f      	str	r3, [sp, #60]	; 0x3c
  switch (gc_block.modal.plane_select) {
 80021ee:	2305      	movs	r3, #5
      axis_1 = X_AXIS;
 80021f0:	960e      	str	r6, [sp, #56]	; 0x38
      axis_0 = Z_AXIS;
 80021f2:	970d      	str	r7, [sp, #52]	; 0x34
  switch (gc_block.modal.plane_select) {
 80021f4:	930c      	str	r3, [sp, #48]	; 0x30
  if (gc_block.modal.units == UNITS_MODE_INCHES) {
 80021f6:	f898 3003 	ldrb.w	r3, [r8, #3]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	f000 80a3 	beq.w	8002346 <gc_execute_line+0x6ca>
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates called in block.
 8002200:	9b07      	ldr	r3, [sp, #28]
 8002202:	2b03      	cmp	r3, #3
 8002204:	f000 80d3 	beq.w	80023ae <gc_execute_line+0x732>
  memcpy(block_coord_system,gc_state.coord_system,sizeof(gc_state.coord_system));
 8002208:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8002268 <gc_execute_line+0x5ec>
 800220c:	f10d 0e64 	add.w	lr, sp, #100	; 0x64
 8002210:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002214:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002218:	f8dc 3000 	ldr.w	r3, [ip]
 800221c:	f8ce 3000 	str.w	r3, [lr]
  if ( bit_istrue(command_words,bit(MODAL_GROUP_G12)) ) { // Check if called in block
 8002220:	05a3      	lsls	r3, r4, #22
 8002222:	d55e      	bpl.n	80022e2 <gc_execute_line+0x666>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8002224:	f898 0007 	ldrb.w	r0, [r8, #7]
 8002228:	2806      	cmp	r0, #6
 800222a:	d94e      	bls.n	80022ca <gc_execute_line+0x64e>
 800222c:	241d      	movs	r4, #29
 800222e:	e68c      	b.n	8001f4a <gc_execute_line+0x2ce>
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 8002230:	2401      	movs	r4, #1
}
 8002232:	4620      	mov	r0, r4
 8002234:	b01f      	add	sp, #124	; 0x7c
 8002236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 800223a:	2402      	movs	r4, #2
}
 800223c:	4620      	mov	r0, r4
 800223e:	b01f      	add	sp, #124	; 0x7c
 8002240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); }
 8002244:	b112      	cbz	r2, 800224c <gc_execute_line+0x5d0>
 8002246:	2a0a      	cmp	r2, #10
 8002248:	f47f ae7e 	bne.w	8001f48 <gc_execute_line+0x2cc>
              gc_block.non_modal_command += mantissa;
 800224c:	1833      	adds	r3, r6, r0
 800224e:	f888 3000 	strb.w	r3, [r8]
 8002252:	2100      	movs	r1, #0
 8002254:	e68c      	b.n	8001f70 <gc_execute_line+0x2f4>
 8002256:	bf00      	nop
 8002258:	40100401 	.word	0x40100401
 800225c:	437f0000 	.word	0x437f0000
 8002260:	cccccccd 	.word	0xcccccccd
 8002264:	20001abc 	.word	0x20001abc
 8002268:	20001aec 	.word	0x20001aec
              case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
 800226c:	2300      	movs	r3, #0
 800226e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002272:	f888 300a 	strb.w	r3, [r8, #10]
 8002276:	230c      	movs	r3, #12
 8002278:	e60b      	b.n	8001e92 <gc_execute_line+0x216>
              if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G90.1 not supported]
 800227a:	2a0a      	cmp	r2, #10
 800227c:	f47f ae64 	bne.w	8001f48 <gc_execute_line+0x2cc>
 8002280:	2e5a      	cmp	r6, #90	; 0x5a
 8002282:	f43f ae61 	beq.w	8001f48 <gc_execute_line+0x2cc>
 8002286:	2104      	movs	r1, #4
 8002288:	e672      	b.n	8001f70 <gc_execute_line+0x2f4>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 800228a:	2e1c      	cmp	r6, #28
            gc_block.non_modal_command = int_value;
 800228c:	f888 6000 	strb.w	r6, [r8]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002290:	d0d9      	beq.n	8002246 <gc_execute_line+0x5ca>
 8002292:	2e1e      	cmp	r6, #30
 8002294:	f47f aed1 	bne.w	800203a <gc_execute_line+0x3be>
 8002298:	e7d5      	b.n	8002246 <gc_execute_line+0x5ca>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 800229a:	2415      	movs	r4, #21
 800229c:	e655      	b.n	8001f4a <gc_execute_line+0x2ce>
            axis_command = AXIS_COMMAND_MOTION_MODE;
 800229e:	2302      	movs	r3, #2
 80022a0:	2101      	movs	r1, #1
 80022a2:	9307      	str	r3, [sp, #28]
 80022a4:	e661      	b.n	8001f6a <gc_execute_line+0x2ee>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 80022a6:	2417      	movs	r4, #23
 80022a8:	e64f      	b.n	8001f4a <gc_execute_line+0x2ce>
    if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); }
 80022aa:	f019 0f01 	tst.w	r9, #1
 80022ae:	d123      	bne.n	80022f8 <gc_execute_line+0x67c>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 80022b0:	2416      	movs	r4, #22
 80022b2:	e64a      	b.n	8001f4a <gc_execute_line+0x2ce>
              axis_command = AXIS_COMMAND_NON_MODAL;
 80022b4:	2301      	movs	r3, #1
 80022b6:	9307      	str	r3, [sp, #28]
 80022b8:	e7c8      	b.n	800224c <gc_execute_line+0x5d0>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 80022ba:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80022be:	2108      	movs	r1, #8
 80022c0:	f888 3006 	strb.w	r3, [r8, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 80022c4:	2303      	movs	r3, #3
 80022c6:	9307      	str	r3, [sp, #28]
 80022c8:	e652      	b.n	8001f70 <gc_execute_line+0x2f4>
    if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 80022ca:	4ba4      	ldr	r3, [pc, #656]	; (800255c <gc_execute_line+0x8e0>)
 80022cc:	799b      	ldrb	r3, [r3, #6]
 80022ce:	4283      	cmp	r3, r0
 80022d0:	d007      	beq.n	80022e2 <gc_execute_line+0x666>
      if (!(settings_read_coord_data(gc_block.modal.coord_select,block_coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 80022d2:	a919      	add	r1, sp, #100	; 0x64
 80022d4:	f005 f9b4 	bl	8007640 <settings_read_coord_data>
 80022d8:	2800      	cmp	r0, #0
 80022da:	f000 8136 	beq.w	800254a <gc_execute_line+0x8ce>
 80022de:	f898 5000 	ldrb.w	r5, [r8]
  switch (gc_block.non_modal_command) {
 80022e2:	2d0a      	cmp	r5, #10
 80022e4:	f000 8105 	beq.w	80024f2 <gc_execute_line+0x876>
 80022e8:	2d5c      	cmp	r5, #92	; 0x5c
 80022ea:	d17c      	bne.n	80023e6 <gc_execute_line+0x76a>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 80022ec:	9b06      	ldr	r3, [sp, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 813a 	bne.w	8002568 <gc_execute_line+0x8ec>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 80022f4:	241a      	movs	r4, #26
 80022f6:	e628      	b.n	8001f4a <gc_execute_line+0x2ce>
    if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 80022f8:	f898 3003 	ldrb.w	r3, [r8, #3]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	f47f af5f 	bne.w	80021c0 <gc_execute_line+0x544>
 8002302:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8002306:	4996      	ldr	r1, [pc, #600]	; (8002560 <gc_execute_line+0x8e4>)
 8002308:	f7fe fcd2 	bl	8000cb0 <__aeabi_fmul>
 800230c:	f8c8 000c 	str.w	r0, [r8, #12]
 8002310:	e756      	b.n	80021c0 <gc_execute_line+0x544>
          if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 8002312:	2404      	movs	r4, #4
 8002314:	e619      	b.n	8001f4a <gc_execute_line+0x2ce>
 8002316:	2306      	movs	r3, #6
 8002318:	2602      	movs	r6, #2
 800231a:	2701      	movs	r7, #1
 800231c:	930c      	str	r3, [sp, #48]	; 0x30
      axis_linear = X_AXIS;
 800231e:	2300      	movs	r3, #0
      axis_1 = Z_AXIS;
 8002320:	960e      	str	r6, [sp, #56]	; 0x38
      axis_0 = Y_AXIS;
 8002322:	970d      	str	r7, [sp, #52]	; 0x34
      axis_linear = X_AXIS;
 8002324:	930f      	str	r3, [sp, #60]	; 0x3c
 8002326:	e766      	b.n	80021f6 <gc_execute_line+0x57a>
  switch (gc_block.modal.plane_select) {
 8002328:	461f      	mov	r7, r3
      axis_0 = X_AXIS;
 800232a:	930d      	str	r3, [sp, #52]	; 0x34
  switch (gc_block.modal.plane_select) {
 800232c:	2303      	movs	r3, #3
 800232e:	2601      	movs	r6, #1
 8002330:	930c      	str	r3, [sp, #48]	; 0x30
      axis_linear = Z_AXIS;
 8002332:	2302      	movs	r3, #2
      axis_1 = Y_AXIS;
 8002334:	960e      	str	r6, [sp, #56]	; 0x38
      axis_linear = Z_AXIS;
 8002336:	930f      	str	r3, [sp, #60]	; 0x3c
 8002338:	e75d      	b.n	80021f6 <gc_execute_line+0x57a>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 800233a:	f019 0f40 	tst.w	r9, #64	; 0x40
 800233e:	f040 8108 	bne.w	8002552 <gc_execute_line+0x8d6>
 8002342:	241c      	movs	r4, #28
 8002344:	e601      	b.n	8001f4a <gc_execute_line+0x2ce>
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002346:	9b06      	ldr	r3, [sp, #24]
 8002348:	07d9      	lsls	r1, r3, #31
 800234a:	d507      	bpl.n	800235c <gc_execute_line+0x6e0>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 800234c:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 8002350:	4983      	ldr	r1, [pc, #524]	; (8002560 <gc_execute_line+0x8e4>)
 8002352:	f7fe fcad 	bl	8000cb0 <__aeabi_fmul>
 8002356:	9b06      	ldr	r3, [sp, #24]
 8002358:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
      if (bit_istrue(axis_words,bit(idx)) ) {
 800235c:	079a      	lsls	r2, r3, #30
 800235e:	d507      	bpl.n	8002370 <gc_execute_line+0x6f4>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002360:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
 8002364:	497e      	ldr	r1, [pc, #504]	; (8002560 <gc_execute_line+0x8e4>)
 8002366:	f7fe fca3 	bl	8000cb0 <__aeabi_fmul>
 800236a:	9b06      	ldr	r3, [sp, #24]
 800236c:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002370:	0758      	lsls	r0, r3, #29
 8002372:	d507      	bpl.n	8002384 <gc_execute_line+0x708>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002374:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 8002378:	4979      	ldr	r1, [pc, #484]	; (8002560 <gc_execute_line+0x8e4>)
 800237a:	f7fe fc99 	bl	8000cb0 <__aeabi_fmul>
 800237e:	9b06      	ldr	r3, [sp, #24]
 8002380:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002384:	0719      	lsls	r1, r3, #28
 8002386:	d507      	bpl.n	8002398 <gc_execute_line+0x71c>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002388:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 800238c:	4974      	ldr	r1, [pc, #464]	; (8002560 <gc_execute_line+0x8e4>)
 800238e:	f7fe fc8f 	bl	8000cb0 <__aeabi_fmul>
 8002392:	9b06      	ldr	r3, [sp, #24]
 8002394:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002398:	06da      	lsls	r2, r3, #27
 800239a:	f57f af31 	bpl.w	8002200 <gc_execute_line+0x584>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 800239e:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 80023a2:	496f      	ldr	r1, [pc, #444]	; (8002560 <gc_execute_line+0x8e4>)
 80023a4:	f7fe fc84 	bl	8000cb0 <__aeabi_fmul>
 80023a8:	f8c8 004c 	str.w	r0, [r8, #76]	; 0x4c
 80023ac:	e728      	b.n	8002200 <gc_execute_line+0x584>
    if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC) {
 80023ae:	f898 3006 	ldrb.w	r3, [r8, #6]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	f47f af28 	bne.w	8002208 <gc_execute_line+0x58c>
      if (axis_words ^ (1<<TOOL_LENGTH_OFFSET_AXIS)) { FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR); }
 80023b8:	9b06      	ldr	r3, [sp, #24]
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	f43f af24 	beq.w	8002208 <gc_execute_line+0x58c>
 80023c0:	2425      	movs	r4, #37	; 0x25
 80023c2:	e5c2      	b.n	8001f4a <gc_execute_line+0x2ce>
      if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 80023c4:	9b07      	ldr	r3, [sp, #28]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	f47f aefa 	bne.w	80021c0 <gc_execute_line+0x544>
		if ((gc_block.modal.motion != MOTION_MODE_NONE) && (gc_block.modal.motion != MOTION_MODE_SEEK)) {
 80023cc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80023d0:	2b50      	cmp	r3, #80	; 0x50
 80023d2:	f43f aef5 	beq.w	80021c0 <gc_execute_line+0x544>
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f43f aef2 	beq.w	80021c0 <gc_execute_line+0x544>
          if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [F word missing]
 80023dc:	f019 0f01 	tst.w	r9, #1
 80023e0:	f43f af66 	beq.w	80022b0 <gc_execute_line+0x634>
 80023e4:	e6ec      	b.n	80021c0 <gc_execute_line+0x544>
      if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // TLO block any axis command.
 80023e6:	9b07      	ldr	r3, [sp, #28]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d05b      	beq.n	80024a4 <gc_execute_line+0x828>
        if (axis_words) {
 80023ec:	9a06      	ldr	r2, [sp, #24]
 80023ee:	2a00      	cmp	r2, #0
 80023f0:	d058      	beq.n	80024a4 <gc_execute_line+0x828>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 80023f2:	495a      	ldr	r1, [pc, #360]	; (800255c <gc_execute_line+0x8e0>)
 80023f4:	f898 3004 	ldrb.w	r3, [r8, #4]
 80023f8:	f8d1 a058 	ldr.w	sl, [r1, #88]	; 0x58
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 813f 	bne.w	8002680 <gc_execute_line+0xa04>
 8002402:	2d35      	cmp	r5, #53	; 0x35
 8002404:	4613      	mov	r3, r2
 8002406:	f000 8112 	beq.w	800262e <gc_execute_line+0x9b2>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800240a:	07d1      	lsls	r1, r2, #31
 800240c:	f140 81e9 	bpl.w	80027e2 <gc_execute_line+0xb66>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002410:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 8002414:	9819      	ldr	r0, [sp, #100]	; 0x64
 8002416:	f7fe fb43 	bl	8000aa0 <__addsf3>
 800241a:	4b50      	ldr	r3, [pc, #320]	; (800255c <gc_execute_line+0x8e0>)
 800241c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800241e:	f7fe fb3f 	bl	8000aa0 <__addsf3>
 8002422:	9b06      	ldr	r3, [sp, #24]
 8002424:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002428:	079a      	lsls	r2, r3, #30
 800242a:	f140 81d5 	bpl.w	80027d8 <gc_execute_line+0xb5c>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 800242e:	f8d8 1040 	ldr.w	r1, [r8, #64]	; 0x40
 8002432:	981a      	ldr	r0, [sp, #104]	; 0x68
 8002434:	f7fe fb34 	bl	8000aa0 <__addsf3>
 8002438:	4b48      	ldr	r3, [pc, #288]	; (800255c <gc_execute_line+0x8e0>)
 800243a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800243c:	f7fe fb30 	bl	8000aa0 <__addsf3>
 8002440:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002444:	9b06      	ldr	r3, [sp, #24]
 8002446:	075b      	lsls	r3, r3, #29
 8002448:	f140 8177 	bpl.w	800273a <gc_execute_line+0xabe>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 800244c:	f8d8 1044 	ldr.w	r1, [r8, #68]	; 0x44
 8002450:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002452:	f7fe fb25 	bl	8000aa0 <__addsf3>
 8002456:	4b41      	ldr	r3, [pc, #260]	; (800255c <gc_execute_line+0x8e0>)
 8002458:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800245a:	f7fe fb21 	bl	8000aa0 <__addsf3>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 800245e:	4651      	mov	r1, sl
 8002460:	f7fe fb1e 	bl	8000aa0 <__addsf3>
 8002464:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002468:	9b06      	ldr	r3, [sp, #24]
 800246a:	0718      	lsls	r0, r3, #28
 800246c:	f140 82c2 	bpl.w	80029f4 <gc_execute_line+0xd78>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002470:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 8002474:	981c      	ldr	r0, [sp, #112]	; 0x70
 8002476:	f7fe fb13 	bl	8000aa0 <__addsf3>
 800247a:	4b38      	ldr	r3, [pc, #224]	; (800255c <gc_execute_line+0x8e0>)
 800247c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800247e:	f7fe fb0f 	bl	8000aa0 <__addsf3>
 8002482:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002486:	9b06      	ldr	r3, [sp, #24]
 8002488:	06d9      	lsls	r1, r3, #27
 800248a:	f140 8168 	bpl.w	800275e <gc_execute_line+0xae2>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 800248e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8002490:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 8002494:	f7fe fb04 	bl	8000aa0 <__addsf3>
 8002498:	4b30      	ldr	r3, [pc, #192]	; (800255c <gc_execute_line+0x8e0>)
 800249a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800249c:	f7fe fb00 	bl	8000aa0 <__addsf3>
 80024a0:	f8c8 004c 	str.w	r0, [r8, #76]	; 0x4c
      switch (gc_block.non_modal_command) {
 80024a4:	2d1e      	cmp	r5, #30
 80024a6:	f000 814d 	beq.w	8002744 <gc_execute_line+0xac8>
 80024aa:	2d35      	cmp	r5, #53	; 0x35
 80024ac:	f000 80e1 	beq.w	8002672 <gc_execute_line+0x9f6>
 80024b0:	2d1c      	cmp	r5, #28
 80024b2:	f000 81a8 	beq.w	8002806 <gc_execute_line+0xb8a>
 80024b6:	f898 5001 	ldrb.w	r5, [r8, #1]
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 80024ba:	2d50      	cmp	r5, #80	; 0x50
 80024bc:	f000 8293 	beq.w	80029e6 <gc_execute_line+0xd6a>
 80024c0:	f04f 0a00 	mov.w	sl, #0
  } else if ( axis_command == AXIS_COMMAND_MOTION_MODE ) {
 80024c4:	9b07      	ldr	r3, [sp, #28]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	f000 8118 	beq.w	80026fc <gc_execute_line+0xa80>
      switch (gc_block.modal.motion) {
 80024cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 80024ce:	2a00      	cmp	r2, #0
 80024d0:	f000 80a9 	beq.w	8002626 <gc_execute_line+0x9aa>
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F)));
 80024d4:	f029 0921 	bic.w	r9, r9, #33	; 0x21
 80024d8:	fa1f f389 	uxth.w	r3, r9
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A)|bit(WORD_B))); } // Remove axis words.
 80024dc:	9907      	ldr	r1, [sp, #28]
 80024de:	b119      	cbz	r1, 80024e8 <gc_execute_line+0x86c>
 80024e0:	f423 49f8 	bic.w	r9, r3, #31744	; 0x7c00
 80024e4:	fa1f f389 	uxth.w	r3, r9
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8180 	beq.w	80027ee <gc_execute_line+0xb72>
 80024ee:	2424      	movs	r4, #36	; 0x24
 80024f0:	e52b      	b.n	8001f4a <gc_execute_line+0x2ce>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 80024f2:	9b06      	ldr	r3, [sp, #24]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f43f aefd 	beq.w	80022f4 <gc_execute_line+0x678>
      if (bit_isfalse(value_words,((1<<WORD_P)|(1<<WORD_L)))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P/L word missing]
 80024fa:	f019 0f50 	tst.w	r9, #80	; 0x50
 80024fe:	f43f af20 	beq.w	8002342 <gc_execute_line+0x6c6>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
 8002502:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8002506:	f7fe fdd5 	bl	80010b4 <__aeabi_f2uiz>
 800250a:	b2c0      	uxtb	r0, r0
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 800250c:	2806      	cmp	r0, #6
 800250e:	f63f ae8d 	bhi.w	800222c <gc_execute_line+0x5b0>
      if (gc_block.values.l != 20) {
 8002512:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8002516:	2b14      	cmp	r3, #20
 8002518:	d006      	beq.n	8002528 <gc_execute_line+0x8ac>
        if (gc_block.values.l == 2) {
 800251a:	2b02      	cmp	r3, #2
 800251c:	f47f ad14 	bne.w	8001f48 <gc_execute_line+0x2cc>
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
 8002520:	f019 0f80 	tst.w	r9, #128	; 0x80
 8002524:	f47f ad10 	bne.w	8001f48 <gc_execute_line+0x2cc>
      bit_false(value_words,(bit(WORD_L)|bit(WORD_P)));
 8002528:	f029 0950 	bic.w	r9, r9, #80	; 0x50
 800252c:	fa1f f989 	uxth.w	r9, r9
      if (coord_select > 0) { coord_select--; } // Adjust P1-P6 index to EEPROM coordinate data indexing.
 8002530:	2800      	cmp	r0, #0
 8002532:	f000 82d7 	beq.w	8002ae4 <gc_execute_line+0xe68>
 8002536:	3801      	subs	r0, #1
 8002538:	fa5f fa80 	uxtb.w	sl, r0
      if (!settings_read_coord_data(coord_select,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); } // [EEPROM read fail]
 800253c:	4909      	ldr	r1, [pc, #36]	; (8002564 <gc_execute_line+0x8e8>)
 800253e:	4650      	mov	r0, sl
 8002540:	f005 f87e 	bl	8007640 <settings_read_coord_data>
 8002544:	2800      	cmp	r0, #0
 8002546:	f040 82aa 	bne.w	8002a9e <gc_execute_line+0xe22>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 800254a:	2407      	movs	r4, #7
 800254c:	e4fd      	b.n	8001f4a <gc_execute_line+0x2ce>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 800254e:	2418      	movs	r4, #24
 8002550:	e4fb      	b.n	8001f4a <gc_execute_line+0x2ce>
    bit_false(value_words,bit(WORD_P));
 8002552:	f029 0940 	bic.w	r9, r9, #64	; 0x40
 8002556:	fa1f f989 	uxth.w	r9, r9
 800255a:	e63d      	b.n	80021d8 <gc_execute_line+0x55c>
 800255c:	20001abc 	.word	0x20001abc
 8002560:	41cb3333 	.word	0x41cb3333
 8002564:	20001b28 	.word	0x20001b28
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 8002568:	4bab      	ldr	r3, [pc, #684]	; (8002818 <gc_execute_line+0xb9c>)
 800256a:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        if (bit_istrue(axis_words,bit(idx)) ) {
 800256c:	9b06      	ldr	r3, [sp, #24]
 800256e:	07d9      	lsls	r1, r3, #31
 8002570:	f140 8109 	bpl.w	8002786 <gc_execute_line+0xb0a>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002574:	4ba8      	ldr	r3, [pc, #672]	; (8002818 <gc_execute_line+0xb9c>)
 8002576:	9919      	ldr	r1, [sp, #100]	; 0x64
 8002578:	69d8      	ldr	r0, [r3, #28]
 800257a:	f7fe fa8f 	bl	8000a9c <__aeabi_fsub>
 800257e:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 8002582:	f7fe fa8b 	bl	8000a9c <__aeabi_fsub>
 8002586:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
        if (bit_istrue(axis_words,bit(idx)) ) {
 800258a:	9b06      	ldr	r3, [sp, #24]
 800258c:	079a      	lsls	r2, r3, #30
 800258e:	f140 80f5 	bpl.w	800277c <gc_execute_line+0xb00>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002592:	4ba1      	ldr	r3, [pc, #644]	; (8002818 <gc_execute_line+0xb9c>)
 8002594:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002596:	6a18      	ldr	r0, [r3, #32]
 8002598:	f7fe fa80 	bl	8000a9c <__aeabi_fsub>
 800259c:	f8d8 1040 	ldr.w	r1, [r8, #64]	; 0x40
 80025a0:	f7fe fa7c 	bl	8000a9c <__aeabi_fsub>
 80025a4:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
        if (bit_istrue(axis_words,bit(idx)) ) {
 80025a8:	9b06      	ldr	r3, [sp, #24]
 80025aa:	075b      	lsls	r3, r3, #29
 80025ac:	d536      	bpl.n	800261c <gc_execute_line+0x9a0>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 80025ae:	4b9a      	ldr	r3, [pc, #616]	; (8002818 <gc_execute_line+0xb9c>)
 80025b0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80025b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80025b4:	f7fe fa72 	bl	8000a9c <__aeabi_fsub>
 80025b8:	f8d8 1044 	ldr.w	r1, [r8, #68]	; 0x44
 80025bc:	f7fe fa6e 	bl	8000a9c <__aeabi_fsub>
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 80025c0:	4629      	mov	r1, r5
 80025c2:	f7fe fa6b 	bl	8000a9c <__aeabi_fsub>
 80025c6:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
        if (bit_istrue(axis_words,bit(idx)) ) {
 80025ca:	9b06      	ldr	r3, [sp, #24]
 80025cc:	071d      	lsls	r5, r3, #28
 80025ce:	f140 80d0 	bpl.w	8002772 <gc_execute_line+0xaf6>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 80025d2:	4b91      	ldr	r3, [pc, #580]	; (8002818 <gc_execute_line+0xb9c>)
 80025d4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80025d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80025d8:	f7fe fa60 	bl	8000a9c <__aeabi_fsub>
 80025dc:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 80025e0:	f7fe fa5c 	bl	8000a9c <__aeabi_fsub>
 80025e4:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
        if (bit_istrue(axis_words,bit(idx)) ) {
 80025e8:	9b06      	ldr	r3, [sp, #24]
 80025ea:	06d8      	lsls	r0, r3, #27
 80025ec:	f140 80bc 	bpl.w	8002768 <gc_execute_line+0xaec>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 80025f0:	4b89      	ldr	r3, [pc, #548]	; (8002818 <gc_execute_line+0xb9c>)
 80025f2:	991d      	ldr	r1, [sp, #116]	; 0x74
 80025f4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80025f6:	f7fe fa51 	bl	8000a9c <__aeabi_fsub>
 80025fa:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
 80025fe:	f7fe fa4d 	bl	8000a9c <__aeabi_fsub>
 8002602:	f8c8 004c 	str.w	r0, [r8, #76]	; 0x4c
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 8002606:	f04f 0a00 	mov.w	sl, #0
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 800260a:	f898 5001 	ldrb.w	r5, [r8, #1]
 800260e:	2d50      	cmp	r5, #80	; 0x50
 8002610:	f47f af58 	bne.w	80024c4 <gc_execute_line+0x848>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8002614:	241f      	movs	r4, #31
 8002616:	e498      	b.n	8001f4a <gc_execute_line+0x2ce>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 8002618:	2426      	movs	r4, #38	; 0x26
 800261a:	e496      	b.n	8001f4a <gc_execute_line+0x2ce>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 800261c:	4b7e      	ldr	r3, [pc, #504]	; (8002818 <gc_execute_line+0xb9c>)
 800261e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002620:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8002624:	e7d1      	b.n	80025ca <gc_execute_line+0x94e>
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F) | bit(WORD_S) | bit(WORD_T))); // Remove single-meaning value words.
 8002626:	4b7d      	ldr	r3, [pc, #500]	; (800281c <gc_execute_line+0xba0>)
 8002628:	ea09 0303 	and.w	r3, r9, r3
 800262c:	e756      	b.n	80024dc <gc_execute_line+0x860>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800262e:	07da      	lsls	r2, r3, #31
 8002630:	d404      	bmi.n	800263c <gc_execute_line+0x9c0>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002632:	4b79      	ldr	r3, [pc, #484]	; (8002818 <gc_execute_line+0xb9c>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
 800263a:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800263c:	079d      	lsls	r5, r3, #30
 800263e:	d404      	bmi.n	800264a <gc_execute_line+0x9ce>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002640:	4b75      	ldr	r3, [pc, #468]	; (8002818 <gc_execute_line+0xb9c>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 8002648:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800264a:	0758      	lsls	r0, r3, #29
 800264c:	d404      	bmi.n	8002658 <gc_execute_line+0x9dc>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 800264e:	4b72      	ldr	r3, [pc, #456]	; (8002818 <gc_execute_line+0xb9c>)
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8002656:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002658:	0719      	lsls	r1, r3, #28
 800265a:	d404      	bmi.n	8002666 <gc_execute_line+0x9ea>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 800265c:	4b6e      	ldr	r3, [pc, #440]	; (8002818 <gc_execute_line+0xb9c>)
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 8002664:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002666:	06da      	lsls	r2, r3, #27
 8002668:	d403      	bmi.n	8002672 <gc_execute_line+0x9f6>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 800266a:	4b6b      	ldr	r3, [pc, #428]	; (8002818 <gc_execute_line+0xb9c>)
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
          if (!(gc_block.modal.motion == MOTION_MODE_SEEK || gc_block.modal.motion == MOTION_MODE_LINEAR)) {
 8002672:	f898 5001 	ldrb.w	r5, [r8, #1]
 8002676:	2d01      	cmp	r5, #1
 8002678:	f67f af22 	bls.w	80024c0 <gc_execute_line+0x844>
            FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
 800267c:	241e      	movs	r4, #30
 800267e:	e464      	b.n	8001f4a <gc_execute_line+0x2ce>
 8002680:	2d35      	cmp	r5, #53	; 0x35
 8002682:	4613      	mov	r3, r2
 8002684:	d0d3      	beq.n	800262e <gc_execute_line+0x9b2>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002686:	07db      	lsls	r3, r3, #31
 8002688:	f140 81c8 	bpl.w	8002a1c <gc_execute_line+0xda0>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 800268c:	4b62      	ldr	r3, [pc, #392]	; (8002818 <gc_execute_line+0xb9c>)
 800268e:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 8002692:	69d8      	ldr	r0, [r3, #28]
 8002694:	f7fe fa04 	bl	8000aa0 <__addsf3>
 8002698:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800269c:	9b06      	ldr	r3, [sp, #24]
 800269e:	0798      	lsls	r0, r3, #30
 80026a0:	f140 81b7 	bpl.w	8002a12 <gc_execute_line+0xd96>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80026a4:	4b5c      	ldr	r3, [pc, #368]	; (8002818 <gc_execute_line+0xb9c>)
 80026a6:	f8d8 1040 	ldr.w	r1, [r8, #64]	; 0x40
 80026aa:	6a18      	ldr	r0, [r3, #32]
 80026ac:	f7fe f9f8 	bl	8000aa0 <__addsf3>
 80026b0:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80026b4:	9b06      	ldr	r3, [sp, #24]
 80026b6:	0759      	lsls	r1, r3, #29
 80026b8:	f140 81a6 	bpl.w	8002a08 <gc_execute_line+0xd8c>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80026bc:	4b56      	ldr	r3, [pc, #344]	; (8002818 <gc_execute_line+0xb9c>)
 80026be:	f8d8 1044 	ldr.w	r1, [r8, #68]	; 0x44
 80026c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80026c4:	f7fe f9ec 	bl	8000aa0 <__addsf3>
 80026c8:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80026cc:	9b06      	ldr	r3, [sp, #24]
 80026ce:	071a      	lsls	r2, r3, #28
 80026d0:	f140 8195 	bpl.w	80029fe <gc_execute_line+0xd82>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80026d4:	4b50      	ldr	r3, [pc, #320]	; (8002818 <gc_execute_line+0xb9c>)
 80026d6:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 80026da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80026dc:	f7fe f9e0 	bl	8000aa0 <__addsf3>
 80026e0:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80026e4:	9b06      	ldr	r3, [sp, #24]
 80026e6:	06db      	lsls	r3, r3, #27
 80026e8:	d539      	bpl.n	800275e <gc_execute_line+0xae2>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80026ea:	4b4b      	ldr	r3, [pc, #300]	; (8002818 <gc_execute_line+0xb9c>)
 80026ec:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 80026f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026f2:	f7fe f9d5 	bl	8000aa0 <__addsf3>
 80026f6:	f8c8 004c 	str.w	r0, [r8, #76]	; 0x4c
 80026fa:	e6d3      	b.n	80024a4 <gc_execute_line+0x828>
    if (gc_block.modal.motion == MOTION_MODE_SEEK) {
 80026fc:	b1ad      	cbz	r5, 800272a <gc_execute_line+0xaae>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 80026fe:	2100      	movs	r1, #0
 8002700:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8002704:	f7fe fc68 	bl	8000fd8 <__aeabi_fcmpeq>
 8002708:	2800      	cmp	r0, #0
 800270a:	f47f add1 	bne.w	80022b0 <gc_execute_line+0x634>
      switch (gc_block.modal.motion) {
 800270e:	2d8c      	cmp	r5, #140	; 0x8c
 8002710:	f000 8246 	beq.w	8002ba0 <gc_execute_line+0xf24>
 8002714:	f200 823c 	bhi.w	8002b90 <gc_execute_line+0xf14>
 8002718:	2d02      	cmp	r5, #2
 800271a:	f000 8209 	beq.w	8002b30 <gc_execute_line+0xeb4>
 800271e:	2d03      	cmp	r5, #3
 8002720:	f000 8208 	beq.w	8002b34 <gc_execute_line+0xeb8>
 8002724:	2d01      	cmp	r5, #1
 8002726:	f47f aed1 	bne.w	80024cc <gc_execute_line+0x850>
          if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 800272a:	9b06      	ldr	r3, [sp, #24]
 800272c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800272e:	2b00      	cmp	r3, #0
 8002730:	9b07      	ldr	r3, [sp, #28]
 8002732:	bf08      	it	eq
 8002734:	2300      	moveq	r3, #0
 8002736:	9307      	str	r3, [sp, #28]
 8002738:	e6c9      	b.n	80024ce <gc_execute_line+0x852>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 800273a:	4b37      	ldr	r3, [pc, #220]	; (8002818 <gc_execute_line+0xb9c>)
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8002742:	e691      	b.n	8002468 <gc_execute_line+0x7ec>
            if (!settings_read_coord_data(SETTING_INDEX_G30,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002744:	4936      	ldr	r1, [pc, #216]	; (8002820 <gc_execute_line+0xba4>)
 8002746:	2007      	movs	r0, #7
 8002748:	f004 ff7a 	bl	8007640 <settings_read_coord_data>
 800274c:	2800      	cmp	r0, #0
 800274e:	f43f aefc 	beq.w	800254a <gc_execute_line+0x8ce>
          if (axis_words) {
 8002752:	9b06      	ldr	r3, [sp, #24]
 8002754:	b9e3      	cbnz	r3, 8002790 <gc_execute_line+0xb14>
 8002756:	9a09      	ldr	r2, [sp, #36]	; 0x24
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 8002758:	469a      	mov	sl, r3
            axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
 800275a:	9307      	str	r3, [sp, #28]
 800275c:	e6b7      	b.n	80024ce <gc_execute_line+0x852>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 800275e:	4b2e      	ldr	r3, [pc, #184]	; (8002818 <gc_execute_line+0xb9c>)
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
 8002766:	e69d      	b.n	80024a4 <gc_execute_line+0x828>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 8002768:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <gc_execute_line+0xb9c>)
 800276a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276c:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
 8002770:	e749      	b.n	8002606 <gc_execute_line+0x98a>
 8002772:	4b29      	ldr	r3, [pc, #164]	; (8002818 <gc_execute_line+0xb9c>)
 8002774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002776:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 800277a:	e735      	b.n	80025e8 <gc_execute_line+0x96c>
 800277c:	4b26      	ldr	r3, [pc, #152]	; (8002818 <gc_execute_line+0xb9c>)
 800277e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002780:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 8002784:	e710      	b.n	80025a8 <gc_execute_line+0x92c>
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <gc_execute_line+0xb9c>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
 800278e:	e6fc      	b.n	800258a <gc_execute_line+0x90e>
              if (!(axis_words & (1<<idx))) { gc_block.values.ijk[idx] = gc_state.position[idx]; }
 8002790:	07dd      	lsls	r5, r3, #31
 8002792:	d404      	bmi.n	800279e <gc_execute_line+0xb22>
 8002794:	4b20      	ldr	r3, [pc, #128]	; (8002818 <gc_execute_line+0xb9c>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f8c8 3010 	str.w	r3, [r8, #16]
 800279c:	9b06      	ldr	r3, [sp, #24]
 800279e:	0798      	lsls	r0, r3, #30
 80027a0:	d404      	bmi.n	80027ac <gc_execute_line+0xb30>
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <gc_execute_line+0xb9c>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	f8c8 3014 	str.w	r3, [r8, #20]
 80027aa:	9b06      	ldr	r3, [sp, #24]
 80027ac:	0759      	lsls	r1, r3, #29
 80027ae:	d404      	bmi.n	80027ba <gc_execute_line+0xb3e>
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <gc_execute_line+0xb9c>)
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	f8c8 3018 	str.w	r3, [r8, #24]
 80027b8:	9b06      	ldr	r3, [sp, #24]
 80027ba:	071a      	lsls	r2, r3, #28
 80027bc:	d404      	bmi.n	80027c8 <gc_execute_line+0xb4c>
 80027be:	4b16      	ldr	r3, [pc, #88]	; (8002818 <gc_execute_line+0xb9c>)
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	f8c8 301c 	str.w	r3, [r8, #28]
 80027c6:	9b06      	ldr	r3, [sp, #24]
 80027c8:	06dd      	lsls	r5, r3, #27
 80027ca:	f53f af1c 	bmi.w	8002606 <gc_execute_line+0x98a>
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <gc_execute_line+0xb9c>)
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	f8c8 3020 	str.w	r3, [r8, #32]
 80027d6:	e716      	b.n	8002606 <gc_execute_line+0x98a>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <gc_execute_line+0xb9c>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 80027e0:	e630      	b.n	8002444 <gc_execute_line+0x7c8>
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <gc_execute_line+0xb9c>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
 80027ea:	4613      	mov	r3, r2
 80027ec:	e61c      	b.n	8002428 <gc_execute_line+0x7ac>
  memset(pl_data,0,sizeof(plan_line_data_t)); // Zero pl_data struct
 80027ee:	9316      	str	r3, [sp, #88]	; 0x58
 80027f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80027f2:	9318      	str	r3, [sp, #96]	; 0x60
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 80027f4:	b1b2      	cbz	r2, 8002824 <gc_execute_line+0xba8>
      if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0)))) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 80027f6:	f024 0449 	bic.w	r4, r4, #73	; 0x49
 80027fa:	2c00      	cmp	r4, #0
 80027fc:	f000 82cd 	beq.w	8002d9a <gc_execute_line+0x111e>
 8002800:	2410      	movs	r4, #16
 8002802:	f7ff bba2 	b.w	8001f4a <gc_execute_line+0x2ce>
            if (!settings_read_coord_data(SETTING_INDEX_G28,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002806:	4906      	ldr	r1, [pc, #24]	; (8002820 <gc_execute_line+0xba4>)
 8002808:	2006      	movs	r0, #6
 800280a:	f004 ff19 	bl	8007640 <settings_read_coord_data>
 800280e:	2800      	cmp	r0, #0
 8002810:	f43f ae9b 	beq.w	800254a <gc_execute_line+0x8ce>
 8002814:	e79d      	b.n	8002752 <gc_execute_line+0xad6>
 8002816:	bf00      	nop
 8002818:	20001abc 	.word	0x20001abc
 800281c:	fffffcde 	.word	0xfffffcde
 8002820:	20001b28 	.word	0x20001b28
  if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8002824:	4bb1      	ldr	r3, [pc, #708]	; (8002aec <gc_execute_line+0xe70>)
 8002826:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800282a:	079c      	lsls	r4, r3, #30
 800282c:	d514      	bpl.n	8002858 <gc_execute_line+0xbdc>
      if (!((gc_block.modal.motion == MOTION_MODE_LINEAR) || (gc_block.modal.motion == MOTION_MODE_CW_ARC)
 800282e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002832:	3b01      	subs	r3, #1
 8002834:	2b02      	cmp	r3, #2
 8002836:	d904      	bls.n	8002842 <gc_execute_line+0xbc6>
          gc_parser_flags |= GC_PARSER_LASER_DISABLE;
 8002838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800283a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800283e:	b2db      	uxtb	r3, r3
 8002840:	9309      	str	r3, [sp, #36]	; 0x24
      if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE)) {
 8002842:	9b06      	ldr	r3, [sp, #24]
 8002844:	b11b      	cbz	r3, 800284e <gc_execute_line+0xbd2>
 8002846:	9b07      	ldr	r3, [sp, #28]
 8002848:	2b02      	cmp	r3, #2
 800284a:	f000 8120 	beq.w	8002a8e <gc_execute_line+0xe12>
        if (gc_state.modal.spindle == SPINDLE_ENABLE_CW) {
 800284e:	4ba8      	ldr	r3, [pc, #672]	; (8002af0 <gc_execute_line+0xe74>)
 8002850:	7a5b      	ldrb	r3, [r3, #9]
 8002852:	2b10      	cmp	r3, #16
 8002854:	f000 82c1 	beq.w	8002dda <gc_execute_line+0x115e>
 8002858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800285a:	f003 0440 	and.w	r4, r3, #64	; 0x40
  gc_state.line_number = gc_block.values.n;
 800285e:	49a4      	ldr	r1, [pc, #656]	; (8002af0 <gc_execute_line+0xe74>)
 8002860:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 8002864:	f898 3002 	ldrb.w	r3, [r8, #2]
  gc_state.line_number = gc_block.values.n;
 8002868:	618a      	str	r2, [r1, #24]
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 800286a:	704b      	strb	r3, [r1, #1]
  if (gc_state.modal.feed_rate) { pl_data->condition |= PL_COND_FLAG_INVERSE_TIME; } // Set condition flag for planner use.
 800286c:	b113      	cbz	r3, 8002874 <gc_execute_line+0xbf8>
 800286e:	2308      	movs	r3, #8
 8002870:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 8002874:	f8d8 300c 	ldr.w	r3, [r8, #12]
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 8002878:	4a9d      	ldr	r2, [pc, #628]	; (8002af0 <gc_execute_line+0xe74>)
 800287a:	f8d8 5034 	ldr.w	r5, [r8, #52]	; 0x34
 800287e:	68d0      	ldr	r0, [r2, #12]
 8002880:	4629      	mov	r1, r5
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 8002882:	6113      	str	r3, [r2, #16]
  pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 8002884:	9316      	str	r3, [sp, #88]	; 0x58
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 8002886:	f7fe fba7 	bl	8000fd8 <__aeabi_fcmpeq>
 800288a:	2800      	cmp	r0, #0
 800288c:	f000 80cb 	beq.w	8002a26 <gc_execute_line+0xdaa>
 8002890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002892:	0698      	lsls	r0, r3, #26
 8002894:	f100 80c7 	bmi.w	8002a26 <gc_execute_line+0xdaa>
 8002898:	4b95      	ldr	r3, [pc, #596]	; (8002af0 <gc_execute_line+0xe74>)
 800289a:	7a58      	ldrb	r0, [r3, #9]
  if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 800289c:	b904      	cbnz	r4, 80028a0 <gc_execute_line+0xc24>
      pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use.
 800289e:	9517      	str	r5, [sp, #92]	; 0x5c
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 80028a0:	f898 300a 	ldrb.w	r3, [r8, #10]
  gc_state.tool = gc_block.values.t;
 80028a4:	f898 2038 	ldrb.w	r2, [r8, #56]	; 0x38
 80028a8:	4991      	ldr	r1, [pc, #580]	; (8002af0 <gc_execute_line+0xe74>)
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 80028aa:	4283      	cmp	r3, r0
  gc_state.tool = gc_block.values.t;
 80028ac:	750a      	strb	r2, [r1, #20]
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 80028ae:	d007      	beq.n	80028c0 <gc_execute_line+0xc44>
    spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
 80028b0:	4618      	mov	r0, r3
 80028b2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80028b4:	f005 fa72 	bl	8007d9c <spindle_sync>
    gc_state.modal.spindle = gc_block.modal.spindle;
 80028b8:	f898 300a 	ldrb.w	r3, [r8, #10]
 80028bc:	4a8c      	ldr	r2, [pc, #560]	; (8002af0 <gc_execute_line+0xe74>)
 80028be:	7253      	strb	r3, [r2, #9]
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 80028c0:	4a8b      	ldr	r2, [pc, #556]	; (8002af0 <gc_execute_line+0xe74>)
 80028c2:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80028c6:	7a52      	ldrb	r2, [r2, #9]
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 80028c8:	f898 0009 	ldrb.w	r0, [r8, #9]
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 80028cc:	4313      	orrs	r3, r2
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 80028ce:	4a88      	ldr	r2, [pc, #544]	; (8002af0 <gc_execute_line+0xe74>)
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 80028d0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 80028d4:	7a12      	ldrb	r2, [r2, #8]
 80028d6:	4282      	cmp	r2, r0
 80028d8:	d009      	beq.n	80028ee <gc_execute_line+0xc72>
    coolant_sync(gc_block.modal.coolant);
 80028da:	f7ff f8f3 	bl	8001ac4 <coolant_sync>
    if (gc_block.modal.coolant == COOLANT_DISABLE) { gc_state.modal.coolant = COOLANT_DISABLE; }
 80028de:	f898 3009 	ldrb.w	r3, [r8, #9]
 80028e2:	4a83      	ldr	r2, [pc, #524]	; (8002af0 <gc_execute_line+0xe74>)
 80028e4:	b113      	cbz	r3, 80028ec <gc_execute_line+0xc70>
    else { gc_state.modal.coolant |= gc_block.modal.coolant; }
 80028e6:	7a12      	ldrb	r2, [r2, #8]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	4a81      	ldr	r2, [pc, #516]	; (8002af0 <gc_execute_line+0xe74>)
 80028ec:	7213      	strb	r3, [r2, #8]
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 80028ee:	4a80      	ldr	r2, [pc, #512]	; (8002af0 <gc_execute_line+0xe74>)
 80028f0:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80028f4:	7a11      	ldrb	r1, [r2, #8]
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 80028f6:	f898 2000 	ldrb.w	r2, [r8]
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 80028fa:	430b      	orrs	r3, r1
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 80028fc:	2a04      	cmp	r2, #4
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 80028fe:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002902:	f000 8245 	beq.w	8002d90 <gc_execute_line+0x1114>
  gc_state.modal.units = gc_block.modal.units;
 8002906:	f898 3003 	ldrb.w	r3, [r8, #3]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 800290a:	4979      	ldr	r1, [pc, #484]	; (8002af0 <gc_execute_line+0xe74>)
 800290c:	f898 2005 	ldrb.w	r2, [r8, #5]
  gc_state.modal.units = gc_block.modal.units;
 8002910:	708b      	strb	r3, [r1, #2]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 8002912:	9b07      	ldr	r3, [sp, #28]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 8002914:	710a      	strb	r2, [r1, #4]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 8002916:	2b03      	cmp	r3, #3
 8002918:	f000 8224 	beq.w	8002d64 <gc_execute_line+0x10e8>
  if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 800291c:	4b74      	ldr	r3, [pc, #464]	; (8002af0 <gc_execute_line+0xe74>)
 800291e:	f898 6007 	ldrb.w	r6, [r8, #7]
 8002922:	799b      	ldrb	r3, [r3, #6]
 8002924:	42b3      	cmp	r3, r6
 8002926:	d009      	beq.n	800293c <gc_execute_line+0xcc0>
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 8002928:	4d72      	ldr	r5, [pc, #456]	; (8002af4 <gc_execute_line+0xe78>)
 800292a:	ac19      	add	r4, sp, #100	; 0x64
 800292c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800292e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002930:	6823      	ldr	r3, [r4, #0]
    gc_state.modal.coord_select = gc_block.modal.coord_select;
 8002932:	f805 6c3a 	strb.w	r6, [r5, #-58]
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 8002936:	602b      	str	r3, [r5, #0]
    system_flag_wco_change();
 8002938:	f006 fe9c 	bl	8009674 <system_flag_wco_change>
  switch(gc_block.non_modal_command) {
 800293c:	f898 3000 	ldrb.w	r3, [r8]
  gc_state.modal.distance = gc_block.modal.distance;
 8002940:	f898 2004 	ldrb.w	r2, [r8, #4]
 8002944:	496a      	ldr	r1, [pc, #424]	; (8002af0 <gc_execute_line+0xe74>)
  switch(gc_block.non_modal_command) {
 8002946:	2b26      	cmp	r3, #38	; 0x26
  gc_state.modal.distance = gc_block.modal.distance;
 8002948:	70ca      	strb	r2, [r1, #3]
  switch(gc_block.non_modal_command) {
 800294a:	f000 8258 	beq.w	8002dfe <gc_execute_line+0x1182>
 800294e:	f240 826b 	bls.w	8002e28 <gc_execute_line+0x11ac>
 8002952:	2b5c      	cmp	r3, #92	; 0x5c
 8002954:	f000 81fd 	beq.w	8002d52 <gc_execute_line+0x10d6>
 8002958:	2b66      	cmp	r3, #102	; 0x66
 800295a:	f000 8082 	beq.w	8002a62 <gc_execute_line+0xde6>
 800295e:	2b28      	cmp	r3, #40	; 0x28
 8002960:	d07a      	beq.n	8002a58 <gc_execute_line+0xddc>
  gc_state.modal.motion = gc_block.modal.motion;
 8002962:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002966:	4a62      	ldr	r2, [pc, #392]	; (8002af0 <gc_execute_line+0xe74>)
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 8002968:	2b50      	cmp	r3, #80	; 0x50
  gc_state.modal.motion = gc_block.modal.motion;
 800296a:	7013      	strb	r3, [r2, #0]
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 800296c:	d003      	beq.n	8002976 <gc_execute_line+0xcfa>
    if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 800296e:	9a07      	ldr	r2, [sp, #28]
 8002970:	2a02      	cmp	r2, #2
 8002972:	f000 829e 	beq.w	8002eb2 <gc_execute_line+0x1236>
  gc_state.modal.program_flow = gc_block.modal.program_flow;
 8002976:	f898 4008 	ldrb.w	r4, [r8, #8]
 800297a:	4b5d      	ldr	r3, [pc, #372]	; (8002af0 <gc_execute_line+0xe74>)
 800297c:	71dc      	strb	r4, [r3, #7]
  if (gc_state.modal.program_flow) {
 800297e:	2c00      	cmp	r4, #0
 8002980:	f43f aae3 	beq.w	8001f4a <gc_execute_line+0x2ce>
    protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 8002984:	f003 fae6 	bl	8005f54 <protocol_buffer_synchronize>
    if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED) {
 8002988:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <gc_execute_line+0xe74>)
 800298a:	79db      	ldrb	r3, [r3, #7]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d074      	beq.n	8002a7a <gc_execute_line+0xdfe>
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8002990:	2101      	movs	r1, #1
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 8002992:	2400      	movs	r4, #0
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8002994:	2264      	movs	r2, #100	; 0x64
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8002996:	4856      	ldr	r0, [pc, #344]	; (8002af0 <gc_execute_line+0xe74>)
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8002998:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <gc_execute_line+0xe7c>)
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 800299a:	7001      	strb	r1, [r0, #0]
      if (sys.state != STATE_CHECK_MODE) {
 800299c:	7819      	ldrb	r1, [r3, #0]
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 800299e:	7104      	strb	r4, [r0, #4]
      if (sys.state != STATE_CHECK_MODE) {
 80029a0:	2902      	cmp	r1, #2
      gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 80029a2:	70c4      	strb	r4, [r0, #3]
      gc_state.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 80029a4:	7044      	strb	r4, [r0, #1]
      gc_state.modal.coord_select = 0; // G54
 80029a6:	7184      	strb	r4, [r0, #6]
      gc_state.modal.spindle = SPINDLE_DISABLE;
 80029a8:	7244      	strb	r4, [r0, #9]
      gc_state.modal.coolant = COOLANT_DISABLE;
 80029aa:	7204      	strb	r4, [r0, #8]
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 80029ac:	721a      	strb	r2, [r3, #8]
        sys.r_override = DEFAULT_RAPID_OVERRIDE;
 80029ae:	725a      	strb	r2, [r3, #9]
        sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 80029b0:	729a      	strb	r2, [r3, #10]
      if (sys.state != STATE_CHECK_MODE) {
 80029b2:	d010      	beq.n	80029d6 <gc_execute_line+0xd5a>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 80029b4:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80029b8:	4620      	mov	r0, r4
 80029ba:	f004 fe41 	bl	8007640 <settings_read_coord_data>
 80029be:	2800      	cmp	r0, #0
 80029c0:	f43f adc3 	beq.w	800254a <gc_execute_line+0x8ce>
        system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 80029c4:	f006 fe56 	bl	8009674 <system_flag_wco_change>
        spindle_set_state(SPINDLE_DISABLE,0.0f);
 80029c8:	4620      	mov	r0, r4
 80029ca:	2100      	movs	r1, #0
 80029cc:	f005 f95c 	bl	8007c88 <spindle_set_state>
        coolant_set_state(COOLANT_DISABLE);
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7ff f85f 	bl	8001a94 <coolant_set_state>
      report_feedback_message(MESSAGE_PROGRAM_END);
 80029d6:	2008      	movs	r0, #8
 80029d8:	f003 fdda 	bl	8006590 <report_feedback_message>
    gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 80029dc:	2400      	movs	r4, #0
 80029de:	4b44      	ldr	r3, [pc, #272]	; (8002af0 <gc_execute_line+0xe74>)
 80029e0:	71dc      	strb	r4, [r3, #7]
 80029e2:	f7ff bab2 	b.w	8001f4a <gc_execute_line+0x2ce>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 80029e6:	9b06      	ldr	r3, [sp, #24]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f47f ae13 	bne.w	8002614 <gc_execute_line+0x998>
 80029ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029f0:	469a      	mov	sl, r3
 80029f2:	e56c      	b.n	80024ce <gc_execute_line+0x852>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80029f4:	4b3e      	ldr	r3, [pc, #248]	; (8002af0 <gc_execute_line+0xe74>)
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 80029fc:	e543      	b.n	8002486 <gc_execute_line+0x80a>
 80029fe:	4b3c      	ldr	r3, [pc, #240]	; (8002af0 <gc_execute_line+0xe74>)
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 8002a06:	e66d      	b.n	80026e4 <gc_execute_line+0xa68>
 8002a08:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <gc_execute_line+0xe74>)
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8002a10:	e65c      	b.n	80026cc <gc_execute_line+0xa50>
 8002a12:	4b37      	ldr	r3, [pc, #220]	; (8002af0 <gc_execute_line+0xe74>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 8002a1a:	e64b      	b.n	80026b4 <gc_execute_line+0xa38>
 8002a1c:	4b34      	ldr	r3, [pc, #208]	; (8002af0 <gc_execute_line+0xe74>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
 8002a24:	e63a      	b.n	800269c <gc_execute_line+0xa20>
      if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8002a26:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <gc_execute_line+0xe74>)
 8002a28:	7a58      	ldrb	r0, [r3, #9]
 8002a2a:	b150      	cbz	r0, 8002a42 <gc_execute_line+0xdc6>
        if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_ISMOTION)) {
 8002a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a2e:	0619      	lsls	r1, r3, #24
 8002a30:	d407      	bmi.n	8002a42 <gc_execute_line+0xdc6>
          if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002a32:	b14c      	cbz	r4, 8002a48 <gc_execute_line+0xdcc>
            spindle_sync(gc_state.modal.spindle, 0.0);
 8002a34:	2100      	movs	r1, #0
 8002a36:	f005 f9b1 	bl	8007d9c <spindle_sync>
 8002a3a:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <gc_execute_line+0xe74>)
 8002a3c:	f8d8 5034 	ldr.w	r5, [r8, #52]	; 0x34
 8002a40:	7a58      	ldrb	r0, [r3, #9]
      gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 8002a42:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <gc_execute_line+0xe74>)
 8002a44:	60dd      	str	r5, [r3, #12]
 8002a46:	e729      	b.n	800289c <gc_execute_line+0xc20>
          else { spindle_sync(gc_state.modal.spindle, gc_block.values.s); }
 8002a48:	4629      	mov	r1, r5
 8002a4a:	f005 f9a7 	bl	8007d9c <spindle_sync>
 8002a4e:	4b28      	ldr	r3, [pc, #160]	; (8002af0 <gc_execute_line+0xe74>)
 8002a50:	f8d8 5034 	ldr.w	r5, [r8, #52]	; 0x34
 8002a54:	7a58      	ldrb	r0, [r3, #9]
 8002a56:	e7f4      	b.n	8002a42 <gc_execute_line+0xdc6>
      settings_write_coord_data(SETTING_INDEX_G30,gc_state.position);
 8002a58:	4928      	ldr	r1, [pc, #160]	; (8002afc <gc_execute_line+0xe80>)
 8002a5a:	2007      	movs	r0, #7
 8002a5c:	f004 fd12 	bl	8007484 <settings_write_coord_data>
      break;
 8002a60:	e77f      	b.n	8002962 <gc_execute_line+0xce6>
      clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
 8002a62:	2300      	movs	r3, #0
 8002a64:	4a26      	ldr	r2, [pc, #152]	; (8002b00 <gc_execute_line+0xe84>)
 8002a66:	f1a2 0144 	sub.w	r1, r2, #68	; 0x44
 8002a6a:	644b      	str	r3, [r1, #68]	; 0x44
 8002a6c:	6053      	str	r3, [r2, #4]
 8002a6e:	6093      	str	r3, [r2, #8]
 8002a70:	60d3      	str	r3, [r2, #12]
 8002a72:	6113      	str	r3, [r2, #16]
      system_flag_wco_change();
 8002a74:	f006 fdfe 	bl	8009674 <system_flag_wco_change>
      break;
 8002a78:	e773      	b.n	8002962 <gc_execute_line+0xce6>
      if (sys.state != STATE_CHECK_MODE) {
 8002a7a:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <gc_execute_line+0xe7c>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d0ac      	beq.n	80029dc <gc_execute_line+0xd60>
        system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 8002a82:	2008      	movs	r0, #8
 8002a84:	f006 fec6 	bl	8009814 <system_set_exec_state_flag>
        protocol_execute_realtime(); // Execute suspend.
 8002a88:	f003 f87c 	bl	8005b84 <protocol_execute_realtime>
 8002a8c:	e7a6      	b.n	80029dc <gc_execute_line+0xd60>
        gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
 8002a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	9309      	str	r3, [sp, #36]	; 0x24
 8002a98:	f003 0440 	and.w	r4, r3, #64	; 0x40
 8002a9c:	e6df      	b.n	800285e <gc_execute_line+0xbe2>
          if (gc_block.values.l == 20) {
 8002a9e:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002aa2:	2201      	movs	r2, #1
          if (gc_block.values.l == 20) {
 8002aa4:	9310      	str	r3, [sp, #64]	; 0x40
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <gc_execute_line+0xe74>)
 8002aa8:	f8df b050 	ldr.w	fp, [pc, #80]	; 8002afc <gc_execute_line+0xe80>
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	9412      	str	r4, [sp, #72]	; 0x48
 8002ab0:	9311      	str	r3, [sp, #68]	; 0x44
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	9713      	str	r7, [sp, #76]	; 0x4c
 8002ab6:	4614      	mov	r4, r2
 8002ab8:	465f      	mov	r7, fp
 8002aba:	46b3      	mov	fp, r6
 8002abc:	461e      	mov	r6, r3
 8002abe:	4d11      	ldr	r5, [pc, #68]	; (8002b04 <gc_execute_line+0xe88>)
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002ac0:	9b06      	ldr	r3, [sp, #24]
 8002ac2:	fa43 f106 	asr.w	r1, r3, r6
 8002ac6:	07c8      	lsls	r0, r1, #31
 8002ac8:	d504      	bpl.n	8002ad4 <gc_execute_line+0xe58>
          if (gc_block.values.l == 20) {
 8002aca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002acc:	2b14      	cmp	r3, #20
 8002ace:	d01b      	beq.n	8002b08 <gc_execute_line+0xe8c>
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 8002ad0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002ad2:	6029      	str	r1, [r5, #0]
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002ad4:	2c05      	cmp	r4, #5
 8002ad6:	d027      	beq.n	8002b28 <gc_execute_line+0xeac>
 8002ad8:	3401      	adds	r4, #1
 8002ada:	b2e4      	uxtb	r4, r4
 8002adc:	3601      	adds	r6, #1
 8002ade:	3704      	adds	r7, #4
 8002ae0:	3504      	adds	r5, #4
 8002ae2:	e7ed      	b.n	8002ac0 <gc_execute_line+0xe44>
      else { coord_select = gc_block.modal.coord_select; } // Index P0 as the active coordinate system
 8002ae4:	f898 a007 	ldrb.w	sl, [r8, #7]
 8002ae8:	e528      	b.n	800253c <gc_execute_line+0x8c0>
 8002aea:	bf00      	nop
 8002aec:	20001d30 	.word	0x20001d30
 8002af0:	20001abc 	.word	0x20001abc
 8002af4:	20001aec 	.word	0x20001aec
 8002af8:	20001b6c 	.word	0x20001b6c
 8002afc:	20001ad8 	.word	0x20001ad8
 8002b00:	20001b00 	.word	0x20001b00
 8002b04:	20001b28 	.word	0x20001b28
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b0a:	6838      	ldr	r0, [r7, #0]
 8002b0c:	f7fd ffc6 	bl	8000a9c <__aeabi_fsub>
 8002b10:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002b12:	f7fd ffc3 	bl	8000a9c <__aeabi_fsub>
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002b16:	2e02      	cmp	r6, #2
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002b18:	6028      	str	r0, [r5, #0]
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002b1a:	d1db      	bne.n	8002ad4 <gc_execute_line+0xe58>
 8002b1c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002b1e:	f7fd ffbd 	bl	8000a9c <__aeabi_fsub>
 8002b22:	f8c8 0018 	str.w	r0, [r8, #24]
 8002b26:	e7d7      	b.n	8002ad8 <gc_execute_line+0xe5c>
 8002b28:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8002b2a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8002b2c:	465e      	mov	r6, fp
 8002b2e:	e56c      	b.n	800260a <gc_execute_line+0x98e>
          gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
 8002b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b32:	9309      	str	r3, [sp, #36]	; 0x24
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002b34:	9b06      	ldr	r3, [sp, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f43f abdc 	beq.w	80022f4 <gc_execute_line+0x678>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 8002b3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b3e:	4213      	tst	r3, r2
 8002b40:	d102      	bne.n	8002b48 <gc_execute_line+0xecc>
 8002b42:	2420      	movs	r4, #32
 8002b44:	f7ff ba01 	b.w	8001f4a <gc_execute_line+0x2ce>
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 8002b48:	4baf      	ldr	r3, [pc, #700]	; (8002e08 <gc_execute_line+0x118c>)
 8002b4a:	eb08 0287 	add.w	r2, r8, r7, lsl #2
 8002b4e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8002b52:	69d9      	ldr	r1, [r3, #28]
 8002b54:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8002b56:	f7fd ffa1 	bl	8000a9c <__aeabi_fsub>
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002b5a:	4bab      	ldr	r3, [pc, #684]	; (8002e08 <gc_execute_line+0x118c>)
 8002b5c:	eb08 0286 	add.w	r2, r8, r6, lsl #2
 8002b60:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 8002b64:	4683      	mov	fp, r0
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002b66:	69d9      	ldr	r1, [r3, #28]
 8002b68:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8002b6a:	f7fd ff97 	bl	8000a9c <__aeabi_fsub>
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 8002b6e:	f019 0580 	ands.w	r5, r9, #128	; 0x80
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002b72:	900a      	str	r0, [sp, #40]	; 0x28
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 8002b74:	d05b      	beq.n	8002c2e <gc_execute_line+0xfb2>
            bit_false(value_words,bit(WORD_R));
 8002b76:	f029 0980 	bic.w	r9, r9, #128	; 0x80
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002b7a:	2214      	movs	r2, #20
 8002b7c:	49a3      	ldr	r1, [pc, #652]	; (8002e0c <gc_execute_line+0x1190>)
 8002b7e:	48a4      	ldr	r0, [pc, #656]	; (8002e10 <gc_execute_line+0x1194>)
            bit_false(value_words,bit(WORD_R));
 8002b80:	fa1f f989 	uxth.w	r9, r9
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002b84:	f008 f8c8 	bl	800ad18 <memcmp>
 8002b88:	bb18      	cbnz	r0, 8002bd2 <gc_execute_line+0xf56>
 8002b8a:	2421      	movs	r4, #33	; 0x21
 8002b8c:	f7ff b9dd 	b.w	8001f4a <gc_execute_line+0x2ce>
      switch (gc_block.modal.motion) {
 8002b90:	2d8e      	cmp	r5, #142	; 0x8e
 8002b92:	d005      	beq.n	8002ba0 <gc_execute_line+0xf24>
 8002b94:	d302      	bcc.n	8002b9c <gc_execute_line+0xf20>
 8002b96:	2d8f      	cmp	r5, #143	; 0x8f
 8002b98:	f47f ac98 	bne.w	80024cc <gc_execute_line+0x850>
            gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
 8002b9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b9e:	9309      	str	r3, [sp, #36]	; 0x24
            if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY) ||
 8002ba0:	f105 0372 	add.w	r3, r5, #114	; 0x72
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d804      	bhi.n	8002bb4 <gc_execute_line+0xf38>
                (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR)) { gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY; }
 8002baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bac:	f043 0308 	orr.w	r3, r3, #8
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	9309      	str	r3, [sp, #36]	; 0x24
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002bb4:	9b06      	ldr	r3, [sp, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f43f ab9c 	beq.w	80022f4 <gc_execute_line+0x678>
          if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002bbc:	2214      	movs	r2, #20
 8002bbe:	4993      	ldr	r1, [pc, #588]	; (8002e0c <gc_execute_line+0x1190>)
 8002bc0:	4893      	ldr	r0, [pc, #588]	; (8002e10 <gc_execute_line+0x1194>)
 8002bc2:	f008 f8a9 	bl	800ad18 <memcmp>
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d0df      	beq.n	8002b8a <gc_execute_line+0xf0e>
 8002bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bcc:	f003 0201 	and.w	r2, r3, #1
 8002bd0:	e47d      	b.n	80024ce <gc_execute_line+0x852>
            if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.r *= MM_PER_INCH; }
 8002bd2:	f898 3003 	ldrb.w	r3, [r8, #3]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d106      	bne.n	8002be8 <gc_execute_line+0xf6c>
 8002bda:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
 8002bde:	498d      	ldr	r1, [pc, #564]	; (8002e14 <gc_execute_line+0x1198>)
 8002be0:	f7fe f866 	bl	8000cb0 <__aeabi_fmul>
 8002be4:	f8c8 0030 	str.w	r0, [r8, #48]	; 0x30
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 8002be8:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
 8002bec:	4608      	mov	r0, r1
 8002bee:	f7fe f85f 	bl	8000cb0 <__aeabi_fmul>
 8002bf2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002bf6:	f7fe f85b 	bl	8000cb0 <__aeabi_fmul>
 8002bfa:	4659      	mov	r1, fp
 8002bfc:	4605      	mov	r5, r0
 8002bfe:	4658      	mov	r0, fp
 8002c00:	f7fe f856 	bl	8000cb0 <__aeabi_fmul>
 8002c04:	4601      	mov	r1, r0
 8002c06:	4628      	mov	r0, r5
 8002c08:	f7fd ff48 	bl	8000a9c <__aeabi_fsub>
 8002c0c:	4605      	mov	r5, r0
 8002c0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002c10:	4601      	mov	r1, r0
 8002c12:	f7fe f84d 	bl	8000cb0 <__aeabi_fmul>
 8002c16:	4601      	mov	r1, r0
 8002c18:	4628      	mov	r0, r5
 8002c1a:	f7fd ff3f 	bl	8000a9c <__aeabi_fsub>
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002c1e:	2100      	movs	r1, #0
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 8002c20:	4605      	mov	r5, r0
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002c22:	f7fe f9e3 	bl	8000fec <__aeabi_fcmplt>
 8002c26:	b148      	cbz	r0, 8002c3c <gc_execute_line+0xfc0>
 8002c28:	2422      	movs	r4, #34	; 0x22
 8002c2a:	f7ff b98e 	b.w	8001f4a <gc_execute_line+0x2ce>
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 8002c2e:	9b08      	ldr	r3, [sp, #32]
 8002c30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002c32:	4213      	tst	r3, r2
 8002c34:	d149      	bne.n	8002cca <gc_execute_line+0x104e>
 8002c36:	2423      	movs	r4, #35	; 0x23
 8002c38:	f7ff b987 	b.w	8001f4a <gc_execute_line+0x2ce>
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f008 f99b 	bl	800af78 <sqrtf>
 8002c42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002c44:	4605      	mov	r5, r0
 8002c46:	4658      	mov	r0, fp
 8002c48:	f001 f9d4 	bl	8003ff4 <hypot_f>
 8002c4c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8002c50:	4601      	mov	r1, r0
 8002c52:	4628      	mov	r0, r5
 8002c54:	f7fe f8e0 	bl	8000e18 <__aeabi_fdiv>
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002c58:	f898 3001 	ldrb.w	r3, [r8, #1]
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002c5c:	4605      	mov	r5, r0
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002c5e:	2b03      	cmp	r3, #3
            if (gc_block.values.r < 0) {
 8002c60:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002c64:	bf08      	it	eq
 8002c66:	f100 4500 	addeq.w	r5, r0, #2147483648	; 0x80000000
            if (gc_block.values.r < 0) {
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	9308      	str	r3, [sp, #32]
 8002c70:	f7fe f9bc 	bl	8000fec <__aeabi_fcmplt>
 8002c74:	9b08      	ldr	r3, [sp, #32]
 8002c76:	b128      	cbz	r0, 8002c84 <gc_execute_line+0x1008>
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8002c78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
                h_x2_div_d = -h_x2_div_d;
 8002c7c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8002c80:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
            gc_block.values.ijk[axis_0] = 0.5f*(x-(y*h_x2_div_d));
 8002c84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002c86:	4628      	mov	r0, r5
 8002c88:	f7fe f812 	bl	8000cb0 <__aeabi_fmul>
 8002c8c:	4601      	mov	r1, r0
 8002c8e:	4658      	mov	r0, fp
 8002c90:	f7fd ff04 	bl	8000a9c <__aeabi_fsub>
 8002c94:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002c98:	f7fe f80a 	bl	8000cb0 <__aeabi_fmul>
 8002c9c:	3702      	adds	r7, #2
 8002c9e:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 8002ca2:	60b8      	str	r0, [r7, #8]
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 8002ca4:	4659      	mov	r1, fp
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	f7fe f802 	bl	8000cb0 <__aeabi_fmul>
 8002cac:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002cae:	f7fd fef7 	bl	8000aa0 <__addsf3>
 8002cb2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002cb6:	f7fd fffb 	bl	8000cb0 <__aeabi_fmul>
 8002cba:	3602      	adds	r6, #2
 8002cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cbe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8002cc2:	f003 0201 	and.w	r2, r3, #1
 8002cc6:	60b0      	str	r0, [r6, #8]
 8002cc8:	e401      	b.n	80024ce <gc_execute_line+0x852>
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002cca:	f898 3003 	ldrb.w	r3, [r8, #3]
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002cce:	f029 090e 	bic.w	r9, r9, #14
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002cd2:	2b01      	cmp	r3, #1
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002cd4:	fa1f f989 	uxth.w	r9, r9
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002cd8:	f000 80b9 	beq.w	8002e4e <gc_execute_line+0x11d2>
            y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 8002cdc:	1cb5      	adds	r5, r6, #2
 8002cde:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8002ce2:	68a9      	ldr	r1, [r5, #8]
 8002ce4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002ce6:	f7fd fed9 	bl	8000a9c <__aeabi_fsub>
 8002cea:	4606      	mov	r6, r0
            x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 8002cec:	3702      	adds	r7, #2
 8002cee:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	4658      	mov	r0, fp
 8002cf6:	f7fd fed1 	bl	8000a9c <__aeabi_fsub>
            float target_r = hypot_f(x,y);
 8002cfa:	4631      	mov	r1, r6
 8002cfc:	f001 f97a 	bl	8003ff4 <hypot_f>
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002d00:	68a9      	ldr	r1, [r5, #8]
            float target_r = hypot_f(x,y);
 8002d02:	4606      	mov	r6, r0
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002d04:	68b8      	ldr	r0, [r7, #8]
 8002d06:	f001 f975 	bl	8003ff4 <hypot_f>
 8002d0a:	4607      	mov	r7, r0
            float delta_r = fabsf(target_r-gc_block.values.r);
 8002d0c:	4630      	mov	r0, r6
 8002d0e:	4639      	mov	r1, r7
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002d10:	f8c8 7030 	str.w	r7, [r8, #48]	; 0x30
            float delta_r = fabsf(target_r-gc_block.values.r);
 8002d14:	f7fd fec2 	bl	8000a9c <__aeabi_fsub>
 8002d18:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
            if (delta_r > 0.005f) {
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	493e      	ldr	r1, [pc, #248]	; (8002e18 <gc_execute_line+0x119c>)
 8002d20:	f7fe f982 	bl	8001028 <__aeabi_fcmpgt>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	f43f af50 	beq.w	8002bca <gc_execute_line+0xf4e>
              if (delta_r > 0.5f) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.5mm
 8002d2a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002d2e:	4628      	mov	r0, r5
 8002d30:	f7fe f97a 	bl	8001028 <__aeabi_fcmpgt>
 8002d34:	2800      	cmp	r0, #0
 8002d36:	f47f af28 	bne.w	8002b8a <gc_execute_line+0xf0e>
              if (delta_r > (0.001f*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.005mm AND 0.1% radius
 8002d3a:	4938      	ldr	r1, [pc, #224]	; (8002e1c <gc_execute_line+0x11a0>)
 8002d3c:	4638      	mov	r0, r7
 8002d3e:	f7fd ffb7 	bl	8000cb0 <__aeabi_fmul>
 8002d42:	4601      	mov	r1, r0
 8002d44:	4628      	mov	r0, r5
 8002d46:	f7fe f96f 	bl	8001028 <__aeabi_fcmpgt>
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	f47f af1d 	bne.w	8002b8a <gc_execute_line+0xf0e>
 8002d50:	e73b      	b.n	8002bca <gc_execute_line+0xf4e>
      memcpy(gc_state.coord_offset,gc_block.values.xyz,sizeof(gc_block.values.xyz));
 8002d52:	4d2e      	ldr	r5, [pc, #184]	; (8002e0c <gc_execute_line+0x1190>)
 8002d54:	4c32      	ldr	r4, [pc, #200]	; (8002e20 <gc_execute_line+0x11a4>)
 8002d56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d5a:	682b      	ldr	r3, [r5, #0]
 8002d5c:	6023      	str	r3, [r4, #0]
      system_flag_wco_change();
 8002d5e:	f006 fc89 	bl	8009674 <system_flag_wco_change>
      break;
 8002d62:	e5fe      	b.n	8002962 <gc_execute_line+0xce6>
    gc_state.modal.tool_length = gc_block.modal.tool_length;
 8002d64:	f898 3006 	ldrb.w	r3, [r8, #6]
 8002d68:	714b      	strb	r3, [r1, #5]
    if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL) { // G49
 8002d6a:	b913      	cbnz	r3, 8002d72 <gc_execute_line+0x10f6>
      gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0f;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
    if ( gc_state.tool_length_offset != gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] ) {
 8002d72:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
 8002d76:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <gc_execute_line+0x118c>)
 8002d78:	4621      	mov	r1, r4
 8002d7a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002d7c:	f7fe f92c 	bl	8000fd8 <__aeabi_fcmpeq>
 8002d80:	2800      	cmp	r0, #0
 8002d82:	f47f adcb 	bne.w	800291c <gc_execute_line+0xca0>
      gc_state.tool_length_offset = gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS];
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <gc_execute_line+0x118c>)
 8002d88:	659c      	str	r4, [r3, #88]	; 0x58
      system_flag_wco_change();
 8002d8a:	f006 fc73 	bl	8009674 <system_flag_wco_change>
 8002d8e:	e5c5      	b.n	800291c <gc_execute_line+0xca0>
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002d90:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8002d94:	f000 ff5e 	bl	8003c54 <mc_dwell>
 8002d98:	e5b5      	b.n	8002906 <gc_execute_line+0xc8a>
      if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE || gc_block.non_modal_command == NON_MODAL_NO_ACTION)) { FAIL(STATUS_INVALID_JOG_COMMAND); }
 8002d9a:	f898 3000 	ldrb.w	r3, [r8]
 8002d9e:	2b35      	cmp	r3, #53	; 0x35
 8002da0:	d002      	beq.n	8002da8 <gc_execute_line+0x112c>
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f47f ad2c 	bne.w	8002800 <gc_execute_line+0xb84>
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8002da8:	4a17      	ldr	r2, [pc, #92]	; (8002e08 <gc_execute_line+0x118c>)
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <gc_execute_line+0x118c>)
 8002dac:	7a11      	ldrb	r1, [r2, #8]
 8002dae:	7a5b      	ldrb	r3, [r3, #9]
      pl_data->spindle_speed = gc_state.spindle_speed;
 8002db0:	68d2      	ldr	r2, [r2, #12]
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8002db2:	430b      	orrs	r3, r1
      uint8_t status = jog_execute(&plan_data, &gc_block);
 8002db4:	a816      	add	r0, sp, #88	; 0x58
 8002db6:	491b      	ldr	r1, [pc, #108]	; (8002e24 <gc_execute_line+0x11a8>)
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8002db8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
      pl_data->spindle_speed = gc_state.spindle_speed;
 8002dbc:	9217      	str	r2, [sp, #92]	; 0x5c
      uint8_t status = jog_execute(&plan_data, &gc_block);
 8002dbe:	f000 f8d9 	bl	8002f74 <jog_execute>
      if (status == STATUS_OK) { memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); }
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	f47f a8c0 	bne.w	8001f4a <gc_execute_line+0x2ce>
 8002dca:	4e10      	ldr	r6, [pc, #64]	; (8002e0c <gc_execute_line+0x1190>)
 8002dcc:	4d10      	ldr	r5, [pc, #64]	; (8002e10 <gc_execute_line+0x1194>)
 8002dce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd2:	6833      	ldr	r3, [r6, #0]
 8002dd4:	602b      	str	r3, [r5, #0]
 8002dd6:	f7ff b8b8 	b.w	8001f4a <gc_execute_line+0x2ce>
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <gc_execute_line+0x118c>)
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002dde:	781b      	ldrb	r3, [r3, #0]
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 8002de0:	3b01      	subs	r3, #1
 8002de2:	2b02      	cmp	r3, #2
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002de4:	4613      	mov	r3, r2
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 8002de6:	d87e      	bhi.n	8002ee6 <gc_execute_line+0x126a>
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002de8:	f012 0440 	ands.w	r4, r2, #64	; 0x40
 8002dec:	f43f ad37 	beq.w	800285e <gc_execute_line+0xbe2>
              gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
 8002df0:	f043 0320 	orr.w	r3, r3, #32
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	9309      	str	r3, [sp, #36]	; 0x24
 8002df8:	f003 0440 	and.w	r4, r3, #64	; 0x40
 8002dfc:	e52f      	b.n	800285e <gc_execute_line+0xbe2>
      settings_write_coord_data(SETTING_INDEX_G28,gc_state.position);
 8002dfe:	4904      	ldr	r1, [pc, #16]	; (8002e10 <gc_execute_line+0x1194>)
 8002e00:	2006      	movs	r0, #6
 8002e02:	f004 fb3f 	bl	8007484 <settings_write_coord_data>
      break;
 8002e06:	e5ac      	b.n	8002962 <gc_execute_line+0xce6>
 8002e08:	20001abc 	.word	0x20001abc
 8002e0c:	20001b54 	.word	0x20001b54
 8002e10:	20001ad8 	.word	0x20001ad8
 8002e14:	41cb3333 	.word	0x41cb3333
 8002e18:	3ba3d70a 	.word	0x3ba3d70a
 8002e1c:	3a83126f 	.word	0x3a83126f
 8002e20:	20001b00 	.word	0x20001b00
 8002e24:	20001b18 	.word	0x20001b18
  switch(gc_block.non_modal_command) {
 8002e28:	2b1c      	cmp	r3, #28
 8002e2a:	d02b      	beq.n	8002e84 <gc_execute_line+0x1208>
 8002e2c:	2b1e      	cmp	r3, #30
 8002e2e:	d029      	beq.n	8002e84 <gc_execute_line+0x1208>
 8002e30:	2b0a      	cmp	r3, #10
 8002e32:	f47f ad96 	bne.w	8002962 <gc_execute_line+0xce6>
      settings_write_coord_data(coord_select,gc_block.values.ijk);
 8002e36:	4948      	ldr	r1, [pc, #288]	; (8002f58 <gc_execute_line+0x12dc>)
 8002e38:	4650      	mov	r0, sl
 8002e3a:	f004 fb23 	bl	8007484 <settings_write_coord_data>
      if (gc_state.modal.coord_select == coord_select) {
 8002e3e:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <gc_execute_line+0x12e0>)
 8002e40:	799b      	ldrb	r3, [r3, #6]
 8002e42:	4553      	cmp	r3, sl
 8002e44:	f47f ad8d 	bne.w	8002962 <gc_execute_line+0xce6>
        memcpy(gc_state.coord_system,gc_block.values.ijk,N_AXIS*sizeof(float));
 8002e48:	4d43      	ldr	r5, [pc, #268]	; (8002f58 <gc_execute_line+0x12dc>)
 8002e4a:	4c45      	ldr	r4, [pc, #276]	; (8002f60 <gc_execute_line+0x12e4>)
 8002e4c:	e783      	b.n	8002d56 <gc_execute_line+0x10da>
 8002e4e:	4b42      	ldr	r3, [pc, #264]	; (8002f58 <gc_execute_line+0x12dc>)
                if (ijk_words & bit(idx)) { gc_block.values.ijk[idx] *= MM_PER_INCH; }
 8002e50:	960b      	str	r6, [sp, #44]	; 0x2c
 8002e52:	4626      	mov	r6, r4
 8002e54:	461c      	mov	r4, r3
 8002e56:	4a43      	ldr	r2, [pc, #268]	; (8002f64 <gc_execute_line+0x12e8>)
 8002e58:	9b08      	ldr	r3, [sp, #32]
 8002e5a:	fa43 f105 	asr.w	r1, r3, r5
 8002e5e:	f011 0f01 	tst.w	r1, #1
 8002e62:	f105 0501 	add.w	r5, r5, #1
 8002e66:	d006      	beq.n	8002e76 <gc_execute_line+0x11fa>
 8002e68:	4611      	mov	r1, r2
 8002e6a:	6820      	ldr	r0, [r4, #0]
 8002e6c:	920c      	str	r2, [sp, #48]	; 0x30
 8002e6e:	f7fd ff1f 	bl	8000cb0 <__aeabi_fmul>
 8002e72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002e74:	6020      	str	r0, [r4, #0]
              for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 8002e76:	2d05      	cmp	r5, #5
 8002e78:	f104 0404 	add.w	r4, r4, #4
 8002e7c:	d1ec      	bne.n	8002e58 <gc_execute_line+0x11dc>
 8002e7e:	4634      	mov	r4, r6
 8002e80:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002e82:	e72b      	b.n	8002cdc <gc_execute_line+0x1060>
      pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002e84:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
      if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 8002e90:	9b07      	ldr	r3, [sp, #28]
 8002e92:	b11b      	cbz	r3, 8002e9c <gc_execute_line+0x1220>
 8002e94:	a916      	add	r1, sp, #88	; 0x58
 8002e96:	4834      	ldr	r0, [pc, #208]	; (8002f68 <gc_execute_line+0x12ec>)
 8002e98:	f000 fca4 	bl	80037e4 <mc_line>
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8002e9c:	4d2e      	ldr	r5, [pc, #184]	; (8002f58 <gc_execute_line+0x12dc>)
 8002e9e:	4c33      	ldr	r4, [pc, #204]	; (8002f6c <gc_execute_line+0x12f0>)
      mc_line(gc_block.values.ijk, pl_data);
 8002ea0:	a916      	add	r1, sp, #88	; 0x58
 8002ea2:	482d      	ldr	r0, [pc, #180]	; (8002f58 <gc_execute_line+0x12dc>)
 8002ea4:	f000 fc9e 	bl	80037e4 <mc_line>
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8002ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eac:	682b      	ldr	r3, [r5, #0]
 8002eae:	6023      	str	r3, [r4, #0]
      break;
 8002eb0:	e557      	b.n	8002962 <gc_execute_line+0xce6>
      if (gc_state.modal.motion == MOTION_MODE_LINEAR) {
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d048      	beq.n	8002f48 <gc_execute_line+0x12cc>
      } else if (gc_state.modal.motion == MOTION_MODE_SEEK) {
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d039      	beq.n	8002f2e <gc_execute_line+0x12b2>
      } else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC) || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002eba:	3b02      	subs	r3, #2
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d91f      	bls.n	8002f00 <gc_execute_line+0x1284>
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002ec0:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002ec4:	4c28      	ldr	r4, [pc, #160]	; (8002f68 <gc_execute_line+0x12ec>)
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002ec6:	f043 0304 	orr.w	r3, r3, #4
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ecc:	a916      	add	r1, sp, #88	; 0x58
 8002ece:	4620      	mov	r0, r4
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002ed0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002ed4:	f000 fefa 	bl	8003ccc <mc_probe_cycle>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002ed8:	b950      	cbnz	r0, 8002ef0 <gc_execute_line+0x1274>
 8002eda:	4d24      	ldr	r5, [pc, #144]	; (8002f6c <gc_execute_line+0x12f0>)
        memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); // gc_state.position[] = gc_block.values.xyz[]
 8002edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	602b      	str	r3, [r5, #0]
 8002ee4:	e547      	b.n	8002976 <gc_execute_line+0xcfa>
            if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002ee6:	f012 0440 	ands.w	r4, r2, #64	; 0x40
 8002eea:	f47f acb8 	bne.w	800285e <gc_execute_line+0xbe2>
 8002eee:	e77f      	b.n	8002df0 <gc_execute_line+0x1174>
      } else if (gc_update_pos == GC_UPDATE_POS_SYSTEM) {
 8002ef0:	2801      	cmp	r0, #1
 8002ef2:	f47f ad40 	bne.w	8002976 <gc_execute_line+0xcfa>
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 8002ef6:	491e      	ldr	r1, [pc, #120]	; (8002f70 <gc_execute_line+0x12f4>)
 8002ef8:	481c      	ldr	r0, [pc, #112]	; (8002f6c <gc_execute_line+0x12f0>)
 8002efa:	f006 fbc5 	bl	8009688 <system_convert_array_steps_to_mpos>
 8002efe:	e53a      	b.n	8002976 <gc_execute_line+0xcfa>
          mc_arc(gc_block.values.xyz, pl_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 8002f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f02:	4c19      	ldr	r4, [pc, #100]	; (8002f68 <gc_execute_line+0x12ec>)
 8002f04:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002f08:	9304      	str	r3, [sp, #16]
 8002f0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002f0c:	4d17      	ldr	r5, [pc, #92]	; (8002f6c <gc_execute_line+0x12f0>)
 8002f0e:	9303      	str	r3, [sp, #12]
 8002f10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f12:	f8d8 6030 	ldr.w	r6, [r8, #48]	; 0x30
 8002f16:	9302      	str	r3, [sp, #8]
 8002f18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f1a:	a916      	add	r1, sp, #88	; 0x58
 8002f1c:	9301      	str	r3, [sp, #4]
 8002f1e:	462a      	mov	r2, r5
 8002f20:	f1a4 032c 	sub.w	r3, r4, #44	; 0x2c
 8002f24:	4620      	mov	r0, r4
 8002f26:	9600      	str	r6, [sp, #0]
 8002f28:	f000 fc92 	bl	8003850 <mc_arc>
 8002f2c:	e7d6      	b.n	8002edc <gc_execute_line+0x1260>
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002f2e:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
        mc_line(gc_block.values.xyz, pl_data);
 8002f32:	4c0d      	ldr	r4, [pc, #52]	; (8002f68 <gc_execute_line+0x12ec>)
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002f34:	f043 0301 	orr.w	r3, r3, #1
        mc_line(gc_block.values.xyz, pl_data);
 8002f38:	a916      	add	r1, sp, #88	; 0x58
 8002f3a:	4620      	mov	r0, r4
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002f3c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8002f40:	4d0a      	ldr	r5, [pc, #40]	; (8002f6c <gc_execute_line+0x12f0>)
        mc_line(gc_block.values.xyz, pl_data);
 8002f42:	f000 fc4f 	bl	80037e4 <mc_line>
 8002f46:	e7c9      	b.n	8002edc <gc_execute_line+0x1260>
        mc_line(gc_block.values.xyz, pl_data);
 8002f48:	4c07      	ldr	r4, [pc, #28]	; (8002f68 <gc_execute_line+0x12ec>)
 8002f4a:	a916      	add	r1, sp, #88	; 0x58
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	f000 fc49 	bl	80037e4 <mc_line>
 8002f52:	4d06      	ldr	r5, [pc, #24]	; (8002f6c <gc_execute_line+0x12f0>)
 8002f54:	e7c2      	b.n	8002edc <gc_execute_line+0x1260>
 8002f56:	bf00      	nop
 8002f58:	20001b28 	.word	0x20001b28
 8002f5c:	20001abc 	.word	0x20001abc
 8002f60:	20001aec 	.word	0x20001aec
 8002f64:	41cb3333 	.word	0x41cb3333
 8002f68:	20001b54 	.word	0x20001b54
 8002f6c:	20001ad8 	.word	0x20001ad8
 8002f70:	20001b98 	.word	0x20001b98

08002f74 <jog_execute>:
#include "grbl.h"


// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
uint8_t jog_execute(plan_line_data_t *pl_data, parser_block_t *gc_block)
{
 8002f74:	b570      	push	{r4, r5, r6, lr}
 8002f76:	4605      	mov	r5, r0
  // Initialize planner data struct for jogging motions.
  // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
  pl_data->feed_rate = gc_block->values.f;
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002f78:	7a03      	ldrb	r3, [r0, #8]
  pl_data->feed_rate = gc_block->values.f;
 8002f7a:	68c8      	ldr	r0, [r1, #12]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002f7c:	f043 0304 	orr.w	r3, r3, #4
#ifdef USE_LINE_NUMBERS
  pl_data->line_number = gc_block->values.n;
#endif

  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002f80:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <jog_execute+0x58>)
  pl_data->feed_rate = gc_block->values.f;
 8002f82:	6028      	str	r0, [r5, #0]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002f84:	722b      	strb	r3, [r5, #8]
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002f86:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8002f8a:	f101 043c 	add.w	r4, r1, #60	; 0x3c
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002f8e:	069b      	lsls	r3, r3, #26
 8002f90:	d506      	bpl.n	8002fa0 <jog_execute+0x2c>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8002f92:	4620      	mov	r0, r4
 8002f94:	f006 fba2 	bl	80096dc <system_check_travel_limits>
 8002f98:	b110      	cbz	r0, 8002fa0 <jog_execute+0x2c>
 8002f9a:	240f      	movs	r4, #15
      st_wake_up();  // NOTE: Manual start. No state machine required.
    }
  }

  return(STATUS_OK);
}
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	bd70      	pop	{r4, r5, r6, pc}
  if (sys.state == STATE_IDLE) {
 8002fa0:	4e0b      	ldr	r6, [pc, #44]	; (8002fd0 <jog_execute+0x5c>)
  mc_line(gc_block->values.xyz, pl_data);
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	4629      	mov	r1, r5
 8002fa6:	f000 fc1d 	bl	80037e4 <mc_line>
  if (sys.state == STATE_IDLE) {
 8002faa:	7834      	ldrb	r4, [r6, #0]
 8002fac:	b114      	cbz	r4, 8002fb4 <jog_execute+0x40>
  return(STATUS_OK);
 8002fae:	2400      	movs	r4, #0
}
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	bd70      	pop	{r4, r5, r6, pc}
    if (plan_get_current_block() != NULL) { // Check if there is a block to execute.
 8002fb4:	f001 fa5c 	bl	8004470 <plan_get_current_block>
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d0f8      	beq.n	8002fae <jog_execute+0x3a>
      sys.state = STATE_JOG;
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	7033      	strb	r3, [r6, #0]
      st_prep_buffer();
 8002fc0:	f005 fb84 	bl	80086cc <st_prep_buffer>
      st_wake_up();  // NOTE: Manual start. No state machine required.
 8002fc4:	f004 ffa0 	bl	8007f08 <st_wake_up>
}
 8002fc8:	4620      	mov	r0, r4
 8002fca:	bd70      	pop	{r4, r5, r6, pc}
 8002fcc:	20001d30 	.word	0x20001d30
 8002fd0:	20001b6c 	.word	0x20001b6c

08002fd4 <limits_init>:
#ifndef HOMING_AXIS_LOCATE_SCALAR
  #define HOMING_AXIS_LOCATE_SCALAR  5.0f // Must be > 1 to ensure limit switch is cleared.
#endif

void limits_init()
{
 8002fd4:	b530      	push	{r4, r5, lr}
    WDTCSR = (1<<WDP0); // Set time-out at ~32msec.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002fd6:	2101      	movs	r1, #1
{
 8002fd8:	b085      	sub	sp, #20
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002fda:	2009      	movs	r0, #9
#ifdef DISABLE_LIMIT_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002fdc:	f44f 4478 	mov.w	r4, #63488	; 0xf800
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002fe0:	f7fe fc2a 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8002fe4:	2348      	movs	r3, #72	; 0x48
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002fe6:	2203      	movs	r2, #3
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002fe8:	a904      	add	r1, sp, #16
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);

	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8002fea:	4d23      	ldr	r5, [pc, #140]	; (8003078 <limits_init+0xa4>)
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002fec:	f821 4d10 	strh.w	r4, [r1, #-16]!
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8002ff0:	4822      	ldr	r0, [pc, #136]	; (800307c <limits_init+0xa8>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8002ff2:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002ff6:	f88d 2002 	strb.w	r2, [sp, #2]
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8002ffa:	f7fe fa01 	bl	8001400 <GPIO_Init>
	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8002ffe:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
 8003002:	071b      	lsls	r3, r3, #28
 8003004:	d406      	bmi.n	8003014 <limits_init+0x40>

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8003006:	f44f 7280 	mov.w	r2, #256	; 0x100
 800300a:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <limits_init+0xac>)
 800300c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	else
	{
		limits_disable();
	}
#endif
}
 8003010:	b005      	add	sp, #20
 8003012:	bd30      	pop	{r4, r5, pc}
		delay_ms(100); // added by MS for debug (issue#14)
 8003014:	2064      	movs	r0, #100	; 0x64
 8003016:	f000 ffdd 	bl	8003fd4 <delay_ms>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, X_LIMIT_BIT);
 800301a:	210c      	movs	r1, #12
 800301c:	2001      	movs	r0, #1
 800301e:	f7fe fbed 	bl	80017fc <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Y_LIMIT_BIT);
 8003022:	210d      	movs	r1, #13
 8003024:	2001      	movs	r0, #1
 8003026:	f7fe fbe9 	bl	80017fc <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Z_LIMIT_BIT);
 800302a:	210e      	movs	r1, #14
 800302c:	2001      	movs	r0, #1
 800302e:	f7fe fbe5 	bl	80017fc <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, A_LIMIT_BIT);
 8003032:	210f      	movs	r1, #15
 8003034:	2001      	movs	r0, #1
 8003036:	f7fe fbe1 	bl	80017fc <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, B_LIMIT_BIT);
 800303a:	210b      	movs	r1, #11
 800303c:	2001      	movs	r0, #1
 800303e:	f7fe fbdd 	bl	80017fc <GPIO_EXTILineConfig>
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8003042:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8003046:	2200      	movs	r2, #0
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8003048:	f013 0f40 	tst.w	r3, #64	; 0x40
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 800304c:	bf14      	ite	ne
 800304e:	2108      	movne	r1, #8
 8003050:	210c      	moveq	r1, #12
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8003052:	2301      	movs	r3, #1
		EXTI_Init(&EXTI_InitStructure);
 8003054:	a802      	add	r0, sp, #8
 8003056:	f88d 100d 	strb.w	r1, [sp, #13]
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 800305a:	f88d 200c 	strb.w	r2, [sp, #12]
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800305e:	f88d 300e 	strb.w	r3, [sp, #14]
		EXTI_InitStructure.EXTI_Line = LIMIT_MASK;    //
 8003062:	9402      	str	r4, [sp, #8]
		EXTI_Init(&EXTI_InitStructure);
 8003064:	f7fe f882 	bl	800116c <EXTI_Init>
		NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn; //Enable keypad external interrupt channel
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <limits_init+0xb0>)
 800306a:	a804      	add	r0, sp, #16
 800306c:	f840 3d0c 	str.w	r3, [r0, #-12]!
		NVIC_Init(&NVIC_InitStructure);
 8003070:	f7fe f84a 	bl	8001108 <NVIC_Init>
}
 8003074:	b005      	add	sp, #20
 8003076:	bd30      	pop	{r4, r5, pc}
 8003078:	20001d30 	.word	0x20001d30
 800307c:	40010c00 	.word	0x40010c00
 8003080:	e000e100 	.word	0xe000e100
 8003084:	01020228 	.word	0x01020228

08003088 <limits_disable>:
 8003088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800308c:	4b01      	ldr	r3, [pc, #4]	; (8003094 <limits_disable+0xc>)
 800308e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003092:	4770      	bx	lr
 8003094:	e000e100 	.word	0xe000e100

08003098 <limits_get_state>:

// Returns limit state as a bit-wise uint8 variable. Each bit indicates an axis limit, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Axes are defined by their
// number in bit position, i.e. Z_AXIS is (1<<2) or bit 2, and Y_AXIS is (1<<1) or bit 1.
uint8_t limits_get_state()
{
 8003098:	b510      	push	{r4, lr}
#if defined(AVRTARGET) || defined(STM32F103C8)
#if defined(AVRTARGET)
  uint8_t pin = (LIMIT_PIN & LIMIT_MASK);
#endif
#if defined(STM32F103C8)
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 800309a:	4817      	ldr	r0, [pc, #92]	; (80030f8 <limits_get_state+0x60>)
 800309c:	f7fe fb66 	bl	800176c <GPIO_ReadInputData>
#endif
  #ifdef INVERT_LIMIT_PIN_MASK
    pin ^= INVERT_LIMIT_PIN_MASK;
  #endif
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 80030a0:	4b16      	ldr	r3, [pc, #88]	; (80030fc <limits_get_state+0x64>)
 80030a2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80030a6:	065b      	lsls	r3, r3, #25
 80030a8:	bf5c      	itt	pl
 80030aa:	f480 4078 	eorpl.w	r0, r0, #63488	; 0xf800
 80030ae:	b280      	uxthpl	r0, r0
  if (pin) {
 80030b0:	b300      	cbz	r0, 80030f4 <limits_get_state+0x5c>
    uint8_t idx;
    for (idx=0; idx<N_AXIS; idx++) {
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80030b2:	4a13      	ldr	r2, [pc, #76]	; (8003100 <limits_get_state+0x68>)
 80030b4:	8813      	ldrh	r3, [r2, #0]
 80030b6:	8854      	ldrh	r4, [r2, #2]
 80030b8:	4218      	tst	r0, r3
 80030ba:	bf07      	ittee	eq
 80030bc:	2300      	moveq	r3, #0
 80030be:	2102      	moveq	r1, #2
 80030c0:	2103      	movne	r1, #3
 80030c2:	2301      	movne	r3, #1
 80030c4:	4220      	tst	r0, r4
 80030c6:	bf08      	it	eq
 80030c8:	4619      	moveq	r1, r3
 80030ca:	8894      	ldrh	r4, [r2, #4]
 80030cc:	f041 0304 	orr.w	r3, r1, #4
 80030d0:	4220      	tst	r0, r4
 80030d2:	bf08      	it	eq
 80030d4:	460b      	moveq	r3, r1
 80030d6:	88d4      	ldrh	r4, [r2, #6]
 80030d8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80030dc:	4220      	tst	r0, r4
 80030de:	f043 0108 	orr.w	r1, r3, #8
 80030e2:	bf18      	it	ne
 80030e4:	460b      	movne	r3, r1
 80030e6:	8911      	ldrh	r1, [r2, #8]
 80030e8:	f043 0210 	orr.w	r2, r3, #16
 80030ec:	4208      	tst	r0, r1
 80030ee:	bf14      	ite	ne
 80030f0:	4610      	movne	r0, r2
 80030f2:	4618      	moveq	r0, r3
    }
  }
#endif
  return(limit_state);
}
 80030f4:	bd10      	pop	{r4, pc}
 80030f6:	bf00      	nop
 80030f8:	40010c00 	.word	0x40010c00
 80030fc:	20001d30 	.word	0x20001d30
 8003100:	0800c0cc 	.word	0x0800c0cc

08003104 <EXTI15_10_IRQHandler>:
#if defined(AVRTARGET)
ISR(LIMIT_INT_vect) // DEFAULT: Limit pin change interrupt process.
#else
void EXTI15_10_IRQHandler(void)
#endif
{
 8003104:	b508      	push	{r3, lr}
#if defined (STM32F103C8)
	if (EXTI_GetITStatus(1 << X_LIMIT_BIT) != RESET)
 8003106:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800310a:	f7fe f86d 	bl	80011e8 <EXTI_GetITStatus>
 800310e:	2800      	cmp	r0, #0
 8003110:	d13b      	bne.n	800318a <EXTI15_10_IRQHandler+0x86>
	{
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Y_LIMIT_BIT) != RESET)
 8003112:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003116:	f7fe f867 	bl	80011e8 <EXTI_GetITStatus>
 800311a:	bb88      	cbnz	r0, 8003180 <EXTI15_10_IRQHandler+0x7c>
	{
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Z_LIMIT_BIT) != RESET)
 800311c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003120:	f7fe f862 	bl	80011e8 <EXTI_GetITStatus>
 8003124:	bb38      	cbnz	r0, 8003176 <EXTI15_10_IRQHandler+0x72>
	{
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
	}
// --- YSV 22-06-2018
	#if defined(AA_AXIS) || defined(AB_AXIS) || defined(ABC_AXIS)
	if (EXTI_GetITStatus(1 << A_LIMIT_BIT) != RESET)
 8003126:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800312a:	f7fe f85d 	bl	80011e8 <EXTI_GetITStatus>
 800312e:	b9e8      	cbnz	r0, 800316c <EXTI15_10_IRQHandler+0x68>
	{
		EXTI_ClearITPendingBit(1 << A_LIMIT_BIT);
	}
	#endif
	#if defined(AB_AXIS) || defined(ABC_AXIS)
	if (EXTI_GetITStatus(1 << B_LIMIT_BIT) != RESET)
 8003130:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003134:	f7fe f858 	bl	80011e8 <EXTI_GetITStatus>
 8003138:	b998      	cbnz	r0, 8003162 <EXTI15_10_IRQHandler+0x5e>

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 800313a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800313e:	4a15      	ldr	r2, [pc, #84]	; (8003194 <EXTI15_10_IRQHandler+0x90>)
  // Ignore limit switches if already in an alarm state or in-process of executing an alarm.
  // When in the alarm state, Grbl should have been reset or will force a reset, so any pending
  // moves in the planner and serial buffers are all cleared and newly sent blocks will be
  // locked out until a homing cycle or a kill lock command. Allows the user to disable the hard
  // limit setting if their limits are constantly triggering after a reset and move their axes.
  if (sys.state != STATE_ALARM) {
 8003140:	4b15      	ldr	r3, [pc, #84]	; (8003198 <EXTI15_10_IRQHandler+0x94>)
 8003142:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d002      	beq.n	8003152 <EXTI15_10_IRQHandler+0x4e>
    if (!(sys_rt_exec_alarm)) {
 800314c:	4b13      	ldr	r3, [pc, #76]	; (800319c <EXTI15_10_IRQHandler+0x98>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	b103      	cbz	r3, 8003154 <EXTI15_10_IRQHandler+0x50>
 8003152:	bd08      	pop	{r3, pc}
      if (limits_get_state()) {
        mc_reset(); // Initiate system kill.
        system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
      }
#else
      mc_reset(); // Initiate system kill.
 8003154:	f000 fe4e 	bl	8003df4 <mc_reset>
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
#endif
    }
  }
}
 8003158:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
 800315c:	2001      	movs	r0, #1
 800315e:	f006 bb6d 	b.w	800983c <system_set_exec_alarm>
		EXTI_ClearITPendingBit(1 << B_LIMIT_BIT);
 8003162:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003166:	f7fe f84d 	bl	8001204 <EXTI_ClearITPendingBit>
 800316a:	e7e6      	b.n	800313a <EXTI15_10_IRQHandler+0x36>
		EXTI_ClearITPendingBit(1 << A_LIMIT_BIT);
 800316c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003170:	f7fe f848 	bl	8001204 <EXTI_ClearITPendingBit>
 8003174:	e7dc      	b.n	8003130 <EXTI15_10_IRQHandler+0x2c>
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
 8003176:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800317a:	f7fe f843 	bl	8001204 <EXTI_ClearITPendingBit>
 800317e:	e7d2      	b.n	8003126 <EXTI15_10_IRQHandler+0x22>
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
 8003180:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003184:	f7fe f83e 	bl	8001204 <EXTI_ClearITPendingBit>
 8003188:	e7c8      	b.n	800311c <EXTI15_10_IRQHandler+0x18>
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
 800318a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800318e:	f7fe f839 	bl	8001204 <EXTI_ClearITPendingBit>
 8003192:	e7be      	b.n	8003112 <EXTI15_10_IRQHandler+0xe>
 8003194:	e000e100 	.word	0xe000e100
 8003198:	20001b6c 	.word	0x20001b6c
 800319c:	20001bac 	.word	0x20001bac

080031a0 <limits_go_home>:
// mask, which prevents the stepper algorithm from executing step pulses. Homing motions typically
// circumvent the processes for executing motions in normal operation.
// NOTE: Only the abort realtime command can interrupt this process.
// TODO: Move limit pin-specific calls to a general function for portability.
void limits_go_home(uint8_t cycle_mask)
{
 80031a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sys.abort) { return; } // Block if system reset has been issued.
 80031a4:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 8003468 <limits_go_home+0x2c8>
{
 80031a8:	b097      	sub	sp, #92	; 0x5c
  if (sys.abort) { return; } // Block if system reset has been issued.
 80031aa:	f898 3001 	ldrb.w	r3, [r8, #1]
 80031ae:	b113      	cbz	r3, 80031b6 <limits_go_home+0x16>

    }
  }
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
  report_status_message(STATUS_OK);
}
 80031b0:	b017      	add	sp, #92	; 0x5c
 80031b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031b6:	4607      	mov	r7, r0
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 80031b8:	2506      	movs	r5, #6
 80031ba:	4ca4      	ldr	r4, [pc, #656]	; (800344c <limits_go_home+0x2ac>)
 80031bc:	9008      	str	r0, [sp, #32]
 80031be:	6861      	ldr	r1, [r4, #4]
 80031c0:	6820      	ldr	r0, [r4, #0]
 80031c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80031c4:	c203      	stmia	r2!, {r0, r1}
 80031c6:	8926      	ldrh	r6, [r4, #8]
    if (bit_istrue(cycle_mask,bit(idx))) {
 80031c8:	f007 0401 	and.w	r4, r7, #1
  memset(pl_data,0,sizeof(plan_line_data_t));
 80031cc:	9310      	str	r3, [sp, #64]	; 0x40
 80031ce:	930e      	str	r3, [sp, #56]	; 0x38
 80031d0:	930f      	str	r3, [sp, #60]	; 0x3c
    if (bit_istrue(cycle_mask,bit(idx))) {
 80031d2:	f004 03ff 	and.w	r3, r4, #255	; 0xff
 80031d6:	8016      	strh	r6, [r2, #0]
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 80031d8:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
    if (bit_istrue(cycle_mask,bit(idx))) {
 80031dc:	9309      	str	r3, [sp, #36]	; 0x24
 80031de:	2c00      	cmp	r4, #0
 80031e0:	f040 80f9 	bne.w	80033d6 <limits_go_home+0x236>
  float max_travel = 0.0f;
 80031e4:	f04f 0900 	mov.w	r9, #0
 80031e8:	4f99      	ldr	r7, [pc, #612]	; (8003450 <limits_go_home+0x2b0>)
    if (bit_istrue(cycle_mask,bit(idx))) {
 80031ea:	9b08      	ldr	r3, [sp, #32]
 80031ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80031f0:	9307      	str	r3, [sp, #28]
 80031f2:	b153      	cbz	r3, 800320a <limits_go_home+0x6a>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 80031f4:	4997      	ldr	r1, [pc, #604]	; (8003454 <limits_go_home+0x2b4>)
 80031f6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80031f8:	f7fd fd5a 	bl	8000cb0 <__aeabi_fmul>
 80031fc:	4605      	mov	r5, r0
 80031fe:	4601      	mov	r1, r0
 8003200:	4648      	mov	r0, r9
 8003202:	f7fd ff07 	bl	8001014 <__aeabi_fcmpge>
 8003206:	b900      	cbnz	r0, 800320a <limits_go_home+0x6a>
 8003208:	46a9      	mov	r9, r5
    if (bit_istrue(cycle_mask,bit(idx))) {
 800320a:	9b08      	ldr	r3, [sp, #32]
 800320c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003210:	9306      	str	r3, [sp, #24]
 8003212:	b153      	cbz	r3, 800322a <limits_go_home+0x8a>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003214:	498f      	ldr	r1, [pc, #572]	; (8003454 <limits_go_home+0x2b4>)
 8003216:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003218:	f7fd fd4a 	bl	8000cb0 <__aeabi_fmul>
 800321c:	4605      	mov	r5, r0
 800321e:	4601      	mov	r1, r0
 8003220:	4648      	mov	r0, r9
 8003222:	f7fd fef7 	bl	8001014 <__aeabi_fcmpge>
 8003226:	b900      	cbnz	r0, 800322a <limits_go_home+0x8a>
 8003228:	46a9      	mov	r9, r5
    if (bit_istrue(cycle_mask,bit(idx))) {
 800322a:	9b08      	ldr	r3, [sp, #32]
 800322c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003230:	9305      	str	r3, [sp, #20]
 8003232:	b153      	cbz	r3, 800324a <limits_go_home+0xaa>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003234:	4987      	ldr	r1, [pc, #540]	; (8003454 <limits_go_home+0x2b4>)
 8003236:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003238:	f7fd fd3a 	bl	8000cb0 <__aeabi_fmul>
 800323c:	4605      	mov	r5, r0
 800323e:	4601      	mov	r1, r0
 8003240:	4648      	mov	r0, r9
 8003242:	f7fd fee7 	bl	8001014 <__aeabi_fcmpge>
 8003246:	b900      	cbnz	r0, 800324a <limits_go_home+0xaa>
 8003248:	46a9      	mov	r9, r5
    if (bit_istrue(cycle_mask,bit(idx))) {
 800324a:	9b08      	ldr	r3, [sp, #32]
 800324c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003250:	9304      	str	r3, [sp, #16]
 8003252:	b153      	cbz	r3, 800326a <limits_go_home+0xca>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003254:	497f      	ldr	r1, [pc, #508]	; (8003454 <limits_go_home+0x2b4>)
 8003256:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003258:	f7fd fd2a 	bl	8000cb0 <__aeabi_fmul>
 800325c:	4605      	mov	r5, r0
 800325e:	4601      	mov	r1, r0
 8003260:	4648      	mov	r0, r9
 8003262:	f7fd fed7 	bl	8001014 <__aeabi_fcmpge>
 8003266:	b900      	cbnz	r0, 800326a <limits_go_home+0xca>
 8003268:	46a9      	mov	r9, r5
 800326a:	b2e3      	uxtb	r3, r4
 800326c:	9303      	str	r3, [sp, #12]
  float homing_rate = settings.homing_seek_rate;
 800326e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003270:	464a      	mov	r2, r9
 8003272:	4619      	mov	r1, r3
 8003274:	2304      	movs	r3, #4
  bool approach = true;
 8003276:	2401      	movs	r4, #1
 8003278:	4689      	mov	r9, r1
 800327a:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8003460 <limits_go_home+0x2c0>
 800327e:	4d76      	ldr	r5, [pc, #472]	; (8003458 <limits_go_home+0x2b8>)
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003280:	4e76      	ldr	r6, [pc, #472]	; (800345c <limits_go_home+0x2bc>)
  float homing_rate = settings.homing_seek_rate;
 8003282:	9301      	str	r3, [sp, #4]
    system_convert_array_steps_to_mpos(target,sys_position);
 8003284:	4976      	ldr	r1, [pc, #472]	; (8003460 <limits_go_home+0x2c0>)
 8003286:	a811      	add	r0, sp, #68	; 0x44
 8003288:	9202      	str	r2, [sp, #8]
 800328a:	f006 f9fd 	bl	8009688 <system_convert_array_steps_to_mpos>
      if (bit_istrue(cycle_mask,bit(idx))) {
 800328e:	9b03      	ldr	r3, [sp, #12]
 8003290:	9a02      	ldr	r2, [sp, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8190 	beq.w	80035b8 <limits_go_home+0x418>
          sys_position[idx] = 0;
 8003298:	2100      	movs	r1, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800329a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
          sys_position[idx] = 0;
 800329e:	f8ca 1000 	str.w	r1, [sl]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80032a2:	07db      	lsls	r3, r3, #31
 80032a4:	f140 819e 	bpl.w	80035e4 <limits_go_home+0x444>
          if (approach) { target[idx] = -max_travel; }
 80032a8:	2c00      	cmp	r4, #0
 80032aa:	f040 819e 	bne.w	80035ea <limits_go_home+0x44a>
          else { target[idx] = max_travel; }
 80032ae:	9211      	str	r2, [sp, #68]	; 0x44
        axislock |= step_pin[idx];
 80032b0:	2102      	movs	r1, #2
        n_active_axis++;
 80032b2:	2001      	movs	r0, #1
        axislock |= step_pin[idx];
 80032b4:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
      if (bit_istrue(cycle_mask,bit(idx))) {
 80032b8:	9b07      	ldr	r3, [sp, #28]
 80032ba:	b183      	cbz	r3, 80032de <limits_go_home+0x13e>
          sys_position[idx] = 0;
 80032bc:	2300      	movs	r3, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80032be:	f8b7 006a 	ldrh.w	r0, [r7, #106]	; 0x6a
          sys_position[idx] = 0;
 80032c2:	f8ca 3004 	str.w	r3, [sl, #4]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80032c6:	0780      	lsls	r0, r0, #30
 80032c8:	f140 8185 	bpl.w	80035d6 <limits_go_home+0x436>
          if (approach) { target[idx] = -max_travel; }
 80032cc:	2c00      	cmp	r4, #0
 80032ce:	f040 8185 	bne.w	80035dc <limits_go_home+0x43c>
          else { target[idx] = max_travel; }
 80032d2:	9212      	str	r2, [sp, #72]	; 0x48
        n_active_axis++;
 80032d4:	4608      	mov	r0, r1
        axislock |= step_pin[idx];
 80032d6:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 80032da:	ea4b 0b0e 	orr.w	fp, fp, lr
      if (bit_istrue(cycle_mask,bit(idx))) {
 80032de:	9b06      	ldr	r3, [sp, #24]
 80032e0:	b18b      	cbz	r3, 8003306 <limits_go_home+0x166>
          sys_position[idx] = 0;
 80032e2:	2300      	movs	r3, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80032e4:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
        n_active_axis++;
 80032e8:	3001      	adds	r0, #1
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80032ea:	0749      	lsls	r1, r1, #29
        n_active_axis++;
 80032ec:	b2c0      	uxtb	r0, r0
          sys_position[idx] = 0;
 80032ee:	f8ca 3008 	str.w	r3, [sl, #8]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80032f2:	f140 817e 	bpl.w	80035f2 <limits_go_home+0x452>
          if (approach) { target[idx] = -max_travel; }
 80032f6:	2c00      	cmp	r4, #0
 80032f8:	f040 817e 	bne.w	80035f8 <limits_go_home+0x458>
          else { target[idx] = max_travel; }
 80032fc:	9213      	str	r2, [sp, #76]	; 0x4c
        axislock |= step_pin[idx];
 80032fe:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8003302:	ea4b 0b01 	orr.w	fp, fp, r1
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003306:	9b05      	ldr	r3, [sp, #20]
 8003308:	b18b      	cbz	r3, 800332e <limits_go_home+0x18e>
          sys_position[idx] = 0;
 800330a:	2300      	movs	r3, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800330c:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
        n_active_axis++;
 8003310:	3001      	adds	r0, #1
          sys_position[idx] = 0;
 8003312:	f8ca 300c 	str.w	r3, [sl, #12]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003316:	070b      	lsls	r3, r1, #28
        n_active_axis++;
 8003318:	b2c0      	uxtb	r0, r0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800331a:	f140 8155 	bpl.w	80035c8 <limits_go_home+0x428>
          if (approach) { target[idx] = -max_travel; }
 800331e:	2c00      	cmp	r4, #0
 8003320:	f040 8155 	bne.w	80035ce <limits_go_home+0x42e>
          else { target[idx] = max_travel; }
 8003324:	9214      	str	r2, [sp, #80]	; 0x50
        axislock |= step_pin[idx];
 8003326:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800332a:	ea4b 0b01 	orr.w	fp, fp, r1
      if (bit_istrue(cycle_mask,bit(idx))) {
 800332e:	9b04      	ldr	r3, [sp, #16]
 8003330:	b18b      	cbz	r3, 8003356 <limits_go_home+0x1b6>
          sys_position[idx] = 0;
 8003332:	2300      	movs	r3, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003334:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
        n_active_axis++;
 8003338:	3001      	adds	r0, #1
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800333a:	06c9      	lsls	r1, r1, #27
        n_active_axis++;
 800333c:	b2c0      	uxtb	r0, r0
          sys_position[idx] = 0;
 800333e:	f8ca 3010 	str.w	r3, [sl, #16]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003342:	f100 813d 	bmi.w	80035c0 <limits_go_home+0x420>
          if (approach) { target[idx] = max_travel; }
 8003346:	b90c      	cbnz	r4, 800334c <limits_go_home+0x1ac>
          if (approach) { target[idx] = -max_travel; }
 8003348:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800334c:	9215      	str	r2, [sp, #84]	; 0x54
        axislock |= step_pin[idx];
 800334e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8003352:	ea4b 0b02 	orr.w	fp, fp, r2
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8003356:	f7fd fc53 	bl	8000c00 <__aeabi_ui2f>
 800335a:	f007 fe0d 	bl	800af78 <sqrtf>
    sys.homing_axis_lock = axislock;
 800335e:	f8a8 b006 	strh.w	fp, [r8, #6]
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8003362:	4601      	mov	r1, r0
 8003364:	4648      	mov	r0, r9
 8003366:	f7fd fca3 	bl	8000cb0 <__aeabi_fmul>
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 800336a:	a90e      	add	r1, sp, #56	; 0x38
    pl_data->feed_rate = homing_rate; // Set current homing rate.
 800336c:	900e      	str	r0, [sp, #56]	; 0x38
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 800336e:	a811      	add	r0, sp, #68	; 0x44
 8003370:	f001 f96c 	bl	800464c <plan_buffer_line>
    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 8003374:	2204      	movs	r2, #4
 8003376:	f888 2004 	strb.w	r2, [r8, #4]
    st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 800337a:	f005 f9a7 	bl	80086cc <st_prep_buffer>
    st_wake_up(); // Initiate motion
 800337e:	f004 fdc3 	bl	8007f08 <st_wake_up>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8003382:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800346c <limits_go_home+0x2cc>
      if (approach) {
 8003386:	2c00      	cmp	r4, #0
 8003388:	d172      	bne.n	8003470 <limits_go_home+0x2d0>
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 800338a:	f005 f99f 	bl	80086cc <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 800338e:	782b      	ldrb	r3, [r5, #0]
 8003390:	f013 0f34 	tst.w	r3, #52	; 0x34
 8003394:	f040 80c7 	bne.w	8003526 <limits_go_home+0x386>
    } while (STEP_MASK & axislock);
 8003398:	f240 230f 	movw	r3, #527	; 0x20f
 800339c:	ea1b 0f03 	tst.w	fp, r3
 80033a0:	d1f1      	bne.n	8003386 <limits_go_home+0x1e6>
    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 80033a2:	f005 f80b 	bl	80083bc <st_reset>
    delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 80033a6:	f8b7 0074 	ldrh.w	r0, [r7, #116]	; 0x74
 80033aa:	f000 fe13 	bl	8003fd4 <delay_ms>
 80033ae:	f084 0301 	eor.w	r3, r4, #1
    if (approach) {
 80033b2:	b9fc      	cbnz	r4, 80033f4 <limits_go_home+0x254>
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 80033b4:	492b      	ldr	r1, [pc, #172]	; (8003464 <limits_go_home+0x2c4>)
 80033b6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80033b8:	9302      	str	r3, [sp, #8]
 80033ba:	f7fd fc79 	bl	8000cb0 <__aeabi_fmul>
 80033be:	9b01      	ldr	r3, [sp, #4]
 80033c0:	4602      	mov	r2, r0
 80033c2:	1e59      	subs	r1, r3, #1
  } while (n_cycle-- > 0);
 80033c4:	f011 03ff 	ands.w	r3, r1, #255	; 0xff
 80033c8:	9301      	str	r3, [sp, #4]
      homing_rate = settings.homing_feed_rate;
 80033ca:	f8d7 906c 	ldr.w	r9, [r7, #108]	; 0x6c
  } while (n_cycle-- > 0);
 80033ce:	9b02      	ldr	r3, [sp, #8]
 80033d0:	d019      	beq.n	8003406 <limits_go_home+0x266>
  float max_travel = 0.0f;
 80033d2:	461c      	mov	r4, r3
 80033d4:	e756      	b.n	8003284 <limits_go_home+0xe4>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 80033d6:	4f1e      	ldr	r7, [pc, #120]	; (8003450 <limits_go_home+0x2b0>)
 80033d8:	491e      	ldr	r1, [pc, #120]	; (8003454 <limits_go_home+0x2b4>)
 80033da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80033dc:	f7fd fc68 	bl	8000cb0 <__aeabi_fmul>
 80033e0:	2100      	movs	r1, #0
 80033e2:	4681      	mov	r9, r0
 80033e4:	f7fd fe16 	bl	8001014 <__aeabi_fcmpge>
 80033e8:	2800      	cmp	r0, #0
 80033ea:	f47f aefe 	bne.w	80031ea <limits_go_home+0x4a>
 80033ee:	f04f 0900 	mov.w	r9, #0
 80033f2:	e6fa      	b.n	80031ea <limits_go_home+0x4a>
 80033f4:	9a01      	ldr	r2, [sp, #4]
      homing_rate = settings.homing_seek_rate;
 80033f6:	f8d7 9070 	ldr.w	r9, [r7, #112]	; 0x70
 80033fa:	1e51      	subs	r1, r2, #1
  } while (n_cycle-- > 0);
 80033fc:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
      max_travel = settings.homing_pulloff;
 8003400:	6fba      	ldr	r2, [r7, #120]	; 0x78
  } while (n_cycle-- > 0);
 8003402:	9101      	str	r1, [sp, #4]
 8003404:	d1e5      	bne.n	80033d2 <limits_go_home+0x232>
    if (cycle_mask & bit(idx)) {
 8003406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003408:	b113      	cbz	r3, 8003410 <limits_go_home+0x270>
        sys_position[idx] = set_axis_position;
 800340a:	2300      	movs	r3, #0
 800340c:	f8ca 3000 	str.w	r3, [sl]
    if (cycle_mask & bit(idx)) {
 8003410:	9b07      	ldr	r3, [sp, #28]
 8003412:	b113      	cbz	r3, 800341a <limits_go_home+0x27a>
        sys_position[idx] = set_axis_position;
 8003414:	2300      	movs	r3, #0
 8003416:	f8ca 3004 	str.w	r3, [sl, #4]
    if (cycle_mask & bit(idx)) {
 800341a:	9b06      	ldr	r3, [sp, #24]
 800341c:	b113      	cbz	r3, 8003424 <limits_go_home+0x284>
        sys_position[idx] = set_axis_position;
 800341e:	2300      	movs	r3, #0
 8003420:	f8ca 3008 	str.w	r3, [sl, #8]
    if (cycle_mask & bit(idx)) {
 8003424:	9b05      	ldr	r3, [sp, #20]
 8003426:	b113      	cbz	r3, 800342e <limits_go_home+0x28e>
        sys_position[idx] = set_axis_position;
 8003428:	2300      	movs	r3, #0
 800342a:	f8ca 300c 	str.w	r3, [sl, #12]
    if (cycle_mask & bit(idx)) {
 800342e:	9b04      	ldr	r3, [sp, #16]
 8003430:	b113      	cbz	r3, 8003438 <limits_go_home+0x298>
        sys_position[idx] = set_axis_position;
 8003432:	2300      	movs	r3, #0
 8003434:	f8ca 3010 	str.w	r3, [sl, #16]
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 8003438:	2300      	movs	r3, #0
  report_status_message(STATUS_OK);
 800343a:	4618      	mov	r0, r3
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 800343c:	f888 3004 	strb.w	r3, [r8, #4]
  report_status_message(STATUS_OK);
 8003440:	f003 f872 	bl	8006528 <report_status_message>
}
 8003444:	b017      	add	sp, #92	; 0x5c
 8003446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800344a:	bf00      	nop
 800344c:	0800c0d8 	.word	0x0800c0d8
 8003450:	20001d30 	.word	0x20001d30
 8003454:	bfc00000 	.word	0xbfc00000
 8003458:	20001b81 	.word	0x20001b81
 800345c:	0800c0cc 	.word	0x0800c0cc
 8003460:	20001b98 	.word	0x20001b98
 8003464:	40a00000 	.word	0x40a00000
 8003468:	20001b6c 	.word	0x20001b6c
 800346c:	40010c00 	.word	0x40010c00
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8003470:	4648      	mov	r0, r9
 8003472:	f7fe f97b 	bl	800176c <GPIO_ReadInputData>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8003476:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800347a:	065b      	lsls	r3, r3, #25
 800347c:	bf5c      	itt	pl
 800347e:	f480 4078 	eorpl.w	r0, r0, #63488	; 0xf800
 8003482:	b280      	uxthpl	r0, r0
  if (pin) {
 8003484:	2800      	cmp	r0, #0
 8003486:	d064      	beq.n	8003552 <limits_go_home+0x3b2>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003488:	8833      	ldrh	r3, [r6, #0]
 800348a:	8872      	ldrh	r2, [r6, #2]
 800348c:	4218      	tst	r0, r3
 800348e:	bf14      	ite	ne
 8003490:	2301      	movne	r3, #1
 8003492:	2300      	moveq	r3, #0
 8003494:	4210      	tst	r0, r2
 8003496:	88b2      	ldrh	r2, [r6, #4]
 8003498:	bf18      	it	ne
 800349a:	f043 0302 	orrne.w	r3, r3, #2
 800349e:	4210      	tst	r0, r2
 80034a0:	88f2      	ldrh	r2, [r6, #6]
 80034a2:	bf18      	it	ne
 80034a4:	f043 0304 	orrne.w	r3, r3, #4
 80034a8:	4210      	tst	r0, r2
 80034aa:	8932      	ldrh	r2, [r6, #8]
 80034ac:	bf18      	it	ne
 80034ae:	f043 0308 	orrne.w	r3, r3, #8
 80034b2:	4210      	tst	r0, r2
          if (axislock & step_pin[idx]) {
 80034b4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80034b8:	bf18      	it	ne
 80034ba:	f043 0310 	orrne.w	r3, r3, #16
          if (axislock & step_pin[idx]) {
 80034be:	ea1b 0f02 	tst.w	fp, r2
 80034c2:	d003      	beq.n	80034cc <limits_go_home+0x32c>
            if (limit_state & (1 << idx)) {
 80034c4:	07d8      	lsls	r0, r3, #31
                axislock &= ~(step_pin[idx]);
 80034c6:	bf48      	it	mi
 80034c8:	ea2b 0b02 	bicmi.w	fp, fp, r2
          if (axislock & step_pin[idx]) {
 80034cc:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80034d0:	ea1b 0f02 	tst.w	fp, r2
 80034d4:	d003      	beq.n	80034de <limits_go_home+0x33e>
            if (limit_state & (1 << idx)) {
 80034d6:	0799      	lsls	r1, r3, #30
                axislock &= ~(step_pin[idx]);
 80034d8:	bf48      	it	mi
 80034da:	ea2b 0b02 	bicmi.w	fp, fp, r2
          if (axislock & step_pin[idx]) {
 80034de:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80034e2:	ea1b 0f02 	tst.w	fp, r2
 80034e6:	d003      	beq.n	80034f0 <limits_go_home+0x350>
            if (limit_state & (1 << idx)) {
 80034e8:	0758      	lsls	r0, r3, #29
                axislock &= ~(step_pin[idx]);
 80034ea:	bf48      	it	mi
 80034ec:	ea2b 0b02 	bicmi.w	fp, fp, r2
          if (axislock & step_pin[idx]) {
 80034f0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80034f4:	ea1b 0f02 	tst.w	fp, r2
 80034f8:	d003      	beq.n	8003502 <limits_go_home+0x362>
            if (limit_state & (1 << idx)) {
 80034fa:	0719      	lsls	r1, r3, #28
 80034fc:	d501      	bpl.n	8003502 <limits_go_home+0x362>
                axislock &= ~(step_pin[idx]);
 80034fe:	ea2b 0b02 	bic.w	fp, fp, r2
          if (axislock & step_pin[idx]) {
 8003502:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8003506:	ea1b 0f02 	tst.w	fp, r2
 800350a:	d003      	beq.n	8003514 <limits_go_home+0x374>
            if (limit_state & (1 << idx)) {
 800350c:	091b      	lsrs	r3, r3, #4
                axislock &= ~(step_pin[idx]);
 800350e:	bf18      	it	ne
 8003510:	ea2b 0b02 	bicne.w	fp, fp, r2
        sys.homing_axis_lock = axislock;
 8003514:	f8a8 b006 	strh.w	fp, [r8, #6]
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 8003518:	f005 f8d8 	bl	80086cc <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 800351c:	782b      	ldrb	r3, [r5, #0]
 800351e:	f013 0f34 	tst.w	r3, #52	; 0x34
 8003522:	f43f af39 	beq.w	8003398 <limits_go_home+0x1f8>
        uint8_t rt_exec = sys_rt_exec_state;
 8003526:	f895 9000 	ldrb.w	r9, [r5]
 800352a:	fa5f f989 	uxtb.w	r9, r9
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 800352e:	f019 0f10 	tst.w	r9, #16
 8003532:	d165      	bne.n	8003600 <limits_go_home+0x460>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 8003534:	f019 0f20 	tst.w	r9, #32
 8003538:	d10d      	bne.n	8003556 <limits_go_home+0x3b6>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 800353a:	b18c      	cbz	r4, 8003560 <limits_go_home+0x3c0>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 800353c:	f019 0f04 	tst.w	r9, #4
 8003540:	d162      	bne.n	8003608 <limits_go_home+0x468>
        if (sys_rt_exec_alarm) {
 8003542:	4b36      	ldr	r3, [pc, #216]	; (800361c <limits_go_home+0x47c>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d162      	bne.n	8003610 <limits_go_home+0x470>
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 800354a:	2004      	movs	r0, #4
 800354c:	f006 f96c 	bl	8009828 <system_clear_exec_state_flag>
          break;
 8003550:	e727      	b.n	80033a2 <limits_go_home+0x202>
  if (pin) {
 8003552:	4603      	mov	r3, r0
 8003554:	e7d5      	b.n	8003502 <limits_go_home+0x362>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 8003556:	2007      	movs	r0, #7
 8003558:	f006 f970 	bl	800983c <system_set_exec_alarm>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 800355c:	2c00      	cmp	r4, #0
 800355e:	d1ed      	bne.n	800353c <limits_go_home+0x39c>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8003560:	482f      	ldr	r0, [pc, #188]	; (8003620 <limits_go_home+0x480>)
 8003562:	f7fe f903 	bl	800176c <GPIO_ReadInputData>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8003566:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800356a:	065b      	lsls	r3, r3, #25
 800356c:	bf5c      	itt	pl
 800356e:	f480 4078 	eorpl.w	r0, r0, #63488	; 0xf800
 8003572:	b280      	uxthpl	r0, r0
  if (pin) {
 8003574:	2800      	cmp	r0, #0
 8003576:	d0e4      	beq.n	8003542 <limits_go_home+0x3a2>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003578:	8833      	ldrh	r3, [r6, #0]
 800357a:	8872      	ldrh	r2, [r6, #2]
 800357c:	4218      	tst	r0, r3
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	4210      	tst	r0, r2
 8003586:	88b2      	ldrh	r2, [r6, #4]
 8003588:	bf18      	it	ne
 800358a:	f043 0302 	orrne.w	r3, r3, #2
 800358e:	4210      	tst	r0, r2
 8003590:	88f2      	ldrh	r2, [r6, #6]
 8003592:	bf18      	it	ne
 8003594:	f043 0304 	orrne.w	r3, r3, #4
 8003598:	4210      	tst	r0, r2
 800359a:	8932      	ldrh	r2, [r6, #8]
 800359c:	bf18      	it	ne
 800359e:	f043 0308 	orrne.w	r3, r3, #8
 80035a2:	4210      	tst	r0, r2
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80035a4:	9a08      	ldr	r2, [sp, #32]
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80035a6:	bf18      	it	ne
 80035a8:	f043 0310 	orrne.w	r3, r3, #16
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80035ac:	421a      	tst	r2, r3
 80035ae:	d0c8      	beq.n	8003542 <limits_go_home+0x3a2>
 80035b0:	2008      	movs	r0, #8
 80035b2:	f006 f943 	bl	800983c <system_set_exec_alarm>
 80035b6:	e7c4      	b.n	8003542 <limits_go_home+0x3a2>
 80035b8:	469b      	mov	fp, r3
    n_active_axis = 0;
 80035ba:	4618      	mov	r0, r3
      if (bit_istrue(cycle_mask,bit(idx))) {
 80035bc:	2101      	movs	r1, #1
 80035be:	e67b      	b.n	80032b8 <limits_go_home+0x118>
          if (approach) { target[idx] = -max_travel; }
 80035c0:	2c00      	cmp	r4, #0
 80035c2:	f43f aec3 	beq.w	800334c <limits_go_home+0x1ac>
 80035c6:	e6bf      	b.n	8003348 <limits_go_home+0x1a8>
          if (approach) { target[idx] = max_travel; }
 80035c8:	2c00      	cmp	r4, #0
 80035ca:	f47f aeab 	bne.w	8003324 <limits_go_home+0x184>
          if (approach) { target[idx] = -max_travel; }
 80035ce:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 80035d2:	9114      	str	r1, [sp, #80]	; 0x50
 80035d4:	e6a7      	b.n	8003326 <limits_go_home+0x186>
          if (approach) { target[idx] = max_travel; }
 80035d6:	2c00      	cmp	r4, #0
 80035d8:	f47f ae7b 	bne.w	80032d2 <limits_go_home+0x132>
          if (approach) { target[idx] = -max_travel; }
 80035dc:	f102 4000 	add.w	r0, r2, #2147483648	; 0x80000000
 80035e0:	9012      	str	r0, [sp, #72]	; 0x48
 80035e2:	e677      	b.n	80032d4 <limits_go_home+0x134>
          if (approach) { target[idx] = max_travel; }
 80035e4:	2c00      	cmp	r4, #0
 80035e6:	f47f ae62 	bne.w	80032ae <limits_go_home+0x10e>
          if (approach) { target[idx] = -max_travel; }
 80035ea:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 80035ee:	9311      	str	r3, [sp, #68]	; 0x44
 80035f0:	e65e      	b.n	80032b0 <limits_go_home+0x110>
          if (approach) { target[idx] = max_travel; }
 80035f2:	2c00      	cmp	r4, #0
 80035f4:	f47f ae82 	bne.w	80032fc <limits_go_home+0x15c>
          if (approach) { target[idx] = -max_travel; }
 80035f8:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 80035fc:	9113      	str	r1, [sp, #76]	; 0x4c
 80035fe:	e67e      	b.n	80032fe <limits_go_home+0x15e>
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003600:	2006      	movs	r0, #6
 8003602:	f006 f91b 	bl	800983c <system_set_exec_alarm>
 8003606:	e795      	b.n	8003534 <limits_go_home+0x394>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 8003608:	2009      	movs	r0, #9
 800360a:	f006 f917 	bl	800983c <system_set_exec_alarm>
 800360e:	e798      	b.n	8003542 <limits_go_home+0x3a2>
          mc_reset(); // Stop motors, if they are running.
 8003610:	f000 fbf0 	bl	8003df4 <mc_reset>
          protocol_execute_realtime();
 8003614:	f002 fab6 	bl	8005b84 <protocol_execute_realtime>
          return;
 8003618:	e5ca      	b.n	80031b0 <limits_go_home+0x10>
 800361a:	bf00      	nop
 800361c:	20001bac 	.word	0x20001bac
 8003620:	40010c00 	.word	0x40010c00

08003624 <limits_soft_check>:

// Performs a soft limit check. Called from mc_line() only. Assumes the machine has been homed,
// the workspace volume is in all negative space, and the system is in normal operation.
// NOTE: Used by jogging to limit travel within soft-limit volume.
void limits_soft_check(float *target)
{
 8003624:	b510      	push	{r4, lr}
  if (system_check_travel_limits(target)) {
 8003626:	f006 f859 	bl	80096dc <system_check_travel_limits>
 800362a:	b1c8      	cbz	r0, 8003660 <limits_soft_check+0x3c>
    sys.soft_limit = true;
 800362c:	2301      	movs	r3, #1
 800362e:	4c0d      	ldr	r4, [pc, #52]	; (8003664 <limits_soft_check+0x40>)
    // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
    // workspace volume so just come to a controlled stop so position is not lost. When complete
    // enter alarm mode.
    if (sys.state == STATE_CYCLE) {
 8003630:	7820      	ldrb	r0, [r4, #0]
    sys.soft_limit = true;
 8003632:	70e3      	strb	r3, [r4, #3]
    if (sys.state == STATE_CYCLE) {
 8003634:	2808      	cmp	r0, #8
 8003636:	d008      	beq.n	800364a <limits_soft_check+0x26>
      do {
        protocol_execute_realtime();
        if (sys.abort) { return; }
      } while ( sys.state != STATE_IDLE );
    }
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 8003638:	f000 fbdc 	bl	8003df4 <mc_reset>
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
 800363c:	2002      	movs	r0, #2
 800363e:	f006 f8fd 	bl	800983c <system_set_exec_alarm>
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
    return;
  }
}
 8003642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 8003646:	f002 ba9d 	b.w	8005b84 <protocol_execute_realtime>
      system_set_exec_state_flag(EXEC_FEED_HOLD);
 800364a:	f006 f8e3 	bl	8009814 <system_set_exec_state_flag>
 800364e:	e002      	b.n	8003656 <limits_soft_check+0x32>
      } while ( sys.state != STATE_IDLE );
 8003650:	7823      	ldrb	r3, [r4, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <limits_soft_check+0x14>
        protocol_execute_realtime();
 8003656:	f002 fa95 	bl	8005b84 <protocol_execute_realtime>
        if (sys.abort) { return; }
 800365a:	7863      	ldrb	r3, [r4, #1]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f7      	beq.n	8003650 <limits_soft_check+0x2c>
 8003660:	bd10      	pop	{r4, pc}
 8003662:	bf00      	nop
 8003664:	20001b6c 	.word	0x20001b6c

08003668 <main>:
#ifdef WIN32
int main(int argc, char *argv[])
#else
int main(void)
#endif
{
 8003668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(STM32F103C8)
  // GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE); // ??? Disable JTAG and SWD!?? Bug?
#ifdef LEDBLINK
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800366c:	2101      	movs	r1, #1
{
 800366e:	b083      	sub	sp, #12
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003670:	2010      	movs	r0, #16
 8003672:	f7fe f8e1 	bl	8001838 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8003676:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800367a:	2310      	movs	r3, #16
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 800367c:	2202      	movs	r2, #2
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 800367e:	a902      	add	r1, sp, #8
 8003680:	f821 0d04 	strh.w	r0, [r1, #-4]!
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003684:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003688:	f500 4070 	add.w	r0, r0, #61440	; 0xf000
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800368c:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8003690:	f88d 2006 	strb.w	r2, [sp, #6]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003694:	f7fd feb4 	bl	8001400 <GPIO_Init>
#endif
  // Set_System();
#ifndef USEUSB
  USART1_Configuration(BAUD_RATE);
#else
  Set_USBClock();
 8003698:	f007 f86a 	bl	800a770 <Set_USBClock>
  USB_Interrupts_Config();
 800369c:	f007 f874 	bl	800a788 <USB_Interrupts_Config>
  USB_Init();
 80036a0:	f006 fe1a 	bl	800a2d8 <USB_Init>
#endif

#ifndef NOEEPROMSUPPORT
  FLASH_Unlock();
 80036a4:	f7fd fdb4 	bl	8001210 <FLASH_Unlock>
  eeprom_init();
 80036a8:	f7fe fa2c 	bl	8001b04 <eeprom_init>
#endif
  SysTick->CTRL &= 0xfffffffb;
 80036ac:	492d      	ldr	r1, [pc, #180]	; (8003764 <main+0xfc>)

    // Reset system variables.
    uint8_t prior_state = sys.state;
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
    sys.state = prior_state;
    sys.f_override = DEFAULT_FEED_OVERRIDE;                    // Set to 100%
 80036ae:	f04f 0864 	mov.w	r8, #100	; 0x64
  SysTick->CTRL &= 0xfffffffb;
 80036b2:	680a      	ldr	r2, [r1, #0]
  sys.state = STATE_IDLE;
 80036b4:	4d2c      	ldr	r5, [pc, #176]	; (8003768 <main+0x100>)
  SysTick->CTRL &= 0xfffffffb;
 80036b6:	f022 0204 	bic.w	r2, r2, #4
 80036ba:	600a      	str	r2, [r1, #0]
  serial_init(); // Setup serial baud rate and interrupts
 80036bc:	f003 fdb2 	bl	8007224 <serial_init>
  settings_init(); // Load Grbl settings from EEPROM
 80036c0:	f004 f938 	bl	8007934 <settings_init>
  stepper_init();  // Configure stepper pins and interrupt timers
 80036c4:	f004 ff2a 	bl	800851c <stepper_init>
  system_init();   // Configure pinout pins and pin-change interrupt
 80036c8:	f005 fd6e 	bl	80091a8 <system_init>
  memset(sys_position, 0, sizeof(sys_position)); // Clear machine position.
 80036cc:	2100      	movs	r1, #0
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 80036ce:	460c      	mov	r4, r1
  if (bit_istrue(settings.flags, BITFLAG_HOMING_ENABLE))
 80036d0:	4a26      	ldr	r2, [pc, #152]	; (800376c <main+0x104>)
  memset(sys_position, 0, sizeof(sys_position)); // Clear machine position.
 80036d2:	4827      	ldr	r0, [pc, #156]	; (8003770 <main+0x108>)
  if (bit_istrue(settings.flags, BITFLAG_HOMING_ENABLE))
 80036d4:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 80036d8:	4e26      	ldr	r6, [pc, #152]	; (8003774 <main+0x10c>)
 80036da:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8003780 <main+0x118>
 80036de:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8003784 <main+0x11c>
 80036e2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8003788 <main+0x120>
 80036e6:	4f24      	ldr	r7, [pc, #144]	; (8003778 <main+0x110>)
 80036e8:	f3c2 1200 	ubfx	r2, r2, #4, #1
  memset(sys_position, 0, sizeof(sys_position)); // Clear machine position.
 80036ec:	6001      	str	r1, [r0, #0]
 80036ee:	6041      	str	r1, [r0, #4]
 80036f0:	6081      	str	r1, [r0, #8]
 80036f2:	60c1      	str	r1, [r0, #12]
 80036f4:	6101      	str	r1, [r0, #16]
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;    // Set to 100%
    memset(sys_probe_position, 0, sizeof(sys_probe_position)); // Clear probe position.
    sys_probe_state = 0;
    sys_rt_exec_state = 0;
    sys_rt_exec_alarm = 0;
    sys_rt_exec_motion_override = 0;
 80036f6:	4b21      	ldr	r3, [pc, #132]	; (800377c <main+0x114>)
    sys_probe_state = 0;
 80036f8:	f88b 4000 	strb.w	r4, [fp]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 80036fc:	60ac      	str	r4, [r5, #8]
    sys_rt_exec_state = 0;
 80036fe:	f88a 4000 	strb.w	r4, [sl]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8003702:	602c      	str	r4, [r5, #0]
    sys_rt_exec_alarm = 0;
 8003704:	f889 4000 	strb.w	r4, [r9]
    sys.state = prior_state;
 8003708:	702a      	strb	r2, [r5, #0]
    sys_rt_exec_motion_override = 0;
 800370a:	701c      	strb	r4, [r3, #0]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 800370c:	606c      	str	r4, [r5, #4]
 800370e:	60ec      	str	r4, [r5, #12]
 8003710:	612c      	str	r4, [r5, #16]
    sys.f_override = DEFAULT_FEED_OVERRIDE;                    // Set to 100%
 8003712:	f885 8008 	strb.w	r8, [r5, #8]
    sys.r_override = DEFAULT_RAPID_OVERRIDE;                   // Set to 100%
 8003716:	f885 8009 	strb.w	r8, [r5, #9]
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;    // Set to 100%
 800371a:	f885 800a 	strb.w	r8, [r5, #10]
    memset(sys_probe_position, 0, sizeof(sys_probe_position)); // Clear probe position.
 800371e:	6034      	str	r4, [r6, #0]
 8003720:	6074      	str	r4, [r6, #4]
 8003722:	60b4      	str	r4, [r6, #8]
 8003724:	60f4      	str	r4, [r6, #12]
 8003726:	6134      	str	r4, [r6, #16]
    sys_rt_exec_accessory_override = 0;
 8003728:	703c      	strb	r4, [r7, #0]

    // Reset Grbl primary systems.
    serial_reset_read_buffer(); // Clear serial read buffer
 800372a:	f003 fe8b 	bl	8007444 <serial_reset_read_buffer>
    gc_init();                  // Set g-code parser to default state
 800372e:	f7fe fa87 	bl	8001c40 <gc_init>
    settings_init();
 8003732:	f004 f8ff 	bl	8007934 <settings_init>
    spindle_init();
 8003736:	f004 f99f 	bl	8007a78 <spindle_init>
    coolant_init();
 800373a:	f7fe f96f 	bl	8001a1c <coolant_init>
    limits_init();
 800373e:	f7ff fc49 	bl	8002fd4 <limits_init>
    probe_init();
 8003742:	f001 fc99 	bl	8005078 <probe_init>
    plan_reset(); // Clear block buffer and planner variables
 8003746:	f000 fe51 	bl	80043ec <plan_reset>
    st_reset();   // Clear stepper subsystem variables.
 800374a:	f004 fe37 	bl	80083bc <st_reset>

    // Sync cleared gcode and planner positions to current system position.
    plan_sync_position();
 800374e:	f001 fa17 	bl	8004b80 <plan_sync_position>
    gc_sync_position();
 8003752:	f7fe fa8b 	bl	8001c6c <gc_sync_position>

    // Print welcome message. Indicates an initialization has occured at power-up or with a reset.
    report_init_message();
 8003756:	f002 ff79 	bl	800664c <report_init_message>

    // Start Grbl main loop. Processes program inputs and executes them.
    protocol_main_loop();
 800375a:	f002 fe2b 	bl	80063b4 <protocol_main_loop>
 800375e:	782a      	ldrb	r2, [r5, #0]
 8003760:	e7c9      	b.n	80036f6 <main+0x8e>
 8003762:	bf00      	nop
 8003764:	e000e010 	.word	0xe000e010
 8003768:	20001b6c 	.word	0x20001b6c
 800376c:	20001d30 	.word	0x20001d30
 8003770:	20001b98 	.word	0x20001b98
 8003774:	20001b84 	.word	0x20001b84
 8003778:	20001b80 	.word	0x20001b80
 800377c:	20001b68 	.word	0x20001b68
 8003780:	20001b82 	.word	0x20001b82
 8003784:	20001b81 	.word	0x20001b81
 8003788:	20001bac 	.word	0x20001bac

0800378c <_delay_ms>:
}
#if defined(STM32F103C8)
void _delay_ms(uint32_t x)
{
  u32 temp;
  SysTick->LOAD = (u32)72000000 / 8000 * x; // Loading time
 800378c:	f242 3128 	movw	r1, #9000	; 0x2328
 8003790:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <_delay_ms+0x2c>)
{
 8003792:	b430      	push	{r4, r5}
  SysTick->VAL = 0x00;                      // Empty the counter
 8003794:	2500      	movs	r5, #0
  SysTick->CTRL = 0x01;                     // Start from bottom
 8003796:	2401      	movs	r4, #1
  do
  {
    temp = SysTick->CTRL;
 8003798:	461a      	mov	r2, r3
  SysTick->LOAD = (u32)72000000 / 8000 * x; // Loading time
 800379a:	fb01 f000 	mul.w	r0, r1, r0
 800379e:	6058      	str	r0, [r3, #4]
  SysTick->VAL = 0x00;                      // Empty the counter
 80037a0:	609d      	str	r5, [r3, #8]
  SysTick->CTRL = 0x01;                     // Start from bottom
 80037a2:	601c      	str	r4, [r3, #0]
    temp = SysTick->CTRL;
 80037a4:	6813      	ldr	r3, [r2, #0]
  } while ((temp & 0x01) && !(temp & (1 << 16))); // Wait time arrive
 80037a6:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d0fa      	beq.n	80037a4 <_delay_ms+0x18>
  SysTick->CTRL = 0x00; // Close the counter
 80037ae:	2300      	movs	r3, #0
  SysTick->VAL = 0X00;  // Empty the counter
}
 80037b0:	bc30      	pop	{r4, r5}
  SysTick->CTRL = 0x00; // Close the counter
 80037b2:	6013      	str	r3, [r2, #0]
  SysTick->VAL = 0X00;  // Empty the counter
 80037b4:	6093      	str	r3, [r2, #8]
}
 80037b6:	4770      	bx	lr
 80037b8:	e000e010 	.word	0xe000e010

080037bc <LedBlink>:
void LedBlink(void)
{
 80037bc:	b510      	push	{r4, lr}
  static BitAction nOnFlag = Bit_SET;
  GPIO_WriteBit(GPIOC, GPIO_Pin_13, nOnFlag);
 80037be:	4c07      	ldr	r4, [pc, #28]	; (80037dc <LedBlink+0x20>)
 80037c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037c4:	7822      	ldrb	r2, [r4, #0]
 80037c6:	4806      	ldr	r0, [pc, #24]	; (80037e0 <LedBlink+0x24>)
 80037c8:	f7fd ffdc 	bl	8001784 <GPIO_WriteBit>
  nOnFlag = (nOnFlag == Bit_SET) ? Bit_RESET : Bit_SET;
 80037cc:	7823      	ldrb	r3, [r4, #0]
 80037ce:	f113 33ff 	adds.w	r3, r3, #4294967295
 80037d2:	bf18      	it	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	7023      	strb	r3, [r4, #0]
 80037d8:	bd10      	pop	{r4, pc}
 80037da:	bf00      	nop
 80037dc:	20000000 	.word	0x20000000
 80037e0:	40011000 	.word	0x40011000

080037e4 <mc_line>:
// NOTE: This is the primary gateway to the grbl planner. All line motions, including arc line
// segments, must pass through this routine before being passed to the planner. The seperation of
// mc_line and plan_buffer_line is done primarily to place non-planner-type functions from being
// in the planner and to let backlash compensation or canned cycle integration simple and direct.
void mc_line(float *target, plan_line_data_t *pl_data)
{
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If enabled, check for soft limit violations. Placed here all line motions are picked up
  // from everywhere in Grbl.
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80037e6:	4d17      	ldr	r5, [pc, #92]	; (8003844 <mc_line+0x60>)
{
 80037e8:	460e      	mov	r6, r1
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80037ea:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
{
 80037ee:	4607      	mov	r7, r0
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80037f0:	0699      	lsls	r1, r3, #26
    // NOTE: Block jog state. Jogging is a special case and soft limits are handled independently.
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 80037f2:	4c15      	ldr	r4, [pc, #84]	; (8003848 <mc_line+0x64>)
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80037f4:	d504      	bpl.n	8003800 <mc_line+0x1c>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 80037f6:	7823      	ldrb	r3, [r4, #0]
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d00a      	beq.n	8003812 <mc_line+0x2e>
 80037fc:	f7ff ff12 	bl	8003624 <limits_soft_check>
  }

  // If in check gcode mode, prevent motion by blocking planner. Soft limits still work.
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003800:	7823      	ldrb	r3, [r4, #0]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d105      	bne.n	8003812 <mc_line+0x2e>
 8003806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // If the buffer is full: good! That means we are well ahead of the robot.
  // Remain in this loop until there is room in the buffer.
  do {
    protocol_execute_realtime(); // Check for any run-time commands
    if (sys.abort) { return; } // Bail, if system abort.
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003808:	f000 fe60 	bl	80044cc <plan_check_full_buffer>
 800380c:	b138      	cbz	r0, 800381e <mc_line+0x3a>
 800380e:	f001 fca3 	bl	8005158 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003812:	f002 f9b7 	bl	8005b84 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003816:	7863      	ldrb	r3, [r4, #1]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f5      	beq.n	8003808 <mc_line+0x24>
 800381c:	e7f3      	b.n	8003806 <mc_line+0x22>
    else { break; }
  } while (1);

  // Plan and queue motion into planner buffer
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 800381e:	4638      	mov	r0, r7
 8003820:	4631      	mov	r1, r6
 8003822:	f000 ff13 	bl	800464c <plan_buffer_line>
 8003826:	2800      	cmp	r0, #0
 8003828:	d1ed      	bne.n	8003806 <mc_line+0x22>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 800382a:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
 800382e:	079a      	lsls	r2, r3, #30
 8003830:	d5e9      	bpl.n	8003806 <mc_line+0x22>
			// Correctly set spindle state, if there is a coincident position passed. Forces a buffer
			// sync while in M3 laser mode only.
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003832:	7a33      	ldrb	r3, [r6, #8]
 8003834:	06db      	lsls	r3, r3, #27
 8003836:	d5e6      	bpl.n	8003806 <mc_line+0x22>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003838:	6871      	ldr	r1, [r6, #4]
 800383a:	2010      	movs	r0, #16
			}
		}
	}
}
 800383c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003840:	f004 baac 	b.w	8007d9c <spindle_sync>
 8003844:	20001d30 	.word	0x20001d30
 8003848:	20001b6c 	.word	0x20001b6c
 800384c:	00000000 	.word	0x00000000

08003850 <mc_arc>:
// The arc is approximated by generating a huge number of tiny, linear segments. The chordal tolerance
// of each segment is configured in settings.arc_tolerance, which is defined to be the maximum normal
// distance from segment to the circle when the end points both lie on the circle.
void mc_arc(float *target, plan_line_data_t *pl_data, float *position, float *offset, float radius,
  uint8_t axis_0, uint8_t axis_1, uint8_t axis_linear, uint8_t is_clockwise_arc)
{
 8003850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003854:	461f      	mov	r7, r3
 8003856:	b091      	sub	sp, #68	; 0x44
 8003858:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 800385c:	4683      	mov	fp, r0
  float center_axis0 = position[axis_0] + offset[axis_0];
 800385e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8003862:	00a3      	lsls	r3, r4, #2
 8003864:	18d6      	adds	r6, r2, r3
{
 8003866:	900f      	str	r0, [sp, #60]	; 0x3c
 8003868:	910b      	str	r1, [sp, #44]	; 0x2c
  float center_axis0 = position[axis_0] + offset[axis_0];
 800386a:	4628      	mov	r0, r5
 800386c:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8003870:	9602      	str	r6, [sp, #8]
 8003872:	18fe      	adds	r6, r7, r3
 8003874:	9207      	str	r2, [sp, #28]
 8003876:	960c      	str	r6, [sp, #48]	; 0x30
 8003878:	f7fd f912 	bl	8000aa0 <__addsf3>
{
 800387c:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003880:	9a07      	ldr	r2, [sp, #28]
 8003882:	f857 8026 	ldr.w	r8, [r7, r6, lsl #2]
 8003886:	00b3      	lsls	r3, r6, #2
 8003888:	441f      	add	r7, r3
 800388a:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
  float center_axis0 = position[axis_0] + offset[axis_0];
 800388e:	4682      	mov	sl, r0
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003890:	441a      	add	r2, r3
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003892:	9003      	str	r0, [sp, #12]
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003894:	4640      	mov	r0, r8
 8003896:	9204      	str	r2, [sp, #16]
 8003898:	970d      	str	r7, [sp, #52]	; 0x34
 800389a:	f7fd f901 	bl	8000aa0 <__addsf3>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
  float r_axis1 = -offset[axis_1];
  float rt_axis0 = target[axis_0] - center_axis0;
 800389e:	4651      	mov	r1, sl
  float center_axis1 = position[axis_1] + offset[axis_1];
 80038a0:	4681      	mov	r9, r0
 80038a2:	9005      	str	r0, [sp, #20]
  float rt_axis0 = target[axis_0] - center_axis0;
 80038a4:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 80038a8:	f7fd f8f8 	bl	8000a9c <__aeabi_fsub>
  float rt_axis1 = target[axis_1] - center_axis1;
 80038ac:	4649      	mov	r1, r9
  float rt_axis0 = target[axis_0] - center_axis0;
 80038ae:	4604      	mov	r4, r0
  float rt_axis1 = target[axis_1] - center_axis1;
 80038b0:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 80038b4:	f7fd f8f2 	bl	8000a9c <__aeabi_fsub>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 80038b8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  float rt_axis1 = target[axis_1] - center_axis1;
 80038bc:	4606      	mov	r6, r0

  // CCW angle between position and target from circle center. Only one atan2() trig computation required.
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 80038be:	4621      	mov	r1, r4
 80038c0:	4628      	mov	r0, r5
 80038c2:	f7fd f9f5 	bl	8000cb0 <__aeabi_fmul>
  float r_axis1 = -offset[axis_1];
 80038c6:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 80038ca:	4607      	mov	r7, r0
 80038cc:	4631      	mov	r1, r6
 80038ce:	4640      	mov	r0, r8
 80038d0:	f7fd f9ee 	bl	8000cb0 <__aeabi_fmul>
 80038d4:	4601      	mov	r1, r0
 80038d6:	4638      	mov	r0, r7
 80038d8:	f7fd f8e2 	bl	8000aa0 <__addsf3>
 80038dc:	4631      	mov	r1, r6
 80038de:	4681      	mov	r9, r0
 80038e0:	4628      	mov	r0, r5
 80038e2:	f7fd f9e5 	bl	8000cb0 <__aeabi_fmul>
 80038e6:	4621      	mov	r1, r4
 80038e8:	4606      	mov	r6, r0
 80038ea:	4640      	mov	r0, r8
 80038ec:	f7fd f9e0 	bl	8000cb0 <__aeabi_fmul>
 80038f0:	4601      	mov	r1, r0
 80038f2:	4630      	mov	r0, r6
 80038f4:	f7fd f8d2 	bl	8000a9c <__aeabi_fsub>
 80038f8:	4649      	mov	r1, r9
 80038fa:	f007 fb3b 	bl	800af74 <atan2f>
{
 80038fe:	f89d 7078 	ldrb.w	r7, [sp, #120]	; 0x78
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003902:	4606      	mov	r6, r0
{
 8003904:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8003906:	f89d 9074 	ldrb.w	r9, [sp, #116]	; 0x74
  if (is_clockwise_arc) { // Correct atan2 output per direction
 800390a:	2f00      	cmp	r7, #0
 800390c:	f000 80d0 	beq.w	8003ab0 <mc_arc+0x260>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8003910:	f7fc fd82 	bl	8000418 <__aeabi_f2d>
 8003914:	a3a8      	add	r3, pc, #672	; (adr r3, 8003bb8 <mc_arc+0x368>)
 8003916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391a:	4682      	mov	sl, r0
 800391c:	468b      	mov	fp, r1
 800391e:	f7fd f855 	bl	80009cc <__aeabi_dcmpge>
 8003922:	2800      	cmp	r0, #0
 8003924:	f040 80e9 	bne.w	8003afa <mc_arc+0x2aa>
  // NOTE: Segment end points are on the arc, which can lead to the arc diameter being smaller by up to
  // (2x) settings.arc_tolerance. For 99% of users, this is just fine. If a different arc segment fit
  // is desired, i.e. least-squares, midpoint on arc, just change the mm_per_arc_segment calculation.
  // For the intended uses of Grbl, this value shouldn't exceed 2000 for the strictest of cases.
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8003928:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8003bdc <mc_arc+0x38c>
 800392c:	4621      	mov	r1, r4
 800392e:	f8db 705c 	ldr.w	r7, [fp, #92]	; 0x5c
 8003932:	4620      	mov	r0, r4
 8003934:	f7fd f8b4 	bl	8000aa0 <__addsf3>
 8003938:	4639      	mov	r1, r7
 800393a:	f7fd f8af 	bl	8000a9c <__aeabi_fsub>
 800393e:	4639      	mov	r1, r7
 8003940:	f7fd f9b6 	bl	8000cb0 <__aeabi_fmul>
 8003944:	f007 fb18 	bl	800af78 <sqrtf>
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 8003948:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 800394c:	4607      	mov	r7, r0
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 800394e:	4620      	mov	r0, r4
 8003950:	f7fd f9ae 	bl	8000cb0 <__aeabi_fmul>
 8003954:	4631      	mov	r1, r6
 8003956:	f7fd f9ab 	bl	8000cb0 <__aeabi_fmul>
 800395a:	4639      	mov	r1, r7
 800395c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003960:	f7fd fa5a 	bl	8000e18 <__aeabi_fdiv>
 8003964:	f007 fa64 	bl	800ae30 <floorf>
 8003968:	f7fd fba4 	bl	80010b4 <__aeabi_f2uiz>
 800396c:	b283      	uxth	r3, r0
 800396e:	9301      	str	r3, [sp, #4]

  if (segments) {
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 816b 	beq.w	8003c4c <mc_arc+0x3fc>
    // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
    // by a number of discrete segments. The inverse feed_rate should be correct for the sum of
    // all segments.
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 8003976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      pl_data->feed_rate *= segments; 
 8003978:	9801      	ldr	r0, [sp, #4]
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 800397a:	7a1c      	ldrb	r4, [r3, #8]
 800397c:	0722      	lsls	r2, r4, #28
 800397e:	f100 80ae 	bmi.w	8003ade <mc_arc+0x28e>
 8003982:	f7fd f941 	bl	8000c08 <__aeabi_i2f>
 8003986:	4607      	mov	r7, r0
 8003988:	4639      	mov	r1, r7
 800398a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800398e:	f7fd fa43 	bl	8000e18 <__aeabi_fdiv>
 8003992:	4604      	mov	r4, r0
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
    }
    
    float theta_per_segment = angular_travel/segments;
 8003994:	4601      	mov	r1, r0
 8003996:	4630      	mov	r0, r6
 8003998:	f7fd f98a 	bl	8000cb0 <__aeabi_fmul>
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 800399c:	9b07      	ldr	r3, [sp, #28]
 800399e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80039a0:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
    float theta_per_segment = angular_travel/segments;
 80039a4:	4607      	mov	r7, r0
 80039a6:	900e      	str	r0, [sp, #56]	; 0x38
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80039a8:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 80039ac:	f7fd f876 	bl	8000a9c <__aeabi_fsub>
 80039b0:	4621      	mov	r1, r4
 80039b2:	f7fd f97d 	bl	8000cb0 <__aeabi_fmul>
       without the initial overhead of computing cos() or sin(). By the time the arc needs to be applied
       a correction, the planner should have caught up to the lag caused by the initial mc_arc overhead.
       This is important when there are successive arc motions.
    */
    // Computes: cos_T = 1 - theta_per_segment^2/2, sin_T = theta_per_segment - theta_per_segment^3/6) in ~52usec
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 80039b6:	4639      	mov	r1, r7
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80039b8:	9006      	str	r0, [sp, #24]
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 80039ba:	4638      	mov	r0, r7
 80039bc:	f7fd f978 	bl	8000cb0 <__aeabi_fmul>
 80039c0:	4601      	mov	r1, r0
 80039c2:	4604      	mov	r4, r0
 80039c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039c8:	f7fd f868 	bl	8000a9c <__aeabi_fsub>
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 80039cc:	4980      	ldr	r1, [pc, #512]	; (8003bd0 <mc_arc+0x380>)
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 80039ce:	4606      	mov	r6, r0
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 80039d0:	4638      	mov	r0, r7
 80039d2:	f7fd f96d 	bl	8000cb0 <__aeabi_fmul>
 80039d6:	4621      	mov	r1, r4
 80039d8:	4607      	mov	r7, r0
 80039da:	487e      	ldr	r0, [pc, #504]	; (8003bd4 <mc_arc+0x384>)
 80039dc:	f7fd f85e 	bl	8000a9c <__aeabi_fsub>
 80039e0:	4601      	mov	r1, r0
 80039e2:	4638      	mov	r0, r7
 80039e4:	f7fd f964 	bl	8000cb0 <__aeabi_fmul>
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80039e8:	9b07      	ldr	r3, [sp, #28]
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 80039ea:	9008      	str	r0, [sp, #32]
    cos_T *= 0.5;
 80039ec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80039f0:	4630      	mov	r0, r6
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80039f2:	eb03 0789 	add.w	r7, r3, r9, lsl #2
    cos_T *= 0.5;
 80039f6:	f7fd f95b 	bl	8000cb0 <__aeabi_fmul>
    float cos_Ti;
    float r_axisi;
    uint16_t i;
    uint8_t count = 0;

    for (i = 1; i<segments; i++) { // Increment (segments-1).
 80039fa:	9b01      	ldr	r3, [sp, #4]
    cos_T *= 0.5;
 80039fc:	9009      	str	r0, [sp, #36]	; 0x24
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	f000 8124 	beq.w	8003c4c <mc_arc+0x3fc>
 8003a04:	2601      	movs	r6, #1
 8003a06:	f04f 0900 	mov.w	r9, #0
 8003a0a:	4c73      	ldr	r4, [pc, #460]	; (8003bd8 <mc_arc+0x388>)

      if (count < N_ARC_CORRECTION) {
 8003a0c:	f1b9 0f0b 	cmp.w	r9, #11
 8003a10:	f200 80e6 	bhi.w	8003be0 <mc_arc+0x390>
        // Apply vector rotation matrix. ~40 usec
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 8003a14:	4629      	mov	r1, r5
 8003a16:	9808      	ldr	r0, [sp, #32]
 8003a18:	f7fd f94a 	bl	8000cb0 <__aeabi_fmul>
 8003a1c:	4641      	mov	r1, r8
 8003a1e:	4682      	mov	sl, r0
 8003a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a22:	f7fd f945 	bl	8000cb0 <__aeabi_fmul>
 8003a26:	4601      	mov	r1, r0
 8003a28:	4650      	mov	r0, sl
 8003a2a:	f7fd f839 	bl	8000aa0 <__addsf3>
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003a2e:	4629      	mov	r1, r5
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 8003a30:	4682      	mov	sl, r0
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003a32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a34:	f7fd f93c 	bl	8000cb0 <__aeabi_fmul>
 8003a38:	4641      	mov	r1, r8
 8003a3a:	4605      	mov	r5, r0
 8003a3c:	9808      	ldr	r0, [sp, #32]
 8003a3e:	f7fd f937 	bl	8000cb0 <__aeabi_fmul>
 8003a42:	4601      	mov	r1, r0
 8003a44:	4628      	mov	r0, r5
 8003a46:	f7fd f829 	bl	8000a9c <__aeabi_fsub>
        r_axis1 = r_axisi;
 8003a4a:	46d0      	mov	r8, sl
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003a4c:	4605      	mov	r5, r0
        count++;
 8003a4e:	f109 0901 	add.w	r9, r9, #1
 8003a52:	fa5f f989 	uxtb.w	r9, r9
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
        count = 0;
      }

      // Update arc_target location
      position[axis_0] = center_axis0 + r_axis0;
 8003a56:	9903      	ldr	r1, [sp, #12]
 8003a58:	4628      	mov	r0, r5
 8003a5a:	f7fd f821 	bl	8000aa0 <__addsf3>
 8003a5e:	9b02      	ldr	r3, [sp, #8]
      position[axis_1] = center_axis1 + r_axis1;
 8003a60:	9905      	ldr	r1, [sp, #20]
      position[axis_0] = center_axis0 + r_axis0;
 8003a62:	6018      	str	r0, [r3, #0]
      position[axis_1] = center_axis1 + r_axis1;
 8003a64:	4640      	mov	r0, r8
 8003a66:	f7fd f81b 	bl	8000aa0 <__addsf3>
 8003a6a:	9b04      	ldr	r3, [sp, #16]
      position[axis_linear] += linear_per_segment;
 8003a6c:	9906      	ldr	r1, [sp, #24]
      position[axis_1] = center_axis1 + r_axis1;
 8003a6e:	6018      	str	r0, [r3, #0]
      position[axis_linear] += linear_per_segment;
 8003a70:	6838      	ldr	r0, [r7, #0]
 8003a72:	f7fd f815 	bl	8000aa0 <__addsf3>
 8003a76:	6038      	str	r0, [r7, #0]
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003a78:	f89b 3068 	ldrb.w	r3, [fp, #104]	; 0x68
 8003a7c:	069b      	lsls	r3, r3, #26
 8003a7e:	d505      	bpl.n	8003a8c <mc_arc+0x23c>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003a80:	7823      	ldrb	r3, [r4, #0]
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d00c      	beq.n	8003aa0 <mc_arc+0x250>
 8003a86:	9807      	ldr	r0, [sp, #28]
 8003a88:	f7ff fdcc 	bl	8003624 <limits_soft_check>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003a8c:	7823      	ldrb	r3, [r4, #0]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d106      	bne.n	8003aa0 <mc_arc+0x250>
 8003a92:	e051      	b.n	8003b38 <mc_arc+0x2e8>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003a94:	f000 fd1a 	bl	80044cc <plan_check_full_buffer>
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d039      	beq.n	8003b10 <mc_arc+0x2c0>
 8003a9c:	f001 fb5c 	bl	8005158 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003aa0:	f002 f870 	bl	8005b84 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003aa4:	7863      	ldrb	r3, [r4, #1]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f4      	beq.n	8003a94 <mc_arc+0x244>
      if (sys.abort) { return; }
    }
  }
  // Ensure last segment arrives at target location.
  mc_line(target, pl_data);
}
 8003aaa:	b011      	add	sp, #68	; 0x44
 8003aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 8003ab0:	f7fc fcb2 	bl	8000418 <__aeabi_f2d>
 8003ab4:	a342      	add	r3, pc, #264	; (adr r3, 8003bc0 <mc_arc+0x370>)
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	4682      	mov	sl, r0
 8003abc:	468b      	mov	fp, r1
 8003abe:	f7fc ff7b 	bl	80009b8 <__aeabi_dcmple>
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	f43f af30 	beq.w	8003928 <mc_arc+0xd8>
 8003ac8:	a33f      	add	r3, pc, #252	; (adr r3, 8003bc8 <mc_arc+0x378>)
 8003aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ace:	4650      	mov	r0, sl
 8003ad0:	4659      	mov	r1, fp
 8003ad2:	f7fc fb43 	bl	800015c <__adddf3>
 8003ad6:	f7fc ff8d 	bl	80009f4 <__aeabi_d2f>
 8003ada:	4606      	mov	r6, r0
 8003adc:	e724      	b.n	8003928 <mc_arc+0xd8>
      pl_data->feed_rate *= segments; 
 8003ade:	f7fd f893 	bl	8000c08 <__aeabi_i2f>
 8003ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ae4:	4601      	mov	r1, r0
 8003ae6:	4607      	mov	r7, r0
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	f7fd f8e1 	bl	8000cb0 <__aeabi_fmul>
 8003aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003af0:	f024 0408 	bic.w	r4, r4, #8
      pl_data->feed_rate *= segments; 
 8003af4:	6018      	str	r0, [r3, #0]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003af6:	721c      	strb	r4, [r3, #8]
 8003af8:	e746      	b.n	8003988 <mc_arc+0x138>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8003afa:	a333      	add	r3, pc, #204	; (adr r3, 8003bc8 <mc_arc+0x378>)
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	4650      	mov	r0, sl
 8003b02:	4659      	mov	r1, fp
 8003b04:	f7fc fb28 	bl	8000158 <__aeabi_dsub>
 8003b08:	f7fc ff74 	bl	80009f4 <__aeabi_d2f>
 8003b0c:	4606      	mov	r6, r0
 8003b0e:	e70b      	b.n	8003928 <mc_arc+0xd8>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003b10:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8003b14:	9807      	ldr	r0, [sp, #28]
 8003b16:	4651      	mov	r1, sl
 8003b18:	f000 fd98 	bl	800464c <plan_buffer_line>
 8003b1c:	b960      	cbnz	r0, 8003b38 <mc_arc+0x2e8>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003b1e:	f89b 3068 	ldrb.w	r3, [fp, #104]	; 0x68
 8003b22:	0798      	lsls	r0, r3, #30
 8003b24:	d508      	bpl.n	8003b38 <mc_arc+0x2e8>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003b26:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8003b2a:	06d9      	lsls	r1, r3, #27
 8003b2c:	d504      	bpl.n	8003b38 <mc_arc+0x2e8>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b30:	2010      	movs	r0, #16
 8003b32:	6859      	ldr	r1, [r3, #4]
 8003b34:	f004 f932 	bl	8007d9c <spindle_sync>
      if (sys.abort) { return; }
 8003b38:	7863      	ldrb	r3, [r4, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1b5      	bne.n	8003aaa <mc_arc+0x25a>
 8003b3e:	3601      	adds	r6, #1
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003b40:	9a01      	ldr	r2, [sp, #4]
 8003b42:	b2b3      	uxth	r3, r6
 8003b44:	429a      	cmp	r2, r3
 8003b46:	f63f af61 	bhi.w	8003a0c <mc_arc+0x1bc>
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003b4a:	f89b 3068 	ldrb.w	r3, [fp, #104]	; 0x68
 8003b4e:	0699      	lsls	r1, r3, #26
 8003b50:	d505      	bpl.n	8003b5e <mc_arc+0x30e>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003b52:	7823      	ldrb	r3, [r4, #0]
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d00f      	beq.n	8003b78 <mc_arc+0x328>
 8003b58:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003b5a:	f7ff fd63 	bl	8003624 <limits_soft_check>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003b5e:	7823      	ldrb	r3, [r4, #0]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d0a2      	beq.n	8003aaa <mc_arc+0x25a>
    protocol_execute_realtime(); // Check for any run-time commands
 8003b64:	f002 f80e 	bl	8005b84 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003b68:	7863      	ldrb	r3, [r4, #1]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d19d      	bne.n	8003aaa <mc_arc+0x25a>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003b6e:	f000 fcad 	bl	80044cc <plan_check_full_buffer>
 8003b72:	b150      	cbz	r0, 8003b8a <mc_arc+0x33a>
 8003b74:	f001 faf0 	bl	8005158 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003b78:	f002 f804 	bl	8005b84 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003b7c:	7863      	ldrb	r3, [r4, #1]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d193      	bne.n	8003aaa <mc_arc+0x25a>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003b82:	f000 fca3 	bl	80044cc <plan_check_full_buffer>
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d1f4      	bne.n	8003b74 <mc_arc+0x324>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003b8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003b8c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003b8e:	4621      	mov	r1, r4
 8003b90:	f000 fd5c 	bl	800464c <plan_buffer_line>
 8003b94:	2800      	cmp	r0, #0
 8003b96:	d188      	bne.n	8003aaa <mc_arc+0x25a>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003b98:	f89b 3068 	ldrb.w	r3, [fp, #104]	; 0x68
 8003b9c:	079a      	lsls	r2, r3, #30
 8003b9e:	d584      	bpl.n	8003aaa <mc_arc+0x25a>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003ba0:	7a23      	ldrb	r3, [r4, #8]
 8003ba2:	06db      	lsls	r3, r3, #27
 8003ba4:	d581      	bpl.n	8003aaa <mc_arc+0x25a>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003ba6:	2010      	movs	r0, #16
 8003ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003baa:	6859      	ldr	r1, [r3, #4]
}
 8003bac:	b011      	add	sp, #68	; 0x44
 8003bae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003bb2:	f004 b8f3 	b.w	8007d9c <spindle_sync>
 8003bb6:	bf00      	nop
 8003bb8:	a0b5ed8d 	.word	0xa0b5ed8d
 8003bbc:	bea0c6f7 	.word	0xbea0c6f7
 8003bc0:	a0b5ed8d 	.word	0xa0b5ed8d
 8003bc4:	3ea0c6f7 	.word	0x3ea0c6f7
 8003bc8:	54442d18 	.word	0x54442d18
 8003bcc:	401921fb 	.word	0x401921fb
 8003bd0:	3e2aaaab 	.word	0x3e2aaaab
 8003bd4:	40c00000 	.word	0x40c00000
 8003bd8:	20001b6c 	.word	0x20001b6c
 8003bdc:	20001d30 	.word	0x20001d30
        cos_Ti = cosf(i*theta_per_segment);
 8003be0:	4630      	mov	r0, r6
 8003be2:	f7fd f811 	bl	8000c08 <__aeabi_i2f>
 8003be6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003be8:	f7fd f862 	bl	8000cb0 <__aeabi_fmul>
 8003bec:	4605      	mov	r5, r0
 8003bee:	f007 f8eb 	bl	800adc8 <cosf>
 8003bf2:	4680      	mov	r8, r0
        sin_Ti = sinf(i*theta_per_segment);
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	f007 f987 	bl	800af08 <sinf>
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003bfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        sin_Ti = sinf(i*theta_per_segment);
 8003bfc:	4682      	mov	sl, r0
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4640      	mov	r0, r8
 8003c02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003c06:	4619      	mov	r1, r3
 8003c08:	930a      	str	r3, [sp, #40]	; 0x28
 8003c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c0c:	f8d3 9000 	ldr.w	r9, [r3]
 8003c10:	f7fd f84e 	bl	8000cb0 <__aeabi_fmul>
 8003c14:	4649      	mov	r1, r9
 8003c16:	4605      	mov	r5, r0
 8003c18:	4650      	mov	r0, sl
 8003c1a:	f7fd f849 	bl	8000cb0 <__aeabi_fmul>
 8003c1e:	4601      	mov	r1, r0
 8003c20:	4628      	mov	r0, r5
 8003c22:	f7fc ff3d 	bl	8000aa0 <__addsf3>
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003c28:	4605      	mov	r5, r0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4650      	mov	r0, sl
 8003c2e:	f7fd f83f 	bl	8000cb0 <__aeabi_fmul>
 8003c32:	4649      	mov	r1, r9
 8003c34:	4682      	mov	sl, r0
 8003c36:	4640      	mov	r0, r8
 8003c38:	f7fd f83a 	bl	8000cb0 <__aeabi_fmul>
 8003c3c:	4601      	mov	r1, r0
 8003c3e:	4650      	mov	r0, sl
 8003c40:	f7fc ff2c 	bl	8000a9c <__aeabi_fsub>
        count = 0;
 8003c44:	f04f 0900 	mov.w	r9, #0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003c48:	4680      	mov	r8, r0
 8003c4a:	e704      	b.n	8003a56 <mc_arc+0x206>
 8003c4c:	4c00      	ldr	r4, [pc, #0]	; (8003c50 <mc_arc+0x400>)
 8003c4e:	e77c      	b.n	8003b4a <mc_arc+0x2fa>
 8003c50:	20001b6c 	.word	0x20001b6c

08003c54 <mc_dwell>:


// Execute dwell in seconds.
void mc_dwell(float seconds)
{
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <mc_dwell+0x20>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d009      	beq.n	8003c70 <mc_dwell+0x1c>
{
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	4604      	mov	r4, r0
  protocol_buffer_synchronize();
 8003c60:	f002 f978 	bl	8005f54 <protocol_buffer_synchronize>
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003c64:	4620      	mov	r0, r4
}
 8003c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	f000 b97a 	b.w	8003f64 <delay_sec>
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20001b6c 	.word	0x20001b6c

08003c78 <mc_homing_cycle>:

// Perform homing cycle to locate and set machine zero. Only '$H' executes this command.
// NOTE: There should be no motions in the buffer and Grbl must be in an idle state before
// executing the homing cycle. This prevents incorrect buffered plans after homing.
void mc_homing_cycle(uint8_t cycle_mask)
{
 8003c78:	b510      	push	{r4, lr}
 8003c7a:	4604      	mov	r4, r0
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT);
      return;
    }
  #endif

  limits_disable(); // Disable hard limits pin change register for cycle duration
 8003c7c:	f7ff fa04 	bl	8003088 <limits_disable>

  // -------------------------------------------------------------------------------------
  // Perform homing routine. NOTE: Special motion case. Only system reset works.
  
  #ifdef HOMING_SINGLE_AXIS_COMMANDS
    if (cycle_mask) { limits_go_home(cycle_mask); } // Perform homing cycle based on mask.
 8003c80:	b1b4      	cbz	r4, 8003cb0 <mc_homing_cycle+0x38>
 8003c82:	4620      	mov	r0, r4
 8003c84:	f7ff fa8c 	bl	80031a0 <limits_go_home>
    #ifdef HOMING_CYCLE_2
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
    #endif
  }

  protocol_execute_realtime(); // Check for reset and set system abort.
 8003c88:	f001 ff7c 	bl	8005b84 <protocol_execute_realtime>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 8003c8c:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <mc_homing_cycle+0x4c>)
 8003c8e:	785b      	ldrb	r3, [r3, #1]
 8003c90:	b96b      	cbnz	r3, 8003cae <mc_homing_cycle+0x36>

  // Homing cycle complete! Setup system for normal operation.
  // -------------------------------------------------------------------------------------

  // Sync gcode parser and planner positions to homed position.
  gc_sync_position();
 8003c92:	f7fd ffeb 	bl	8001c6c <gc_sync_position>
  plan_sync_position();
 8003c96:	f000 ff73 	bl	8004b80 <plan_sync_position>
#ifdef STM32F103C8
// --- YSV 22-06-2018
	#if defined AA_AXIS
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT) | (1 << A_LIMIT_BIT));
	#elif defined AB_AXIS
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT) | (1 << A_LIMIT_BIT) | (1 << B_LIMIT_BIT));
 8003c9a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003c9e:	f7fd fab1 	bl	8001204 <EXTI_ClearITPendingBit>
 8003ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ca6:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <mc_homing_cycle+0x50>)
 8003ca8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	bd10      	pop	{r4, pc}
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	f7ff fa75 	bl	80031a0 <limits_go_home>
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 8003cb6:	2002      	movs	r0, #2
 8003cb8:	f7ff fa72 	bl	80031a0 <limits_go_home>
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
 8003cbc:	2018      	movs	r0, #24
 8003cbe:	f7ff fa6f 	bl	80031a0 <limits_go_home>
 8003cc2:	e7e1      	b.n	8003c88 <mc_homing_cycle+0x10>
 8003cc4:	20001b6c 	.word	0x20001b6c
 8003cc8:	e000e100 	.word	0xe000e100

08003ccc <mc_probe_cycle>:


// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
uint8_t mc_probe_cycle(float *target, plan_line_data_t *pl_data, uint8_t parser_flags)
{
 8003ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // TODO: Need to update this cycle so it obeys a non-auto cycle start.
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003cd0:	4c43      	ldr	r4, [pc, #268]	; (8003de0 <mc_probe_cycle+0x114>)
 8003cd2:	7823      	ldrb	r3, [r4, #0]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d00c      	beq.n	8003cf2 <mc_probe_cycle+0x26>
 8003cd8:	4617      	mov	r7, r2
 8003cda:	460e      	mov	r6, r1
 8003cdc:	4605      	mov	r5, r0

  // Finish all queued commands and empty planner buffer before starting probe cycle.
  protocol_buffer_synchronize();
 8003cde:	f002 f939 	bl	8005f54 <protocol_buffer_synchronize>
  if (sys.abort) { return(GC_PROBE_ABORT); } // Return if system reset has been issued.
 8003ce2:	f894 8001 	ldrb.w	r8, [r4, #1]
 8003ce6:	f1b8 0f00 	cmp.w	r8, #0
 8003cea:	d005      	beq.n	8003cf8 <mc_probe_cycle+0x2c>
  // NOTE: This probe initialization error applies to all probing cycles.
  if ( probe_get_state() ) { // Check probe pin state.
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
    protocol_execute_realtime();
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
 8003cec:	2002      	movs	r0, #2
 8003cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003cf2:	2000      	movs	r0, #0
    report_probe_parameters();
  #endif

  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
  else { return(GC_PROBE_FAIL_END); } // Failed to trigger probe within travel. With or without error.
}
 8003cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  probe_configure_invert_mask(is_probe_away);
 8003cf8:	f3c7 00c0 	ubfx	r0, r7, #3, #1
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
 8003cfc:	f884 8005 	strb.w	r8, [r4, #5]
  probe_configure_invert_mask(is_probe_away);
 8003d00:	f001 f9e0 	bl	80050c4 <probe_configure_invert_mask>
  if ( probe_get_state() ) { // Check probe pin state.
 8003d04:	f001 f9f2 	bl	80050ec <probe_get_state>
 8003d08:	b140      	cbz	r0, 8003d1c <mc_probe_cycle+0x50>
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
 8003d0a:	2004      	movs	r0, #4
 8003d0c:	f005 fd96 	bl	800983c <system_set_exec_alarm>
    protocol_execute_realtime();
 8003d10:	f001 ff38 	bl	8005b84 <protocol_execute_realtime>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
 8003d14:	4640      	mov	r0, r8
 8003d16:	f001 f9d5 	bl	80050c4 <probe_configure_invert_mask>
 8003d1a:	e7e7      	b.n	8003cec <mc_probe_cycle+0x20>
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003d1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003df0 <mc_probe_cycle+0x124>
 8003d20:	f898 3068 	ldrb.w	r3, [r8, #104]	; 0x68
 8003d24:	0698      	lsls	r0, r3, #26
 8003d26:	d505      	bpl.n	8003d34 <mc_probe_cycle+0x68>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003d28:	7823      	ldrb	r3, [r4, #0]
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d00b      	beq.n	8003d46 <mc_probe_cycle+0x7a>
 8003d2e:	4628      	mov	r0, r5
 8003d30:	f7ff fc78 	bl	8003624 <limits_soft_check>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003d34:	7823      	ldrb	r3, [r4, #0]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d105      	bne.n	8003d46 <mc_probe_cycle+0x7a>
 8003d3a:	e009      	b.n	8003d50 <mc_probe_cycle+0x84>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003d3c:	f000 fbc6 	bl	80044cc <plan_check_full_buffer>
 8003d40:	b370      	cbz	r0, 8003da0 <mc_probe_cycle+0xd4>
 8003d42:	f001 fa09 	bl	8005158 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003d46:	f001 ff1d 	bl	8005b84 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003d4a:	7863      	ldrb	r3, [r4, #1]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f5      	beq.n	8003d3c <mc_probe_cycle+0x70>
  sys_probe_state = PROBE_ACTIVE;
 8003d50:	2301      	movs	r3, #1
 8003d52:	4d24      	ldr	r5, [pc, #144]	; (8003de4 <mc_probe_cycle+0x118>)
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8003d54:	2002      	movs	r0, #2
  sys_probe_state = PROBE_ACTIVE;
 8003d56:	702b      	strb	r3, [r5, #0]
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8003d58:	f005 fd5c 	bl	8009814 <system_set_exec_state_flag>
    protocol_execute_realtime();
 8003d5c:	f001 ff12 	bl	8005b84 <protocol_execute_realtime>
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 8003d60:	7863      	ldrb	r3, [r4, #1]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1c2      	bne.n	8003cec <mc_probe_cycle+0x20>
  } while (sys.state != STATE_IDLE);
 8003d66:	7823      	ldrb	r3, [r4, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f7      	bne.n	8003d5c <mc_probe_cycle+0x90>
  if (sys_probe_state == PROBE_ACTIVE) {
 8003d6c:	782b      	ldrb	r3, [r5, #0]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d028      	beq.n	8003dc4 <mc_probe_cycle+0xf8>
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
 8003d72:	2301      	movs	r3, #1
 8003d74:	7163      	strb	r3, [r4, #5]
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8003d76:	2300      	movs	r3, #0
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8003d78:	4618      	mov	r0, r3
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8003d7a:	702b      	strb	r3, [r5, #0]
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8003d7c:	f001 f9a2 	bl	80050c4 <probe_configure_invert_mask>
  protocol_execute_realtime();   // Check and execute run-time commands
 8003d80:	f001 ff00 	bl	8005b84 <protocol_execute_realtime>
  st_reset(); // Reset step segment buffer.
 8003d84:	f004 fb1a 	bl	80083bc <st_reset>
  plan_reset(); // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 8003d88:	f000 fb30 	bl	80043ec <plan_reset>
  plan_sync_position(); // Sync planner position to current machine position.
 8003d8c:	f000 fef8 	bl	8004b80 <plan_sync_position>
    report_probe_parameters();
 8003d90:	f002 fe4e 	bl	8006a30 <report_probe_parameters>
  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
 8003d94:	7960      	ldrb	r0, [r4, #5]
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003d96:	3000      	adds	r0, #0
 8003d98:	bf18      	it	ne
 8003d9a:	2001      	movne	r0, #1
 8003d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003da0:	4628      	mov	r0, r5
 8003da2:	4631      	mov	r1, r6
 8003da4:	f000 fc52 	bl	800464c <plan_buffer_line>
 8003da8:	2800      	cmp	r0, #0
 8003daa:	d1d1      	bne.n	8003d50 <mc_probe_cycle+0x84>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003dac:	f898 3068 	ldrb.w	r3, [r8, #104]	; 0x68
 8003db0:	0799      	lsls	r1, r3, #30
 8003db2:	d5cd      	bpl.n	8003d50 <mc_probe_cycle+0x84>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003db4:	7a33      	ldrb	r3, [r6, #8]
 8003db6:	06da      	lsls	r2, r3, #27
 8003db8:	d5ca      	bpl.n	8003d50 <mc_probe_cycle+0x84>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003dba:	6871      	ldr	r1, [r6, #4]
 8003dbc:	2010      	movs	r0, #16
 8003dbe:	f003 ffed 	bl	8007d9c <spindle_sync>
 8003dc2:	e7c5      	b.n	8003d50 <mc_probe_cycle+0x84>
    if (is_no_error) { memcpy(sys_probe_position, sys_position, sizeof(sys_position)); }
 8003dc4:	06fb      	lsls	r3, r7, #27
 8003dc6:	d506      	bpl.n	8003dd6 <mc_probe_cycle+0x10a>
 8003dc8:	4f07      	ldr	r7, [pc, #28]	; (8003de8 <mc_probe_cycle+0x11c>)
 8003dca:	4e08      	ldr	r6, [pc, #32]	; (8003dec <mc_probe_cycle+0x120>)
 8003dcc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003dce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	6033      	str	r3, [r6, #0]
 8003dd4:	e7cf      	b.n	8003d76 <mc_probe_cycle+0xaa>
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
 8003dd6:	2005      	movs	r0, #5
 8003dd8:	f005 fd30 	bl	800983c <system_set_exec_alarm>
 8003ddc:	e7cb      	b.n	8003d76 <mc_probe_cycle+0xaa>
 8003dde:	bf00      	nop
 8003de0:	20001b6c 	.word	0x20001b6c
 8003de4:	20001b82 	.word	0x20001b82
 8003de8:	20001b98 	.word	0x20001b98
 8003dec:	20001b84 	.word	0x20001b84
 8003df0:	20001d30 	.word	0x20001d30

08003df4 <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
void mc_reset()
{
 8003df4:	b508      	push	{r3, lr}
  // Only this function can set the system reset. Helps prevent multiple kill calls.
  if (bit_isfalse(sys_rt_exec_state, EXEC_RESET)) {
 8003df6:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <mc_reset+0x54>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	06db      	lsls	r3, r3, #27
 8003dfc:	d500      	bpl.n	8003e00 <mc_reset+0xc>
 8003dfe:	bd08      	pop	{r3, pc}
    system_set_exec_state_flag(EXEC_RESET);
 8003e00:	2010      	movs	r0, #16
 8003e02:	f005 fd07 	bl	8009814 <system_set_exec_state_flag>

    // Kill spindle and coolant.
    spindle_stop();
 8003e06:	f003 fedf 	bl	8007bc8 <spindle_stop>
    coolant_stop();
 8003e0a:	f7fd fe3d 	bl	8001a88 <coolant_stop>
    // Kill steppers only if in any motion state, i.e. cycle, actively holding, or homing.
    // NOTE: If steppers are kept enabled via the step idle delay setting, this also keeps
    // the steppers enabled by avoiding the go_idle call altogether, unless the motion state is
    // violated, by which, all bets are off.
#ifndef  USE_RESET_BTN_AS_ESTOP
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8003e0e:	4a0f      	ldr	r2, [pc, #60]	; (8003e4c <mc_reset+0x58>)
 8003e10:	7813      	ldrb	r3, [r2, #0]
 8003e12:	f013 0f2c 	tst.w	r3, #44	; 0x2c
 8003e16:	d008      	beq.n	8003e2a <mc_reset+0x36>
    		(sys.step_control & (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION)))
#endif
    {
      if (sys.state == STATE_HOMING) {
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d00c      	beq.n	8003e36 <mc_reset+0x42>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
      }
      else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 8003e1c:	2003      	movs	r0, #3
 8003e1e:	f005 fd0d 	bl	800983c <system_set_exec_alarm>
      st_go_idle(); // Force kill steppers. Position has likely been lost.
    }
  }
}
 8003e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 8003e26:	f004 b8b1 	b.w	8007f8c <st_go_idle>
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8003e2a:	7912      	ldrb	r2, [r2, #4]
 8003e2c:	f012 0f06 	tst.w	r2, #6
 8003e30:	d0e5      	beq.n	8003dfe <mc_reset+0xa>
      if (sys.state == STATE_HOMING) {
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d1f2      	bne.n	8003e1c <mc_reset+0x28>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003e36:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <mc_reset+0x5c>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f1      	bne.n	8003e22 <mc_reset+0x2e>
 8003e3e:	2006      	movs	r0, #6
 8003e40:	f005 fcfc 	bl	800983c <system_set_exec_alarm>
 8003e44:	e7ed      	b.n	8003e22 <mc_reset+0x2e>
 8003e46:	bf00      	nop
 8003e48:	20001b81 	.word	0x20001b81
 8003e4c:	20001b6c 	.word	0x20001b6c
 8003e50:	20001bac 	.word	0x20001bac

08003e54 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
uint8_t read_float(char *line, uint8_t *char_counter, float *float_ptr)
{
 8003e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char *ptr = line + *char_counter;
 8003e58:	780c      	ldrb	r4, [r1, #0]
{
 8003e5a:	b083      	sub	sp, #12
  unsigned char c;

  // Grab first character and increment pointer. No spaces assumed in line.
  c = *ptr++;
 8003e5c:	5d03      	ldrb	r3, [r0, r4]
  char *ptr = line + *char_counter;
 8003e5e:	4404      	add	r4, r0

  // Capture initial positive/minus character
  bool isnegative = false;
  if (c == '-') {
 8003e60:	2b2d      	cmp	r3, #45	; 0x2d
 8003e62:	d065      	beq.n	8003f30 <read_float+0xdc>
    isnegative = true;
    c = *ptr++;
  } else if (c == '+') {
 8003e64:	2b2b      	cmp	r3, #43	; 0x2b
 8003e66:	d068      	beq.n	8003f3a <read_float+0xe6>
  bool isnegative = false;
 8003e68:	f04f 0800 	mov.w	r8, #0
  c = *ptr++;
 8003e6c:	1c65      	adds	r5, r4, #1

  // Extract number into fast integer. Track decimal in terms of exponent value.
  uint32_t intval = 0;
  int8_t exp = 0;
  uint8_t ndigit = 0;
  bool isdecimal = false;
 8003e6e:	2600      	movs	r6, #0
  uint8_t ndigit = 0;
 8003e70:	4634      	mov	r4, r6
  int8_t exp = 0;
 8003e72:	4637      	mov	r7, r6
  uint32_t intval = 0;
 8003e74:	46b6      	mov	lr, r6
 8003e76:	e00c      	b.n	8003e92 <read_float+0x3e>
  while(1) {
    c -= '0';
    if (c <= 9) {
      ndigit++;
 8003e78:	3401      	adds	r4, #1
 8003e7a:	b2e4      	uxtb	r4, r4
      if (ndigit <= MAX_INT_DIGITS) {
 8003e7c:	2c08      	cmp	r4, #8
 8003e7e:	d811      	bhi.n	8003ea4 <read_float+0x50>
        if (isdecimal) { exp--; }
 8003e80:	b10e      	cbz	r6, 8003e86 <read_float+0x32>
 8003e82:	3f01      	subs	r7, #1
 8003e84:	b27f      	sxtb	r7, r7
        intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
 8003e86:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8003e8a:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
      isdecimal = true;
    } else {
      break;
    }
    c = *ptr++;
 8003e8e:	f815 3b01 	ldrb.w	r3, [r5], #1
    c -= '0';
 8003e92:	3b30      	subs	r3, #48	; 0x30
 8003e94:	b2db      	uxtb	r3, r3
    if (c <= 9) {
 8003e96:	2b09      	cmp	r3, #9
 8003e98:	d9ee      	bls.n	8003e78 <read_float+0x24>
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
 8003e9a:	2bfe      	cmp	r3, #254	; 0xfe
 8003e9c:	d107      	bne.n	8003eae <read_float+0x5a>
 8003e9e:	b936      	cbnz	r6, 8003eae <read_float+0x5a>
      isdecimal = true;
 8003ea0:	2601      	movs	r6, #1
 8003ea2:	e7f4      	b.n	8003e8e <read_float+0x3a>
        if (!(isdecimal)) { exp++; }  // Drop overflow digits
 8003ea4:	2e00      	cmp	r6, #0
 8003ea6:	d1f2      	bne.n	8003e8e <read_float+0x3a>
 8003ea8:	3701      	adds	r7, #1
 8003eaa:	b27f      	sxtb	r7, r7
 8003eac:	e7ef      	b.n	8003e8e <read_float+0x3a>
  }

  // Return if no digits have been read.
  if (!ndigit) { return(false); };
 8003eae:	2c00      	cmp	r4, #0
 8003eb0:	d037      	beq.n	8003f22 <read_float+0xce>
 8003eb2:	4682      	mov	sl, r0

  // Convert integer into floating point.
  float fval;
  fval = (float)intval;
 8003eb4:	4670      	mov	r0, lr
 8003eb6:	9101      	str	r1, [sp, #4]
 8003eb8:	4691      	mov	r9, r2
 8003eba:	f7fc fea1 	bl	8000c00 <__aeabi_ui2f>

  // Apply decimal. Should perform no more than two floating point multiplications for the
  // expected range of E0 to E-4.
  if (fval != 0) {
 8003ebe:	2100      	movs	r1, #0
  fval = (float)intval;
 8003ec0:	4683      	mov	fp, r0
  if (fval != 0) {
 8003ec2:	f7fd f889 	bl	8000fd8 <__aeabi_fcmpeq>
 8003ec6:	bb08      	cbnz	r0, 8003f0c <read_float+0xb8>
    while (exp <= -2) {
 8003ec8:	1c79      	adds	r1, r7, #1
 8003eca:	da12      	bge.n	8003ef2 <read_float+0x9e>
 8003ecc:	463e      	mov	r6, r7
      fval *= 0.01f;
 8003ece:	4c22      	ldr	r4, [pc, #136]	; (8003f58 <read_float+0x104>)
 8003ed0:	4658      	mov	r0, fp
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	f7fc feec 	bl	8000cb0 <__aeabi_fmul>
 8003ed8:	1cb3      	adds	r3, r6, #2
 8003eda:	b25e      	sxtb	r6, r3
    while (exp <= -2) {
 8003edc:	1c72      	adds	r2, r6, #1
      fval *= 0.01f;
 8003ede:	4683      	mov	fp, r0
    while (exp <= -2) {
 8003ee0:	dbf6      	blt.n	8003ed0 <read_float+0x7c>
 8003ee2:	b2ff      	uxtb	r7, r7
 8003ee4:	f1c7 03fe 	rsb	r3, r7, #254	; 0xfe
 8003ee8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003eec:	441f      	add	r7, r3
 8003eee:	3702      	adds	r7, #2
 8003ef0:	b27f      	sxtb	r7, r7
      exp += 2;
    }
    if (exp < 0) {
 8003ef2:	1c7b      	adds	r3, r7, #1
 8003ef4:	d026      	beq.n	8003f44 <read_float+0xf0>
      fval *= 0.1f;
    } else if (exp > 0) {
 8003ef6:	b14f      	cbz	r7, 8003f0c <read_float+0xb8>
      do {
        fval *= 10.0f;
 8003ef8:	4c18      	ldr	r4, [pc, #96]	; (8003f5c <read_float+0x108>)
 8003efa:	4658      	mov	r0, fp
 8003efc:	4621      	mov	r1, r4
 8003efe:	f7fc fed7 	bl	8000cb0 <__aeabi_fmul>
 8003f02:	3f01      	subs	r7, #1
 8003f04:	b27f      	sxtb	r7, r7
 8003f06:	4683      	mov	fp, r0
      } while (--exp > 0);
 8003f08:	2f00      	cmp	r7, #0
 8003f0a:	d1f6      	bne.n	8003efa <read_float+0xa6>
    }
  }

  // Assign floating point value with correct sign.
  if (isnegative) {
 8003f0c:	f1b8 0f00 	cmp.w	r8, #0
 8003f10:	d10b      	bne.n	8003f2a <read_float+0xd6>
    *float_ptr = fval;
  }

  *char_counter = ptr - line - 1; // Set char_counter to next statement

  return(true);
 8003f12:	2401      	movs	r4, #1
  *char_counter = ptr - line - 1; // Set char_counter to next statement
 8003f14:	eba5 050a 	sub.w	r5, r5, sl
 8003f18:	9b01      	ldr	r3, [sp, #4]
 8003f1a:	3d01      	subs	r5, #1
 8003f1c:	f8c9 b000 	str.w	fp, [r9]
 8003f20:	701d      	strb	r5, [r3, #0]
}
 8003f22:	4620      	mov	r0, r4
 8003f24:	b003      	add	sp, #12
 8003f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *float_ptr = -fval;
 8003f2a:	f10b 4b00 	add.w	fp, fp, #2147483648	; 0x80000000
 8003f2e:	e7f0      	b.n	8003f12 <read_float+0xbe>
    c = *ptr++;
 8003f30:	1ca5      	adds	r5, r4, #2
 8003f32:	7863      	ldrb	r3, [r4, #1]
    isnegative = true;
 8003f34:	f04f 0801 	mov.w	r8, #1
 8003f38:	e799      	b.n	8003e6e <read_float+0x1a>
  bool isnegative = false;
 8003f3a:	f04f 0800 	mov.w	r8, #0
    c = *ptr++;
 8003f3e:	7863      	ldrb	r3, [r4, #1]
 8003f40:	1ca5      	adds	r5, r4, #2
 8003f42:	e794      	b.n	8003e6e <read_float+0x1a>
      fval *= 0.1f;
 8003f44:	4658      	mov	r0, fp
 8003f46:	4906      	ldr	r1, [pc, #24]	; (8003f60 <read_float+0x10c>)
 8003f48:	f7fc feb2 	bl	8000cb0 <__aeabi_fmul>
 8003f4c:	4683      	mov	fp, r0
  if (isnegative) {
 8003f4e:	f1b8 0f00 	cmp.w	r8, #0
 8003f52:	d0de      	beq.n	8003f12 <read_float+0xbe>
 8003f54:	e7e9      	b.n	8003f2a <read_float+0xd6>
 8003f56:	bf00      	nop
 8003f58:	3c23d70a 	.word	0x3c23d70a
 8003f5c:	41200000 	.word	0x41200000
 8003f60:	3dcccccd 	.word	0x3dcccccd

08003f64 <delay_sec>:


// Non-blocking delay function used for general operation and suspend features.
void delay_sec(float seconds, uint8_t mode)
{
 8003f64:	b570      	push	{r4, r5, r6, lr}
 8003f66:	460e      	mov	r6, r1
	uint16_t i = (uint16_t)ceilf(1000 / DWELL_TIME_STEP*seconds);
 8003f68:	4918      	ldr	r1, [pc, #96]	; (8003fcc <delay_sec+0x68>)
 8003f6a:	f7fc fea1 	bl	8000cb0 <__aeabi_fmul>
 8003f6e:	f006 feeb 	bl	800ad48 <ceilf>
 8003f72:	f7fd f89f 	bl	80010b4 <__aeabi_f2uiz>
 8003f76:	b280      	uxth	r0, r0
	while (i-- > 0) {
 8003f78:	b1b0      	cbz	r0, 8003fa8 <delay_sec+0x44>
		if (sys.abort) { return; }
 8003f7a:	4d15      	ldr	r5, [pc, #84]	; (8003fd0 <delay_sec+0x6c>)
 8003f7c:	786b      	ldrb	r3, [r5, #1]
 8003f7e:	b99b      	cbnz	r3, 8003fa8 <delay_sec+0x44>
 8003f80:	1e44      	subs	r4, r0, #1
 8003f82:	b2a4      	uxth	r4, r4
 8003f84:	b18e      	cbz	r6, 8003faa <delay_sec+0x46>
	while (i-- > 0) {
 8003f86:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003f8a:	e008      	b.n	8003f9e <delay_sec+0x3a>
 8003f8c:	3c01      	subs	r4, #1
		} else { // DELAY_MODE_SYS_SUSPEND
		  // Execute rt_system() only to avoid nesting suspend loops.
		  protocol_exec_rt_system();
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
		}
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003f8e:	2032      	movs	r0, #50	; 0x32
	while (i-- > 0) {
 8003f90:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003f92:	f7ff fbfb 	bl	800378c <_delay_ms>
	while (i-- > 0) {
 8003f96:	42b4      	cmp	r4, r6
 8003f98:	d006      	beq.n	8003fa8 <delay_sec+0x44>
		if (sys.abort) { return; }
 8003f9a:	786b      	ldrb	r3, [r5, #1]
 8003f9c:	b9ab      	cbnz	r3, 8003fca <delay_sec+0x66>
		  protocol_exec_rt_system();
 8003f9e:	f001 f8e5 	bl	800516c <protocol_exec_rt_system>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 8003fa2:	78ab      	ldrb	r3, [r5, #2]
 8003fa4:	079b      	lsls	r3, r3, #30
 8003fa6:	d5f1      	bpl.n	8003f8c <delay_sec+0x28>
 8003fa8:	bd70      	pop	{r4, r5, r6, pc}
	while (i-- > 0) {
 8003faa:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003fae:	e001      	b.n	8003fb4 <delay_sec+0x50>
		if (sys.abort) { return; }
 8003fb0:	786b      	ldrb	r3, [r5, #1]
 8003fb2:	b94b      	cbnz	r3, 8003fc8 <delay_sec+0x64>
	while (i-- > 0) {
 8003fb4:	3c01      	subs	r4, #1
			protocol_execute_realtime();
 8003fb6:	f001 fde5 	bl	8005b84 <protocol_execute_realtime>
	while (i-- > 0) {
 8003fba:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8003fbc:	2032      	movs	r0, #50	; 0x32
 8003fbe:	f7ff fbe5 	bl	800378c <_delay_ms>
	while (i-- > 0) {
 8003fc2:	42b4      	cmp	r4, r6
 8003fc4:	d1f4      	bne.n	8003fb0 <delay_sec+0x4c>
 8003fc6:	e7ef      	b.n	8003fa8 <delay_sec+0x44>
 8003fc8:	bd70      	pop	{r4, r5, r6, pc}
 8003fca:	bd70      	pop	{r4, r5, r6, pc}
 8003fcc:	41a00000 	.word	0x41a00000
 8003fd0:	20001b6c 	.word	0x20001b6c

08003fd4 <delay_ms>:

// Delays variable defined milliseconds. Compiler compatibility fix for _delay_ms(),
// which only accepts constants in future compiler releases.
void delay_ms(uint16_t ms)
{
  while ( ms-- ) { _delay_ms(1); }
 8003fd4:	b160      	cbz	r0, 8003ff0 <delay_ms+0x1c>
{
 8003fd6:	b538      	push	{r3, r4, r5, lr}
  while ( ms-- ) { _delay_ms(1); }
 8003fd8:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003fdc:	1e44      	subs	r4, r0, #1
 8003fde:	b2a4      	uxth	r4, r4
 8003fe0:	3c01      	subs	r4, #1
 8003fe2:	2001      	movs	r0, #1
 8003fe4:	b2a4      	uxth	r4, r4
 8003fe6:	f7ff fbd1 	bl	800378c <_delay_ms>
 8003fea:	42ac      	cmp	r4, r5
 8003fec:	d1f8      	bne.n	8003fe0 <delay_ms+0xc>
 8003fee:	bd38      	pop	{r3, r4, r5, pc}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop

08003ff4 <hypot_f>:
}


// Simple hypotenuse computation function.
float hypot_f(float x, float y) { return(sqrtf(x*x + y*y)); }
 8003ff4:	b538      	push	{r3, r4, r5, lr}
 8003ff6:	460d      	mov	r5, r1
 8003ff8:	4601      	mov	r1, r0
 8003ffa:	f7fc fe59 	bl	8000cb0 <__aeabi_fmul>
 8003ffe:	4629      	mov	r1, r5
 8004000:	4604      	mov	r4, r0
 8004002:	4628      	mov	r0, r5
 8004004:	f7fc fe54 	bl	8000cb0 <__aeabi_fmul>
 8004008:	4601      	mov	r1, r0
 800400a:	4620      	mov	r0, r4
 800400c:	f7fc fd48 	bl	8000aa0 <__addsf3>
 8004010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004014:	f006 bfb0 	b.w	800af78 <sqrtf>

08004018 <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector(float *vector)
{
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	4604      	mov	r4, r0
  uint8_t idx;
  float magnitude = 0.0f;
  for (idx=0; idx<N_AXIS; idx++) {
    if (vector[idx] != 0.0f) {
 800401c:	6847      	ldr	r7, [r0, #4]
 800401e:	2100      	movs	r1, #0
 8004020:	4638      	mov	r0, r7
 8004022:	6826      	ldr	r6, [r4, #0]
 8004024:	68a5      	ldr	r5, [r4, #8]
 8004026:	f7fc ffd7 	bl	8000fd8 <__aeabi_fcmpeq>
 800402a:	2800      	cmp	r0, #0
 800402c:	d162      	bne.n	80040f4 <convert_delta_vector_to_unit_vector+0xdc>
      magnitude += vector[idx]*vector[idx];
 800402e:	4639      	mov	r1, r7
 8004030:	4638      	mov	r0, r7
 8004032:	f7fc fe3d 	bl	8000cb0 <__aeabi_fmul>
 8004036:	2100      	movs	r1, #0
 8004038:	4607      	mov	r7, r0
 800403a:	4628      	mov	r0, r5
 800403c:	f7fc ffcc 	bl	8000fd8 <__aeabi_fcmpeq>
 8004040:	2800      	cmp	r0, #0
 8004042:	d15e      	bne.n	8004102 <convert_delta_vector_to_unit_vector+0xea>
 8004044:	4629      	mov	r1, r5
 8004046:	4628      	mov	r0, r5
 8004048:	f7fc fe32 	bl	8000cb0 <__aeabi_fmul>
 800404c:	4601      	mov	r1, r0
 800404e:	4638      	mov	r0, r7
 8004050:	f7fc fd26 	bl	8000aa0 <__addsf3>
 8004054:	2100      	movs	r1, #0
 8004056:	4605      	mov	r5, r0
 8004058:	4630      	mov	r0, r6
 800405a:	f7fc ffbd 	bl	8000fd8 <__aeabi_fcmpeq>
 800405e:	2800      	cmp	r0, #0
 8004060:	d155      	bne.n	800410e <convert_delta_vector_to_unit_vector+0xf6>
 8004062:	4631      	mov	r1, r6
 8004064:	4630      	mov	r0, r6
 8004066:	f7fc fe23 	bl	8000cb0 <__aeabi_fmul>
 800406a:	4601      	mov	r1, r0
 800406c:	4628      	mov	r0, r5
 800406e:	f7fc fd17 	bl	8000aa0 <__addsf3>
    if (vector[idx] != 0.0f) {
 8004072:	68e5      	ldr	r5, [r4, #12]
 8004074:	4607      	mov	r7, r0
 8004076:	2100      	movs	r1, #0
 8004078:	4628      	mov	r0, r5
 800407a:	f7fc ffad 	bl	8000fd8 <__aeabi_fcmpeq>
 800407e:	2800      	cmp	r0, #0
 8004080:	d143      	bne.n	800410a <convert_delta_vector_to_unit_vector+0xf2>
      magnitude += vector[idx]*vector[idx];
 8004082:	4629      	mov	r1, r5
 8004084:	4628      	mov	r0, r5
 8004086:	f7fc fe13 	bl	8000cb0 <__aeabi_fmul>
 800408a:	4639      	mov	r1, r7
 800408c:	f7fc fd08 	bl	8000aa0 <__addsf3>
    if (vector[idx] != 0.0f) {
 8004090:	6925      	ldr	r5, [r4, #16]
 8004092:	4607      	mov	r7, r0
 8004094:	2100      	movs	r1, #0
 8004096:	4628      	mov	r0, r5
 8004098:	f7fc ff9e 	bl	8000fd8 <__aeabi_fcmpeq>
 800409c:	2800      	cmp	r0, #0
 800409e:	d132      	bne.n	8004106 <convert_delta_vector_to_unit_vector+0xee>
      magnitude += vector[idx]*vector[idx];
 80040a0:	4629      	mov	r1, r5
 80040a2:	4628      	mov	r0, r5
 80040a4:	f7fc fe04 	bl	8000cb0 <__aeabi_fmul>
 80040a8:	4639      	mov	r1, r7
 80040aa:	f7fc fcf9 	bl	8000aa0 <__addsf3>
    }
  }
  magnitude = sqrtf(magnitude);
 80040ae:	f006 ff63 	bl	800af78 <sqrtf>
 80040b2:	4607      	mov	r7, r0
  float inv_magnitude = 1.0f/magnitude;
 80040b4:	4601      	mov	r1, r0
 80040b6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80040ba:	f7fc fead 	bl	8000e18 <__aeabi_fdiv>
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 80040be:	4631      	mov	r1, r6
  float inv_magnitude = 1.0f/magnitude;
 80040c0:	4605      	mov	r5, r0
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 80040c2:	f7fc fdf5 	bl	8000cb0 <__aeabi_fmul>
 80040c6:	4629      	mov	r1, r5
 80040c8:	6020      	str	r0, [r4, #0]
 80040ca:	6860      	ldr	r0, [r4, #4]
 80040cc:	f7fc fdf0 	bl	8000cb0 <__aeabi_fmul>
 80040d0:	4629      	mov	r1, r5
 80040d2:	6060      	str	r0, [r4, #4]
 80040d4:	68a0      	ldr	r0, [r4, #8]
 80040d6:	f7fc fdeb 	bl	8000cb0 <__aeabi_fmul>
 80040da:	4629      	mov	r1, r5
 80040dc:	60a0      	str	r0, [r4, #8]
 80040de:	68e0      	ldr	r0, [r4, #12]
 80040e0:	f7fc fde6 	bl	8000cb0 <__aeabi_fmul>
 80040e4:	4629      	mov	r1, r5
 80040e6:	60e0      	str	r0, [r4, #12]
 80040e8:	6920      	ldr	r0, [r4, #16]
 80040ea:	f7fc fde1 	bl	8000cb0 <__aeabi_fmul>
 80040ee:	6120      	str	r0, [r4, #16]
  return(magnitude);
}
 80040f0:	4638      	mov	r0, r7
 80040f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040f4:	2100      	movs	r1, #0
 80040f6:	4628      	mov	r0, r5
 80040f8:	2700      	movs	r7, #0
 80040fa:	f7fc ff6d 	bl	8000fd8 <__aeabi_fcmpeq>
 80040fe:	2800      	cmp	r0, #0
 8004100:	d0a0      	beq.n	8004044 <convert_delta_vector_to_unit_vector+0x2c>
 8004102:	2100      	movs	r1, #0
 8004104:	e7a3      	b.n	800404e <convert_delta_vector_to_unit_vector+0x36>
 8004106:	2000      	movs	r0, #0
 8004108:	e7ce      	b.n	80040a8 <convert_delta_vector_to_unit_vector+0x90>
 800410a:	2000      	movs	r0, #0
 800410c:	e7bd      	b.n	800408a <convert_delta_vector_to_unit_vector+0x72>
 800410e:	2100      	movs	r1, #0
 8004110:	e7ac      	b.n	800406c <convert_delta_vector_to_unit_vector+0x54>
 8004112:	bf00      	nop

08004114 <limit_value_by_axis_maximum>:


float limit_value_by_axis_maximum(float *max_value, float *unit_vec)
{
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t idx;
  float limit_value = SOME_LARGE_VALUE;
  for (idx=0; idx<N_AXIS; idx++) {
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004116:	680d      	ldr	r5, [r1, #0]
{
 8004118:	460c      	mov	r4, r1
 800411a:	4606      	mov	r6, r0
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 800411c:	2100      	movs	r1, #0
 800411e:	4628      	mov	r0, r5
 8004120:	f7fc ff5a 	bl	8000fd8 <__aeabi_fcmpeq>
 8004124:	2800      	cmp	r0, #0
 8004126:	d152      	bne.n	80041ce <limit_value_by_axis_maximum+0xba>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8004128:	4629      	mov	r1, r5
 800412a:	6830      	ldr	r0, [r6, #0]
 800412c:	f7fc fe74 	bl	8000e18 <__aeabi_fdiv>
 8004130:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8004134:	4628      	mov	r0, r5
 8004136:	492b      	ldr	r1, [pc, #172]	; (80041e4 <limit_value_by_axis_maximum+0xd0>)
 8004138:	f7fc ff62 	bl	8001000 <__aeabi_fcmple>
 800413c:	2800      	cmp	r0, #0
 800413e:	d046      	beq.n	80041ce <limit_value_by_axis_maximum+0xba>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004140:	6867      	ldr	r7, [r4, #4]
 8004142:	2100      	movs	r1, #0
 8004144:	4638      	mov	r0, r7
 8004146:	f7fc ff47 	bl	8000fd8 <__aeabi_fcmpeq>
 800414a:	b958      	cbnz	r0, 8004164 <limit_value_by_axis_maximum+0x50>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 800414c:	4639      	mov	r1, r7
 800414e:	6870      	ldr	r0, [r6, #4]
 8004150:	f7fc fe62 	bl	8000e18 <__aeabi_fdiv>
 8004154:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 8004158:	4639      	mov	r1, r7
 800415a:	4628      	mov	r0, r5
 800415c:	f7fc ff50 	bl	8001000 <__aeabi_fcmple>
 8004160:	2800      	cmp	r0, #0
 8004162:	d03d      	beq.n	80041e0 <limit_value_by_axis_maximum+0xcc>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004164:	68a7      	ldr	r7, [r4, #8]
 8004166:	2100      	movs	r1, #0
 8004168:	4638      	mov	r0, r7
 800416a:	f7fc ff35 	bl	8000fd8 <__aeabi_fcmpeq>
 800416e:	b950      	cbnz	r0, 8004186 <limit_value_by_axis_maximum+0x72>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8004170:	4639      	mov	r1, r7
 8004172:	68b0      	ldr	r0, [r6, #8]
 8004174:	f7fc fe50 	bl	8000e18 <__aeabi_fdiv>
 8004178:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 800417c:	4639      	mov	r1, r7
 800417e:	4628      	mov	r0, r5
 8004180:	f7fc ff3e 	bl	8001000 <__aeabi_fcmple>
 8004184:	b350      	cbz	r0, 80041dc <limit_value_by_axis_maximum+0xc8>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004186:	68e7      	ldr	r7, [r4, #12]
 8004188:	2100      	movs	r1, #0
 800418a:	4638      	mov	r0, r7
 800418c:	f7fc ff24 	bl	8000fd8 <__aeabi_fcmpeq>
 8004190:	b950      	cbnz	r0, 80041a8 <limit_value_by_axis_maximum+0x94>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8004192:	4639      	mov	r1, r7
 8004194:	68f0      	ldr	r0, [r6, #12]
 8004196:	f7fc fe3f 	bl	8000e18 <__aeabi_fdiv>
 800419a:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 800419e:	4639      	mov	r1, r7
 80041a0:	4628      	mov	r0, r5
 80041a2:	f7fc ff2d 	bl	8001000 <__aeabi_fcmple>
 80041a6:	b1b8      	cbz	r0, 80041d8 <limit_value_by_axis_maximum+0xc4>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 80041a8:	6924      	ldr	r4, [r4, #16]
 80041aa:	2100      	movs	r1, #0
 80041ac:	4620      	mov	r0, r4
 80041ae:	f7fc ff13 	bl	8000fd8 <__aeabi_fcmpeq>
 80041b2:	b950      	cbnz	r0, 80041ca <limit_value_by_axis_maximum+0xb6>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 80041b4:	4621      	mov	r1, r4
 80041b6:	6930      	ldr	r0, [r6, #16]
 80041b8:	f7fc fe2e 	bl	8000e18 <__aeabi_fdiv>
 80041bc:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80041c0:	4621      	mov	r1, r4
 80041c2:	4628      	mov	r0, r5
 80041c4:	f7fc ff1c 	bl	8001000 <__aeabi_fcmple>
 80041c8:	b118      	cbz	r0, 80041d2 <limit_value_by_axis_maximum+0xbe>
    }
  }
  return(limit_value);
}
 80041ca:	4628      	mov	r0, r5
 80041cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  float limit_value = SOME_LARGE_VALUE;
 80041ce:	4d05      	ldr	r5, [pc, #20]	; (80041e4 <limit_value_by_axis_maximum+0xd0>)
 80041d0:	e7b6      	b.n	8004140 <limit_value_by_axis_maximum+0x2c>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 80041d2:	4625      	mov	r5, r4
}
 80041d4:	4628      	mov	r0, r5
 80041d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 80041d8:	463d      	mov	r5, r7
 80041da:	e7e5      	b.n	80041a8 <limit_value_by_axis_maximum+0x94>
 80041dc:	463d      	mov	r5, r7
 80041de:	e7d2      	b.n	8004186 <limit_value_by_axis_maximum+0x72>
 80041e0:	463d      	mov	r5, r7
 80041e2:	e7bf      	b.n	8004164 <limit_value_by_axis_maximum+0x50>
 80041e4:	7f7fffff 	.word	0x7f7fffff

080041e8 <planner_recalculate>:
  to compute an optimal plan, so select carefully. The Arduino 328p memory is already maxed out, but future
  ARM versions should have enough memory and speed for look-ahead blocks numbering up to a hundred or more.

*/
static void planner_recalculate()
{
 80041e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Initialize block index to the last block in the planner buffer.
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 80041ec:	4b7a      	ldr	r3, [pc, #488]	; (80043d8 <planner_recalculate+0x1f0>)
{
 80041ee:	b083      	sub	sp, #12
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	9300      	str	r3, [sp, #0]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d075      	beq.n	80042e4 <planner_recalculate+0xfc>

  // Bail. Can't do anything with one only one plan-able block.
  if (block_index == block_buffer_planned) { return; }
 80041f8:	4a78      	ldr	r2, [pc, #480]	; (80043dc <planner_recalculate+0x1f4>)
  block_index--;
 80041fa:	1e5c      	subs	r4, r3, #1
  if (block_index == block_buffer_planned) { return; }
 80041fc:	f892 8000 	ldrb.w	r8, [r2]
  block_index--;
 8004200:	b2e4      	uxtb	r4, r4
  if (block_index == block_buffer_planned) { return; }
 8004202:	45a0      	cmp	r8, r4
 8004204:	9201      	str	r2, [sp, #4]
 8004206:	d06a      	beq.n	80042de <planner_recalculate+0xf6>
  // Reverse Pass: Coarsely maximize all possible deceleration curves back-planning from the last
  // block in buffer. Cease planning when the last optimal planned or tail pointer is reached.
  // NOTE: Forward pass will later refine and correct the reverse pass to create an optimal plan.
  float entry_speed_sqr;
  plan_block_t *next;
  plan_block_t *current = &block_buffer[block_index];
 8004208:	4d75      	ldr	r5, [pc, #468]	; (80043e0 <planner_recalculate+0x1f8>)
 800420a:	ebc4 1704 	rsb	r7, r4, r4, lsl #4
 800420e:	eb05 0787 	add.w	r7, r5, r7, lsl #2

  // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8004212:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004214:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004216:	f7fc fd4b 	bl	8000cb0 <__aeabi_fmul>
 800421a:	4601      	mov	r1, r0
 800421c:	f7fc fc40 	bl	8000aa0 <__addsf3>
 8004220:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8004224:	4681      	mov	r9, r0
 8004226:	4659      	mov	r1, fp
 8004228:	f107 0a1c 	add.w	sl, r7, #28
 800422c:	f7fc fee8 	bl	8001000 <__aeabi_fcmple>
 8004230:	b900      	cbnz	r0, 8004234 <planner_recalculate+0x4c>
 8004232:	46d9      	mov	r9, fp
 8004234:	f8ca 9000 	str.w	r9, [sl]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8004238:	f04f 0b47 	mov.w	fp, #71	; 0x47
 800423c:	2c00      	cmp	r4, #0
 800423e:	d074      	beq.n	800432a <planner_recalculate+0x142>
 8004240:	9b00      	ldr	r3, [sp, #0]
 8004242:	3b02      	subs	r3, #2
 8004244:	fa5f fb83 	uxtb.w	fp, r3
 8004248:	e06f      	b.n	800432a <planner_recalculate+0x142>
 800424a:	4b63      	ldr	r3, [pc, #396]	; (80043d8 <planner_recalculate+0x1f0>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	9300      	str	r3, [sp, #0]
    }
  }

  // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
  // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 8004250:	ebcb 130b 	rsb	r3, fp, fp, lsl #4
  block_index++;
 8004254:	f10b 0401 	add.w	r4, fp, #1
 8004258:	b2e4      	uxtb	r4, r4
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 800425a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 800425e:	9b01      	ldr	r3, [sp, #4]
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004260:	2c48      	cmp	r4, #72	; 0x48
 8004262:	bf08      	it	eq
 8004264:	2400      	moveq	r4, #0
 8004266:	f893 b000 	ldrb.w	fp, [r3]
 800426a:	e02e      	b.n	80042ca <planner_recalculate+0xe2>
    next = &block_buffer[block_index];

    // Any acceleration detected in the forward pass automatically moves the optimal planned
    // pointer forward, since everything before this is all optimal. In other words, nothing
    // can improve the plan from the buffer tail to the planned pointer by logic.
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 800426c:	f8da 901c 	ldr.w	r9, [sl, #28]
 8004270:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004274:	4648      	mov	r0, r9
 8004276:	4641      	mov	r1, r8
 8004278:	f7fc feb8 	bl	8000fec <__aeabi_fcmplt>
 800427c:	b1a8      	cbz	r0, 80042aa <planner_recalculate+0xc2>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 800427e:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 8004282:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 8004286:	f7fc fd13 	bl	8000cb0 <__aeabi_fmul>
 800428a:	4601      	mov	r1, r0
 800428c:	f7fc fc08 	bl	8000aa0 <__addsf3>
 8004290:	4649      	mov	r1, r9
 8004292:	f7fc fc05 	bl	8000aa0 <__addsf3>
 8004296:	4681      	mov	r9, r0
      // If true, current block is full-acceleration and we can move the planned pointer forward.
      if (entry_speed_sqr < next->entry_speed_sqr) {
 8004298:	4601      	mov	r1, r0
 800429a:	4640      	mov	r0, r8
 800429c:	f7fc fec4 	bl	8001028 <__aeabi_fcmpgt>
 80042a0:	b118      	cbz	r0, 80042aa <planner_recalculate+0xc2>
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 80042a2:	46c8      	mov	r8, r9
 80042a4:	46a3      	mov	fp, r4
 80042a6:	f8c7 901c 	str.w	r9, [r7, #28]

    // Any block set at its maximum entry speed also creates an optimal plan up to this
    // point in the buffer. When the plan is bracketed by either the beginning of the
    // buffer and a maximum entry speed or two maximum entry speeds, every block in between
    // cannot logically be further improved. Hence, we don't have to recompute them anymore.
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 80042aa:	1b32      	subs	r2, r6, r4
 80042ac:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80042b0:	6a10      	ldr	r0, [r2, #32]
 80042b2:	4641      	mov	r1, r8
 80042b4:	f7fc fe90 	bl	8000fd8 <__aeabi_fcmpeq>
  block_index++;
 80042b8:	1c63      	adds	r3, r4, #1
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 80042ba:	2800      	cmp	r0, #0
 80042bc:	bf18      	it	ne
 80042be:	46a3      	movne	fp, r4
  block_index++;
 80042c0:	b2dc      	uxtb	r4, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80042c2:	2c48      	cmp	r4, #72	; 0x48
 80042c4:	bf08      	it	eq
 80042c6:	2400      	moveq	r4, #0
 80042c8:	46ba      	mov	sl, r7
  while (block_index != block_buffer_head) {
 80042ca:	9b00      	ldr	r3, [sp, #0]
    next = &block_buffer[block_index];
 80042cc:	0126      	lsls	r6, r4, #4
 80042ce:	1b37      	subs	r7, r6, r4
  while (block_index != block_buffer_head) {
 80042d0:	429c      	cmp	r4, r3
    next = &block_buffer[block_index];
 80042d2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
  while (block_index != block_buffer_head) {
 80042d6:	d1c9      	bne.n	800426c <planner_recalculate+0x84>
 80042d8:	9b01      	ldr	r3, [sp, #4]
 80042da:	f883 b000 	strb.w	fp, [r3]
    block_index = plan_next_block_index( block_index );
  }
}
 80042de:	b003      	add	sp, #12
 80042e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (block_index == block_buffer_planned) { return; }
 80042e4:	4b3d      	ldr	r3, [pc, #244]	; (80043dc <planner_recalculate+0x1f4>)
 80042e6:	f893 8000 	ldrb.w	r8, [r3]
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042f0:	d0f5      	beq.n	80042de <planner_recalculate+0xf6>
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 80042f2:	f241 03c8 	movw	r3, #4296	; 0x10c8
 80042f6:	f241 02cc 	movw	r2, #4300	; 0x10cc
 80042fa:	4d39      	ldr	r5, [pc, #228]	; (80043e0 <planner_recalculate+0x1f8>)
 80042fc:	58e9      	ldr	r1, [r5, r3]
 80042fe:	58a8      	ldr	r0, [r5, r2]
 8004300:	f7fc fcd6 	bl	8000cb0 <__aeabi_fmul>
 8004304:	4601      	mov	r1, r0
 8004306:	f7fc fbcb 	bl	8000aa0 <__addsf3>
 800430a:	f241 03c4 	movw	r3, #4292	; 0x10c4
 800430e:	58ef      	ldr	r7, [r5, r3]
 8004310:	4604      	mov	r4, r0
 8004312:	4639      	mov	r1, r7
 8004314:	f505 5986 	add.w	r9, r5, #4288	; 0x10c0
 8004318:	f7fc fe72 	bl	8001000 <__aeabi_fcmple>
 800431c:	b900      	cbnz	r0, 8004320 <planner_recalculate+0x138>
 800431e:	463c      	mov	r4, r7
 8004320:	f04f 0b46 	mov.w	fp, #70	; 0x46
  plan_block_t *current = &block_buffer[block_index];
 8004324:	4f2f      	ldr	r7, [pc, #188]	; (80043e4 <planner_recalculate+0x1fc>)
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8004326:	f8c9 4000 	str.w	r4, [r9]
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 800432a:	45d8      	cmp	r8, fp
 800432c:	d045      	beq.n	80043ba <planner_recalculate+0x1d2>
 800432e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80043e8 <planner_recalculate+0x200>
 8004332:	e029      	b.n	8004388 <planner_recalculate+0x1a0>
 8004334:	fa5f fb82 	uxtb.w	fp, r2
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8004338:	f899 2000 	ldrb.w	r2, [r9]
 800433c:	455a      	cmp	r2, fp
 800433e:	d033      	beq.n	80043a8 <planner_recalculate+0x1c0>
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 8004340:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8004344:	eb05 0a86 	add.w	sl, r5, r6, lsl #2
 8004348:	f8da 6020 	ldr.w	r6, [sl, #32]
 800434c:	f8da 001c 	ldr.w	r0, [sl, #28]
 8004350:	4631      	mov	r1, r6
 8004352:	f7fc fe41 	bl	8000fd8 <__aeabi_fcmpeq>
 8004356:	b998      	cbnz	r0, 8004380 <planner_recalculate+0x198>
        entry_speed_sqr = next->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 8004358:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 800435c:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 8004360:	f7fc fca6 	bl	8000cb0 <__aeabi_fmul>
 8004364:	4601      	mov	r1, r0
 8004366:	f7fc fb9b 	bl	8000aa0 <__addsf3>
 800436a:	69f9      	ldr	r1, [r7, #28]
 800436c:	f7fc fb98 	bl	8000aa0 <__addsf3>
 8004370:	4607      	mov	r7, r0
        if (entry_speed_sqr < current->max_entry_speed_sqr) {
 8004372:	4601      	mov	r1, r0
 8004374:	4630      	mov	r0, r6
 8004376:	f7fc fe57 	bl	8001028 <__aeabi_fcmpgt>
 800437a:	b1d8      	cbz	r0, 80043b4 <planner_recalculate+0x1cc>
          current->entry_speed_sqr = entry_speed_sqr;
 800437c:	f8ca 701c 	str.w	r7, [sl, #28]
    while (block_index != block_buffer_planned) {
 8004380:	45c3      	cmp	fp, r8
 8004382:	4627      	mov	r7, r4
 8004384:	f43f af61 	beq.w	800424a <planner_recalculate+0x62>
      current = &block_buffer[block_index];
 8004388:	ebcb 140b 	rsb	r4, fp, fp, lsl #4
 800438c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004390:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8004394:	465e      	mov	r6, fp
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8004396:	f1bb 0f00 	cmp.w	fp, #0
 800439a:	d1cb      	bne.n	8004334 <planner_recalculate+0x14c>
 800439c:	f04f 0b47 	mov.w	fp, #71	; 0x47
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80043a0:	f899 2000 	ldrb.w	r2, [r9]
 80043a4:	455a      	cmp	r2, fp
 80043a6:	d1cb      	bne.n	8004340 <planner_recalculate+0x158>
 80043a8:	f004 f97a 	bl	80086a0 <st_update_plan_block_parameters>
 80043ac:	9b01      	ldr	r3, [sp, #4]
 80043ae:	f893 8000 	ldrb.w	r8, [r3]
 80043b2:	e7c5      	b.n	8004340 <planner_recalculate+0x158>
          current->entry_speed_sqr = current->max_entry_speed_sqr;
 80043b4:	f8ca 601c 	str.w	r6, [sl, #28]
 80043b8:	e7e2      	b.n	8004380 <planner_recalculate+0x198>
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80043ba:	4a0b      	ldr	r2, [pc, #44]	; (80043e8 <planner_recalculate+0x200>)
 80043bc:	7812      	ldrb	r2, [r2, #0]
 80043be:	455a      	cmp	r2, fp
 80043c0:	f47f af46 	bne.w	8004250 <planner_recalculate+0x68>
 80043c4:	f004 f96c 	bl	80086a0 <st_update_plan_block_parameters>
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <planner_recalculate+0x1f0>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	9b01      	ldr	r3, [sp, #4]
 80043d0:	f893 b000 	ldrb.w	fp, [r3]
 80043d4:	e73c      	b.n	8004250 <planner_recalculate+0x68>
 80043d6:	bf00      	nop
 80043d8:	200012e0 	.word	0x200012e0
 80043dc:	200012e1 	.word	0x200012e1
 80043e0:	20000200 	.word	0x20000200
 80043e4:	200012a4 	.word	0x200012a4
 80043e8:	200012e2 	.word	0x200012e2

080043ec <plan_reset>:


void plan_reset()
{
 80043ec:	b538      	push	{r3, r4, r5, lr}
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 80043ee:	222c      	movs	r2, #44	; 0x2c
 80043f0:	2100      	movs	r1, #0
 80043f2:	4807      	ldr	r0, [pc, #28]	; (8004410 <plan_reset+0x24>)
 80043f4:	f006 fc9f 	bl	800ad36 <memset>
}


void plan_reset_buffer()
{
  block_buffer_tail = 0;
 80043f8:	2300      	movs	r3, #0
  block_buffer_head = 0; // Empty = tail
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 80043fa:	2101      	movs	r1, #1
  block_buffer_tail = 0;
 80043fc:	4d05      	ldr	r5, [pc, #20]	; (8004414 <plan_reset+0x28>)
  block_buffer_head = 0; // Empty = tail
 80043fe:	4c06      	ldr	r4, [pc, #24]	; (8004418 <plan_reset+0x2c>)
  block_buffer_planned = 0; // = block_buffer_tail;
 8004400:	4806      	ldr	r0, [pc, #24]	; (800441c <plan_reset+0x30>)
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 8004402:	4a07      	ldr	r2, [pc, #28]	; (8004420 <plan_reset+0x34>)
  block_buffer_tail = 0;
 8004404:	702b      	strb	r3, [r5, #0]
  block_buffer_head = 0; // Empty = tail
 8004406:	7023      	strb	r3, [r4, #0]
  block_buffer_planned = 0; // = block_buffer_tail;
 8004408:	7003      	strb	r3, [r0, #0]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 800440a:	7011      	strb	r1, [r2, #0]
 800440c:	bd38      	pop	{r3, r4, r5, pc}
 800440e:	bf00      	nop
 8004410:	200012e4 	.word	0x200012e4
 8004414:	200012e2 	.word	0x200012e2
 8004418:	200012e0 	.word	0x200012e0
 800441c:	200012e1 	.word	0x200012e1
 8004420:	200012e3 	.word	0x200012e3

08004424 <plan_discard_current_block>:
}


void plan_discard_current_block()
{
  if (block_buffer_head != block_buffer_tail) { // Discard non-empty buffer.
 8004424:	4909      	ldr	r1, [pc, #36]	; (800444c <plan_discard_current_block+0x28>)
 8004426:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <plan_discard_current_block+0x2c>)
 8004428:	780a      	ldrb	r2, [r1, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	4293      	cmp	r3, r2
 800442e:	d00c      	beq.n	800444a <plan_discard_current_block+0x26>
  block_index++;
 8004430:	1c53      	adds	r3, r2, #1
 8004432:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004434:	2b48      	cmp	r3, #72	; 0x48
 8004436:	bf08      	it	eq
 8004438:	2300      	moveq	r3, #0
{
 800443a:	b410      	push	{r4}
    uint8_t block_index = plan_next_block_index( block_buffer_tail );
    // Push block_buffer_planned pointer, if encountered.
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 800443c:	4805      	ldr	r0, [pc, #20]	; (8004454 <plan_discard_current_block+0x30>)
    block_buffer_tail = block_index;
 800443e:	700b      	strb	r3, [r1, #0]
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 8004440:	7804      	ldrb	r4, [r0, #0]
 8004442:	4294      	cmp	r4, r2
 8004444:	bf08      	it	eq
 8004446:	7003      	strbeq	r3, [r0, #0]
  }
}
 8004448:	bc10      	pop	{r4}
 800444a:	4770      	bx	lr
 800444c:	200012e2 	.word	0x200012e2
 8004450:	200012e0 	.word	0x200012e0
 8004454:	200012e1 	.word	0x200012e1

08004458 <plan_get_system_motion_block>:


// Returns address of planner buffer block used by system motions. Called by segment generator.
plan_block_t *plan_get_system_motion_block()
{
  return(&block_buffer[block_buffer_head]);
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <plan_get_system_motion_block+0x10>)
 800445a:	4804      	ldr	r0, [pc, #16]	; (800446c <plan_get_system_motion_block+0x14>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
}
 8004462:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004466:	4770      	bx	lr
 8004468:	200012e0 	.word	0x200012e0
 800446c:	20000200 	.word	0x20000200

08004470 <plan_get_current_block>:


// Returns address of first planner block, if available. Called by various main program functions.
plan_block_t *plan_get_current_block()
{
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <plan_get_current_block+0x1c>)
 8004472:	4a07      	ldr	r2, [pc, #28]	; (8004490 <plan_get_current_block+0x20>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	7812      	ldrb	r2, [r2, #0]
 8004478:	429a      	cmp	r2, r3
  return(&block_buffer[block_buffer_tail]);
 800447a:	bf1d      	ittte	ne
 800447c:	4805      	ldrne	r0, [pc, #20]	; (8004494 <plan_get_current_block+0x24>)
 800447e:	ebc3 1303 	rsbne	r3, r3, r3, lsl #4
 8004482:	eb00 0083 	addne.w	r0, r0, r3, lsl #2
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 8004486:	2000      	moveq	r0, #0
}
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	200012e2 	.word	0x200012e2
 8004490:	200012e0 	.word	0x200012e0
 8004494:	20000200 	.word	0x20000200

08004498 <plan_get_exec_block_exit_speed_sqr>:


float plan_get_exec_block_exit_speed_sqr()
{
  uint8_t block_index = plan_next_block_index(block_buffer_tail);
 8004498:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <plan_get_exec_block_exit_speed_sqr+0x28>)
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800449a:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <plan_get_exec_block_exit_speed_sqr+0x2c>)
  block_index++;
 800449c:	781b      	ldrb	r3, [r3, #0]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800449e:	7812      	ldrb	r2, [r2, #0]
  block_index++;
 80044a0:	3301      	adds	r3, #1
 80044a2:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80044a4:	2b48      	cmp	r3, #72	; 0x48
 80044a6:	bf08      	it	eq
 80044a8:	2300      	moveq	r3, #0
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d006      	beq.n	80044bc <plan_get_exec_block_exit_speed_sqr+0x24>
  return( block_buffer[block_index].entry_speed_sqr );
 80044ae:	4a06      	ldr	r2, [pc, #24]	; (80044c8 <plan_get_exec_block_exit_speed_sqr+0x30>)
 80044b0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80044b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80044b8:	69d8      	ldr	r0, [r3, #28]
 80044ba:	4770      	bx	lr
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80044bc:	2000      	movs	r0, #0
}
 80044be:	4770      	bx	lr
 80044c0:	200012e2 	.word	0x200012e2
 80044c4:	200012e0 	.word	0x200012e0
 80044c8:	20000200 	.word	0x20000200

080044cc <plan_check_full_buffer>:


// Returns the availability status of the block ring buffer. True, if full.
uint8_t plan_check_full_buffer()
{
  if (block_buffer_tail == next_buffer_head) { return(true); }
 80044cc:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <plan_check_full_buffer+0x14>)
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <plan_check_full_buffer+0x18>)
 80044d0:	7810      	ldrb	r0, [r2, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
  return(false);
}
 80044d4:	1ac0      	subs	r0, r0, r3
 80044d6:	fab0 f080 	clz	r0, r0
 80044da:	0940      	lsrs	r0, r0, #5
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	200012e2 	.word	0x200012e2
 80044e4:	200012e3 	.word	0x200012e3

080044e8 <plan_compute_profile_nominal_speed>:


// Computes and returns block nominal speed based on running condition and override values.
// NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
float plan_compute_profile_nominal_speed(plan_block_t *block)
{
 80044e8:	b538      	push	{r3, r4, r5, lr}
  float nominal_speed = block->programmed_rate;
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80044ea:	7e83      	ldrb	r3, [r0, #26]
  float nominal_speed = block->programmed_rate;
 80044ec:	6b45      	ldr	r5, [r0, #52]	; 0x34
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80044ee:	07da      	lsls	r2, r3, #31
 80044f0:	d514      	bpl.n	800451c <plan_compute_profile_nominal_speed+0x34>
 80044f2:	4b16      	ldr	r3, [pc, #88]	; (800454c <plan_compute_profile_nominal_speed+0x64>)
 80044f4:	7a58      	ldrb	r0, [r3, #9]
 80044f6:	f7fc fb87 	bl	8000c08 <__aeabi_i2f>
 80044fa:	4915      	ldr	r1, [pc, #84]	; (8004550 <plan_compute_profile_nominal_speed+0x68>)
 80044fc:	f7fc fbd8 	bl	8000cb0 <__aeabi_fmul>
 8004500:	4629      	mov	r1, r5
 8004502:	f7fc fbd5 	bl	8000cb0 <__aeabi_fmul>
 8004506:	4604      	mov	r4, r0
 8004508:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800450c:	4620      	mov	r0, r4
 800450e:	f7fc fd81 	bl	8001014 <__aeabi_fcmpge>
 8004512:	b908      	cbnz	r0, 8004518 <plan_compute_profile_nominal_speed+0x30>
 8004514:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
  }
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
  return(MINIMUM_FEED_RATE);
}
 8004518:	4620      	mov	r0, r4
 800451a:	bd38      	pop	{r3, r4, r5, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 800451c:	075b      	lsls	r3, r3, #29
 800451e:	4604      	mov	r4, r0
 8004520:	d40b      	bmi.n	800453a <plan_compute_profile_nominal_speed+0x52>
 8004522:	4b0a      	ldr	r3, [pc, #40]	; (800454c <plan_compute_profile_nominal_speed+0x64>)
 8004524:	7a18      	ldrb	r0, [r3, #8]
 8004526:	f7fc fb6f 	bl	8000c08 <__aeabi_i2f>
 800452a:	4909      	ldr	r1, [pc, #36]	; (8004550 <plan_compute_profile_nominal_speed+0x68>)
 800452c:	f7fc fbc0 	bl	8000cb0 <__aeabi_fmul>
 8004530:	4601      	mov	r1, r0
 8004532:	4628      	mov	r0, r5
 8004534:	f7fc fbbc 	bl	8000cb0 <__aeabi_fmul>
 8004538:	4605      	mov	r5, r0
 800453a:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800453c:	4629      	mov	r1, r5
 800453e:	4620      	mov	r0, r4
 8004540:	f7fc fd5e 	bl	8001000 <__aeabi_fcmple>
 8004544:	2800      	cmp	r0, #0
 8004546:	d1df      	bne.n	8004508 <plan_compute_profile_nominal_speed+0x20>
 8004548:	462c      	mov	r4, r5
 800454a:	e7dd      	b.n	8004508 <plan_compute_profile_nominal_speed+0x20>
 800454c:	20001b6c 	.word	0x20001b6c
 8004550:	3c23d70a 	.word	0x3c23d70a

08004554 <plan_update_velocity_profile_parameters>:
}


// Re-calculates buffered motions profile parameters upon a motion-based override change.
void plan_update_velocity_profile_parameters()
{
 8004554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004558:	4d35      	ldr	r5, [pc, #212]	; (8004630 <plan_update_velocity_profile_parameters+0xdc>)
  uint8_t block_index = block_buffer_tail;
 800455a:	4a36      	ldr	r2, [pc, #216]	; (8004634 <plan_update_velocity_profile_parameters+0xe0>)
 800455c:	4b36      	ldr	r3, [pc, #216]	; (8004638 <plan_update_velocity_profile_parameters+0xe4>)
{
 800455e:	b083      	sub	sp, #12
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004560:	7a28      	ldrb	r0, [r5, #8]
  uint8_t block_index = block_buffer_tail;
 8004562:	7814      	ldrb	r4, [r2, #0]
 8004564:	f893 b000 	ldrb.w	fp, [r3]
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004568:	f7fc fb4e 	bl	8000c08 <__aeabi_i2f>
 800456c:	4933      	ldr	r1, [pc, #204]	; (800463c <plan_update_velocity_profile_parameters+0xe8>)
 800456e:	f7fc fb9f 	bl	8000cb0 <__aeabi_fmul>
 8004572:	9001      	str	r0, [sp, #4]
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004574:	7a68      	ldrb	r0, [r5, #9]
 8004576:	f7fc fb47 	bl	8000c08 <__aeabi_i2f>
 800457a:	4930      	ldr	r1, [pc, #192]	; (800463c <plan_update_velocity_profile_parameters+0xe8>)
 800457c:	f7fc fb98 	bl	8000cb0 <__aeabi_fmul>
  plan_block_t *block;
  float nominal_speed;
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 8004580:	4f2f      	ldr	r7, [pc, #188]	; (8004640 <plan_update_velocity_profile_parameters+0xec>)
 8004582:	9000      	str	r0, [sp, #0]
  while (block_index != block_buffer_head) {
    block = &block_buffer[block_index];
 8004584:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8004648 <plan_update_velocity_profile_parameters+0xf4>
 8004588:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
  while (block_index != block_buffer_head) {
 800458c:	e023      	b.n	80045d6 <plan_update_velocity_profile_parameters+0x82>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 800458e:	4641      	mov	r1, r8
 8004590:	9800      	ldr	r0, [sp, #0]
 8004592:	f7fc fb8d 	bl	8000cb0 <__aeabi_fmul>
 8004596:	4605      	mov	r5, r0
 8004598:	4649      	mov	r1, r9
 800459a:	4628      	mov	r0, r5
 800459c:	f7fc fd3a 	bl	8001014 <__aeabi_fcmpge>
 80045a0:	b900      	cbnz	r0, 80045a4 <plan_update_velocity_profile_parameters+0x50>
 80045a2:	464d      	mov	r5, r9
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 80045a4:	4629      	mov	r1, r5
 80045a6:	4638      	mov	r0, r7
 80045a8:	f8d6 802c 	ldr.w	r8, [r6, #44]	; 0x2c
 80045ac:	f7fc fd1e 	bl	8000fec <__aeabi_fcmplt>
 80045b0:	2800      	cmp	r0, #0
 80045b2:	d031      	beq.n	8004618 <plan_update_velocity_profile_parameters+0xc4>
 80045b4:	4639      	mov	r1, r7
 80045b6:	4638      	mov	r0, r7
 80045b8:	f7fc fb7a 	bl	8000cb0 <__aeabi_fmul>
 80045bc:	4607      	mov	r7, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 80045be:	4641      	mov	r1, r8
 80045c0:	4638      	mov	r0, r7
 80045c2:	f7fc fd31 	bl	8001028 <__aeabi_fcmpgt>
 80045c6:	bb20      	cbnz	r0, 8004612 <plan_update_velocity_profile_parameters+0xbe>
 80045c8:	6237      	str	r7, [r6, #32]
  block_index++;
 80045ca:	3401      	adds	r4, #1
 80045cc:	b2e4      	uxtb	r4, r4
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80045ce:	2c48      	cmp	r4, #72	; 0x48
 80045d0:	bf08      	it	eq
 80045d2:	2400      	moveq	r4, #0
 80045d4:	462f      	mov	r7, r5
  while (block_index != block_buffer_head) {
 80045d6:	455c      	cmp	r4, fp
 80045d8:	d024      	beq.n	8004624 <plan_update_velocity_profile_parameters+0xd0>
    block = &block_buffer[block_index];
 80045da:	0125      	lsls	r5, r4, #4
 80045dc:	1b2e      	subs	r6, r5, r4
 80045de:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80045e2:	7eb3      	ldrb	r3, [r6, #26]
  float nominal_speed = block->programmed_rate;
 80045e4:	f8d6 8034 	ldr.w	r8, [r6, #52]	; 0x34
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80045e8:	07da      	lsls	r2, r3, #31
 80045ea:	d4d0      	bmi.n	800458e <plan_update_velocity_profile_parameters+0x3a>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80045ec:	075b      	lsls	r3, r3, #29
 80045ee:	d404      	bmi.n	80045fa <plan_update_velocity_profile_parameters+0xa6>
 80045f0:	4640      	mov	r0, r8
 80045f2:	9901      	ldr	r1, [sp, #4]
 80045f4:	f7fc fb5c 	bl	8000cb0 <__aeabi_fmul>
 80045f8:	4680      	mov	r8, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 80045fa:	1b2d      	subs	r5, r5, r4
 80045fc:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
 8004600:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8004602:	4641      	mov	r1, r8
 8004604:	4628      	mov	r0, r5
 8004606:	f7fc fcfb 	bl	8001000 <__aeabi_fcmple>
 800460a:	2800      	cmp	r0, #0
 800460c:	d1c4      	bne.n	8004598 <plan_update_velocity_profile_parameters+0x44>
 800460e:	4645      	mov	r5, r8
 8004610:	e7c2      	b.n	8004598 <plan_update_velocity_profile_parameters+0x44>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004612:	f8c6 8020 	str.w	r8, [r6, #32]
 8004616:	e7d8      	b.n	80045ca <plan_update_velocity_profile_parameters+0x76>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004618:	4629      	mov	r1, r5
 800461a:	4628      	mov	r0, r5
 800461c:	f7fc fb48 	bl	8000cb0 <__aeabi_fmul>
 8004620:	4607      	mov	r7, r0
 8004622:	e7cc      	b.n	80045be <plan_update_velocity_profile_parameters+0x6a>
    nominal_speed = plan_compute_profile_nominal_speed(block);
    plan_compute_profile_parameters(block, nominal_speed, prev_nominal_speed);
    prev_nominal_speed = nominal_speed;
    block_index = plan_next_block_index(block_index);
  }
  pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 8004624:	4b07      	ldr	r3, [pc, #28]	; (8004644 <plan_update_velocity_profile_parameters+0xf0>)
 8004626:	629f      	str	r7, [r3, #40]	; 0x28
}
 8004628:	b003      	add	sp, #12
 800462a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800462e:	bf00      	nop
 8004630:	20001b6c 	.word	0x20001b6c
 8004634:	200012e2 	.word	0x200012e2
 8004638:	200012e0 	.word	0x200012e0
 800463c:	3c23d70a 	.word	0x3c23d70a
 8004640:	7f7fffff 	.word	0x7f7fffff
 8004644:	200012e4 	.word	0x200012e4
 8004648:	20000200 	.word	0x20000200

0800464c <plan_buffer_line>:
   The system motion condition tells the planner to plan a motion in the always unused block buffer
   head. It avoids changing the planner state and preserves the buffer to ensure subsequent gcode
   motions are still planned correctly, while the stepper module only points to the block buffer head
   to execute the special system motion. */
uint8_t plan_buffer_line(float *target, plan_line_data_t *pl_data)
{
 800464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Prepare and initialize new block. Copy relevant pl_data for block execution.
  plan_block_t *block = &block_buffer[block_buffer_head];
 8004650:	4b7e      	ldr	r3, [pc, #504]	; (800484c <plan_buffer_line+0x200>)
{
 8004652:	468b      	mov	fp, r1
  plan_block_t *block = &block_buffer[block_buffer_head];
 8004654:	781e      	ldrb	r6, [r3, #0]
 8004656:	4d7e      	ldr	r5, [pc, #504]	; (8004850 <plan_buffer_line+0x204>)
 8004658:	0137      	lsls	r7, r6, #4
 800465a:	eba7 0806 	sub.w	r8, r7, r6
 800465e:	eb05 0888 	add.w	r8, r5, r8, lsl #2
{
 8004662:	b097      	sub	sp, #92	; 0x5c
 8004664:	4682      	mov	sl, r0
  memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 8004666:	223c      	movs	r2, #60	; 0x3c
 8004668:	2100      	movs	r1, #0
 800466a:	4640      	mov	r0, r8
 800466c:	f006 fb63 	bl	800ad36 <memset>
  block->condition = pl_data->condition;
 8004670:	f89b 3008 	ldrb.w	r3, [fp, #8]
  #ifdef VARIABLE_SPINDLE
    block->spindle_speed = pl_data->spindle_speed;
 8004674:	f8db 2004 	ldr.w	r2, [fp, #4]
  int32_t target_steps[N_AXIS], position_steps[N_AXIS];
  float unit_vec[N_AXIS], delta_mm;
  uint8_t idx;

  // Copy position data based on type of motion being planned.
  if (block->condition & PL_COND_FLAG_SYSTEM_MOTION) {
 8004678:	079c      	lsls	r4, r3, #30
#ifdef COREXY
    position_steps[X_AXIS] = system_convert_corexy_to_x_axis_steps(sys_position);
    position_steps[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
    position_steps[Z_AXIS] = sys_position[Z_AXIS];
#else
    memcpy(position_steps, sys_position, sizeof(sys_position));
 800467a:	bf4c      	ite	mi
 800467c:	f8df e1d8 	ldrmi.w	lr, [pc, #472]	; 8004858 <plan_buffer_line+0x20c>
#endif
  }
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8004680:	f8df e1d0 	ldrpl.w	lr, [pc, #464]	; 8004854 <plan_buffer_line+0x208>
  block->condition = pl_data->condition;
 8004684:	f888 301a 	strb.w	r3, [r8, #26]
    block->spindle_speed = pl_data->spindle_speed;
 8004688:	f8c8 2038 	str.w	r2, [r8, #56]	; 0x38
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 800468c:	ac07      	add	r4, sp, #28
 800468e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        delta_mm = (target_steps[X_AXIS]-position_steps[X_AXIS] - target_steps[Y_AXIS]+position_steps[Y_AXIS])/settings.steps_per_mm[idx];
      } else {
        delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
      }
    #else
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004694:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800485c <plan_buffer_line+0x210>
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8004698:	f8de 3000 	ldr.w	r3, [lr]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800469c:	f8d9 2000 	ldr.w	r2, [r9]
 80046a0:	f8da 1000 	ldr.w	r1, [sl]
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 80046a4:	6023      	str	r3, [r4, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80046a6:	4610      	mov	r0, r2
 80046a8:	9201      	str	r2, [sp, #4]
 80046aa:	f7fc fb01 	bl	8000cb0 <__aeabi_fmul>
 80046ae:	f006 fbff 	bl	800aeb0 <lroundf>
 80046b2:	4686      	mov	lr, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80046b4:	1bb9      	subs	r1, r7, r6
 80046b6:	9807      	ldr	r0, [sp, #28]
 80046b8:	0089      	lsls	r1, r1, #2
 80046ba:	186b      	adds	r3, r5, r1
 80046bc:	ebae 0000 	sub.w	r0, lr, r0
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80046c0:	695a      	ldr	r2, [r3, #20]
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80046c2:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 80046c6:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80046ca:	4294      	cmp	r4, r2
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80046cc:	506c      	str	r4, [r5, r1]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80046ce:	bf38      	it	cc
 80046d0:	4614      	movcc	r4, r2
 80046d2:	615c      	str	r4, [r3, #20]
 80046d4:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80046d6:	f8cd e008 	str.w	lr, [sp, #8]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80046da:	f7fc fa95 	bl	8000c08 <__aeabi_i2f>
 80046de:	9a01      	ldr	r2, [sp, #4]
 80046e0:	4611      	mov	r1, r2
 80046e2:	f7fc fb99 	bl	8000e18 <__aeabi_fdiv>
	  #endif
    unit_vec[idx] = delta_mm; // Store unit vector numerator

    // Set direction bits. Bit enabled always means direction is negative.
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80046e6:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80046e8:	900c      	str	r0, [sp, #48]	; 0x30
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80046ea:	f7fc fc7f 	bl	8000fec <__aeabi_fcmplt>
 80046ee:	9b00      	ldr	r3, [sp, #0]
 80046f0:	2800      	cmp	r0, #0
 80046f2:	f040 814f 	bne.w	8004994 <plan_buffer_line+0x348>
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80046f6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80046fa:	f8da 1004 	ldr.w	r1, [sl, #4]
 80046fe:	4610      	mov	r0, r2
 8004700:	9201      	str	r2, [sp, #4]
 8004702:	f7fc fad5 	bl	8000cb0 <__aeabi_fmul>
 8004706:	f006 fbd3 	bl	800aeb0 <lroundf>
 800470a:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800470c:	9808      	ldr	r0, [sp, #32]
 800470e:	1bbb      	subs	r3, r7, r6
 8004710:	1a08      	subs	r0, r1, r0
 8004712:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 8004716:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800471a:	4574      	cmp	r4, lr
 800471c:	bf38      	it	cc
 800471e:	4674      	movcc	r4, lr
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004720:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004724:	f8c3 e004 	str.w	lr, [r3, #4]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004728:	615c      	str	r4, [r3, #20]
 800472a:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800472c:	9103      	str	r1, [sp, #12]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 800472e:	f7fc fa6b 	bl	8000c08 <__aeabi_i2f>
 8004732:	9a01      	ldr	r2, [sp, #4]
 8004734:	4611      	mov	r1, r2
 8004736:	f7fc fb6f 	bl	8000e18 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800473a:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 800473c:	900d      	str	r0, [sp, #52]	; 0x34
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800473e:	f7fc fc55 	bl	8000fec <__aeabi_fcmplt>
 8004742:	9b00      	ldr	r3, [sp, #0]
 8004744:	2800      	cmp	r0, #0
 8004746:	f040 8131 	bne.w	80049ac <plan_buffer_line+0x360>
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800474a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800474e:	f8da 1008 	ldr.w	r1, [sl, #8]
 8004752:	4610      	mov	r0, r2
 8004754:	9201      	str	r2, [sp, #4]
 8004756:	f7fc faab 	bl	8000cb0 <__aeabi_fmul>
 800475a:	f006 fba9 	bl	800aeb0 <lroundf>
 800475e:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004762:	1bbb      	subs	r3, r7, r6
 8004764:	1a08      	subs	r0, r1, r0
 8004766:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 800476a:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800476e:	4574      	cmp	r4, lr
 8004770:	bf38      	it	cc
 8004772:	4674      	movcc	r4, lr
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004774:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004778:	f8c3 e008 	str.w	lr, [r3, #8]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800477c:	615c      	str	r4, [r3, #20]
 800477e:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004780:	9104      	str	r1, [sp, #16]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004782:	f7fc fa41 	bl	8000c08 <__aeabi_i2f>
 8004786:	9a01      	ldr	r2, [sp, #4]
 8004788:	4611      	mov	r1, r2
 800478a:	f7fc fb45 	bl	8000e18 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800478e:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8004790:	900e      	str	r0, [sp, #56]	; 0x38
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004792:	f7fc fc2b 	bl	8000fec <__aeabi_fcmplt>
 8004796:	9b00      	ldr	r3, [sp, #0]
 8004798:	2800      	cmp	r0, #0
 800479a:	f040 8101 	bne.w	80049a0 <plan_buffer_line+0x354>
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800479e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80047a2:	f8da 100c 	ldr.w	r1, [sl, #12]
 80047a6:	4610      	mov	r0, r2
 80047a8:	9201      	str	r2, [sp, #4]
 80047aa:	f7fc fa81 	bl	8000cb0 <__aeabi_fmul>
 80047ae:	f006 fb7f 	bl	800aeb0 <lroundf>
 80047b2:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80047b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80047b6:	1bbb      	subs	r3, r7, r6
 80047b8:	1a08      	subs	r0, r1, r0
 80047ba:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 80047be:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80047c2:	4574      	cmp	r4, lr
 80047c4:	bf38      	it	cc
 80047c6:	4674      	movcc	r4, lr
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80047c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80047cc:	f8c3 e00c 	str.w	lr, [r3, #12]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80047d0:	615c      	str	r4, [r3, #20]
 80047d2:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80047d4:	9105      	str	r1, [sp, #20]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80047d6:	f7fc fa17 	bl	8000c08 <__aeabi_i2f>
 80047da:	9a01      	ldr	r2, [sp, #4]
 80047dc:	4611      	mov	r1, r2
 80047de:	f7fc fb1b 	bl	8000e18 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80047e2:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80047e4:	900f      	str	r0, [sp, #60]	; 0x3c
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80047e6:	f7fc fc01 	bl	8000fec <__aeabi_fcmplt>
 80047ea:	9b00      	ldr	r3, [sp, #0]
 80047ec:	2800      	cmp	r0, #0
 80047ee:	f040 80cb 	bne.w	8004988 <plan_buffer_line+0x33c>
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80047f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80047f6:	f8da 1010 	ldr.w	r1, [sl, #16]
 80047fa:	4618      	mov	r0, r3
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	f7fc fa57 	bl	8000cb0 <__aeabi_fmul>
 8004802:	f006 fb55 	bl	800aeb0 <lroundf>
 8004806:	4602      	mov	r2, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004808:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800480a:	eba7 0a06 	sub.w	sl, r7, r6
 800480e:	1a10      	subs	r0, r2, r0
 8004810:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 8004814:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004818:	428c      	cmp	r4, r1
 800481a:	bf38      	it	cc
 800481c:	460c      	movcc	r4, r1
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800481e:	eb05 0a8a 	add.w	sl, r5, sl, lsl #2
 8004822:	f8ca 1010 	str.w	r1, [sl, #16]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004826:	f8ca 4014 	str.w	r4, [sl, #20]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800482a:	9206      	str	r2, [sp, #24]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 800482c:	f7fc f9ec 	bl	8000c08 <__aeabi_i2f>
 8004830:	9b00      	ldr	r3, [sp, #0]
 8004832:	4619      	mov	r1, r3
 8004834:	f7fc faf0 	bl	8000e18 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004838:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 800483a:	9010      	str	r0, [sp, #64]	; 0x40
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800483c:	f7fc fbd6 	bl	8000fec <__aeabi_fcmplt>
 8004840:	b970      	cbnz	r0, 8004860 <plan_buffer_line+0x214>
  }

  // Bail if this is a zero-length block. Highly unlikely to occur.
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 8004842:	b9b4      	cbnz	r4, 8004872 <plan_buffer_line+0x226>
 8004844:	4620      	mov	r0, r4

    // Finish up by recalculating the plan with the new block.
    planner_recalculate();
  }
  return(PLAN_OK);
}
 8004846:	b017      	add	sp, #92	; 0x5c
 8004848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800484c:	200012e0 	.word	0x200012e0
 8004850:	20000200 	.word	0x20000200
 8004854:	200012e4 	.word	0x200012e4
 8004858:	20001b98 	.word	0x20001b98
 800485c:	20001d30 	.word	0x20001d30
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004860:	4a9f      	ldr	r2, [pc, #636]	; (8004ae0 <plan_buffer_line+0x494>)
 8004862:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 8004866:	8912      	ldrh	r2, [r2, #8]
 8004868:	4313      	orrs	r3, r2
 800486a:	f8aa 3018 	strh.w	r3, [sl, #24]
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 800486e:	2c00      	cmp	r4, #0
 8004870:	d0e8      	beq.n	8004844 <plan_buffer_line+0x1f8>
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 8004872:	a80c      	add	r0, sp, #48	; 0x30
 8004874:	f7ff fbd0 	bl	8004018 <convert_delta_vector_to_unit_vector>
 8004878:	1bbc      	subs	r4, r7, r6
 800487a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800487e:	62a0      	str	r0, [r4, #40]	; 0x28
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 8004880:	a90c      	add	r1, sp, #48	; 0x30
 8004882:	4898      	ldr	r0, [pc, #608]	; (8004ae4 <plan_buffer_line+0x498>)
 8004884:	f7ff fc46 	bl	8004114 <limit_value_by_axis_maximum>
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004888:	a90c      	add	r1, sp, #48	; 0x30
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 800488a:	6260      	str	r0, [r4, #36]	; 0x24
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 800488c:	4896      	ldr	r0, [pc, #600]	; (8004ae8 <plan_buffer_line+0x49c>)
 800488e:	f7ff fc41 	bl	8004114 <limit_value_by_axis_maximum>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8004892:	f894 a01a 	ldrb.w	sl, [r4, #26]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004896:	6320      	str	r0, [r4, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8004898:	f01a 0f01 	tst.w	sl, #1
 800489c:	f000 808c 	beq.w	80049b8 <plan_buffer_line+0x36c>
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 80048a0:	6360      	str	r0, [r4, #52]	; 0x34
  if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 80048a2:	4b92      	ldr	r3, [pc, #584]	; (8004aec <plan_buffer_line+0x4a0>)
 80048a4:	4a92      	ldr	r2, [pc, #584]	; (8004af0 <plan_buffer_line+0x4a4>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	7812      	ldrb	r2, [r2, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d003      	beq.n	80048b6 <plan_buffer_line+0x26a>
 80048ae:	f01a 0f02 	tst.w	sl, #2
 80048b2:	f000 808c 	beq.w	80049ce <plan_buffer_line+0x382>
    block->entry_speed_sqr = 0.0f;
 80048b6:	2200      	movs	r2, #0
 80048b8:	1bbb      	subs	r3, r7, r6
 80048ba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80048be:	61da      	str	r2, [r3, #28]
    block->max_junction_speed_sqr = 0.0f; // Starting from rest. Enforce start from zero velocity.
 80048c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (!(block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 80048c2:	1bbb      	subs	r3, r7, r6
 80048c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80048c8:	7e9a      	ldrb	r2, [r3, #26]
 80048ca:	0790      	lsls	r0, r2, #30
 80048cc:	f100 80f0 	bmi.w	8004ab0 <plan_buffer_line+0x464>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80048d0:	07d1      	lsls	r1, r2, #31
  float nominal_speed = block->programmed_rate;
 80048d2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80048d4:	f100 80e0 	bmi.w	8004a98 <plan_buffer_line+0x44c>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80048d8:	0753      	lsls	r3, r2, #29
 80048da:	d40a      	bmi.n	80048f2 <plan_buffer_line+0x2a6>
 80048dc:	4b85      	ldr	r3, [pc, #532]	; (8004af4 <plan_buffer_line+0x4a8>)
 80048de:	7a18      	ldrb	r0, [r3, #8]
 80048e0:	f7fc f992 	bl	8000c08 <__aeabi_i2f>
 80048e4:	4621      	mov	r1, r4
 80048e6:	f7fc f9e3 	bl	8000cb0 <__aeabi_fmul>
 80048ea:	4983      	ldr	r1, [pc, #524]	; (8004af8 <plan_buffer_line+0x4ac>)
 80048ec:	f7fc f9e0 	bl	8000cb0 <__aeabi_fmul>
 80048f0:	4604      	mov	r4, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 80048f2:	1bbe      	subs	r6, r7, r6
 80048f4:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 80048f8:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80048fa:	4621      	mov	r1, r4
 80048fc:	4630      	mov	r0, r6
 80048fe:	f7fc fb7f 	bl	8001000 <__aeabi_fcmple>
 8004902:	b900      	cbnz	r0, 8004906 <plan_buffer_line+0x2ba>
 8004904:	4626      	mov	r6, r4
 8004906:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800490a:	4630      	mov	r0, r6
 800490c:	f7fc fb82 	bl	8001014 <__aeabi_fcmpge>
 8004910:	b908      	cbnz	r0, 8004916 <plan_buffer_line+0x2ca>
 8004912:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8004916:	4f79      	ldr	r7, [pc, #484]	; (8004afc <plan_buffer_line+0x4b0>)
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004918:	4631      	mov	r1, r6
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 800491a:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800491c:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004920:	4628      	mov	r0, r5
 8004922:	f7fc fb63 	bl	8000fec <__aeabi_fcmplt>
 8004926:	2800      	cmp	r0, #0
 8004928:	f000 80c9 	beq.w	8004abe <plan_buffer_line+0x472>
 800492c:	4629      	mov	r1, r5
 800492e:	4628      	mov	r0, r5
 8004930:	f7fc f9be 	bl	8000cb0 <__aeabi_fmul>
 8004934:	4605      	mov	r5, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004936:	4621      	mov	r1, r4
 8004938:	4628      	mov	r0, r5
 800493a:	f7fc fb75 	bl	8001028 <__aeabi_fcmpgt>
 800493e:	2800      	cmp	r0, #0
 8004940:	f040 80ba 	bne.w	8004ab8 <plan_buffer_line+0x46c>
 8004944:	f8c8 5020 	str.w	r5, [r8, #32]
    pl.previous_nominal_speed = nominal_speed;
 8004948:	62be      	str	r6, [r7, #40]	; 0x28
    block_buffer_head = next_buffer_head;
 800494a:	4f6d      	ldr	r7, [pc, #436]	; (8004b00 <plan_buffer_line+0x4b4>)
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 800494c:	4c6d      	ldr	r4, [pc, #436]	; (8004b04 <plan_buffer_line+0x4b8>)
    block_buffer_head = next_buffer_head;
 800494e:	f897 e000 	ldrb.w	lr, [r7]
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004952:	ad0c      	add	r5, sp, #48	; 0x30
  block_index++;
 8004954:	f10e 0601 	add.w	r6, lr, #1
 8004958:	b2f6      	uxtb	r6, r6
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 800495a:	2e48      	cmp	r6, #72	; 0x48
 800495c:	bf08      	it	eq
 800495e:	2600      	moveq	r6, #0
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004964:	682b      	ldr	r3, [r5, #0]
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004966:	ad02      	add	r5, sp, #8
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004968:	f844 3924 	str.w	r3, [r4], #-36
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 800496c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800496e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004970:	682b      	ldr	r3, [r5, #0]
    block_buffer_head = next_buffer_head;
 8004972:	4a5f      	ldr	r2, [pc, #380]	; (8004af0 <plan_buffer_line+0x4a4>)
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004974:	6023      	str	r3, [r4, #0]
    block_buffer_head = next_buffer_head;
 8004976:	f882 e000 	strb.w	lr, [r2]
    next_buffer_head = plan_next_block_index(block_buffer_head);
 800497a:	703e      	strb	r6, [r7, #0]
    planner_recalculate();
 800497c:	f7ff fc34 	bl	80041e8 <planner_recalculate>
  return(PLAN_OK);
 8004980:	2001      	movs	r0, #1
}
 8004982:	b017      	add	sp, #92	; 0x5c
 8004984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004988:	4955      	ldr	r1, [pc, #340]	; (8004ae0 <plan_buffer_line+0x494>)
 800498a:	8b1a      	ldrh	r2, [r3, #24]
 800498c:	88c9      	ldrh	r1, [r1, #6]
 800498e:	430a      	orrs	r2, r1
 8004990:	831a      	strh	r2, [r3, #24]
 8004992:	e72e      	b.n	80047f2 <plan_buffer_line+0x1a6>
 8004994:	4a52      	ldr	r2, [pc, #328]	; (8004ae0 <plan_buffer_line+0x494>)
 8004996:	8b19      	ldrh	r1, [r3, #24]
 8004998:	8812      	ldrh	r2, [r2, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	831a      	strh	r2, [r3, #24]
 800499e:	e6aa      	b.n	80046f6 <plan_buffer_line+0xaa>
 80049a0:	494f      	ldr	r1, [pc, #316]	; (8004ae0 <plan_buffer_line+0x494>)
 80049a2:	8b1a      	ldrh	r2, [r3, #24]
 80049a4:	8889      	ldrh	r1, [r1, #4]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	831a      	strh	r2, [r3, #24]
 80049aa:	e6f8      	b.n	800479e <plan_buffer_line+0x152>
 80049ac:	494c      	ldr	r1, [pc, #304]	; (8004ae0 <plan_buffer_line+0x494>)
 80049ae:	8b1a      	ldrh	r2, [r3, #24]
 80049b0:	8849      	ldrh	r1, [r1, #2]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	831a      	strh	r2, [r3, #24]
 80049b6:	e6c8      	b.n	800474a <plan_buffer_line+0xfe>
    block->programmed_rate = pl_data->feed_rate;
 80049b8:	f8db 1000 	ldr.w	r1, [fp]
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 80049bc:	f01a 0f08 	tst.w	sl, #8
    block->programmed_rate = pl_data->feed_rate;
 80049c0:	6361      	str	r1, [r4, #52]	; 0x34
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 80049c2:	f43f af6e 	beq.w	80048a2 <plan_buffer_line+0x256>
 80049c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80049c8:	f7fc f972 	bl	8000cb0 <__aeabi_fmul>
 80049cc:	e768      	b.n	80048a0 <plan_buffer_line+0x254>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80049ce:	4c4b      	ldr	r4, [pc, #300]	; (8004afc <plan_buffer_line+0x4b0>)
 80049d0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80049d4:	f8d4 a014 	ldr.w	sl, [r4, #20]
 80049d8:	4658      	mov	r0, fp
 80049da:	4651      	mov	r1, sl
 80049dc:	f7fc f968 	bl	8000cb0 <__aeabi_fmul>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80049e0:	4651      	mov	r1, sl
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80049e2:	f100 4a00 	add.w	sl, r0, #2147483648	; 0x80000000
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80049e6:	4658      	mov	r0, fp
 80049e8:	f7fc f858 	bl	8000a9c <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80049ec:	69a3      	ldr	r3, [r4, #24]
 80049ee:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80049f2:	4619      	mov	r1, r3
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80049f4:	9011      	str	r0, [sp, #68]	; 0x44
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80049f6:	4658      	mov	r0, fp
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	f7fc f959 	bl	8000cb0 <__aeabi_fmul>
 80049fe:	4601      	mov	r1, r0
 8004a00:	4650      	mov	r0, sl
 8004a02:	f7fc f84b 	bl	8000a9c <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a06:	9b00      	ldr	r3, [sp, #0]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a08:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4658      	mov	r0, fp
 8004a0e:	f7fc f845 	bl	8000a9c <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a12:	69e3      	ldr	r3, [r4, #28]
 8004a14:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8004a18:	4619      	mov	r1, r3
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a1a:	9012      	str	r0, [sp, #72]	; 0x48
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a1c:	4658      	mov	r0, fp
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	f7fc f946 	bl	8000cb0 <__aeabi_fmul>
 8004a24:	4601      	mov	r1, r0
 8004a26:	4650      	mov	r0, sl
 8004a28:	f7fc f838 	bl	8000a9c <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a2c:	9b00      	ldr	r3, [sp, #0]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a2e:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a30:	4619      	mov	r1, r3
 8004a32:	4658      	mov	r0, fp
 8004a34:	f7fc f832 	bl	8000a9c <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a38:	6a23      	ldr	r3, [r4, #32]
 8004a3a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8004a3e:	4619      	mov	r1, r3
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a40:	9013      	str	r0, [sp, #76]	; 0x4c
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a42:	4658      	mov	r0, fp
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	f7fc f933 	bl	8000cb0 <__aeabi_fmul>
 8004a4a:	4601      	mov	r1, r0
 8004a4c:	4650      	mov	r0, sl
 8004a4e:	f7fc f825 	bl	8000a9c <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a52:	9b00      	ldr	r3, [sp, #0]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a54:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a56:	4619      	mov	r1, r3
 8004a58:	4658      	mov	r0, fp
 8004a5a:	f7fc f81f 	bl	8000a9c <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a5e:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8004a62:	9c10      	ldr	r4, [sp, #64]	; 0x40
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a64:	9014      	str	r0, [sp, #80]	; 0x50
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a66:	4621      	mov	r1, r4
 8004a68:	4658      	mov	r0, fp
 8004a6a:	f7fc f921 	bl	8000cb0 <__aeabi_fmul>
 8004a6e:	4601      	mov	r1, r0
 8004a70:	4650      	mov	r0, sl
 8004a72:	f7fc f813 	bl	8000a9c <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a76:	4659      	mov	r1, fp
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a78:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f7fc f80e 	bl	8000a9c <__aeabi_fsub>
    if (junction_cos_theta > 0.999999f) {
 8004a80:	4921      	ldr	r1, [pc, #132]	; (8004b08 <plan_buffer_line+0x4bc>)
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a82:	9015      	str	r0, [sp, #84]	; 0x54
    if (junction_cos_theta > 0.999999f) {
 8004a84:	4650      	mov	r0, sl
 8004a86:	f7fc facf 	bl	8001028 <__aeabi_fcmpgt>
 8004a8a:	b1f0      	cbz	r0, 8004aca <plan_buffer_line+0x47e>
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	1bbb      	subs	r3, r7, r6
 8004a90:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a96:	e714      	b.n	80048c2 <plan_buffer_line+0x276>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004a98:	4b16      	ldr	r3, [pc, #88]	; (8004af4 <plan_buffer_line+0x4a8>)
 8004a9a:	7a58      	ldrb	r0, [r3, #9]
 8004a9c:	f7fc f8b4 	bl	8000c08 <__aeabi_i2f>
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	f7fc f905 	bl	8000cb0 <__aeabi_fmul>
 8004aa6:	4914      	ldr	r1, [pc, #80]	; (8004af8 <plan_buffer_line+0x4ac>)
 8004aa8:	f7fc f902 	bl	8000cb0 <__aeabi_fmul>
 8004aac:	4606      	mov	r6, r0
 8004aae:	e72a      	b.n	8004906 <plan_buffer_line+0x2ba>
  return(PLAN_OK);
 8004ab0:	2001      	movs	r0, #1
}
 8004ab2:	b017      	add	sp, #92	; 0x5c
 8004ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004ab8:	f8c8 4020 	str.w	r4, [r8, #32]
 8004abc:	e744      	b.n	8004948 <plan_buffer_line+0x2fc>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004abe:	4631      	mov	r1, r6
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f7fc f8f5 	bl	8000cb0 <__aeabi_fmul>
 8004ac6:	4605      	mov	r5, r0
 8004ac8:	e735      	b.n	8004936 <plan_buffer_line+0x2ea>
      if (junction_cos_theta < -0.999999f) {
 8004aca:	4910      	ldr	r1, [pc, #64]	; (8004b0c <plan_buffer_line+0x4c0>)
 8004acc:	4650      	mov	r0, sl
 8004ace:	f7fc fa8d 	bl	8000fec <__aeabi_fcmplt>
 8004ad2:	b1f8      	cbz	r0, 8004b14 <plan_buffer_line+0x4c8>
        block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 8004ad4:	1bbb      	subs	r3, r7, r6
 8004ad6:	4a0e      	ldr	r2, [pc, #56]	; (8004b10 <plan_buffer_line+0x4c4>)
 8004ad8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004adc:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ade:	e6f0      	b.n	80048c2 <plan_buffer_line+0x276>
 8004ae0:	0800c0c0 	.word	0x0800c0c0
 8004ae4:	20001d58 	.word	0x20001d58
 8004ae8:	20001d44 	.word	0x20001d44
 8004aec:	200012e2 	.word	0x200012e2
 8004af0:	200012e0 	.word	0x200012e0
 8004af4:	20001b6c 	.word	0x20001b6c
 8004af8:	3c23d70a 	.word	0x3c23d70a
 8004afc:	200012e4 	.word	0x200012e4
 8004b00:	200012e3 	.word	0x200012e3
 8004b04:	200012f8 	.word	0x200012f8
 8004b08:	3f7fffef 	.word	0x3f7fffef
 8004b0c:	bf7fffef 	.word	0xbf7fffef
 8004b10:	7f7fffff 	.word	0x7f7fffff
        convert_delta_vector_to_unit_vector(junction_unit_vec);
 8004b14:	a811      	add	r0, sp, #68	; 0x44
 8004b16:	f7ff fa7f 	bl	8004018 <convert_delta_vector_to_unit_vector>
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 8004b1a:	a911      	add	r1, sp, #68	; 0x44
 8004b1c:	4817      	ldr	r0, [pc, #92]	; (8004b7c <plan_buffer_line+0x530>)
 8004b1e:	f7ff faf9 	bl	8004114 <limit_value_by_axis_maximum>
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 8004b22:	4651      	mov	r1, sl
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 8004b24:	4683      	mov	fp, r0
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 8004b26:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004b2a:	f7fb ffb7 	bl	8000a9c <__aeabi_fsub>
 8004b2e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004b32:	f7fc f8bd 	bl	8000cb0 <__aeabi_fmul>
 8004b36:	f006 fa1f 	bl	800af78 <sqrtf>
 8004b3a:	4682      	mov	sl, r0
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 8004b3c:	4658      	mov	r0, fp
 8004b3e:	4651      	mov	r1, sl
 8004b40:	f7fc f8b6 	bl	8000cb0 <__aeabi_fmul>
 8004b44:	f8d9 1058 	ldr.w	r1, [r9, #88]	; 0x58
 8004b48:	f7fc f8b2 	bl	8000cb0 <__aeabi_fmul>
 8004b4c:	4651      	mov	r1, sl
 8004b4e:	4681      	mov	r9, r0
 8004b50:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004b54:	f7fb ffa2 	bl	8000a9c <__aeabi_fsub>
 8004b58:	4601      	mov	r1, r0
 8004b5a:	4648      	mov	r0, r9
 8004b5c:	f7fc f95c 	bl	8000e18 <__aeabi_fdiv>
 8004b60:	1bbc      	subs	r4, r7, r6
 8004b62:	2100      	movs	r1, #0
 8004b64:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8004b68:	4681      	mov	r9, r0
 8004b6a:	f7fc fa53 	bl	8001014 <__aeabi_fcmpge>
 8004b6e:	b908      	cbnz	r0, 8004b74 <plan_buffer_line+0x528>
 8004b70:	f04f 0900 	mov.w	r9, #0
 8004b74:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8004b78:	e6a3      	b.n	80048c2 <plan_buffer_line+0x276>
 8004b7a:	bf00      	nop
 8004b7c:	20001d58 	.word	0x20001d58

08004b80 <plan_sync_position>:


// Reset the planner position vectors. Called by the system abort/initialization routine.
void plan_sync_position()
{
 8004b80:	b430      	push	{r4, r5}
 8004b82:	4d04      	ldr	r5, [pc, #16]	; (8004b94 <plan_sync_position+0x14>)
 8004b84:	4c04      	ldr	r4, [pc, #16]	; (8004b98 <plan_sync_position+0x18>)
 8004b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b8a:	682b      	ldr	r3, [r5, #0]
 8004b8c:	6023      	str	r3, [r4, #0]
      }
    #else
      pl.position[idx] = sys_position[idx];
    #endif
  }
}
 8004b8e:	bc30      	pop	{r4, r5}
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20001b98 	.word	0x20001b98
 8004b98:	200012e4 	.word	0x200012e4

08004b9c <plan_get_block_buffer_available>:


// Returns the number of available blocks are in the planner buffer.
uint8_t plan_get_block_buffer_available()
{
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 8004b9c:	4a06      	ldr	r2, [pc, #24]	; (8004bb8 <plan_get_block_buffer_available+0x1c>)
 8004b9e:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <plan_get_block_buffer_available+0x20>)
 8004ba0:	7812      	ldrb	r2, [r2, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	bf2c      	ite	cs
 8004ba8:	f103 0047 	addcs.w	r0, r3, #71	; 0x47
  return((block_buffer_tail-block_buffer_head-1));
 8004bac:	f103 30ff 	addcc.w	r0, r3, #4294967295
 8004bb0:	1a80      	subs	r0, r0, r2
 8004bb2:	b2c0      	uxtb	r0, r0
}
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	200012e0 	.word	0x200012e0
 8004bbc:	200012e2 	.word	0x200012e2

08004bc0 <plan_cycle_reinitialize>:


// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize()
{
 8004bc0:	b508      	push	{r3, lr}
  // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
  st_update_plan_block_parameters();
 8004bc2:	f003 fd6d 	bl	80086a0 <st_update_plan_block_parameters>
  block_buffer_planned = block_buffer_tail;
 8004bc6:	4a04      	ldr	r2, [pc, #16]	; (8004bd8 <plan_cycle_reinitialize+0x18>)
 8004bc8:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <plan_cycle_reinitialize+0x1c>)
 8004bca:	7812      	ldrb	r2, [r2, #0]
 8004bcc:	701a      	strb	r2, [r3, #0]
  planner_recalculate();
}
 8004bce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  planner_recalculate();
 8004bd2:	f7ff bb09 	b.w	80041e8 <planner_recalculate>
 8004bd6:	bf00      	nop
 8004bd8:	200012e2 	.word	0x200012e2
 8004bdc:	200012e1 	.word	0x200012e1

08004be0 <printString>:

#include "grbl.h"


void printString(const char *s)
{
 8004be0:	b510      	push	{r4, lr}
 8004be2:	4604      	mov	r4, r0
  while (*s)
 8004be4:	7800      	ldrb	r0, [r0, #0]
 8004be6:	b128      	cbz	r0, 8004bf4 <printString+0x14>
    serial_write(*s++);
 8004be8:	f002 fb1e 	bl	8007228 <serial_write>
  while (*s)
 8004bec:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d1f9      	bne.n	8004be8 <printString+0x8>
 8004bf4:	bd10      	pop	{r4, pc}
 8004bf6:	bf00      	nop

08004bf8 <print_uint8_base10>:
// Prints an uint8 variable in base 10.
void print_uint8_base10(uint8_t n)
{
  uint8_t digit_a = 0;
  uint8_t digit_b = 0;
  if (n >= 100) { // 100-255
 8004bf8:	2863      	cmp	r0, #99	; 0x63
{
 8004bfa:	b570      	push	{r4, r5, r6, lr}
 8004bfc:	4605      	mov	r5, r0
  if (n >= 100) { // 100-255
 8004bfe:	d920      	bls.n	8004c42 <print_uint8_base10+0x4a>
    digit_a = '0' + n % 10;
    n /= 10;
  }
  if (n >= 10) { // 10-99
    digit_b = '0' + n % 10;
    n /= 10;
 8004c00:	481c      	ldr	r0, [pc, #112]	; (8004c74 <print_uint8_base10+0x7c>)
 8004c02:	fba0 3005 	umull	r3, r0, r0, r5
 8004c06:	0940      	lsrs	r0, r0, #5
  }
  serial_write('0' + n);
 8004c08:	3030      	adds	r0, #48	; 0x30
 8004c0a:	f002 fb0d 	bl	8007228 <serial_write>
    n /= 10;
 8004c0e:	481a      	ldr	r0, [pc, #104]	; (8004c78 <print_uint8_base10+0x80>)
 8004c10:	fba0 3405 	umull	r3, r4, r0, r5
 8004c14:	08e4      	lsrs	r4, r4, #3
    digit_b = '0' + n % 10;
 8004c16:	b2e3      	uxtb	r3, r4
 8004c18:	fba0 2003 	umull	r2, r0, r0, r3
 8004c1c:	08c0      	lsrs	r0, r0, #3
 8004c1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c22:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
 8004c26:	3030      	adds	r0, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 8004c28:	b2c0      	uxtb	r0, r0
 8004c2a:	f002 fafd 	bl	8007228 <serial_write>
    digit_a = '0' + n % 10;
 8004c2e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8004c32:	eba5 0040 	sub.w	r0, r5, r0, lsl #1
 8004c36:	3030      	adds	r0, #48	; 0x30
  if (digit_a) { serial_write(digit_a); }
 8004c38:	b2c0      	uxtb	r0, r0
}
 8004c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (digit_a) { serial_write(digit_a); }
 8004c3e:	f002 baf3 	b.w	8007228 <serial_write>
  if (n >= 10) { // 10-99
 8004c42:	2809      	cmp	r0, #9
 8004c44:	d805      	bhi.n	8004c52 <print_uint8_base10+0x5a>
}
 8004c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  serial_write('0' + n);
 8004c4a:	3030      	adds	r0, #48	; 0x30
 8004c4c:	b2c0      	uxtb	r0, r0
 8004c4e:	f002 baeb 	b.w	8007228 <serial_write>
    n /= 10;
 8004c52:	260a      	movs	r6, #10
 8004c54:	fbb0 f4f6 	udiv	r4, r0, r6
  serial_write('0' + n);
 8004c58:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8004c5c:	b2c0      	uxtb	r0, r0
 8004c5e:	f002 fae3 	bl	8007228 <serial_write>
    digit_b = '0' + n % 10;
 8004c62:	fb06 5014 	mls	r0, r6, r4, r5
}
 8004c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digit_b = '0' + n % 10;
 8004c6a:	3030      	adds	r0, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 8004c6c:	b2c0      	uxtb	r0, r0
 8004c6e:	f002 badb 	b.w	8007228 <serial_write>
 8004c72:	bf00      	nop
 8004c74:	51eb851f 	.word	0x51eb851f
 8004c78:	cccccccd 	.word	0xcccccccd

08004c7c <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n, uint8_t decimal_places)
{
 8004c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c7e:	460d      	mov	r5, r1
 8004c80:	b085      	sub	sp, #20
  if (n < 0) {
 8004c82:	2100      	movs	r1, #0
{
 8004c84:	4606      	mov	r6, r0
  if (n < 0) {
 8004c86:	f7fc f9b1 	bl	8000fec <__aeabi_fcmplt>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d152      	bne.n	8004d34 <printFloat+0xb8>
    serial_write('-');
    n = -n;
  }

  uint8_t decimals = decimal_places;
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004c8e:	2d01      	cmp	r5, #1
 8004c90:	d956      	bls.n	8004d40 <printFloat+0xc4>
 8004c92:	462c      	mov	r4, r5
    n *= 100;
 8004c94:	4f2f      	ldr	r7, [pc, #188]	; (8004d54 <printFloat+0xd8>)
 8004c96:	4630      	mov	r0, r6
 8004c98:	4639      	mov	r1, r7
 8004c9a:	f7fc f809 	bl	8000cb0 <__aeabi_fmul>
    decimals -= 2;
 8004c9e:	3c02      	subs	r4, #2
 8004ca0:	b2e4      	uxtb	r4, r4
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004ca2:	2c01      	cmp	r4, #1
    n *= 100;
 8004ca4:	4606      	mov	r6, r0
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004ca6:	d8f6      	bhi.n	8004c96 <printFloat+0x1a>
 8004ca8:	f005 0301 	and.w	r3, r5, #1
  }
  if (decimals) { n *= 10; }
 8004cac:	b123      	cbz	r3, 8004cb8 <printFloat+0x3c>
 8004cae:	4630      	mov	r0, r6
 8004cb0:	4929      	ldr	r1, [pc, #164]	; (8004d58 <printFloat+0xdc>)
 8004cb2:	f7fb fffd 	bl	8000cb0 <__aeabi_fmul>
 8004cb6:	4606      	mov	r6, r0
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004cb8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	f7fb feef 	bl	8000aa0 <__addsf3>

  // Generate digits backwards and store in string.
  unsigned char buf[13];
  uint8_t i = 0;
  uint32_t a = (long)n;
 8004cc2:	f7fc f9d1 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d03c      	beq.n	8004d44 <printFloat+0xc8>
 8004cca:	2200      	movs	r2, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004ccc:	4e23      	ldr	r6, [pc, #140]	; (8004d5c <printFloat+0xe0>)
 8004cce:	fba6 1300 	umull	r1, r3, r6, r0
 8004cd2:	08db      	lsrs	r3, r3, #3
 8004cd4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004cd8:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8004cdc:	1c54      	adds	r4, r2, #1
 8004cde:	a904      	add	r1, sp, #16
 8004ce0:	3030      	adds	r0, #48	; 0x30
 8004ce2:	440a      	add	r2, r1
 8004ce4:	b2e4      	uxtb	r4, r4
 8004ce6:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004cea:	4622      	mov	r2, r4
  while(a > 0) {
 8004cec:	4618      	mov	r0, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1ed      	bne.n	8004cce <printFloat+0x52>
    a /= 10;
  }
  while (i < decimal_places) {
 8004cf2:	42a5      	cmp	r5, r4
 8004cf4:	d928      	bls.n	8004d48 <printFloat+0xcc>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004cf6:	1e6a      	subs	r2, r5, #1
 8004cf8:	1b12      	subs	r2, r2, r4
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	3201      	adds	r2, #1
 8004cfe:	eb0d 0004 	add.w	r0, sp, r4
 8004d02:	2130      	movs	r1, #48	; 0x30
 8004d04:	f006 f817 	bl	800ad36 <memset>
  }
  if (i == decimal_places) { // Fill in leading zero, if needed.
    buf[i++] = '0';
 8004d08:	2230      	movs	r2, #48	; 0x30
 8004d0a:	ab04      	add	r3, sp, #16
 8004d0c:	1c6c      	adds	r4, r5, #1
 8004d0e:	442b      	add	r3, r5
 8004d10:	f803 2c10 	strb.w	r2, [r3, #-16]
 8004d14:	b2e4      	uxtb	r4, r4
  }

  // Print the generated string.
  for (; i > 0; i--) {
 8004d16:	b15c      	cbz	r4, 8004d30 <printFloat+0xb4>
 8004d18:	eb0d 0604 	add.w	r6, sp, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004d1c:	42a5      	cmp	r5, r4
 8004d1e:	d015      	beq.n	8004d4c <printFloat+0xd0>
    serial_write(buf[i-1]);
 8004d20:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
  for (; i > 0; i--) {
 8004d24:	3c01      	subs	r4, #1
    serial_write(buf[i-1]);
 8004d26:	f002 fa7f 	bl	8007228 <serial_write>
  for (; i > 0; i--) {
 8004d2a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004d2e:	d1f5      	bne.n	8004d1c <printFloat+0xa0>
  }
}
 8004d30:	b005      	add	sp, #20
 8004d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    serial_write('-');
 8004d34:	202d      	movs	r0, #45	; 0x2d
 8004d36:	f002 fa77 	bl	8007228 <serial_write>
    n = -n;
 8004d3a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004d3e:	e7a6      	b.n	8004c8e <printFloat+0x12>
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004d40:	462b      	mov	r3, r5
 8004d42:	e7b3      	b.n	8004cac <printFloat+0x30>
  uint8_t i = 0;
 8004d44:	4604      	mov	r4, r0
 8004d46:	e7d4      	b.n	8004cf2 <printFloat+0x76>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004d48:	d1e5      	bne.n	8004d16 <printFloat+0x9a>
 8004d4a:	e7dd      	b.n	8004d08 <printFloat+0x8c>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004d4c:	202e      	movs	r0, #46	; 0x2e
 8004d4e:	f002 fa6b 	bl	8007228 <serial_write>
 8004d52:	e7e5      	b.n	8004d20 <printFloat+0xa4>
 8004d54:	42c80000 	.word	0x42c80000
 8004d58:	41200000 	.word	0x41200000
 8004d5c:	cccccccd 	.word	0xcccccccd

08004d60 <printFloat_CoordValue>:

// Floating value printing handlers for special variables types used in Grbl and are defined
// in the config.h.
//  - CoordValue: Handles all position or coordinate values in inches or mm reporting.
//  - RateValue: Handles feed rate and current velocity in inches or mm reporting.
void printFloat_CoordValue(float n) {
 8004d60:	b530      	push	{r4, r5, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004d62:	4b6e      	ldr	r3, [pc, #440]	; (8004f1c <printFloat_CoordValue+0x1bc>)
void printFloat_CoordValue(float n) {
 8004d64:	b085      	sub	sp, #20
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004d66:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004d6a:	07db      	lsls	r3, r3, #31
 8004d6c:	d452      	bmi.n	8004e14 <printFloat_CoordValue+0xb4>
  if (n < 0) {
 8004d6e:	2100      	movs	r1, #0
 8004d70:	4604      	mov	r4, r0
 8004d72:	f7fc f93b 	bl	8000fec <__aeabi_fcmplt>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	f040 80a8 	bne.w	8004ecc <printFloat_CoordValue+0x16c>
  if (decimals) { n *= 10; }
 8004d7c:	4968      	ldr	r1, [pc, #416]	; (8004f20 <printFloat_CoordValue+0x1c0>)
 8004d7e:	4620      	mov	r0, r4
 8004d80:	f7fb ff96 	bl	8000cb0 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004d84:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004d88:	f7fb fe8a 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 8004d8c:	f7fc f96c 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004d90:	2800      	cmp	r0, #0
 8004d92:	f000 80a1 	beq.w	8004ed8 <printFloat_CoordValue+0x178>
 8004d96:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004d98:	4d62      	ldr	r5, [pc, #392]	; (8004f24 <printFloat_CoordValue+0x1c4>)
 8004d9a:	e000      	b.n	8004d9e <printFloat_CoordValue+0x3e>
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	fba5 2300 	umull	r2, r3, r5, r0
 8004da2:	08db      	lsrs	r3, r3, #3
 8004da4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004da8:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8004dac:	aa04      	add	r2, sp, #16
 8004dae:	3030      	adds	r0, #48	; 0x30
 8004db0:	1c4c      	adds	r4, r1, #1
 8004db2:	440a      	add	r2, r1
 8004db4:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004db8:	b2e4      	uxtb	r4, r4
  while(a > 0) {
 8004dba:	4618      	mov	r0, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1ed      	bne.n	8004d9c <printFloat_CoordValue+0x3c>
  while (i < decimal_places) {
 8004dc0:	2c02      	cmp	r4, #2
 8004dc2:	d816      	bhi.n	8004df2 <printFloat_CoordValue+0x92>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004dc4:	2230      	movs	r2, #48	; 0x30
 8004dc6:	1c8b      	adds	r3, r1, #2
 8004dc8:	a804      	add	r0, sp, #16
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	4404      	add	r4, r0
  while (i < decimal_places) {
 8004dce:	2b03      	cmp	r3, #3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004dd0:	f804 2c10 	strb.w	r2, [r4, #-16]
  while (i < decimal_places) {
 8004dd4:	d007      	beq.n	8004de6 <printFloat_CoordValue+0x86>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004dd6:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004dd8:	29ff      	cmp	r1, #255	; 0xff
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004dda:	f803 2c10 	strb.w	r2, [r3, #-16]
  while (i < decimal_places) {
 8004dde:	d102      	bne.n	8004de6 <printFloat_CoordValue+0x86>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004de0:	2330      	movs	r3, #48	; 0x30
 8004de2:	f88d 3002 	strb.w	r3, [sp, #2]
    buf[i++] = '0';
 8004de6:	2330      	movs	r3, #48	; 0x30
 8004de8:	2404      	movs	r4, #4
 8004dea:	461d      	mov	r5, r3
 8004dec:	f88d 3003 	strb.w	r3, [sp, #3]
 8004df0:	e005      	b.n	8004dfe <printFloat_CoordValue+0x9e>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004df2:	2c03      	cmp	r4, #3
 8004df4:	d0f7      	beq.n	8004de6 <printFloat_CoordValue+0x86>
 8004df6:	ab04      	add	r3, sp, #16
 8004df8:	4423      	add	r3, r4
 8004dfa:	f813 5c11 	ldrb.w	r5, [r3, #-17]
 8004dfe:	3c01      	subs	r4, #1
 8004e00:	b2e4      	uxtb	r4, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004e02:	2c02      	cmp	r4, #2
 8004e04:	d07b      	beq.n	8004efe <printFloat_CoordValue+0x19e>
    serial_write(buf[i-1]);
 8004e06:	4628      	mov	r0, r5
 8004e08:	f002 fa0e 	bl	8007228 <serial_write>
  for (; i > 0; i--) {
 8004e0c:	2c00      	cmp	r4, #0
 8004e0e:	d1f2      	bne.n	8004df6 <printFloat_CoordValue+0x96>
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
  } else {
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
  }
}
 8004e10:	b005      	add	sp, #20
 8004e12:	bd30      	pop	{r4, r5, pc}
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8004e14:	4944      	ldr	r1, [pc, #272]	; (8004f28 <printFloat_CoordValue+0x1c8>)
 8004e16:	f7fb ff4b 	bl	8000cb0 <__aeabi_fmul>
  if (n < 0) {
 8004e1a:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8004e1c:	4604      	mov	r4, r0
  if (n < 0) {
 8004e1e:	f7fc f8e5 	bl	8000fec <__aeabi_fcmplt>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d15e      	bne.n	8004ee4 <printFloat_CoordValue+0x184>
    n *= 100;
 8004e26:	4941      	ldr	r1, [pc, #260]	; (8004f2c <printFloat_CoordValue+0x1cc>)
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f7fb ff41 	bl	8000cb0 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004e2e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004e32:	f7fb fe35 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 8004e36:	f7fc f917 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	d058      	beq.n	8004ef0 <printFloat_CoordValue+0x190>
 8004e3e:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004e40:	4d38      	ldr	r5, [pc, #224]	; (8004f24 <printFloat_CoordValue+0x1c4>)
 8004e42:	e000      	b.n	8004e46 <printFloat_CoordValue+0xe6>
 8004e44:	4621      	mov	r1, r4
 8004e46:	fba5 2300 	umull	r2, r3, r5, r0
 8004e4a:	08db      	lsrs	r3, r3, #3
 8004e4c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004e50:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8004e54:	aa04      	add	r2, sp, #16
 8004e56:	3030      	adds	r0, #48	; 0x30
 8004e58:	1c4c      	adds	r4, r1, #1
 8004e5a:	440a      	add	r2, r1
 8004e5c:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004e60:	b2e4      	uxtb	r4, r4
  while(a > 0) {
 8004e62:	4618      	mov	r0, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1ed      	bne.n	8004e44 <printFloat_CoordValue+0xe4>
  while (i < decimal_places) {
 8004e68:	2c03      	cmp	r4, #3
 8004e6a:	d81e      	bhi.n	8004eaa <printFloat_CoordValue+0x14a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e6c:	2230      	movs	r2, #48	; 0x30
 8004e6e:	1c8b      	adds	r3, r1, #2
 8004e70:	a804      	add	r0, sp, #16
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	4404      	add	r4, r0
  while (i < decimal_places) {
 8004e76:	2b04      	cmp	r3, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e78:	f804 2c10 	strb.w	r2, [r4, #-16]
  while (i < decimal_places) {
 8004e7c:	d00f      	beq.n	8004e9e <printFloat_CoordValue+0x13e>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e7e:	3103      	adds	r1, #3
 8004e80:	b2c9      	uxtb	r1, r1
 8004e82:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004e84:	2904      	cmp	r1, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e86:	f803 2c10 	strb.w	r2, [r3, #-16]
  while (i < decimal_places) {
 8004e8a:	d008      	beq.n	8004e9e <printFloat_CoordValue+0x13e>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e8c:	2330      	movs	r3, #48	; 0x30
 8004e8e:	aa04      	add	r2, sp, #16
 8004e90:	440a      	add	r2, r1
  while (i < decimal_places) {
 8004e92:	2902      	cmp	r1, #2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e94:	f802 3c10 	strb.w	r3, [r2, #-16]
  while (i < decimal_places) {
 8004e98:	d101      	bne.n	8004e9e <printFloat_CoordValue+0x13e>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e9a:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[i++] = '0';
 8004e9e:	2330      	movs	r3, #48	; 0x30
 8004ea0:	2405      	movs	r4, #5
 8004ea2:	461d      	mov	r5, r3
 8004ea4:	f88d 3004 	strb.w	r3, [sp, #4]
 8004ea8:	e005      	b.n	8004eb6 <printFloat_CoordValue+0x156>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004eaa:	2c04      	cmp	r4, #4
 8004eac:	d0f7      	beq.n	8004e9e <printFloat_CoordValue+0x13e>
 8004eae:	ab04      	add	r3, sp, #16
 8004eb0:	4423      	add	r3, r4
 8004eb2:	f813 5c11 	ldrb.w	r5, [r3, #-17]
 8004eb6:	3c01      	subs	r4, #1
 8004eb8:	b2e4      	uxtb	r4, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004eba:	2c03      	cmp	r4, #3
 8004ebc:	d026      	beq.n	8004f0c <printFloat_CoordValue+0x1ac>
    serial_write(buf[i-1]);
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f002 f9b2 	bl	8007228 <serial_write>
  for (; i > 0; i--) {
 8004ec4:	2c00      	cmp	r4, #0
 8004ec6:	d1f2      	bne.n	8004eae <printFloat_CoordValue+0x14e>
}
 8004ec8:	b005      	add	sp, #20
 8004eca:	bd30      	pop	{r4, r5, pc}
    serial_write('-');
 8004ecc:	202d      	movs	r0, #45	; 0x2d
 8004ece:	f002 f9ab 	bl	8007228 <serial_write>
    n = -n;
 8004ed2:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004ed6:	e751      	b.n	8004d7c <printFloat_CoordValue+0x1c>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ed8:	2330      	movs	r3, #48	; 0x30
 8004eda:	f88d 3000 	strb.w	r3, [sp]
 8004ede:	f88d 3001 	strb.w	r3, [sp, #1]
 8004ee2:	e77d      	b.n	8004de0 <printFloat_CoordValue+0x80>
    serial_write('-');
 8004ee4:	202d      	movs	r0, #45	; 0x2d
 8004ee6:	f002 f99f 	bl	8007228 <serial_write>
    n = -n;
 8004eea:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004eee:	e79a      	b.n	8004e26 <printFloat_CoordValue+0xc6>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ef0:	2330      	movs	r3, #48	; 0x30
 8004ef2:	2102      	movs	r1, #2
 8004ef4:	f88d 3000 	strb.w	r3, [sp]
 8004ef8:	f88d 3001 	strb.w	r3, [sp, #1]
 8004efc:	e7c6      	b.n	8004e8c <printFloat_CoordValue+0x12c>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004efe:	202e      	movs	r0, #46	; 0x2e
 8004f00:	f002 f992 	bl	8007228 <serial_write>
    serial_write(buf[i-1]);
 8004f04:	4628      	mov	r0, r5
 8004f06:	f002 f98f 	bl	8007228 <serial_write>
 8004f0a:	e774      	b.n	8004df6 <printFloat_CoordValue+0x96>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004f0c:	202e      	movs	r0, #46	; 0x2e
 8004f0e:	f002 f98b 	bl	8007228 <serial_write>
    serial_write(buf[i-1]);
 8004f12:	4628      	mov	r0, r5
 8004f14:	f002 f988 	bl	8007228 <serial_write>
 8004f18:	e7c9      	b.n	8004eae <printFloat_CoordValue+0x14e>
 8004f1a:	bf00      	nop
 8004f1c:	20001d30 	.word	0x20001d30
 8004f20:	447a0000 	.word	0x447a0000
 8004f24:	cccccccd 	.word	0xcccccccd
 8004f28:	3d21428b 	.word	0x3d21428b
 8004f2c:	461c4000 	.word	0x461c4000

08004f30 <printFloat_RateValue>:

void printFloat_RateValue(float n) {
 8004f30:	b570      	push	{r4, r5, r6, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004f32:	4b4d      	ldr	r3, [pc, #308]	; (8005068 <printFloat_RateValue+0x138>)
void printFloat_RateValue(float n) {
 8004f34:	b084      	sub	sp, #16
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004f36:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004f3a:	07db      	lsls	r3, r3, #31
 8004f3c:	d435      	bmi.n	8004faa <printFloat_RateValue+0x7a>
  if (n < 0) {
 8004f3e:	2100      	movs	r1, #0
 8004f40:	4604      	mov	r4, r0
 8004f42:	f7fc f853 	bl	8000fec <__aeabi_fcmplt>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	d17b      	bne.n	8005042 <printFloat_RateValue+0x112>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004f4a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f7fb fda6 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 8004f54:	f7fc f888 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	d06d      	beq.n	8005038 <printFloat_RateValue+0x108>
 8004f5c:	2200      	movs	r2, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004f5e:	4d43      	ldr	r5, [pc, #268]	; (800506c <printFloat_RateValue+0x13c>)
 8004f60:	fba5 1300 	umull	r1, r3, r5, r0
 8004f64:	08db      	lsrs	r3, r3, #3
 8004f66:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004f6a:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8004f6e:	1c54      	adds	r4, r2, #1
 8004f70:	a904      	add	r1, sp, #16
 8004f72:	3030      	adds	r0, #48	; 0x30
 8004f74:	440a      	add	r2, r1
 8004f76:	b2e4      	uxtb	r4, r4
 8004f78:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004f7c:	4622      	mov	r2, r4
  while(a > 0) {
 8004f7e:	4618      	mov	r0, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1ed      	bne.n	8004f60 <printFloat_RateValue+0x30>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004f84:	2c00      	cmp	r4, #0
 8004f86:	d057      	beq.n	8005038 <printFloat_RateValue+0x108>
 8004f88:	ab04      	add	r3, sp, #16
 8004f8a:	441a      	add	r2, r3
 8004f8c:	f812 0c11 	ldrb.w	r0, [r2, #-17]
 8004f90:	3c01      	subs	r4, #1
 8004f92:	b2e4      	uxtb	r4, r4
 8004f94:	466d      	mov	r5, sp
 8004f96:	446c      	add	r4, sp
 8004f98:	e001      	b.n	8004f9e <printFloat_RateValue+0x6e>
 8004f9a:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
    serial_write(buf[i-1]);
 8004f9e:	f002 f943 	bl	8007228 <serial_write>
  for (; i > 0; i--) {
 8004fa2:	42ac      	cmp	r4, r5
 8004fa4:	d1f9      	bne.n	8004f9a <printFloat_RateValue+0x6a>
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
  } else {
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
  }
}
 8004fa6:	b004      	add	sp, #16
 8004fa8:	bd70      	pop	{r4, r5, r6, pc}
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8004faa:	4931      	ldr	r1, [pc, #196]	; (8005070 <printFloat_RateValue+0x140>)
 8004fac:	f7fb fe80 	bl	8000cb0 <__aeabi_fmul>
  if (n < 0) {
 8004fb0:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8004fb2:	4604      	mov	r4, r0
  if (n < 0) {
 8004fb4:	f7fc f81a 	bl	8000fec <__aeabi_fcmplt>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	d148      	bne.n	800504e <printFloat_RateValue+0x11e>
  if (decimals) { n *= 10; }
 8004fbc:	492d      	ldr	r1, [pc, #180]	; (8005074 <printFloat_RateValue+0x144>)
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	f7fb fe76 	bl	8000cb0 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004fc4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004fc8:	f7fb fd6a 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 8004fcc:	f7fc f84c 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004fd0:	b1a0      	cbz	r0, 8004ffc <printFloat_RateValue+0xcc>
 8004fd2:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004fd4:	4c25      	ldr	r4, [pc, #148]	; (800506c <printFloat_RateValue+0x13c>)
 8004fd6:	fba4 3200 	umull	r3, r2, r4, r0
 8004fda:	08d2      	lsrs	r2, r2, #3
 8004fdc:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8004fe0:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8004fe4:	ad04      	add	r5, sp, #16
 8004fe6:	1c4b      	adds	r3, r1, #1
 8004fe8:	3030      	adds	r0, #48	; 0x30
 8004fea:	4429      	add	r1, r5
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	f801 0c10 	strb.w	r0, [r1, #-16]
 8004ff2:	4619      	mov	r1, r3
  while(a > 0) {
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	2a00      	cmp	r2, #0
 8004ff8:	d1ed      	bne.n	8004fd6 <printFloat_RateValue+0xa6>
  while (i < decimal_places) {
 8004ffa:	bb73      	cbnz	r3, 800505a <printFloat_RateValue+0x12a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ffc:	2330      	movs	r3, #48	; 0x30
 8004ffe:	f88d 3000 	strb.w	r3, [sp]
    buf[i++] = '0';
 8005002:	2230      	movs	r2, #48	; 0x30
 8005004:	2302      	movs	r3, #2
 8005006:	4616      	mov	r6, r2
 8005008:	f88d 2001 	strb.w	r2, [sp, #1]
 800500c:	1e5c      	subs	r4, r3, #1
 800500e:	b2e5      	uxtb	r5, r4
 8005010:	446d      	add	r5, sp
 8005012:	e000      	b.n	8005016 <printFloat_RateValue+0xe6>
 8005014:	1e5c      	subs	r4, r3, #1
    serial_write(buf[i-1]);
 8005016:	4630      	mov	r0, r6
 8005018:	f002 f906 	bl	8007228 <serial_write>
  for (; i > 0; i--) {
 800501c:	b2e3      	uxtb	r3, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 800501e:	2b01      	cmp	r3, #1
 8005020:	f815 6d01 	ldrb.w	r6, [r5, #-1]!
 8005024:	d1f6      	bne.n	8005014 <printFloat_RateValue+0xe4>
 8005026:	202e      	movs	r0, #46	; 0x2e
 8005028:	f002 f8fe 	bl	8007228 <serial_write>
    serial_write(buf[i-1]);
 800502c:	4630      	mov	r0, r6
}
 800502e:	b004      	add	sp, #16
 8005030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    serial_write(buf[i-1]);
 8005034:	f002 b8f8 	b.w	8007228 <serial_write>
    buf[i++] = '0';
 8005038:	2030      	movs	r0, #48	; 0x30
 800503a:	2401      	movs	r4, #1
 800503c:	f88d 0000 	strb.w	r0, [sp]
 8005040:	e7a6      	b.n	8004f90 <printFloat_RateValue+0x60>
    serial_write('-');
 8005042:	202d      	movs	r0, #45	; 0x2d
 8005044:	f002 f8f0 	bl	8007228 <serial_write>
    n = -n;
 8005048:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 800504c:	e77d      	b.n	8004f4a <printFloat_RateValue+0x1a>
    serial_write('-');
 800504e:	202d      	movs	r0, #45	; 0x2d
 8005050:	f002 f8ea 	bl	8007228 <serial_write>
    n = -n;
 8005054:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8005058:	e7b0      	b.n	8004fbc <printFloat_RateValue+0x8c>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 800505a:	2b01      	cmp	r3, #1
 800505c:	d0d1      	beq.n	8005002 <printFloat_RateValue+0xd2>
 800505e:	4429      	add	r1, r5
 8005060:	f811 6c11 	ldrb.w	r6, [r1, #-17]
 8005064:	e7d2      	b.n	800500c <printFloat_RateValue+0xdc>
 8005066:	bf00      	nop
 8005068:	20001d30 	.word	0x20001d30
 800506c:	cccccccd 	.word	0xcccccccd
 8005070:	3d21428b 	.word	0x3d21428b
 8005074:	41200000 	.word	0x41200000

08005078 <probe_init>:
uint16_t probe_invert_mask;


// Probe pin initialization routine.
void probe_init()
{
 8005078:	b510      	push	{r4, lr}
    PROBE_PORT |= PROBE_MASK;    // Enable internal pull-up resistors. Normal high operation.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 800507a:	2101      	movs	r1, #1
{
 800507c:	b082      	sub	sp, #8
#ifdef DISABLE_PROBE_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 800507e:	f44f 7400 	mov.w	r4, #512	; 0x200
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 8005082:	2008      	movs	r0, #8
 8005084:	f7fc fbd8 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005088:	2203      	movs	r2, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 800508a:	2348      	movs	r3, #72	; 0x48
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 800508c:	a902      	add	r1, sp, #8
 800508e:	f821 4d04 	strh.w	r4, [r1, #-4]!
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 8005092:	4809      	ldr	r0, [pc, #36]	; (80050b8 <probe_init+0x40>)
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005094:	f88d 2006 	strb.w	r2, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8005098:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 800509c:	f7fc f9b0 	bl	8001400 <GPIO_Init>
// Called by probe_init() and the mc_probe() routines. Sets up the probe pin invert mask to
// appropriately set the pin logic according to setting for normal-high/normal-low operation
// and the probing cycle modes for toward-workpiece/away-from-workpiece.
void probe_configure_invert_mask(uint8_t is_probe_away)
{
  probe_invert_mask = 0; // Initialize as zero.
 80050a0:	2100      	movs	r1, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 80050a2:	4a06      	ldr	r2, [pc, #24]	; (80050bc <probe_init+0x44>)
  probe_invert_mask = 0; // Initialize as zero.
 80050a4:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <probe_init+0x48>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 80050a6:	f992 2068 	ldrsb.w	r2, [r2, #104]	; 0x68
  probe_invert_mask = 0; // Initialize as zero.
 80050aa:	8019      	strh	r1, [r3, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 80050ac:	428a      	cmp	r2, r1
 80050ae:	bfa8      	it	ge
 80050b0:	801c      	strhge	r4, [r3, #0]
}
 80050b2:	b002      	add	sp, #8
 80050b4:	bd10      	pop	{r4, pc}
 80050b6:	bf00      	nop
 80050b8:	40010c00 	.word	0x40010c00
 80050bc:	20001d30 	.word	0x20001d30
 80050c0:	20001bae 	.word	0x20001bae

080050c4 <probe_configure_invert_mask>:
  probe_invert_mask = 0; // Initialize as zero.
 80050c4:	2300      	movs	r3, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 80050c6:	4907      	ldr	r1, [pc, #28]	; (80050e4 <probe_configure_invert_mask+0x20>)
  probe_invert_mask = 0; // Initialize as zero.
 80050c8:	4a07      	ldr	r2, [pc, #28]	; (80050e8 <probe_configure_invert_mask+0x24>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 80050ca:	f991 1068 	ldrsb.w	r1, [r1, #104]	; 0x68
  probe_invert_mask = 0; // Initialize as zero.
 80050ce:	8013      	strh	r3, [r2, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 80050d0:	4299      	cmp	r1, r3
 80050d2:	bfaa      	itet	ge
 80050d4:	f44f 7100 	movge.w	r1, #512	; 0x200
 80050d8:	f44f 7300 	movlt.w	r3, #512	; 0x200
 80050dc:	8011      	strhge	r1, [r2, #0]
  if (is_probe_away) { probe_invert_mask ^= PROBE_MASK; }
 80050de:	b100      	cbz	r0, 80050e2 <probe_configure_invert_mask+0x1e>
 80050e0:	8013      	strh	r3, [r2, #0]
 80050e2:	4770      	bx	lr
 80050e4:	20001d30 	.word	0x20001d30
 80050e8:	20001bae 	.word	0x20001bae

080050ec <probe_get_state>:
}


// Returns the probe pin state. Triggered = true. Called by gcode parser and probe state monitor.
uint8_t probe_get_state() 
{ 
 80050ec:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
	return 0;
#endif
#ifdef STM32F103C8
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 80050ee:	4805      	ldr	r0, [pc, #20]	; (8005104 <probe_get_state+0x18>)
 80050f0:	f7fc fb3c 	bl	800176c <GPIO_ReadInputData>
 80050f4:	4b04      	ldr	r3, [pc, #16]	; (8005108 <probe_get_state+0x1c>)
 80050f6:	f400 7000 	and.w	r0, r0, #512	; 0x200
 80050fa:	881b      	ldrh	r3, [r3, #0]
#endif
}
 80050fc:	1a18      	subs	r0, r3, r0
 80050fe:	bf18      	it	ne
 8005100:	2001      	movne	r0, #1
 8005102:	bd08      	pop	{r3, pc}
 8005104:	40010c00 	.word	0x40010c00
 8005108:	20001bae 	.word	0x20001bae

0800510c <probe_state_monitor>:

// Monitors probe pin state and records the system position when detected. Called by the
// stepper ISR per ISR tick.
// NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
void probe_state_monitor()
{
 800510c:	b570      	push	{r4, r5, r6, lr}
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 800510e:	480c      	ldr	r0, [pc, #48]	; (8005140 <probe_state_monitor+0x34>)
 8005110:	f7fc fb2c 	bl	800176c <GPIO_ReadInputData>
 8005114:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <probe_state_monitor+0x38>)
  if (probe_get_state()) {
 8005116:	f400 7000 	and.w	r0, r0, #512	; 0x200
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	4283      	cmp	r3, r0
 800511e:	d00d      	beq.n	800513c <probe_state_monitor+0x30>
    sys_probe_state = PROBE_OFF;
 8005120:	2200      	movs	r2, #0
 8005122:	4b09      	ldr	r3, [pc, #36]	; (8005148 <probe_state_monitor+0x3c>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8005124:	4d09      	ldr	r5, [pc, #36]	; (800514c <probe_state_monitor+0x40>)
 8005126:	4c0a      	ldr	r4, [pc, #40]	; (8005150 <probe_state_monitor+0x44>)
    sys_probe_state = PROBE_OFF;
 8005128:	701a      	strb	r2, [r3, #0]
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 800512a:	4e0a      	ldr	r6, [pc, #40]	; (8005154 <probe_state_monitor+0x48>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 800512c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800512e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8005130:	7833      	ldrb	r3, [r6, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8005132:	682a      	ldr	r2, [r5, #0]
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8005134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005138:	7033      	strb	r3, [r6, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 800513a:	6022      	str	r2, [r4, #0]
 800513c:	bd70      	pop	{r4, r5, r6, pc}
 800513e:	bf00      	nop
 8005140:	40010c00 	.word	0x40010c00
 8005144:	20001bae 	.word	0x20001bae
 8005148:	20001b82 	.word	0x20001b82
 800514c:	20001b98 	.word	0x20001b98
 8005150:	20001b84 	.word	0x20001b84
 8005154:	20001b81 	.word	0x20001b81

08005158 <protocol_auto_cycle_start>:
// NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
// when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
// is finished, single commands), a command that needs to wait for the motions in the buffer to
// execute calls a buffer sync, or the planner buffer is full and ready to go.
void protocol_auto_cycle_start()
{
 8005158:	b508      	push	{r3, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 800515a:	f7ff f989 	bl	8004470 <plan_get_current_block>
 800515e:	b120      	cbz	r0, 800516a <protocol_auto_cycle_start+0x12>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
  }
}
 8005160:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8005164:	2002      	movs	r0, #2
 8005166:	f004 bb55 	b.w	8009814 <system_set_exec_state_flag>
 800516a:	bd08      	pop	{r3, pc}

0800516c <protocol_exec_rt_system>:

// Executes run-time commands, when required. This function primarily operates as Grbl's state
// machine and controls the various real-time features Grbl has to offer.
// NOTE: Do not alter this unless you know exactly what you are doing!
void protocol_exec_rt_system()
{
 800516c:	b570      	push	{r4, r5, r6, lr}
  uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 800516e:	4bab      	ldr	r3, [pc, #684]	; (800541c <protocol_exec_rt_system+0x2b0>)
 8005170:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8005172:	2b00      	cmp	r3, #0
 8005174:	d14f      	bne.n	8005216 <protocol_exec_rt_system+0xaa>
 8005176:	4caa      	ldr	r4, [pc, #680]	; (8005420 <protocol_exec_rt_system+0x2b4>)
 8005178:	4daa      	ldr	r5, [pc, #680]	; (8005424 <protocol_exec_rt_system+0x2b8>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
    }
    system_clear_exec_alarm(); // Clear alarm
  }

  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 800517a:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 800517c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005180:	b393      	cbz	r3, 80051e8 <protocol_exec_rt_system+0x7c>

    // Execute system abort.
    if (rt_exec & EXEC_RESET) {
 8005182:	06ee      	lsls	r6, r5, #27
 8005184:	f100 80d0 	bmi.w	8005328 <protocol_exec_rt_system+0x1bc>
      sys.abort = true;  // Only place this is set true.
      return; // Nothing else to do but exit.
    }

    // Execute and serial print status
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005188:	07e8      	lsls	r0, r5, #31
 800518a:	f100 80eb 	bmi.w	8005364 <protocol_exec_rt_system+0x1f8>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
    }

    // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
    // main program processes until either reset or resumed. This ensures a hold completes safely.
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 800518e:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 8005192:	d00a      	beq.n	80051aa <protocol_exec_rt_system+0x3e>

      // State check for allowable states for hold methods.
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005194:	7823      	ldrb	r3, [r4, #0]
 8005196:	0799      	lsls	r1, r3, #30
 8005198:	f000 80ea 	beq.w	8005370 <protocol_exec_rt_system+0x204>
 800519c:	b26e      	sxtb	r6, r5
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
        }
        
      }

      if (rt_exec & EXEC_SLEEP) {
 800519e:	2e00      	cmp	r6, #0
 80051a0:	f2c0 815f 	blt.w	8005462 <protocol_exec_rt_system+0x2f6>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
        sys.state = STATE_SLEEP; 
      }

      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 80051a4:	20e8      	movs	r0, #232	; 0xe8
 80051a6:	f004 fb3f 	bl	8009828 <system_clear_exec_state_flag>
    }

    // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in queue.
    if (rt_exec & EXEC_CYCLE_START) {
 80051aa:	07a8      	lsls	r0, r5, #30
 80051ac:	d519      	bpl.n	80051e2 <protocol_exec_rt_system+0x76>
      // Block if called at same time as the hold commands: feed hold, motion cancel, and safety door.
      // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 80051ae:	f015 0f68 	tst.w	r5, #104	; 0x68
 80051b2:	d113      	bne.n	80051dc <protocol_exec_rt_system+0x70>
        // Resume door state when parking motion has retracted and door has been closed.
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 80051b4:	7823      	ldrb	r3, [r4, #0]
 80051b6:	2b40      	cmp	r3, #64	; 0x40
 80051b8:	f000 8164 	beq.w	8005484 <protocol_exec_rt_system+0x318>
            // they are complete, it will call CYCLE_START automatically to resume and exit the suspend.
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
          }
        }
        // Cycle start only when IDLE or when a hold is complete and ready to resume.
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f040 8139 	bne.w	8005434 <protocol_exec_rt_system+0x2c8>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
          } else {
            // Start cycle only if queued motions exist in planner buffer and the motion is not canceled.
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 80051c2:	2300      	movs	r3, #0
 80051c4:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 80051c6:	f7ff f953 	bl	8004470 <plan_get_current_block>
 80051ca:	b120      	cbz	r0, 80051d6 <protocol_exec_rt_system+0x6a>
 80051cc:	78a3      	ldrb	r3, [r4, #2]
 80051ce:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80051d2:	f000 818f 	beq.w	80054f4 <protocol_exec_rt_system+0x388>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
              sys.state = STATE_CYCLE;
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
              st_wake_up();
            } else { // Otherwise, do nothing. Set and resume IDLE state.
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80051d6:	2300      	movs	r3, #0
 80051d8:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 80051da:	7023      	strb	r3, [r4, #0]
            }
          }
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 80051dc:	2002      	movs	r0, #2
 80051de:	f004 fb23 	bl	8009828 <system_clear_exec_state_flag>
    }

    if (rt_exec & EXEC_CYCLE_STOP) {
 80051e2:	0768      	lsls	r0, r5, #29
 80051e4:	f100 80a3 	bmi.w	800532e <protocol_exec_rt_system+0x1c2>
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
    }
  }

  // Execute overrides.
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 80051e8:	4b8f      	ldr	r3, [pc, #572]	; (8005428 <protocol_exec_rt_system+0x2bc>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 80051ec:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d161      	bne.n	80052b8 <protocol_exec_rt_system+0x14c>
      plan_update_velocity_profile_parameters();
      plan_cycle_reinitialize();
    }
  }

  rt_exec = sys_rt_exec_accessory_override;
 80051f4:	4b8d      	ldr	r3, [pc, #564]	; (800542c <protocol_exec_rt_system+0x2c0>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 80051f8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80051fc:	b9db      	cbnz	r3, 8005236 <protocol_exec_rt_system+0xca>
 80051fe:	7823      	ldrb	r3, [r4, #0]
      sys_rt_exec_debug = 0;
    }
  #endif

  // Reload step segment buffer
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005200:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005204:	d103      	bne.n	800520e <protocol_exec_rt_system+0xa2>
 8005206:	bd70      	pop	{r4, r5, r6, pc}
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005208:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800520c:	d147      	bne.n	800529e <protocol_exec_rt_system+0x132>
    st_prep_buffer();
  }

}
 800520e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    st_prep_buffer();
 8005212:	f003 ba5b 	b.w	80086cc <st_prep_buffer>
    sys.state = STATE_ALARM; // Set system alarm state
 8005216:	2601      	movs	r6, #1
 8005218:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800521c:	4c80      	ldr	r4, [pc, #512]	; (8005420 <protocol_exec_rt_system+0x2b4>)
    report_alarm_message(rt_exec);
 800521e:	4628      	mov	r0, r5
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005220:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 8005222:	7026      	strb	r6, [r4, #0]
    report_alarm_message(rt_exec);
 8005224:	f001 f99e 	bl	8006564 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005228:	42b5      	cmp	r5, r6
 800522a:	f240 8120 	bls.w	800546e <protocol_exec_rt_system+0x302>
 800522e:	4d7d      	ldr	r5, [pc, #500]	; (8005424 <protocol_exec_rt_system+0x2b8>)
    system_clear_exec_alarm(); // Clear alarm
 8005230:	f004 fb0c 	bl	800984c <system_clear_exec_alarm>
 8005234:	e7a1      	b.n	800517a <protocol_exec_rt_system+0xe>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8005236:	f004 fb2d 	bl	8009894 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 800523a:	7aa2      	ldrb	r2, [r4, #10]
 800523c:	f015 0f01 	tst.w	r5, #1
 8005240:	bf0c      	ite	eq
 8005242:	4613      	moveq	r3, r2
 8005244:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005246:	07a9      	lsls	r1, r5, #30
 8005248:	bf44      	itt	mi
 800524a:	330a      	addmi	r3, #10
 800524c:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 800524e:	076e      	lsls	r6, r5, #29
 8005250:	bf44      	itt	mi
 8005252:	3b0a      	submi	r3, #10
 8005254:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005256:	0728      	lsls	r0, r5, #28
 8005258:	bf44      	itt	mi
 800525a:	3301      	addmi	r3, #1
 800525c:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 800525e:	06e9      	lsls	r1, r5, #27
 8005260:	bf44      	itt	mi
 8005262:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005266:	b2db      	uxtbmi	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8005268:	2bc8      	cmp	r3, #200	; 0xc8
 800526a:	bf28      	it	cs
 800526c:	23c8      	movcs	r3, #200	; 0xc8
 800526e:	2b0a      	cmp	r3, #10
 8005270:	bf38      	it	cc
 8005272:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005274:	429a      	cmp	r2, r3
 8005276:	d006      	beq.n	8005286 <protocol_exec_rt_system+0x11a>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005278:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800527a:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 800527c:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800527e:	f042 0308 	orr.w	r3, r2, #8
 8005282:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005284:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005286:	06ae      	lsls	r6, r5, #26
      if (sys.state == STATE_HOLD) {
 8005288:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 800528a:	d502      	bpl.n	8005292 <protocol_exec_rt_system+0x126>
      if (sys.state == STATE_HOLD) {
 800528c:	2b10      	cmp	r3, #16
 800528e:	f000 80ba 	beq.w	8005406 <protocol_exec_rt_system+0x29a>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005292:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005296:	d0b3      	beq.n	8005200 <protocol_exec_rt_system+0x94>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005298:	2b00      	cmp	r3, #0
 800529a:	f040 80dd 	bne.w	8005458 <protocol_exec_rt_system+0x2ec>
        uint8_t coolant_state = gc_state.modal.coolant;
 800529e:	4e64      	ldr	r6, [pc, #400]	; (8005430 <protocol_exec_rt_system+0x2c4>)
 80052a0:	7a35      	ldrb	r5, [r6, #8]
          if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 80052a2:	0669      	lsls	r1, r5, #25
 80052a4:	f100 808a 	bmi.w	80053bc <protocol_exec_rt_system+0x250>
          else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 80052a8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 80052ac:	4628      	mov	r0, r5
 80052ae:	f7fc fbf1 	bl	8001a94 <coolant_set_state>
 80052b2:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 80052b4:	7235      	strb	r5, [r6, #8]
 80052b6:	e7a3      	b.n	8005200 <protocol_exec_rt_system+0x94>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 80052b8:	f004 fae4 	bl	8009884 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 80052bc:	7a21      	ldrb	r1, [r4, #8]
 80052be:	f015 0f01 	tst.w	r5, #1
 80052c2:	bf0c      	ite	eq
 80052c4:	460b      	moveq	r3, r1
 80052c6:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 80052c8:	07ae      	lsls	r6, r5, #30
 80052ca:	bf44      	itt	mi
 80052cc:	330a      	addmi	r3, #10
 80052ce:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 80052d0:	0768      	lsls	r0, r5, #29
 80052d2:	bf44      	itt	mi
 80052d4:	3b0a      	submi	r3, #10
 80052d6:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 80052d8:	072e      	lsls	r6, r5, #28
 80052da:	bf44      	itt	mi
 80052dc:	3301      	addmi	r3, #1
 80052de:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 80052e0:	06e8      	lsls	r0, r5, #27
 80052e2:	bf44      	itt	mi
 80052e4:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80052e8:	b2db      	uxtbmi	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 80052ea:	2bc8      	cmp	r3, #200	; 0xc8
 80052ec:	bf28      	it	cs
 80052ee:	23c8      	movcs	r3, #200	; 0xc8
 80052f0:	2b0a      	cmp	r3, #10
 80052f2:	bf38      	it	cc
 80052f4:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 80052f6:	7a60      	ldrb	r0, [r4, #9]
 80052f8:	f015 0f20 	tst.w	r5, #32
 80052fc:	bf14      	ite	ne
 80052fe:	2264      	movne	r2, #100	; 0x64
 8005300:	4602      	moveq	r2, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8005302:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005306:	bf18      	it	ne
 8005308:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 800530a:	f015 0f80 	tst.w	r5, #128	; 0x80
 800530e:	bf18      	it	ne
 8005310:	2219      	movne	r2, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005312:	4299      	cmp	r1, r3
 8005314:	d023      	beq.n	800535e <protocol_exec_rt_system+0x1f2>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005316:	2100      	movs	r1, #0
      sys.f_override = new_f_override;
 8005318:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 800531a:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 800531c:	7321      	strb	r1, [r4, #12]
      plan_update_velocity_profile_parameters();
 800531e:	f7ff f919 	bl	8004554 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 8005322:	f7ff fc4d 	bl	8004bc0 <plan_cycle_reinitialize>
 8005326:	e765      	b.n	80051f4 <protocol_exec_rt_system+0x88>
      sys.abort = true;  // Only place this is set true.
 8005328:	2301      	movs	r3, #1
 800532a:	7063      	strb	r3, [r4, #1]
      return; // Nothing else to do but exit.
 800532c:	bd70      	pop	{r4, r5, r6, pc}
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 800532e:	7823      	ldrb	r3, [r4, #0]
 8005330:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 8005334:	d002      	beq.n	800533c <protocol_exec_rt_system+0x1d0>
 8005336:	78e3      	ldrb	r3, [r4, #3]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d054      	beq.n	80053e6 <protocol_exec_rt_system+0x27a>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 800533c:	78a3      	ldrb	r3, [r4, #2]
 800533e:	061a      	lsls	r2, r3, #24
 8005340:	d455      	bmi.n	80053ee <protocol_exec_rt_system+0x282>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8005342:	f013 0220 	ands.w	r2, r3, #32
 8005346:	d036      	beq.n	80053b6 <protocol_exec_rt_system+0x24a>
          sys.state = STATE_SAFETY_DOOR;
 8005348:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 800534a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 800534e:	f043 0301 	orr.w	r3, r3, #1
 8005352:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8005354:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005356:	2004      	movs	r0, #4
 8005358:	f004 fa66 	bl	8009828 <system_clear_exec_state_flag>
 800535c:	e744      	b.n	80051e8 <protocol_exec_rt_system+0x7c>
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 800535e:	4282      	cmp	r2, r0
 8005360:	d1d9      	bne.n	8005316 <protocol_exec_rt_system+0x1aa>
 8005362:	e747      	b.n	80051f4 <protocol_exec_rt_system+0x88>
      report_realtime_status();
 8005364:	f001 fd5a 	bl	8006e1c <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8005368:	2001      	movs	r0, #1
 800536a:	f004 fa5d 	bl	8009828 <system_clear_exec_state_flag>
 800536e:	e70e      	b.n	800518e <protocol_exec_rt_system+0x22>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8005370:	f013 0f28 	tst.w	r3, #40	; 0x28
 8005374:	d125      	bne.n	80053c2 <protocol_exec_rt_system+0x256>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005376:	bb4b      	cbnz	r3, 80053cc <protocol_exec_rt_system+0x260>
 8005378:	2201      	movs	r2, #1
 800537a:	70a2      	strb	r2, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 800537c:	066a      	lsls	r2, r5, #25
 800537e:	f100 8097 	bmi.w	80054b0 <protocol_exec_rt_system+0x344>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005382:	072b      	lsls	r3, r5, #28
 8005384:	b26e      	sxtb	r6, r5
 8005386:	d501      	bpl.n	800538c <protocol_exec_rt_system+0x220>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005388:	2310      	movs	r3, #16
 800538a:	7023      	strb	r3, [r4, #0]
        if (rt_exec & EXEC_SAFETY_DOOR) {
 800538c:	06a8      	lsls	r0, r5, #26
 800538e:	f57f af06 	bpl.w	800519e <protocol_exec_rt_system+0x32>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8005392:	2006      	movs	r0, #6
 8005394:	f001 f8fc 	bl	8006590 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005398:	78a3      	ldrb	r3, [r4, #2]
 800539a:	0619      	lsls	r1, r3, #24
 800539c:	d407      	bmi.n	80053ae <protocol_exec_rt_system+0x242>
            if (sys.state == STATE_SAFETY_DOOR) {
 800539e:	7822      	ldrb	r2, [r4, #0]
 80053a0:	2a40      	cmp	r2, #64	; 0x40
 80053a2:	f000 80b6 	beq.w	8005512 <protocol_exec_rt_system+0x3a6>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 80053a6:	2a80      	cmp	r2, #128	; 0x80
 80053a8:	d001      	beq.n	80053ae <protocol_exec_rt_system+0x242>
 80053aa:	2240      	movs	r2, #64	; 0x40
 80053ac:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 80053ae:	f043 0320 	orr.w	r3, r3, #32
 80053b2:	70a3      	strb	r3, [r4, #2]
 80053b4:	e6f3      	b.n	800519e <protocol_exec_rt_system+0x32>
          sys.suspend = SUSPEND_DISABLE;
 80053b6:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 80053b8:	7022      	strb	r2, [r4, #0]
 80053ba:	e7cc      	b.n	8005356 <protocol_exec_rt_system+0x1ea>
          if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 80053bc:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
 80053c0:	e774      	b.n	80052ac <protocol_exec_rt_system+0x140>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 80053c2:	78a2      	ldrb	r2, [r4, #2]
 80053c4:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80053c8:	f000 8083 	beq.w	80054d2 <protocol_exec_rt_system+0x366>
 80053cc:	b26a      	sxtb	r2, r5
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80053ce:	0668      	lsls	r0, r5, #25
 80053d0:	4616      	mov	r6, r2
 80053d2:	d502      	bpl.n	80053da <protocol_exec_rt_system+0x26e>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80053d4:	0699      	lsls	r1, r3, #26
 80053d6:	f140 80a4 	bpl.w	8005522 <protocol_exec_rt_system+0x3b6>
        if (rt_exec & EXEC_FEED_HOLD) {
 80053da:	072a      	lsls	r2, r5, #28
 80053dc:	d5d6      	bpl.n	800538c <protocol_exec_rt_system+0x220>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80053de:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 80053e2:	d1d3      	bne.n	800538c <protocol_exec_rt_system+0x220>
 80053e4:	e7d0      	b.n	8005388 <protocol_exec_rt_system+0x21c>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80053e6:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	da53      	bge.n	8005496 <protocol_exec_rt_system+0x32a>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 80053ee:	2300      	movs	r3, #0
 80053f0:	7123      	strb	r3, [r4, #4]
          plan_reset();
 80053f2:	f7fe fffb 	bl	80043ec <plan_reset>
          st_reset();
 80053f6:	f002 ffe1 	bl	80083bc <st_reset>
          gc_sync_position();
 80053fa:	f7fc fc37 	bl	8001c6c <gc_sync_position>
          plan_sync_position();
 80053fe:	f7ff fbbf 	bl	8004b80 <plan_sync_position>
 8005402:	78a3      	ldrb	r3, [r4, #2]
 8005404:	e79d      	b.n	8005342 <protocol_exec_rt_system+0x1d6>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005406:	7ae3      	ldrb	r3, [r4, #11]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d156      	bne.n	80054ba <protocol_exec_rt_system+0x34e>
 800540c:	2302      	movs	r3, #2
 800540e:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005410:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005414:	f47f af43 	bne.w	800529e <protocol_exec_rt_system+0x132>
 8005418:	e6f9      	b.n	800520e <protocol_exec_rt_system+0xa2>
 800541a:	bf00      	nop
 800541c:	20001bac 	.word	0x20001bac
 8005420:	20001b6c 	.word	0x20001b6c
 8005424:	20001b81 	.word	0x20001b81
 8005428:	20001b68 	.word	0x20001b68
 800542c:	20001b80 	.word	0x20001b80
 8005430:	20001abc 	.word	0x20001abc
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005434:	06da      	lsls	r2, r3, #27
 8005436:	f57f aed1 	bpl.w	80051dc <protocol_exec_rt_system+0x70>
 800543a:	78a2      	ldrb	r2, [r4, #2]
 800543c:	07d6      	lsls	r6, r2, #31
 800543e:	f57f aecd 	bpl.w	80051dc <protocol_exec_rt_system+0x70>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8005442:	2b10      	cmp	r3, #16
 8005444:	f47f aebd 	bne.w	80051c2 <protocol_exec_rt_system+0x56>
 8005448:	7ae3      	ldrb	r3, [r4, #11]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f43f aeb9 	beq.w	80051c2 <protocol_exec_rt_system+0x56>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005450:	f043 0308 	orr.w	r3, r3, #8
 8005454:	72e3      	strb	r3, [r4, #11]
 8005456:	e6c1      	b.n	80051dc <protocol_exec_rt_system+0x70>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005458:	f013 0f18 	tst.w	r3, #24
 800545c:	f43f aed0 	beq.w	8005200 <protocol_exec_rt_system+0x94>
 8005460:	e71d      	b.n	800529e <protocol_exec_rt_system+0x132>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005462:	7823      	ldrb	r3, [r4, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d02f      	beq.n	80054c8 <protocol_exec_rt_system+0x35c>
        sys.state = STATE_SLEEP; 
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	7023      	strb	r3, [r4, #0]
 800546c:	e69a      	b.n	80051a4 <protocol_exec_rt_system+0x38>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 800546e:	4630      	mov	r0, r6
 8005470:	f001 f88e 	bl	8006590 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8005474:	2010      	movs	r0, #16
 8005476:	f004 f9d7 	bl	8009828 <system_clear_exec_state_flag>
 800547a:	4d2c      	ldr	r5, [pc, #176]	; (800552c <protocol_exec_rt_system+0x3c0>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 800547c:	782b      	ldrb	r3, [r5, #0]
 800547e:	06db      	lsls	r3, r3, #27
 8005480:	d5fc      	bpl.n	800547c <protocol_exec_rt_system+0x310>
 8005482:	e6d5      	b.n	8005230 <protocol_exec_rt_system+0xc4>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005484:	78a3      	ldrb	r3, [r4, #2]
 8005486:	f013 0220 	ands.w	r2, r3, #32
 800548a:	f47f aea7 	bne.w	80051dc <protocol_exec_rt_system+0x70>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 800548e:	06d9      	lsls	r1, r3, #27
 8005490:	d538      	bpl.n	8005504 <protocol_exec_rt_system+0x398>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8005492:	7022      	strb	r2, [r4, #0]
 8005494:	e695      	b.n	80051c2 <protocol_exec_rt_system+0x56>
        plan_cycle_reinitialize();
 8005496:	f7ff fb93 	bl	8004bc0 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 800549a:	7923      	ldrb	r3, [r4, #4]
 800549c:	0799      	lsls	r1, r3, #30
 800549e:	d503      	bpl.n	80054a8 <protocol_exec_rt_system+0x33c>
 80054a0:	78a2      	ldrb	r2, [r4, #2]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 80054a8:	f023 0306 	bic.w	r3, r3, #6
 80054ac:	7123      	strb	r3, [r4, #4]
 80054ae:	e752      	b.n	8005356 <protocol_exec_rt_system+0x1ea>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80054b0:	2141      	movs	r1, #65	; 0x41
 80054b2:	b26a      	sxtb	r2, r5
 80054b4:	4616      	mov	r6, r2
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80054b6:	70a1      	strb	r1, [r4, #2]
 80054b8:	e78f      	b.n	80053da <protocol_exec_rt_system+0x26e>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 80054ba:	07d8      	lsls	r0, r3, #31
 80054bc:	f57f aea4 	bpl.w	8005208 <protocol_exec_rt_system+0x9c>
 80054c0:	f043 0304 	orr.w	r3, r3, #4
 80054c4:	72e3      	strb	r3, [r4, #11]
 80054c6:	e7a3      	b.n	8005410 <protocol_exec_rt_system+0x2a4>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80054c8:	78a3      	ldrb	r3, [r4, #2]
 80054ca:	f043 0305 	orr.w	r3, r3, #5
 80054ce:	70a3      	strb	r3, [r4, #2]
 80054d0:	e7ca      	b.n	8005468 <protocol_exec_rt_system+0x2fc>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 80054d2:	f003 f8e5 	bl	80086a0 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80054d6:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80054d8:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80054da:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80054dc:	2b20      	cmp	r3, #32
 80054de:	f47f af4a 	bne.w	8005376 <protocol_exec_rt_system+0x20a>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 80054e2:	b26e      	sxtb	r6, r5
 80054e4:	2e00      	cmp	r6, #0
 80054e6:	f6ff af51 	blt.w	800538c <protocol_exec_rt_system+0x220>
 80054ea:	78a3      	ldrb	r3, [r4, #2]
 80054ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054f0:	70a3      	strb	r3, [r4, #2]
 80054f2:	e74b      	b.n	800538c <protocol_exec_rt_system+0x220>
              sys.state = STATE_CYCLE;
 80054f4:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80054f6:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 80054f8:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 80054fa:	f003 f8e7 	bl	80086cc <st_prep_buffer>
              st_wake_up();
 80054fe:	f002 fd03 	bl	8007f08 <st_wake_up>
 8005502:	e66b      	b.n	80051dc <protocol_exec_rt_system+0x70>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005504:	075a      	lsls	r2, r3, #29
 8005506:	f57f ae69 	bpl.w	80051dc <protocol_exec_rt_system+0x70>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 800550a:	f043 0308 	orr.w	r3, r3, #8
 800550e:	70a3      	strb	r3, [r4, #2]
 8005510:	e664      	b.n	80051dc <protocol_exec_rt_system+0x70>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8005512:	071a      	lsls	r2, r3, #28
 8005514:	f57f af49 	bpl.w	80053aa <protocol_exec_rt_system+0x23e>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8005518:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 800551c:	f043 0302 	orr.w	r3, r3, #2
 8005520:	e743      	b.n	80053aa <protocol_exec_rt_system+0x23e>
 8005522:	78a1      	ldrb	r1, [r4, #2]
 8005524:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005528:	e7c4      	b.n	80054b4 <protocol_exec_rt_system+0x348>
 800552a:	bf00      	nop
 800552c:	20001b81 	.word	0x20001b81

08005530 <protocol_exec_rt_suspend>:
// The system will enter this loop, create local variables for suspend tasks, and return to
// whatever function that invoked the suspend, such that Grbl resumes normal operation.
// This function is written in a way to promote custom parking motions. Simply use this as a
// template
static void protocol_exec_rt_suspend()
{
 8005530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	b083      	sub	sp, #12
    #ifdef USE_LINE_NUMBERS
      pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
    #endif
  #endif

  plan_block_t *block = plan_get_current_block();
 8005536:	f7fe ff9b 	bl	8004470 <plan_get_current_block>
  uint8_t restore_condition;
  #ifdef VARIABLE_SPINDLE
    float restore_spindle_speed;
    if (block == NULL) {
 800553a:	2800      	cmp	r0, #0
 800553c:	f000 82d2 	beq.w	8005ae4 <protocol_exec_rt_suspend+0x5b4>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
      restore_spindle_speed = gc_state.spindle_speed;
    } else {
      restore_condition = block->condition;
 8005540:	7e83      	ldrb	r3, [r0, #26]
      restore_spindle_speed = block->spindle_speed;
 8005542:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
      restore_condition = block->condition;
 8005546:	9301      	str	r3, [sp, #4]
    }
    #ifdef DISABLE_LASER_DURING_HOLD
      if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8005548:	4ec0      	ldr	r6, [pc, #768]	; (800584c <protocol_exec_rt_suspend+0x31c>)
 800554a:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
 800554e:	079b      	lsls	r3, r3, #30
 8005550:	f100 8299 	bmi.w	8005a86 <protocol_exec_rt_suspend+0x556>
        // NOTE: Hold ensured as completed by condition check at the beginning of suspend routine.
        if (sys.spindle_stop_ovr) {
          // Handles beginning of spindle stop
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005554:	2500      	movs	r5, #0
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 8005556:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
 800555a:	4cbd      	ldr	r4, [pc, #756]	; (8005850 <protocol_exec_rt_suspend+0x320>)
  while (sys.suspend) {
 800555c:	78a3      	ldrb	r3, [r4, #2]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 809a 	beq.w	8005698 <protocol_exec_rt_suspend+0x168>
    if (sys.abort) { return; }
 8005564:	7862      	ldrb	r2, [r4, #1]
 8005566:	2a00      	cmp	r2, #0
 8005568:	f040 8096 	bne.w	8005698 <protocol_exec_rt_suspend+0x168>
    if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 800556c:	07df      	lsls	r7, r3, #31
 800556e:	d51a      	bpl.n	80055a6 <protocol_exec_rt_suspend+0x76>
      if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 8005570:	7821      	ldrb	r1, [r4, #0]
 8005572:	f011 00c0 	ands.w	r0, r1, #192	; 0xc0
 8005576:	f000 8092 	beq.w	800569e <protocol_exec_rt_suspend+0x16e>
        if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 800557a:	f013 0b04 	ands.w	fp, r3, #4
 800557e:	f000 8173 	beq.w	8005868 <protocol_exec_rt_suspend+0x338>
          if (sys.state == STATE_SLEEP) {
 8005582:	2980      	cmp	r1, #128	; 0x80
 8005584:	f000 82c2 	beq.w	8005b0c <protocol_exec_rt_suspend+0x5dc>
          if (sys.state == STATE_SAFETY_DOOR) {
 8005588:	2940      	cmp	r1, #64	; 0x40
 800558a:	f000 8258 	beq.w	8005a3e <protocol_exec_rt_suspend+0x50e>
          if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 800558e:	0718      	lsls	r0, r3, #28
 8005590:	d509      	bpl.n	80055a6 <protocol_exec_rt_suspend+0x76>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8005592:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8005864 <protocol_exec_rt_suspend+0x334>
 8005596:	f89b 2009 	ldrb.w	r2, [fp, #9]
 800559a:	2a00      	cmp	r2, #0
 800559c:	f000 81cc 	beq.w	8005938 <protocol_exec_rt_suspend+0x408>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 80055a0:	0799      	lsls	r1, r3, #30
 80055a2:	f140 8217 	bpl.w	80059d4 <protocol_exec_rt_suspend+0x4a4>
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 80055a6:	4bab      	ldr	r3, [pc, #684]	; (8005854 <protocol_exec_rt_suspend+0x324>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 80055aa:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f040 808a 	bne.w	80056c8 <protocol_exec_rt_suspend+0x198>
 80055b4:	4fa8      	ldr	r7, [pc, #672]	; (8005858 <protocol_exec_rt_suspend+0x328>)
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 80055b6:	783b      	ldrb	r3, [r7, #0]
  if (rt_exec) {
 80055b8:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d054      	beq.n	800566a <protocol_exec_rt_suspend+0x13a>
    if (rt_exec & EXEC_RESET) {
 80055c0:	f01b 0f10 	tst.w	fp, #16
 80055c4:	f040 811d 	bne.w	8005802 <protocol_exec_rt_suspend+0x2d2>
    if (rt_exec & EXEC_STATUS_REPORT) {
 80055c8:	f01b 0f01 	tst.w	fp, #1
 80055cc:	f040 816c 	bne.w	80058a8 <protocol_exec_rt_suspend+0x378>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 80055d0:	f01b 0fe8 	tst.w	fp, #232	; 0xe8
 80055d4:	d00c      	beq.n	80055f0 <protocol_exec_rt_suspend+0xc0>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 80055d6:	7823      	ldrb	r3, [r4, #0]
 80055d8:	079f      	lsls	r7, r3, #30
 80055da:	f000 816b 	beq.w	80058b4 <protocol_exec_rt_suspend+0x384>
 80055de:	fa4f fa8b 	sxtb.w	sl, fp
      if (rt_exec & EXEC_SLEEP) {
 80055e2:	f1ba 0f00 	cmp.w	sl, #0
 80055e6:	f2c0 8194 	blt.w	8005912 <protocol_exec_rt_suspend+0x3e2>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 80055ea:	20e8      	movs	r0, #232	; 0xe8
 80055ec:	f004 f91c 	bl	8009828 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 80055f0:	f01b 0f02 	tst.w	fp, #2
 80055f4:	d019      	beq.n	800562a <protocol_exec_rt_suspend+0xfa>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 80055f6:	f01b 0f68 	tst.w	fp, #104	; 0x68
 80055fa:	d113      	bne.n	8005624 <protocol_exec_rt_suspend+0xf4>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 80055fc:	7823      	ldrb	r3, [r4, #0]
 80055fe:	2b40      	cmp	r3, #64	; 0x40
 8005600:	f000 8238 	beq.w	8005a74 <protocol_exec_rt_suspend+0x544>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005604:	2b00      	cmp	r3, #0
 8005606:	f040 81f2 	bne.w	80059ee <protocol_exec_rt_suspend+0x4be>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 800560a:	2300      	movs	r3, #0
 800560c:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 800560e:	f7fe ff2f 	bl	8004470 <plan_get_current_block>
 8005612:	b120      	cbz	r0, 800561e <protocol_exec_rt_suspend+0xee>
 8005614:	78a3      	ldrb	r3, [r4, #2]
 8005616:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800561a:	f000 826c 	beq.w	8005af6 <protocol_exec_rt_suspend+0x5c6>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 800561e:	2300      	movs	r3, #0
 8005620:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8005622:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005624:	2002      	movs	r0, #2
 8005626:	f004 f8ff 	bl	8009828 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 800562a:	f01b 0f04 	tst.w	fp, #4
 800562e:	d01c      	beq.n	800566a <protocol_exec_rt_suspend+0x13a>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005630:	7823      	ldrb	r3, [r4, #0]
 8005632:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 8005636:	f000 80f6 	beq.w	8005826 <protocol_exec_rt_suspend+0x2f6>
 800563a:	78e3      	ldrb	r3, [r4, #3]
 800563c:	2b00      	cmp	r3, #0
 800563e:	f040 80f2 	bne.w	8005826 <protocol_exec_rt_suspend+0x2f6>
 8005642:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8005646:	2b00      	cmp	r3, #0
 8005648:	f2c0 81ed 	blt.w	8005a26 <protocol_exec_rt_suspend+0x4f6>
        plan_cycle_reinitialize();
 800564c:	f7ff fab8 	bl	8004bc0 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8005650:	7923      	ldrb	r3, [r4, #4]
 8005652:	079a      	lsls	r2, r3, #30
 8005654:	d503      	bpl.n	800565e <protocol_exec_rt_suspend+0x12e>
 8005656:	78a2      	ldrb	r2, [r4, #2]
 8005658:	f042 0201 	orr.w	r2, r2, #1
 800565c:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 800565e:	f023 0306 	bic.w	r3, r3, #6
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005662:	2004      	movs	r0, #4
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005664:	7123      	strb	r3, [r4, #4]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005666:	f004 f8df 	bl	8009828 <system_clear_exec_state_flag>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 800566a:	4b7c      	ldr	r3, [pc, #496]	; (800585c <protocol_exec_rt_suspend+0x32c>)
 800566c:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 800566e:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005672:	2b00      	cmp	r3, #0
 8005674:	d136      	bne.n	80056e4 <protocol_exec_rt_suspend+0x1b4>
  rt_exec = sys_rt_exec_accessory_override;
 8005676:	4b7a      	ldr	r3, [pc, #488]	; (8005860 <protocol_exec_rt_suspend+0x330>)
 8005678:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 800567a:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 800567e:	2b00      	cmp	r3, #0
 8005680:	d174      	bne.n	800576c <protocol_exec_rt_suspend+0x23c>
 8005682:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005684:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005688:	f43f af68 	beq.w	800555c <protocol_exec_rt_suspend+0x2c>
    st_prep_buffer();
 800568c:	f003 f81e 	bl	80086cc <st_prep_buffer>
  while (sys.suspend) {
 8005690:	78a3      	ldrb	r3, [r4, #2]
 8005692:	2b00      	cmp	r3, #0
 8005694:	f47f af66 	bne.w	8005564 <protocol_exec_rt_suspend+0x34>
    }

    protocol_exec_rt_system();

  }
}
 8005698:	b003      	add	sp, #12
 800569a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (sys.spindle_stop_ovr) {
 800569e:	7ae3      	ldrb	r3, [r4, #11]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 80b1 	beq.w	8005808 <protocol_exec_rt_suspend+0x2d8>
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 80056a6:	079f      	lsls	r7, r3, #30
 80056a8:	f140 80ee 	bpl.w	8005888 <protocol_exec_rt_suspend+0x358>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80056ac:	4b6d      	ldr	r3, [pc, #436]	; (8005864 <protocol_exec_rt_suspend+0x334>)
 80056ae:	7a5b      	ldrb	r3, [r3, #9]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f040 81d9 	bne.w	8005a68 <protocol_exec_rt_suspend+0x538>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 80056b6:	2300      	movs	r3, #0
 80056b8:	72e3      	strb	r3, [r4, #11]
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 80056ba:	4b66      	ldr	r3, [pc, #408]	; (8005854 <protocol_exec_rt_suspend+0x324>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 80056be:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f43f af76 	beq.w	80055b4 <protocol_exec_rt_suspend+0x84>
    sys.state = STATE_ALARM; // Set system alarm state
 80056c8:	2701      	movs	r7, #1
    report_alarm_message(rt_exec);
 80056ca:	4658      	mov	r0, fp
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80056cc:	f10b 3bff 	add.w	fp, fp, #4294967295
    sys.state = STATE_ALARM; // Set system alarm state
 80056d0:	7027      	strb	r7, [r4, #0]
    report_alarm_message(rt_exec);
 80056d2:	f000 ff47 	bl	8006564 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80056d6:	45bb      	cmp	fp, r7
 80056d8:	f240 8171 	bls.w	80059be <protocol_exec_rt_suspend+0x48e>
 80056dc:	4f5e      	ldr	r7, [pc, #376]	; (8005858 <protocol_exec_rt_suspend+0x328>)
    system_clear_exec_alarm(); // Clear alarm
 80056de:	f004 f8b5 	bl	800984c <system_clear_exec_alarm>
 80056e2:	e768      	b.n	80055b6 <protocol_exec_rt_suspend+0x86>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 80056e4:	f004 f8ce 	bl	8009884 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 80056e8:	f01b 0f01 	tst.w	fp, #1
 80056ec:	bf18      	it	ne
 80056ee:	2364      	movne	r3, #100	; 0x64
 80056f0:	7a22      	ldrb	r2, [r4, #8]
    uint8_t new_r_override = sys.r_override;
 80056f2:	7a60      	ldrb	r0, [r4, #9]
    uint8_t new_f_override =  sys.f_override;
 80056f4:	bf08      	it	eq
 80056f6:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 80056f8:	f01b 0f02 	tst.w	fp, #2
 80056fc:	bf1c      	itt	ne
 80056fe:	330a      	addne	r3, #10
 8005700:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8005702:	f01b 0f04 	tst.w	fp, #4
 8005706:	bf1c      	itt	ne
 8005708:	3b0a      	subne	r3, #10
 800570a:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 800570c:	f01b 0f08 	tst.w	fp, #8
 8005710:	bf1c      	itt	ne
 8005712:	3301      	addne	r3, #1
 8005714:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8005716:	f01b 0f10 	tst.w	fp, #16
 800571a:	bf1c      	itt	ne
 800571c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8005720:	b2db      	uxtbne	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8005722:	2bc8      	cmp	r3, #200	; 0xc8
 8005724:	bf28      	it	cs
 8005726:	23c8      	movcs	r3, #200	; 0xc8
 8005728:	2b0a      	cmp	r3, #10
 800572a:	bf38      	it	cc
 800572c:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 800572e:	f01b 0f20 	tst.w	fp, #32
 8005732:	bf14      	ite	ne
 8005734:	2164      	movne	r1, #100	; 0x64
 8005736:	4601      	moveq	r1, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8005738:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800573c:	bf18      	it	ne
 800573e:	2132      	movne	r1, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8005740:	f01b 0f80 	tst.w	fp, #128	; 0x80
 8005744:	bf18      	it	ne
 8005746:	2119      	movne	r1, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005748:	429a      	cmp	r2, r3
 800574a:	d101      	bne.n	8005750 <protocol_exec_rt_suspend+0x220>
 800574c:	4288      	cmp	r0, r1
 800574e:	d092      	beq.n	8005676 <protocol_exec_rt_suspend+0x146>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005750:	2200      	movs	r2, #0
      sys.f_override = new_f_override;
 8005752:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8005754:	7261      	strb	r1, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005756:	7322      	strb	r2, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005758:	f7fe fefc 	bl	8004554 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 800575c:	f7ff fa30 	bl	8004bc0 <plan_cycle_reinitialize>
  rt_exec = sys_rt_exec_accessory_override;
 8005760:	4b3f      	ldr	r3, [pc, #252]	; (8005860 <protocol_exec_rt_suspend+0x330>)
 8005762:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005764:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005768:	2b00      	cmp	r3, #0
 800576a:	d08a      	beq.n	8005682 <protocol_exec_rt_suspend+0x152>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 800576c:	f004 f892 	bl	8009894 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8005770:	f01b 0f01 	tst.w	fp, #1
 8005774:	bf18      	it	ne
 8005776:	2364      	movne	r3, #100	; 0x64
 8005778:	7aa2      	ldrb	r2, [r4, #10]
 800577a:	bf08      	it	eq
 800577c:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 800577e:	f01b 0f02 	tst.w	fp, #2
 8005782:	bf1c      	itt	ne
 8005784:	330a      	addne	r3, #10
 8005786:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005788:	f01b 0f04 	tst.w	fp, #4
 800578c:	bf1c      	itt	ne
 800578e:	3b0a      	subne	r3, #10
 8005790:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005792:	f01b 0f08 	tst.w	fp, #8
 8005796:	bf1c      	itt	ne
 8005798:	3301      	addne	r3, #1
 800579a:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 800579c:	f01b 0f10 	tst.w	fp, #16
 80057a0:	bf1c      	itt	ne
 80057a2:	f103 33ff 	addne.w	r3, r3, #4294967295
 80057a6:	b2db      	uxtbne	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 80057a8:	2bc8      	cmp	r3, #200	; 0xc8
 80057aa:	bf28      	it	cs
 80057ac:	23c8      	movcs	r3, #200	; 0xc8
 80057ae:	2b0a      	cmp	r3, #10
 80057b0:	bf38      	it	cc
 80057b2:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d006      	beq.n	80057c6 <protocol_exec_rt_suspend+0x296>
      sys.report_ovr_counter = 0; // Set to report change immediately
 80057b8:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80057ba:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 80057bc:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80057be:	f042 0308 	orr.w	r3, r2, #8
 80057c2:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80057c4:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 80057c6:	f01b 0f20 	tst.w	fp, #32
      if (sys.state == STATE_HOLD) {
 80057ca:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 80057cc:	d002      	beq.n	80057d4 <protocol_exec_rt_suspend+0x2a4>
      if (sys.state == STATE_HOLD) {
 80057ce:	2b10      	cmp	r3, #16
 80057d0:	f000 813f 	beq.w	8005a52 <protocol_exec_rt_suspend+0x522>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80057d4:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
 80057d8:	f43f af54 	beq.w	8005684 <protocol_exec_rt_suspend+0x154>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f040 80cc 	bne.w	800597a <protocol_exec_rt_suspend+0x44a>
        uint8_t coolant_state = gc_state.modal.coolant;
 80057e2:	f8df b080 	ldr.w	fp, [pc, #128]	; 8005864 <protocol_exec_rt_suspend+0x334>
 80057e6:	f89b 2008 	ldrb.w	r2, [fp, #8]
          if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 80057ea:	0651      	lsls	r1, r2, #25
 80057ec:	f140 80d0 	bpl.w	8005990 <protocol_exec_rt_suspend+0x460>
 80057f0:	f002 0abf 	and.w	sl, r2, #191	; 0xbf
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 80057f4:	4650      	mov	r0, sl
 80057f6:	f7fc f94d 	bl	8001a94 <coolant_set_state>
 80057fa:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 80057fc:	f88b a008 	strb.w	sl, [fp, #8]
 8005800:	e740      	b.n	8005684 <protocol_exec_rt_suspend+0x154>
      sys.abort = true;  // Only place this is set true.
 8005802:	2301      	movs	r3, #1
 8005804:	7063      	strb	r3, [r4, #1]
 8005806:	e6a9      	b.n	800555c <protocol_exec_rt_suspend+0x2c>
          if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8005808:	7923      	ldrb	r3, [r4, #4]
 800580a:	071a      	lsls	r2, r3, #28
 800580c:	f57f aecb 	bpl.w	80055a6 <protocol_exec_rt_suspend+0x76>
            spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8005810:	9b01      	ldr	r3, [sp, #4]
 8005812:	4641      	mov	r1, r8
 8005814:	f003 0030 	and.w	r0, r3, #48	; 0x30
 8005818:	f002 fa36 	bl	8007c88 <spindle_set_state>
            bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800581c:	7923      	ldrb	r3, [r4, #4]
 800581e:	f023 0308 	bic.w	r3, r3, #8
 8005822:	7123      	strb	r3, [r4, #4]
 8005824:	e6bf      	b.n	80055a6 <protocol_exec_rt_suspend+0x76>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8005826:	78a3      	ldrb	r3, [r4, #2]
 8005828:	061f      	lsls	r7, r3, #24
 800582a:	f100 80fc 	bmi.w	8005a26 <protocol_exec_rt_suspend+0x4f6>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 800582e:	f013 0220 	ands.w	r2, r3, #32
 8005832:	f000 809f 	beq.w	8005974 <protocol_exec_rt_suspend+0x444>
          sys.state = STATE_SAFETY_DOOR;
 8005836:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8005838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 800583c:	f043 0301 	orr.w	r3, r3, #1
 8005840:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8005842:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005844:	2004      	movs	r0, #4
 8005846:	f003 ffef 	bl	8009828 <system_clear_exec_state_flag>
 800584a:	e70e      	b.n	800566a <protocol_exec_rt_suspend+0x13a>
 800584c:	20001d30 	.word	0x20001d30
 8005850:	20001b6c 	.word	0x20001b6c
 8005854:	20001bac 	.word	0x20001bac
 8005858:	20001b81 	.word	0x20001b81
 800585c:	20001b68 	.word	0x20001b68
 8005860:	20001b80 	.word	0x20001b80
 8005864:	20001abc 	.word	0x20001abc
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005868:	4629      	mov	r1, r5
 800586a:	4658      	mov	r0, fp
          sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 800586c:	f884 b00b 	strb.w	fp, [r4, #11]
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005870:	f002 fa0a 	bl	8007c88 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE);     // De-energize
 8005874:	4658      	mov	r0, fp
 8005876:	f7fc f90d 	bl	8001a94 <coolant_set_state>
          sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 800587a:	78a3      	ldrb	r3, [r4, #2]
 800587c:	f023 0302 	bic.w	r3, r3, #2
          sys.suspend |= SUSPEND_RETRACT_COMPLETE;
 8005880:	f043 0304 	orr.w	r3, r3, #4
 8005884:	70a3      	strb	r3, [r4, #2]
 8005886:	e68e      	b.n	80055a6 <protocol_exec_rt_suspend+0x76>
          } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CYCLE)) {
 8005888:	f013 0f0c 	tst.w	r3, #12
 800588c:	f43f ae8b 	beq.w	80055a6 <protocol_exec_rt_suspend+0x76>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8005890:	4aba      	ldr	r2, [pc, #744]	; (8005b7c <protocol_exec_rt_suspend+0x64c>)
 8005892:	7a52      	ldrb	r2, [r2, #9]
 8005894:	2a00      	cmp	r2, #0
 8005896:	f040 8106 	bne.w	8005aa6 <protocol_exec_rt_suspend+0x576>
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 800589a:	0719      	lsls	r1, r3, #28
 800589c:	f57f af0b 	bpl.w	80056b6 <protocol_exec_rt_suspend+0x186>
              system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 80058a0:	2002      	movs	r0, #2
 80058a2:	f003 ffb7 	bl	8009814 <system_set_exec_state_flag>
 80058a6:	e706      	b.n	80056b6 <protocol_exec_rt_suspend+0x186>
      report_realtime_status();
 80058a8:	f001 fab8 	bl	8006e1c <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 80058ac:	2001      	movs	r0, #1
 80058ae:	f003 ffbb 	bl	8009828 <system_clear_exec_state_flag>
 80058b2:	e68d      	b.n	80055d0 <protocol_exec_rt_suspend+0xa0>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 80058b4:	f013 0f28 	tst.w	r3, #40	; 0x28
 80058b8:	d075      	beq.n	80059a6 <protocol_exec_rt_suspend+0x476>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 80058ba:	78a2      	ldrb	r2, [r4, #2]
 80058bc:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80058c0:	d069      	beq.n	8005996 <protocol_exec_rt_suspend+0x466>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80058c2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80058c6:	fa4f fa8b 	sxtb.w	sl, fp
 80058ca:	d002      	beq.n	80058d2 <protocol_exec_rt_suspend+0x3a2>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80058cc:	0698      	lsls	r0, r3, #26
 80058ce:	f140 8150 	bpl.w	8005b72 <protocol_exec_rt_suspend+0x642>
        if (rt_exec & EXEC_FEED_HOLD) {
 80058d2:	f01b 0f08 	tst.w	fp, #8
 80058d6:	d003      	beq.n	80058e0 <protocol_exec_rt_suspend+0x3b0>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80058d8:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 80058dc:	f000 80a0 	beq.w	8005a20 <protocol_exec_rt_suspend+0x4f0>
        if (rt_exec & EXEC_SAFETY_DOOR) {
 80058e0:	f01b 0f20 	tst.w	fp, #32
 80058e4:	f43f ae7d 	beq.w	80055e2 <protocol_exec_rt_suspend+0xb2>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 80058e8:	2006      	movs	r0, #6
 80058ea:	f000 fe51 	bl	8006590 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80058ee:	78a3      	ldrb	r3, [r4, #2]
 80058f0:	0619      	lsls	r1, r3, #24
 80058f2:	d407      	bmi.n	8005904 <protocol_exec_rt_suspend+0x3d4>
            if (sys.state == STATE_SAFETY_DOOR) {
 80058f4:	7821      	ldrb	r1, [r4, #0]
 80058f6:	2940      	cmp	r1, #64	; 0x40
 80058f8:	f000 80ec 	beq.w	8005ad4 <protocol_exec_rt_suspend+0x5a4>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 80058fc:	2980      	cmp	r1, #128	; 0x80
 80058fe:	d001      	beq.n	8005904 <protocol_exec_rt_suspend+0x3d4>
 8005900:	2140      	movs	r1, #64	; 0x40
 8005902:	7021      	strb	r1, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005904:	f043 0320 	orr.w	r3, r3, #32
      if (rt_exec & EXEC_SLEEP) {
 8005908:	f1ba 0f00 	cmp.w	sl, #0
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 800590c:	70a3      	strb	r3, [r4, #2]
      if (rt_exec & EXEC_SLEEP) {
 800590e:	f6bf ae6c 	bge.w	80055ea <protocol_exec_rt_suspend+0xba>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005912:	7823      	ldrb	r3, [r4, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	f000 80d6 	beq.w	8005ac6 <protocol_exec_rt_suspend+0x596>
        sys.state = STATE_SLEEP; 
 800591a:	2380      	movs	r3, #128	; 0x80
 800591c:	7023      	strb	r3, [r4, #0]
 800591e:	e664      	b.n	80055ea <protocol_exec_rt_suspend+0xba>
                  spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8005920:	9b01      	ldr	r3, [sp, #4]
 8005922:	4641      	mov	r1, r8
 8005924:	f003 0030 	and.w	r0, r3, #48	; 0x30
 8005928:	f002 f9ae 	bl	8007c88 <spindle_set_state>
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 800592c:	2101      	movs	r1, #1
 800592e:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 8005932:	f7fe fb17 	bl	8003f64 <delay_sec>
 8005936:	78a3      	ldrb	r3, [r4, #2]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005938:	f89b 1008 	ldrb.w	r1, [fp, #8]
 800593c:	f003 0202 	and.w	r2, r3, #2
 8005940:	b171      	cbz	r1, 8005960 <protocol_exec_rt_suspend+0x430>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8005942:	2a00      	cmp	r2, #0
 8005944:	f47f ae2f 	bne.w	80055a6 <protocol_exec_rt_suspend+0x76>
                coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_COOLANT_FLOOD)));
 8005948:	9b01      	ldr	r3, [sp, #4]
 800594a:	f003 0040 	and.w	r0, r3, #64	; 0x40
 800594e:	f7fc f8a1 	bl	8001a94 <coolant_set_state>
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 8005952:	2101      	movs	r1, #1
 8005954:	4648      	mov	r0, r9
 8005956:	f7fe fb05 	bl	8003f64 <delay_sec>
 800595a:	78a3      	ldrb	r3, [r4, #2]
 800595c:	f003 0202 	and.w	r2, r3, #2
            if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8005960:	2a00      	cmp	r2, #0
 8005962:	f47f ae20 	bne.w	80055a6 <protocol_exec_rt_suspend+0x76>
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 8005966:	f043 0310 	orr.w	r3, r3, #16
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 800596a:	2002      	movs	r0, #2
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 800596c:	70a3      	strb	r3, [r4, #2]
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 800596e:	f003 ff51 	bl	8009814 <system_set_exec_state_flag>
 8005972:	e618      	b.n	80055a6 <protocol_exec_rt_suspend+0x76>
          sys.suspend = SUSPEND_DISABLE;
 8005974:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8005976:	7022      	strb	r2, [r4, #0]
 8005978:	e764      	b.n	8005844 <protocol_exec_rt_suspend+0x314>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 800597a:	f013 0f18 	tst.w	r3, #24
 800597e:	f43f ae81 	beq.w	8005684 <protocol_exec_rt_suspend+0x154>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005982:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8005b7c <protocol_exec_rt_suspend+0x64c>
 8005986:	f89b 2008 	ldrb.w	r2, [fp, #8]
          if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 800598a:	0651      	lsls	r1, r2, #25
 800598c:	f53f af30 	bmi.w	80057f0 <protocol_exec_rt_suspend+0x2c0>
          else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8005990:	f042 0a40 	orr.w	sl, r2, #64	; 0x40
 8005994:	e72e      	b.n	80057f4 <protocol_exec_rt_suspend+0x2c4>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8005996:	f002 fe83 	bl	80086a0 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 800599a:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 800599c:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 800599e:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	f000 80db 	beq.w	8005b5c <protocol_exec_rt_suspend+0x62c>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d18b      	bne.n	80058c2 <protocol_exec_rt_suspend+0x392>
 80059aa:	2201      	movs	r2, #1
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80059ac:	f01b 0f40 	tst.w	fp, #64	; 0x40
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80059b0:	70a2      	strb	r2, [r4, #2]
 80059b2:	fa4f fa8b 	sxtb.w	sl, fp
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80059b6:	d02f      	beq.n	8005a18 <protocol_exec_rt_suspend+0x4e8>
 80059b8:	2141      	movs	r1, #65	; 0x41
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80059ba:	70a1      	strb	r1, [r4, #2]
 80059bc:	e789      	b.n	80058d2 <protocol_exec_rt_suspend+0x3a2>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 80059be:	4638      	mov	r0, r7
 80059c0:	f000 fde6 	bl	8006590 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 80059c4:	2010      	movs	r0, #16
 80059c6:	f003 ff2f 	bl	8009828 <system_clear_exec_state_flag>
 80059ca:	4f6d      	ldr	r7, [pc, #436]	; (8005b80 <protocol_exec_rt_suspend+0x650>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 80059cc:	783b      	ldrb	r3, [r7, #0]
 80059ce:	06db      	lsls	r3, r3, #27
 80059d0:	d5fc      	bpl.n	80059cc <protocol_exec_rt_suspend+0x49c>
 80059d2:	e684      	b.n	80056de <protocol_exec_rt_suspend+0x1ae>
                if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 80059d4:	f896 2068 	ldrb.w	r2, [r6, #104]	; 0x68
 80059d8:	0792      	lsls	r2, r2, #30
 80059da:	d5a1      	bpl.n	8005920 <protocol_exec_rt_suspend+0x3f0>
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80059dc:	7922      	ldrb	r2, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 80059de:	f89b 1008 	ldrb.w	r1, [fp, #8]
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80059e2:	f042 0208 	orr.w	r2, r2, #8
 80059e6:	7122      	strb	r2, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 80059e8:	2900      	cmp	r1, #0
 80059ea:	d0bc      	beq.n	8005966 <protocol_exec_rt_suspend+0x436>
 80059ec:	e7ac      	b.n	8005948 <protocol_exec_rt_suspend+0x418>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 80059ee:	06da      	lsls	r2, r3, #27
 80059f0:	f57f ae18 	bpl.w	8005624 <protocol_exec_rt_suspend+0xf4>
 80059f4:	78a2      	ldrb	r2, [r4, #2]
 80059f6:	07d1      	lsls	r1, r2, #31
 80059f8:	f57f ae14 	bpl.w	8005624 <protocol_exec_rt_suspend+0xf4>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 80059fc:	2b10      	cmp	r3, #16
 80059fe:	f47f ae04 	bne.w	800560a <protocol_exec_rt_suspend+0xda>
 8005a02:	7ae3      	ldrb	r3, [r4, #11]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f43f ae00 	beq.w	800560a <protocol_exec_rt_suspend+0xda>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005a0a:	f043 0308 	orr.w	r3, r3, #8
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005a0e:	2002      	movs	r0, #2
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005a10:	72e3      	strb	r3, [r4, #11]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005a12:	f003 ff09 	bl	8009828 <system_clear_exec_state_flag>
 8005a16:	e608      	b.n	800562a <protocol_exec_rt_suspend+0xfa>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005a18:	f01b 0f08 	tst.w	fp, #8
 8005a1c:	f43f af60 	beq.w	80058e0 <protocol_exec_rt_suspend+0x3b0>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005a20:	2310      	movs	r3, #16
 8005a22:	7023      	strb	r3, [r4, #0]
 8005a24:	e75c      	b.n	80058e0 <protocol_exec_rt_suspend+0x3b0>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8005a26:	2300      	movs	r3, #0
 8005a28:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8005a2a:	f7fe fcdf 	bl	80043ec <plan_reset>
          st_reset();
 8005a2e:	f002 fcc5 	bl	80083bc <st_reset>
          gc_sync_position();
 8005a32:	f7fc f91b 	bl	8001c6c <gc_sync_position>
          plan_sync_position();
 8005a36:	f7ff f8a3 	bl	8004b80 <plan_sync_position>
 8005a3a:	78a3      	ldrb	r3, [r4, #2]
 8005a3c:	e6f7      	b.n	800582e <protocol_exec_rt_suspend+0x2fe>
            if (!(system_check_safety_door_ajar())) {
 8005a3e:	f003 fc51 	bl	80092e4 <system_check_safety_door_ajar>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 8005a42:	78a3      	ldrb	r3, [r4, #2]
            if (!(system_check_safety_door_ajar())) {
 8005a44:	2800      	cmp	r0, #0
 8005a46:	f47f ada2 	bne.w	800558e <protocol_exec_rt_suspend+0x5e>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 8005a4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a4e:	70a3      	strb	r3, [r4, #2]
 8005a50:	e59d      	b.n	800558e <protocol_exec_rt_suspend+0x5e>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005a52:	7ae3      	ldrb	r3, [r4, #11]
 8005a54:	b9db      	cbnz	r3, 8005a8e <protocol_exec_rt_suspend+0x55e>
 8005a56:	2302      	movs	r3, #2
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005a58:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005a5c:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005a5e:	f47f aec0 	bne.w	80057e2 <protocol_exec_rt_suspend+0x2b2>
    st_prep_buffer();
 8005a62:	f002 fe33 	bl	80086cc <st_prep_buffer>
 8005a66:	e613      	b.n	8005690 <protocol_exec_rt_suspend+0x160>
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005a68:	4629      	mov	r1, r5
 8005a6a:	f002 f90d 	bl	8007c88 <spindle_set_state>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enabled, if de-energized.
 8005a6e:	2301      	movs	r3, #1
 8005a70:	72e3      	strb	r3, [r4, #11]
 8005a72:	e598      	b.n	80055a6 <protocol_exec_rt_suspend+0x76>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005a74:	78a3      	ldrb	r3, [r4, #2]
 8005a76:	f013 0220 	ands.w	r2, r3, #32
 8005a7a:	f47f add3 	bne.w	8005624 <protocol_exec_rt_suspend+0xf4>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8005a7e:	06df      	lsls	r7, r3, #27
 8005a80:	d55d      	bpl.n	8005b3e <protocol_exec_rt_suspend+0x60e>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8005a82:	7022      	strb	r2, [r4, #0]
 8005a84:	e5c1      	b.n	800560a <protocol_exec_rt_suspend+0xda>
        system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
 8005a86:	2020      	movs	r0, #32
 8005a88:	f003 fef2 	bl	8009870 <system_set_exec_accessory_override_flag>
 8005a8c:	e562      	b.n	8005554 <protocol_exec_rt_suspend+0x24>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8005a8e:	07d8      	lsls	r0, r3, #31
 8005a90:	d502      	bpl.n	8005a98 <protocol_exec_rt_suspend+0x568>
 8005a92:	f043 0304 	orr.w	r3, r3, #4
 8005a96:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005a98:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
 8005a9c:	f47f aea1 	bne.w	80057e2 <protocol_exec_rt_suspend+0x2b2>
    st_prep_buffer();
 8005aa0:	f002 fe14 	bl	80086cc <st_prep_buffer>
 8005aa4:	e5f4      	b.n	8005690 <protocol_exec_rt_suspend+0x160>
              report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 8005aa6:	200a      	movs	r0, #10
 8005aa8:	f000 fd72 	bl	8006590 <report_feedback_message>
              if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8005aac:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
 8005ab0:	0798      	lsls	r0, r3, #30
 8005ab2:	d54b      	bpl.n	8005b4c <protocol_exec_rt_suspend+0x61c>
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005ab4:	7922      	ldrb	r2, [r4, #4]
 8005ab6:	7ae3      	ldrb	r3, [r4, #11]
 8005ab8:	f042 0208 	orr.w	r2, r2, #8
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 8005abc:	0719      	lsls	r1, r3, #28
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005abe:	7122      	strb	r2, [r4, #4]
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 8005ac0:	f57f adf9 	bpl.w	80056b6 <protocol_exec_rt_suspend+0x186>
 8005ac4:	e6ec      	b.n	80058a0 <protocol_exec_rt_suspend+0x370>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005ac6:	78a3      	ldrb	r3, [r4, #2]
 8005ac8:	f043 0305 	orr.w	r3, r3, #5
 8005acc:	70a3      	strb	r3, [r4, #2]
        sys.state = STATE_SLEEP; 
 8005ace:	2380      	movs	r3, #128	; 0x80
 8005ad0:	7023      	strb	r3, [r4, #0]
 8005ad2:	e58a      	b.n	80055ea <protocol_exec_rt_suspend+0xba>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8005ad4:	071a      	lsls	r2, r3, #28
 8005ad6:	f57f af13 	bpl.w	8005900 <protocol_exec_rt_suspend+0x3d0>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8005ada:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8005ade:	f043 0302 	orr.w	r3, r3, #2
 8005ae2:	e70d      	b.n	8005900 <protocol_exec_rt_suspend+0x3d0>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8005ae4:	4b25      	ldr	r3, [pc, #148]	; (8005b7c <protocol_exec_rt_suspend+0x64c>)
 8005ae6:	7a5f      	ldrb	r7, [r3, #9]
 8005ae8:	7a1a      	ldrb	r2, [r3, #8]
      restore_spindle_speed = gc_state.spindle_speed;
 8005aea:	f8d3 800c 	ldr.w	r8, [r3, #12]
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8005aee:	ea47 0302 	orr.w	r3, r7, r2
 8005af2:	9301      	str	r3, [sp, #4]
 8005af4:	e528      	b.n	8005548 <protocol_exec_rt_suspend+0x18>
              sys.state = STATE_CYCLE;
 8005af6:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005af8:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8005afa:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 8005afc:	f002 fde6 	bl	80086cc <st_prep_buffer>
              st_wake_up();
 8005b00:	f002 fa02 	bl	8007f08 <st_wake_up>
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005b04:	2002      	movs	r0, #2
 8005b06:	f003 fe8f 	bl	8009828 <system_clear_exec_state_flag>
 8005b0a:	e58e      	b.n	800562a <protocol_exec_rt_suspend+0xfa>
            report_feedback_message(MESSAGE_SLEEP_MODE);
 8005b0c:	200b      	movs	r0, #11
 8005b0e:	9201      	str	r2, [sp, #4]
 8005b10:	f000 fd3e 	bl	8006590 <report_feedback_message>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005b14:	9a01      	ldr	r2, [sp, #4]
 8005b16:	2100      	movs	r1, #0
 8005b18:	4610      	mov	r0, r2
 8005b1a:	f002 f8b5 	bl	8007c88 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE); // De-energize
 8005b1e:	9a01      	ldr	r2, [sp, #4]
 8005b20:	4610      	mov	r0, r2
 8005b22:	f7fb ffb7 	bl	8001a94 <coolant_set_state>
            st_go_idle(); // Disable steppers
 8005b26:	f002 fa31 	bl	8007f8c <st_go_idle>
            while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 8005b2a:	7863      	ldrb	r3, [r4, #1]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f47f adb3 	bne.w	8005698 <protocol_exec_rt_suspend+0x168>
 8005b32:	f7ff fb1b 	bl	800516c <protocol_exec_rt_system>
 8005b36:	7863      	ldrb	r3, [r4, #1]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0fa      	beq.n	8005b32 <protocol_exec_rt_suspend+0x602>
 8005b3c:	e5ac      	b.n	8005698 <protocol_exec_rt_suspend+0x168>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005b3e:	0758      	lsls	r0, r3, #29
 8005b40:	f57f ad70 	bpl.w	8005624 <protocol_exec_rt_suspend+0xf4>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8005b44:	f043 0308 	orr.w	r3, r3, #8
 8005b48:	70a3      	strb	r3, [r4, #2]
 8005b4a:	e56b      	b.n	8005624 <protocol_exec_rt_suspend+0xf4>
                spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8005b4c:	9b01      	ldr	r3, [sp, #4]
 8005b4e:	4641      	mov	r1, r8
 8005b50:	f003 0030 	and.w	r0, r3, #48	; 0x30
 8005b54:	f002 f898 	bl	8007c88 <spindle_set_state>
 8005b58:	7ae3      	ldrb	r3, [r4, #11]
 8005b5a:	e69e      	b.n	800589a <protocol_exec_rt_suspend+0x36a>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005b5c:	fa4f fa8b 	sxtb.w	sl, fp
 8005b60:	f1ba 0f00 	cmp.w	sl, #0
 8005b64:	f6ff aebc 	blt.w	80058e0 <protocol_exec_rt_suspend+0x3b0>
 8005b68:	78a3      	ldrb	r3, [r4, #2]
 8005b6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b6e:	70a3      	strb	r3, [r4, #2]
 8005b70:	e6b6      	b.n	80058e0 <protocol_exec_rt_suspend+0x3b0>
 8005b72:	78a1      	ldrb	r1, [r4, #2]
 8005b74:	f041 0140 	orr.w	r1, r1, #64	; 0x40
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005b78:	70a1      	strb	r1, [r4, #2]
 8005b7a:	e6aa      	b.n	80058d2 <protocol_exec_rt_suspend+0x3a2>
 8005b7c:	20001abc 	.word	0x20001abc
 8005b80:	20001b81 	.word	0x20001b81

08005b84 <protocol_execute_realtime>:
{
 8005b84:	b570      	push	{r4, r5, r6, lr}
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005b86:	4bae      	ldr	r3, [pc, #696]	; (8005e40 <protocol_execute_realtime+0x2bc>)
 8005b88:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d156      	bne.n	8005c3c <protocol_execute_realtime+0xb8>
 8005b8e:	4cad      	ldr	r4, [pc, #692]	; (8005e44 <protocol_execute_realtime+0x2c0>)
 8005b90:	4dad      	ldr	r5, [pc, #692]	; (8005e48 <protocol_execute_realtime+0x2c4>)
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8005b92:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 8005b94:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005b98:	b393      	cbz	r3, 8005c00 <protocol_execute_realtime+0x7c>
    if (rt_exec & EXEC_RESET) {
 8005b9a:	06ee      	lsls	r6, r5, #27
 8005b9c:	f100 80d7 	bmi.w	8005d4e <protocol_execute_realtime+0x1ca>
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005ba0:	07e8      	lsls	r0, r5, #31
 8005ba2:	f100 80f2 	bmi.w	8005d8a <protocol_execute_realtime+0x206>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8005ba6:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 8005baa:	d00a      	beq.n	8005bc2 <protocol_execute_realtime+0x3e>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005bac:	7823      	ldrb	r3, [r4, #0]
 8005bae:	0799      	lsls	r1, r3, #30
 8005bb0:	f000 80f1 	beq.w	8005d96 <protocol_execute_realtime+0x212>
 8005bb4:	b26e      	sxtb	r6, r5
      if (rt_exec & EXEC_SLEEP) {
 8005bb6:	2e00      	cmp	r6, #0
 8005bb8:	f2c0 8165 	blt.w	8005e86 <protocol_execute_realtime+0x302>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005bbc:	20e8      	movs	r0, #232	; 0xe8
 8005bbe:	f003 fe33 	bl	8009828 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 8005bc2:	07a8      	lsls	r0, r5, #30
 8005bc4:	d519      	bpl.n	8005bfa <protocol_execute_realtime+0x76>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8005bc6:	f015 0f68 	tst.w	r5, #104	; 0x68
 8005bca:	d113      	bne.n	8005bf4 <protocol_execute_realtime+0x70>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005bcc:	7823      	ldrb	r3, [r4, #0]
 8005bce:	2b40      	cmp	r3, #64	; 0x40
 8005bd0:	f000 816a 	beq.w	8005ea8 <protocol_execute_realtime+0x324>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f040 813f 	bne.w	8005e58 <protocol_execute_realtime+0x2d4>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005bda:	2300      	movs	r3, #0
 8005bdc:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005bde:	f7fe fc47 	bl	8004470 <plan_get_current_block>
 8005be2:	b120      	cbz	r0, 8005bee <protocol_execute_realtime+0x6a>
 8005be4:	78a3      	ldrb	r3, [r4, #2]
 8005be6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005bea:	f000 8195 	beq.w	8005f18 <protocol_execute_realtime+0x394>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005bee:	2300      	movs	r3, #0
 8005bf0:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8005bf2:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005bf4:	2002      	movs	r0, #2
 8005bf6:	f003 fe17 	bl	8009828 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 8005bfa:	0768      	lsls	r0, r5, #29
 8005bfc:	f100 80aa 	bmi.w	8005d54 <protocol_execute_realtime+0x1d0>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005c00:	4b92      	ldr	r3, [pc, #584]	; (8005e4c <protocol_execute_realtime+0x2c8>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005c04:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d168      	bne.n	8005cde <protocol_execute_realtime+0x15a>
  rt_exec = sys_rt_exec_accessory_override;
 8005c0c:	4b90      	ldr	r3, [pc, #576]	; (8005e50 <protocol_execute_realtime+0x2cc>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005c10:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005c14:	bb13      	cbnz	r3, 8005c5c <protocol_execute_realtime+0xd8>
 8005c16:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005c18:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005c1c:	d105      	bne.n	8005c2a <protocol_execute_realtime+0xa6>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005c1e:	78a3      	ldrb	r3, [r4, #2]
 8005c20:	b943      	cbnz	r3, 8005c34 <protocol_execute_realtime+0xb0>
 8005c22:	bd70      	pop	{r4, r5, r6, pc}
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005c24:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005c28:	d14c      	bne.n	8005cc4 <protocol_execute_realtime+0x140>
    st_prep_buffer();
 8005c2a:	f002 fd4f 	bl	80086cc <st_prep_buffer>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005c2e:	78a3      	ldrb	r3, [r4, #2]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0f6      	beq.n	8005c22 <protocol_execute_realtime+0x9e>
}
 8005c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005c38:	f7ff bc7a 	b.w	8005530 <protocol_exec_rt_suspend>
    sys.state = STATE_ALARM; // Set system alarm state
 8005c3c:	2601      	movs	r6, #1
 8005c3e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005c42:	4c80      	ldr	r4, [pc, #512]	; (8005e44 <protocol_execute_realtime+0x2c0>)
    report_alarm_message(rt_exec);
 8005c44:	4628      	mov	r0, r5
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005c46:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 8005c48:	7026      	strb	r6, [r4, #0]
    report_alarm_message(rt_exec);
 8005c4a:	f000 fc8b 	bl	8006564 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005c4e:	42b5      	cmp	r5, r6
 8005c50:	f240 811f 	bls.w	8005e92 <protocol_execute_realtime+0x30e>
 8005c54:	4d7c      	ldr	r5, [pc, #496]	; (8005e48 <protocol_execute_realtime+0x2c4>)
    system_clear_exec_alarm(); // Clear alarm
 8005c56:	f003 fdf9 	bl	800984c <system_clear_exec_alarm>
 8005c5a:	e79a      	b.n	8005b92 <protocol_execute_realtime+0xe>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8005c5c:	f003 fe1a 	bl	8009894 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8005c60:	7aa2      	ldrb	r2, [r4, #10]
 8005c62:	f015 0f01 	tst.w	r5, #1
 8005c66:	bf0c      	ite	eq
 8005c68:	4613      	moveq	r3, r2
 8005c6a:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005c6c:	07a9      	lsls	r1, r5, #30
 8005c6e:	bf44      	itt	mi
 8005c70:	330a      	addmi	r3, #10
 8005c72:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005c74:	076e      	lsls	r6, r5, #29
 8005c76:	bf44      	itt	mi
 8005c78:	3b0a      	submi	r3, #10
 8005c7a:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005c7c:	0728      	lsls	r0, r5, #28
 8005c7e:	bf44      	itt	mi
 8005c80:	3301      	addmi	r3, #1
 8005c82:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005c84:	06e9      	lsls	r1, r5, #27
 8005c86:	bf44      	itt	mi
 8005c88:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005c8c:	b2db      	uxtbmi	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8005c8e:	2bc8      	cmp	r3, #200	; 0xc8
 8005c90:	bf28      	it	cs
 8005c92:	23c8      	movcs	r3, #200	; 0xc8
 8005c94:	2b0a      	cmp	r3, #10
 8005c96:	bf38      	it	cc
 8005c98:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d006      	beq.n	8005cac <protocol_execute_realtime+0x128>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005c9e:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005ca0:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8005ca2:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005ca4:	f042 0308 	orr.w	r3, r2, #8
 8005ca8:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005caa:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005cac:	06ae      	lsls	r6, r5, #26
      if (sys.state == STATE_HOLD) {
 8005cae:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005cb0:	d502      	bpl.n	8005cb8 <protocol_execute_realtime+0x134>
      if (sys.state == STATE_HOLD) {
 8005cb2:	2b10      	cmp	r3, #16
 8005cb4:	f000 80ba 	beq.w	8005e2c <protocol_execute_realtime+0x2a8>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005cb8:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005cbc:	d0ac      	beq.n	8005c18 <protocol_execute_realtime+0x94>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f040 80dc 	bne.w	8005e7c <protocol_execute_realtime+0x2f8>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005cc4:	4e63      	ldr	r6, [pc, #396]	; (8005e54 <protocol_execute_realtime+0x2d0>)
 8005cc6:	7a35      	ldrb	r5, [r6, #8]
          if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8005cc8:	0669      	lsls	r1, r5, #25
 8005cca:	f100 808a 	bmi.w	8005de2 <protocol_execute_realtime+0x25e>
          else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8005cce:	f045 0540 	orr.w	r5, r5, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f7fb fede 	bl	8001a94 <coolant_set_state>
 8005cd8:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 8005cda:	7235      	strb	r5, [r6, #8]
 8005cdc:	e79c      	b.n	8005c18 <protocol_execute_realtime+0x94>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005cde:	f003 fdd1 	bl	8009884 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8005ce2:	7a21      	ldrb	r1, [r4, #8]
 8005ce4:	f015 0f01 	tst.w	r5, #1
 8005ce8:	bf0c      	ite	eq
 8005cea:	460b      	moveq	r3, r1
 8005cec:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005cee:	07ae      	lsls	r6, r5, #30
 8005cf0:	bf44      	itt	mi
 8005cf2:	330a      	addmi	r3, #10
 8005cf4:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8005cf6:	0768      	lsls	r0, r5, #29
 8005cf8:	bf44      	itt	mi
 8005cfa:	3b0a      	submi	r3, #10
 8005cfc:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005cfe:	072e      	lsls	r6, r5, #28
 8005d00:	bf44      	itt	mi
 8005d02:	3301      	addmi	r3, #1
 8005d04:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8005d06:	06e8      	lsls	r0, r5, #27
 8005d08:	bf44      	itt	mi
 8005d0a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005d0e:	b2db      	uxtbmi	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8005d10:	2bc8      	cmp	r3, #200	; 0xc8
 8005d12:	bf28      	it	cs
 8005d14:	23c8      	movcs	r3, #200	; 0xc8
 8005d16:	2b0a      	cmp	r3, #10
 8005d18:	bf38      	it	cc
 8005d1a:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 8005d1c:	7a60      	ldrb	r0, [r4, #9]
 8005d1e:	f015 0f20 	tst.w	r5, #32
 8005d22:	bf14      	ite	ne
 8005d24:	2264      	movne	r2, #100	; 0x64
 8005d26:	4602      	moveq	r2, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8005d28:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d2c:	bf18      	it	ne
 8005d2e:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8005d30:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005d34:	bf18      	it	ne
 8005d36:	2219      	movne	r2, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005d38:	4299      	cmp	r1, r3
 8005d3a:	d023      	beq.n	8005d84 <protocol_execute_realtime+0x200>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005d3c:	2100      	movs	r1, #0
      sys.f_override = new_f_override;
 8005d3e:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8005d40:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005d42:	7321      	strb	r1, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005d44:	f7fe fc06 	bl	8004554 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 8005d48:	f7fe ff3a 	bl	8004bc0 <plan_cycle_reinitialize>
 8005d4c:	e75e      	b.n	8005c0c <protocol_execute_realtime+0x88>
      sys.abort = true;  // Only place this is set true.
 8005d4e:	2301      	movs	r3, #1
 8005d50:	7063      	strb	r3, [r4, #1]
 8005d52:	e764      	b.n	8005c1e <protocol_execute_realtime+0x9a>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005d54:	7823      	ldrb	r3, [r4, #0]
 8005d56:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 8005d5a:	d002      	beq.n	8005d62 <protocol_execute_realtime+0x1de>
 8005d5c:	78e3      	ldrb	r3, [r4, #3]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d054      	beq.n	8005e0c <protocol_execute_realtime+0x288>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8005d62:	78a3      	ldrb	r3, [r4, #2]
 8005d64:	061a      	lsls	r2, r3, #24
 8005d66:	d455      	bmi.n	8005e14 <protocol_execute_realtime+0x290>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8005d68:	f013 0220 	ands.w	r2, r3, #32
 8005d6c:	d036      	beq.n	8005ddc <protocol_execute_realtime+0x258>
          sys.state = STATE_SAFETY_DOOR;
 8005d6e:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8005d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8005d74:	f043 0301 	orr.w	r3, r3, #1
 8005d78:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8005d7a:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005d7c:	2004      	movs	r0, #4
 8005d7e:	f003 fd53 	bl	8009828 <system_clear_exec_state_flag>
 8005d82:	e73d      	b.n	8005c00 <protocol_execute_realtime+0x7c>
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005d84:	4290      	cmp	r0, r2
 8005d86:	d1d9      	bne.n	8005d3c <protocol_execute_realtime+0x1b8>
 8005d88:	e740      	b.n	8005c0c <protocol_execute_realtime+0x88>
      report_realtime_status();
 8005d8a:	f001 f847 	bl	8006e1c <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8005d8e:	2001      	movs	r0, #1
 8005d90:	f003 fd4a 	bl	8009828 <system_clear_exec_state_flag>
 8005d94:	e707      	b.n	8005ba6 <protocol_execute_realtime+0x22>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8005d96:	f013 0f28 	tst.w	r3, #40	; 0x28
 8005d9a:	d125      	bne.n	8005de8 <protocol_execute_realtime+0x264>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005d9c:	bb4b      	cbnz	r3, 8005df2 <protocol_execute_realtime+0x26e>
 8005d9e:	2201      	movs	r2, #1
 8005da0:	70a2      	strb	r2, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005da2:	066a      	lsls	r2, r5, #25
 8005da4:	f100 8096 	bmi.w	8005ed4 <protocol_execute_realtime+0x350>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005da8:	072b      	lsls	r3, r5, #28
 8005daa:	b26e      	sxtb	r6, r5
 8005dac:	d501      	bpl.n	8005db2 <protocol_execute_realtime+0x22e>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005dae:	2310      	movs	r3, #16
 8005db0:	7023      	strb	r3, [r4, #0]
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8005db2:	06a8      	lsls	r0, r5, #26
 8005db4:	f57f aeff 	bpl.w	8005bb6 <protocol_execute_realtime+0x32>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8005db8:	2006      	movs	r0, #6
 8005dba:	f000 fbe9 	bl	8006590 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005dbe:	78a3      	ldrb	r3, [r4, #2]
 8005dc0:	0619      	lsls	r1, r3, #24
 8005dc2:	d407      	bmi.n	8005dd4 <protocol_execute_realtime+0x250>
            if (sys.state == STATE_SAFETY_DOOR) {
 8005dc4:	7822      	ldrb	r2, [r4, #0]
 8005dc6:	2a40      	cmp	r2, #64	; 0x40
 8005dc8:	f000 80b5 	beq.w	8005f36 <protocol_execute_realtime+0x3b2>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8005dcc:	2a80      	cmp	r2, #128	; 0x80
 8005dce:	d001      	beq.n	8005dd4 <protocol_execute_realtime+0x250>
 8005dd0:	2240      	movs	r2, #64	; 0x40
 8005dd2:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005dd4:	f043 0320 	orr.w	r3, r3, #32
 8005dd8:	70a3      	strb	r3, [r4, #2]
 8005dda:	e6ec      	b.n	8005bb6 <protocol_execute_realtime+0x32>
          sys.suspend = SUSPEND_DISABLE;
 8005ddc:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8005dde:	7022      	strb	r2, [r4, #0]
 8005de0:	e7cc      	b.n	8005d7c <protocol_execute_realtime+0x1f8>
          if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8005de2:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
 8005de6:	e774      	b.n	8005cd2 <protocol_execute_realtime+0x14e>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8005de8:	78a2      	ldrb	r2, [r4, #2]
 8005dea:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8005dee:	f000 8082 	beq.w	8005ef6 <protocol_execute_realtime+0x372>
 8005df2:	b26a      	sxtb	r2, r5
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005df4:	0668      	lsls	r0, r5, #25
 8005df6:	4616      	mov	r6, r2
 8005df8:	d502      	bpl.n	8005e00 <protocol_execute_realtime+0x27c>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005dfa:	0699      	lsls	r1, r3, #26
 8005dfc:	f140 80a3 	bpl.w	8005f46 <protocol_execute_realtime+0x3c2>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005e00:	072a      	lsls	r2, r5, #28
 8005e02:	d5d6      	bpl.n	8005db2 <protocol_execute_realtime+0x22e>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005e04:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8005e08:	d1d3      	bne.n	8005db2 <protocol_execute_realtime+0x22e>
 8005e0a:	e7d0      	b.n	8005dae <protocol_execute_realtime+0x22a>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005e0c:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	da52      	bge.n	8005eba <protocol_execute_realtime+0x336>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8005e14:	2300      	movs	r3, #0
 8005e16:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8005e18:	f7fe fae8 	bl	80043ec <plan_reset>
          st_reset();
 8005e1c:	f002 face 	bl	80083bc <st_reset>
          gc_sync_position();
 8005e20:	f7fb ff24 	bl	8001c6c <gc_sync_position>
          plan_sync_position();
 8005e24:	f7fe feac 	bl	8004b80 <plan_sync_position>
 8005e28:	78a3      	ldrb	r3, [r4, #2]
 8005e2a:	e79d      	b.n	8005d68 <protocol_execute_realtime+0x1e4>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005e2c:	7ae3      	ldrb	r3, [r4, #11]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d155      	bne.n	8005ede <protocol_execute_realtime+0x35a>
 8005e32:	2302      	movs	r3, #2
 8005e34:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005e36:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005e3a:	f47f af43 	bne.w	8005cc4 <protocol_execute_realtime+0x140>
 8005e3e:	e6f4      	b.n	8005c2a <protocol_execute_realtime+0xa6>
 8005e40:	20001bac 	.word	0x20001bac
 8005e44:	20001b6c 	.word	0x20001b6c
 8005e48:	20001b81 	.word	0x20001b81
 8005e4c:	20001b68 	.word	0x20001b68
 8005e50:	20001b80 	.word	0x20001b80
 8005e54:	20001abc 	.word	0x20001abc
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005e58:	06da      	lsls	r2, r3, #27
 8005e5a:	f57f aecb 	bpl.w	8005bf4 <protocol_execute_realtime+0x70>
 8005e5e:	78a2      	ldrb	r2, [r4, #2]
 8005e60:	07d6      	lsls	r6, r2, #31
 8005e62:	f57f aec7 	bpl.w	8005bf4 <protocol_execute_realtime+0x70>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8005e66:	2b10      	cmp	r3, #16
 8005e68:	f47f aeb7 	bne.w	8005bda <protocol_execute_realtime+0x56>
 8005e6c:	7ae3      	ldrb	r3, [r4, #11]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f43f aeb3 	beq.w	8005bda <protocol_execute_realtime+0x56>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005e74:	f043 0308 	orr.w	r3, r3, #8
 8005e78:	72e3      	strb	r3, [r4, #11]
 8005e7a:	e6bb      	b.n	8005bf4 <protocol_execute_realtime+0x70>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005e7c:	f013 0f18 	tst.w	r3, #24
 8005e80:	f43f aeca 	beq.w	8005c18 <protocol_execute_realtime+0x94>
 8005e84:	e71e      	b.n	8005cc4 <protocol_execute_realtime+0x140>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005e86:	7823      	ldrb	r3, [r4, #0]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d02f      	beq.n	8005eec <protocol_execute_realtime+0x368>
        sys.state = STATE_SLEEP; 
 8005e8c:	2380      	movs	r3, #128	; 0x80
 8005e8e:	7023      	strb	r3, [r4, #0]
 8005e90:	e694      	b.n	8005bbc <protocol_execute_realtime+0x38>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8005e92:	4630      	mov	r0, r6
 8005e94:	f000 fb7c 	bl	8006590 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8005e98:	2010      	movs	r0, #16
 8005e9a:	f003 fcc5 	bl	8009828 <system_clear_exec_state_flag>
 8005e9e:	4d2c      	ldr	r5, [pc, #176]	; (8005f50 <protocol_execute_realtime+0x3cc>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8005ea0:	782b      	ldrb	r3, [r5, #0]
 8005ea2:	06db      	lsls	r3, r3, #27
 8005ea4:	d5fc      	bpl.n	8005ea0 <protocol_execute_realtime+0x31c>
 8005ea6:	e6d6      	b.n	8005c56 <protocol_execute_realtime+0xd2>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005ea8:	78a3      	ldrb	r3, [r4, #2]
 8005eaa:	f013 0220 	ands.w	r2, r3, #32
 8005eae:	f47f aea1 	bne.w	8005bf4 <protocol_execute_realtime+0x70>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8005eb2:	06d9      	lsls	r1, r3, #27
 8005eb4:	d538      	bpl.n	8005f28 <protocol_execute_realtime+0x3a4>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8005eb6:	7022      	strb	r2, [r4, #0]
 8005eb8:	e68f      	b.n	8005bda <protocol_execute_realtime+0x56>
        plan_cycle_reinitialize();
 8005eba:	f7fe fe81 	bl	8004bc0 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8005ebe:	7923      	ldrb	r3, [r4, #4]
 8005ec0:	0799      	lsls	r1, r3, #30
 8005ec2:	d503      	bpl.n	8005ecc <protocol_execute_realtime+0x348>
 8005ec4:	78a2      	ldrb	r2, [r4, #2]
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005ecc:	f023 0306 	bic.w	r3, r3, #6
 8005ed0:	7123      	strb	r3, [r4, #4]
 8005ed2:	e753      	b.n	8005d7c <protocol_execute_realtime+0x1f8>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005ed4:	2141      	movs	r1, #65	; 0x41
 8005ed6:	b26a      	sxtb	r2, r5
 8005ed8:	4616      	mov	r6, r2
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005eda:	70a1      	strb	r1, [r4, #2]
 8005edc:	e790      	b.n	8005e00 <protocol_execute_realtime+0x27c>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8005ede:	07d8      	lsls	r0, r3, #31
 8005ee0:	f57f aea0 	bpl.w	8005c24 <protocol_execute_realtime+0xa0>
 8005ee4:	f043 0304 	orr.w	r3, r3, #4
 8005ee8:	72e3      	strb	r3, [r4, #11]
 8005eea:	e7a4      	b.n	8005e36 <protocol_execute_realtime+0x2b2>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005eec:	78a3      	ldrb	r3, [r4, #2]
 8005eee:	f043 0305 	orr.w	r3, r3, #5
 8005ef2:	70a3      	strb	r3, [r4, #2]
 8005ef4:	e7ca      	b.n	8005e8c <protocol_execute_realtime+0x308>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8005ef6:	f002 fbd3 	bl	80086a0 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005efa:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005efc:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005efe:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	f47f af4b 	bne.w	8005d9c <protocol_execute_realtime+0x218>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005f06:	b26e      	sxtb	r6, r5
 8005f08:	2e00      	cmp	r6, #0
 8005f0a:	f6ff af52 	blt.w	8005db2 <protocol_execute_realtime+0x22e>
 8005f0e:	78a3      	ldrb	r3, [r4, #2]
 8005f10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f14:	70a3      	strb	r3, [r4, #2]
 8005f16:	e74c      	b.n	8005db2 <protocol_execute_realtime+0x22e>
              sys.state = STATE_CYCLE;
 8005f18:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005f1a:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8005f1c:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 8005f1e:	f002 fbd5 	bl	80086cc <st_prep_buffer>
              st_wake_up();
 8005f22:	f001 fff1 	bl	8007f08 <st_wake_up>
 8005f26:	e665      	b.n	8005bf4 <protocol_execute_realtime+0x70>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005f28:	075a      	lsls	r2, r3, #29
 8005f2a:	f57f ae63 	bpl.w	8005bf4 <protocol_execute_realtime+0x70>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8005f2e:	f043 0308 	orr.w	r3, r3, #8
 8005f32:	70a3      	strb	r3, [r4, #2]
 8005f34:	e65e      	b.n	8005bf4 <protocol_execute_realtime+0x70>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8005f36:	071a      	lsls	r2, r3, #28
 8005f38:	f57f af4a 	bpl.w	8005dd0 <protocol_execute_realtime+0x24c>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8005f3c:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8005f40:	f043 0302 	orr.w	r3, r3, #2
 8005f44:	e744      	b.n	8005dd0 <protocol_execute_realtime+0x24c>
 8005f46:	78a1      	ldrb	r1, [r4, #2]
 8005f48:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005f4c:	e7c4      	b.n	8005ed8 <protocol_execute_realtime+0x354>
 8005f4e:	bf00      	nop
 8005f50:	20001b81 	.word	0x20001b81

08005f54 <protocol_buffer_synchronize>:
{
 8005f54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 8005f58:	f7fe fa8a 	bl	8004470 <plan_get_current_block>
 8005f5c:	b110      	cbz	r0, 8005f64 <protocol_buffer_synchronize+0x10>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8005f5e:	2002      	movs	r0, #2
 8005f60:	f003 fc58 	bl	8009814 <system_set_exec_state_flag>
 8005f64:	4ec0      	ldr	r6, [pc, #768]	; (8006268 <protocol_buffer_synchronize+0x314>)
 8005f66:	4cc1      	ldr	r4, [pc, #772]	; (800626c <protocol_buffer_synchronize+0x318>)
 8005f68:	4dc1      	ldr	r5, [pc, #772]	; (8006270 <protocol_buffer_synchronize+0x31c>)
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005f6a:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8006278 <protocol_buffer_synchronize+0x324>
  rt_exec = sys_rt_exec_accessory_override;
 8005f6e:	4fc1      	ldr	r7, [pc, #772]	; (8006274 <protocol_buffer_synchronize+0x320>)
        uint8_t coolant_state = gc_state.modal.coolant;
 8005f70:	f8df 9308 	ldr.w	r9, [pc, #776]	; 800627c <protocol_buffer_synchronize+0x328>
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005f74:	7833      	ldrb	r3, [r6, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8005f76:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f040 808b 	bne.w	8006096 <protocol_buffer_synchronize+0x142>
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8005f80:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 8005f82:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d054      	beq.n	8006034 <protocol_buffer_synchronize+0xe0>
    if (rt_exec & EXEC_RESET) {
 8005f8a:	f01a 0f10 	tst.w	sl, #16
 8005f8e:	f040 8119 	bne.w	80061c4 <protocol_buffer_synchronize+0x270>
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005f92:	f01a 0f01 	tst.w	sl, #1
 8005f96:	f040 812f 	bne.w	80061f8 <protocol_buffer_synchronize+0x2a4>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8005f9a:	f01a 0fe8 	tst.w	sl, #232	; 0xe8
 8005f9e:	d00c      	beq.n	8005fba <protocol_buffer_synchronize+0x66>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005fa0:	7823      	ldrb	r3, [r4, #0]
 8005fa2:	0798      	lsls	r0, r3, #30
 8005fa4:	f000 812e 	beq.w	8006204 <protocol_buffer_synchronize+0x2b0>
 8005fa8:	fa4f fb8a 	sxtb.w	fp, sl
      if (rt_exec & EXEC_SLEEP) {
 8005fac:	f1bb 0f00 	cmp.w	fp, #0
 8005fb0:	f2c0 8153 	blt.w	800625a <protocol_buffer_synchronize+0x306>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005fb4:	20e8      	movs	r0, #232	; 0xe8
 8005fb6:	f003 fc37 	bl	8009828 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 8005fba:	f01a 0f02 	tst.w	sl, #2
 8005fbe:	d019      	beq.n	8005ff4 <protocol_buffer_synchronize+0xa0>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8005fc0:	f01a 0f68 	tst.w	sl, #104	; 0x68
 8005fc4:	d113      	bne.n	8005fee <protocol_buffer_synchronize+0x9a>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005fc6:	7823      	ldrb	r3, [r4, #0]
 8005fc8:	2b40      	cmp	r3, #64	; 0x40
 8005fca:	f000 81be 	beq.w	800634a <protocol_buffer_synchronize+0x3f6>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f040 81a9 	bne.w	8006326 <protocol_buffer_synchronize+0x3d2>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005fd8:	f7fe fa4a 	bl	8004470 <plan_get_current_block>
 8005fdc:	b120      	cbz	r0, 8005fe8 <protocol_buffer_synchronize+0x94>
 8005fde:	78a3      	ldrb	r3, [r4, #2]
 8005fe0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005fe4:	f000 81c4 	beq.w	8006370 <protocol_buffer_synchronize+0x41c>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005fe8:	2300      	movs	r3, #0
 8005fea:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8005fec:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005fee:	2002      	movs	r0, #2
 8005ff0:	f003 fc1a 	bl	8009828 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 8005ff4:	f01a 0f04 	tst.w	sl, #4
 8005ff8:	d01c      	beq.n	8006034 <protocol_buffer_synchronize+0xe0>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005ffa:	7823      	ldrb	r3, [r4, #0]
 8005ffc:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 8006000:	f000 80e8 	beq.w	80061d4 <protocol_buffer_synchronize+0x280>
 8006004:	78e3      	ldrb	r3, [r4, #3]
 8006006:	2b00      	cmp	r3, #0
 8006008:	f040 80e4 	bne.w	80061d4 <protocol_buffer_synchronize+0x280>
 800600c:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f2c0 816c 	blt.w	80062ee <protocol_buffer_synchronize+0x39a>
        plan_cycle_reinitialize();
 8006016:	f7fe fdd3 	bl	8004bc0 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 800601a:	7923      	ldrb	r3, [r4, #4]
 800601c:	079a      	lsls	r2, r3, #30
 800601e:	d503      	bpl.n	8006028 <protocol_buffer_synchronize+0xd4>
 8006020:	78a2      	ldrb	r2, [r4, #2]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8006028:	f023 0306 	bic.w	r3, r3, #6
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 800602c:	2004      	movs	r0, #4
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 800602e:	7123      	strb	r3, [r4, #4]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8006030:	f003 fbfa 	bl	8009828 <system_clear_exec_state_flag>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8006034:	f898 3000 	ldrb.w	r3, [r8]
  if (rt_exec) {
 8006038:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 800603c:	2b00      	cmp	r3, #0
 800603e:	f040 8081 	bne.w	8006144 <protocol_buffer_synchronize+0x1f0>
  rt_exec = sys_rt_exec_accessory_override;
 8006042:	783b      	ldrb	r3, [r7, #0]
  if (rt_exec) {
 8006044:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8006048:	2b00      	cmp	r3, #0
 800604a:	d133      	bne.n	80060b4 <protocol_buffer_synchronize+0x160>
 800604c:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 800604e:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8006052:	d118      	bne.n	8006086 <protocol_buffer_synchronize+0x132>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006054:	78a3      	ldrb	r3, [r4, #2]
 8006056:	b9db      	cbnz	r3, 8006090 <protocol_buffer_synchronize+0x13c>
    if (sys.abort) { return; } // Check for system abort
 8006058:	7863      	ldrb	r3, [r4, #1]
 800605a:	2b00      	cmp	r3, #0
 800605c:	f040 80b8 	bne.w	80061d0 <protocol_buffer_synchronize+0x27c>
  } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 8006060:	f7fe fa06 	bl	8004470 <plan_get_current_block>
 8006064:	2800      	cmp	r0, #0
 8006066:	d185      	bne.n	8005f74 <protocol_buffer_synchronize+0x20>
 8006068:	7823      	ldrb	r3, [r4, #0]
 800606a:	2b08      	cmp	r3, #8
 800606c:	d082      	beq.n	8005f74 <protocol_buffer_synchronize+0x20>
 800606e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8006072:	7ae3      	ldrb	r3, [r4, #11]
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 814d 	beq.w	8006314 <protocol_buffer_synchronize+0x3c0>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 800607a:	07d9      	lsls	r1, r3, #31
 800607c:	f100 8180 	bmi.w	8006380 <protocol_buffer_synchronize+0x42c>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8006080:	f01a 0fc0 	tst.w	sl, #192	; 0xc0
 8006084:	d14f      	bne.n	8006126 <protocol_buffer_synchronize+0x1d2>
    st_prep_buffer();
 8006086:	f002 fb21 	bl	80086cc <st_prep_buffer>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800608a:	78a3      	ldrb	r3, [r4, #2]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0e3      	beq.n	8006058 <protocol_buffer_synchronize+0x104>
 8006090:	f7ff fa4e 	bl	8005530 <protocol_exec_rt_suspend>
 8006094:	e7e0      	b.n	8006058 <protocol_buffer_synchronize+0x104>
    sys.state = STATE_ALARM; // Set system alarm state
 8006096:	f04f 0b01 	mov.w	fp, #1
    report_alarm_message(rt_exec);
 800609a:	4650      	mov	r0, sl
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 800609c:	f10a 3aff 	add.w	sl, sl, #4294967295
    sys.state = STATE_ALARM; // Set system alarm state
 80060a0:	f884 b000 	strb.w	fp, [r4]
    report_alarm_message(rt_exec);
 80060a4:	f000 fa5e 	bl	8006564 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80060a8:	45da      	cmp	sl, fp
 80060aa:	f240 810c 	bls.w	80062c6 <protocol_buffer_synchronize+0x372>
    system_clear_exec_alarm(); // Clear alarm
 80060ae:	f003 fbcd 	bl	800984c <system_clear_exec_alarm>
 80060b2:	e765      	b.n	8005f80 <protocol_buffer_synchronize+0x2c>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 80060b4:	f003 fbee 	bl	8009894 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 80060b8:	f01a 0f01 	tst.w	sl, #1
 80060bc:	bf18      	it	ne
 80060be:	2364      	movne	r3, #100	; 0x64
 80060c0:	7aa2      	ldrb	r2, [r4, #10]
 80060c2:	bf08      	it	eq
 80060c4:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80060c6:	f01a 0f02 	tst.w	sl, #2
 80060ca:	bf1c      	itt	ne
 80060cc:	330a      	addne	r3, #10
 80060ce:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80060d0:	f01a 0f04 	tst.w	sl, #4
 80060d4:	bf1c      	itt	ne
 80060d6:	3b0a      	subne	r3, #10
 80060d8:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80060da:	f01a 0f08 	tst.w	sl, #8
 80060de:	bf1c      	itt	ne
 80060e0:	3301      	addne	r3, #1
 80060e2:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80060e4:	f01a 0f10 	tst.w	sl, #16
 80060e8:	bf1c      	itt	ne
 80060ea:	f103 33ff 	addne.w	r3, r3, #4294967295
 80060ee:	b2db      	uxtbne	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 80060f0:	2bc8      	cmp	r3, #200	; 0xc8
 80060f2:	bf28      	it	cs
 80060f4:	23c8      	movcs	r3, #200	; 0xc8
 80060f6:	2b0a      	cmp	r3, #10
 80060f8:	bf38      	it	cc
 80060fa:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d006      	beq.n	800610e <protocol_buffer_synchronize+0x1ba>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8006100:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8006102:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8006104:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8006106:	f042 0308 	orr.w	r3, r2, #8
 800610a:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 800610c:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 800610e:	f01a 0f20 	tst.w	sl, #32
      if (sys.state == STATE_HOLD) {
 8006112:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8006114:	d001      	beq.n	800611a <protocol_buffer_synchronize+0x1c6>
      if (sys.state == STATE_HOLD) {
 8006116:	2b10      	cmp	r3, #16
 8006118:	d0ab      	beq.n	8006072 <protocol_buffer_synchronize+0x11e>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 800611a:	f01a 0fc0 	tst.w	sl, #192	; 0xc0
 800611e:	d096      	beq.n	800604e <protocol_buffer_synchronize+0xfa>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8006120:	2b00      	cmp	r3, #0
 8006122:	f040 80b0 	bne.w	8006286 <protocol_buffer_synchronize+0x332>
        uint8_t coolant_state = gc_state.modal.coolant;
 8006126:	f899 a008 	ldrb.w	sl, [r9, #8]
          if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 800612a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800612e:	f000 80b4 	beq.w	800629a <protocol_buffer_synchronize+0x346>
 8006132:	f00a 0abf 	and.w	sl, sl, #191	; 0xbf
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8006136:	4650      	mov	r0, sl
 8006138:	f7fb fcac 	bl	8001a94 <coolant_set_state>
 800613c:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 800613e:	f889 a008 	strb.w	sl, [r9, #8]
 8006142:	e784      	b.n	800604e <protocol_buffer_synchronize+0xfa>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8006144:	f003 fb9e 	bl	8009884 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8006148:	f01a 0f01 	tst.w	sl, #1
 800614c:	bf18      	it	ne
 800614e:	2364      	movne	r3, #100	; 0x64
 8006150:	7a22      	ldrb	r2, [r4, #8]
    uint8_t new_r_override = sys.r_override;
 8006152:	7a60      	ldrb	r0, [r4, #9]
    uint8_t new_f_override =  sys.f_override;
 8006154:	bf08      	it	eq
 8006156:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8006158:	f01a 0f02 	tst.w	sl, #2
 800615c:	bf1c      	itt	ne
 800615e:	330a      	addne	r3, #10
 8006160:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8006162:	f01a 0f04 	tst.w	sl, #4
 8006166:	bf1c      	itt	ne
 8006168:	3b0a      	subne	r3, #10
 800616a:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 800616c:	f01a 0f08 	tst.w	sl, #8
 8006170:	bf1c      	itt	ne
 8006172:	3301      	addne	r3, #1
 8006174:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8006176:	f01a 0f10 	tst.w	sl, #16
 800617a:	bf1c      	itt	ne
 800617c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8006180:	b2db      	uxtbne	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8006182:	2bc8      	cmp	r3, #200	; 0xc8
 8006184:	bf28      	it	cs
 8006186:	23c8      	movcs	r3, #200	; 0xc8
 8006188:	2b0a      	cmp	r3, #10
 800618a:	bf38      	it	cc
 800618c:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 800618e:	f01a 0f20 	tst.w	sl, #32
 8006192:	bf14      	ite	ne
 8006194:	2164      	movne	r1, #100	; 0x64
 8006196:	4601      	moveq	r1, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8006198:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800619c:	bf18      	it	ne
 800619e:	2132      	movne	r1, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 80061a0:	f01a 0f80 	tst.w	sl, #128	; 0x80
 80061a4:	bf18      	it	ne
 80061a6:	2119      	movne	r1, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d102      	bne.n	80061b2 <protocol_buffer_synchronize+0x25e>
 80061ac:	4288      	cmp	r0, r1
 80061ae:	f43f af48 	beq.w	8006042 <protocol_buffer_synchronize+0xee>
      sys.report_ovr_counter = 0; // Set to report change immediately
 80061b2:	2200      	movs	r2, #0
      sys.f_override = new_f_override;
 80061b4:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 80061b6:	7261      	strb	r1, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80061b8:	7322      	strb	r2, [r4, #12]
      plan_update_velocity_profile_parameters();
 80061ba:	f7fe f9cb 	bl	8004554 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 80061be:	f7fe fcff 	bl	8004bc0 <plan_cycle_reinitialize>
 80061c2:	e73e      	b.n	8006042 <protocol_buffer_synchronize+0xee>
      sys.abort = true;  // Only place this is set true.
 80061c4:	2201      	movs	r2, #1
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80061c6:	78a3      	ldrb	r3, [r4, #2]
      sys.abort = true;  // Only place this is set true.
 80061c8:	7062      	strb	r2, [r4, #1]
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f47f af60 	bne.w	8006090 <protocol_buffer_synchronize+0x13c>
 80061d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 80061d4:	78a3      	ldrb	r3, [r4, #2]
 80061d6:	0618      	lsls	r0, r3, #24
 80061d8:	f100 8089 	bmi.w	80062ee <protocol_buffer_synchronize+0x39a>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 80061dc:	f013 0220 	ands.w	r2, r3, #32
 80061e0:	d04e      	beq.n	8006280 <protocol_buffer_synchronize+0x32c>
          sys.state = STATE_SAFETY_DOOR;
 80061e2:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 80061e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 80061e8:	f043 0301 	orr.w	r3, r3, #1
 80061ec:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 80061ee:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 80061f0:	2004      	movs	r0, #4
 80061f2:	f003 fb19 	bl	8009828 <system_clear_exec_state_flag>
 80061f6:	e71d      	b.n	8006034 <protocol_buffer_synchronize+0xe0>
      report_realtime_status();
 80061f8:	f000 fe10 	bl	8006e1c <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 80061fc:	2001      	movs	r0, #1
 80061fe:	f003 fb13 	bl	8009828 <system_clear_exec_state_flag>
 8006202:	e6ca      	b.n	8005f9a <protocol_buffer_synchronize+0x46>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8006204:	f013 0f28 	tst.w	r3, #40	; 0x28
 8006208:	d051      	beq.n	80062ae <protocol_buffer_synchronize+0x35a>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 800620a:	78a2      	ldrb	r2, [r4, #2]
 800620c:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8006210:	d046      	beq.n	80062a0 <protocol_buffer_synchronize+0x34c>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8006212:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006216:	fa4f fb8a 	sxtb.w	fp, sl
 800621a:	d174      	bne.n	8006306 <protocol_buffer_synchronize+0x3b2>
        if (rt_exec & EXEC_FEED_HOLD) {
 800621c:	f01a 0f08 	tst.w	sl, #8
 8006220:	d002      	beq.n	8006228 <protocol_buffer_synchronize+0x2d4>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8006222:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8006226:	d05b      	beq.n	80062e0 <protocol_buffer_synchronize+0x38c>
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8006228:	f01a 0f20 	tst.w	sl, #32
 800622c:	f43f aebe 	beq.w	8005fac <protocol_buffer_synchronize+0x58>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8006230:	2006      	movs	r0, #6
 8006232:	f000 f9ad 	bl	8006590 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8006236:	78a3      	ldrb	r3, [r4, #2]
 8006238:	061a      	lsls	r2, r3, #24
 800623a:	d407      	bmi.n	800624c <protocol_buffer_synchronize+0x2f8>
            if (sys.state == STATE_SAFETY_DOOR) {
 800623c:	7822      	ldrb	r2, [r4, #0]
 800623e:	2a40      	cmp	r2, #64	; 0x40
 8006240:	f000 80af 	beq.w	80063a2 <protocol_buffer_synchronize+0x44e>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8006244:	2a80      	cmp	r2, #128	; 0x80
 8006246:	d001      	beq.n	800624c <protocol_buffer_synchronize+0x2f8>
 8006248:	2240      	movs	r2, #64	; 0x40
 800624a:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 800624c:	f043 0320 	orr.w	r3, r3, #32
      if (rt_exec & EXEC_SLEEP) {
 8006250:	f1bb 0f00 	cmp.w	fp, #0
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8006254:	70a3      	strb	r3, [r4, #2]
      if (rt_exec & EXEC_SLEEP) {
 8006256:	f6bf aead 	bge.w	8005fb4 <protocol_buffer_synchronize+0x60>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 800625a:	7823      	ldrb	r3, [r4, #0]
 800625c:	2b01      	cmp	r3, #1
 800625e:	f000 8082 	beq.w	8006366 <protocol_buffer_synchronize+0x412>
        sys.state = STATE_SLEEP; 
 8006262:	2380      	movs	r3, #128	; 0x80
 8006264:	7023      	strb	r3, [r4, #0]
 8006266:	e6a5      	b.n	8005fb4 <protocol_buffer_synchronize+0x60>
 8006268:	20001bac 	.word	0x20001bac
 800626c:	20001b6c 	.word	0x20001b6c
 8006270:	20001b81 	.word	0x20001b81
 8006274:	20001b80 	.word	0x20001b80
 8006278:	20001b68 	.word	0x20001b68
 800627c:	20001abc 	.word	0x20001abc
          sys.suspend = SUSPEND_DISABLE;
 8006280:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8006282:	7022      	strb	r2, [r4, #0]
 8006284:	e7b4      	b.n	80061f0 <protocol_buffer_synchronize+0x29c>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8006286:	f013 0f18 	tst.w	r3, #24
 800628a:	f43f aee0 	beq.w	800604e <protocol_buffer_synchronize+0xfa>
        uint8_t coolant_state = gc_state.modal.coolant;
 800628e:	f899 a008 	ldrb.w	sl, [r9, #8]
          if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8006292:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006296:	f47f af4c 	bne.w	8006132 <protocol_buffer_synchronize+0x1de>
          else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 800629a:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 800629e:	e74a      	b.n	8006136 <protocol_buffer_synchronize+0x1e2>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 80062a0:	f002 f9fe 	bl	80086a0 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80062a4:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80062a6:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80062a8:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80062aa:	2b20      	cmp	r3, #32
 80062ac:	d06e      	beq.n	800638c <protocol_buffer_synchronize+0x438>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1af      	bne.n	8006212 <protocol_buffer_synchronize+0x2be>
 80062b2:	2201      	movs	r2, #1
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80062b4:	f01a 0f40 	tst.w	sl, #64	; 0x40
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80062b8:	70a2      	strb	r2, [r4, #2]
 80062ba:	fa4f fb8a 	sxtb.w	fp, sl
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80062be:	d00c      	beq.n	80062da <protocol_buffer_synchronize+0x386>
 80062c0:	2241      	movs	r2, #65	; 0x41
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80062c2:	70a2      	strb	r2, [r4, #2]
 80062c4:	e7aa      	b.n	800621c <protocol_buffer_synchronize+0x2c8>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 80062c6:	4658      	mov	r0, fp
 80062c8:	f000 f962 	bl	8006590 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 80062cc:	2010      	movs	r0, #16
 80062ce:	f003 faab 	bl	8009828 <system_clear_exec_state_flag>
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 80062d2:	782b      	ldrb	r3, [r5, #0]
 80062d4:	06db      	lsls	r3, r3, #27
 80062d6:	d5fc      	bpl.n	80062d2 <protocol_buffer_synchronize+0x37e>
 80062d8:	e6e9      	b.n	80060ae <protocol_buffer_synchronize+0x15a>
        if (rt_exec & EXEC_FEED_HOLD) {
 80062da:	f01a 0f08 	tst.w	sl, #8
 80062de:	d0a3      	beq.n	8006228 <protocol_buffer_synchronize+0x2d4>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80062e0:	2310      	movs	r3, #16
        if (rt_exec & EXEC_SAFETY_DOOR) {
 80062e2:	f01a 0f20 	tst.w	sl, #32
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80062e6:	7023      	strb	r3, [r4, #0]
        if (rt_exec & EXEC_SAFETY_DOOR) {
 80062e8:	f43f ae60 	beq.w	8005fac <protocol_buffer_synchronize+0x58>
 80062ec:	e7a0      	b.n	8006230 <protocol_buffer_synchronize+0x2dc>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 80062ee:	2300      	movs	r3, #0
 80062f0:	7123      	strb	r3, [r4, #4]
          plan_reset();
 80062f2:	f7fe f87b 	bl	80043ec <plan_reset>
          st_reset();
 80062f6:	f002 f861 	bl	80083bc <st_reset>
          gc_sync_position();
 80062fa:	f7fb fcb7 	bl	8001c6c <gc_sync_position>
          plan_sync_position();
 80062fe:	f7fe fc3f 	bl	8004b80 <plan_sync_position>
 8006302:	78a3      	ldrb	r3, [r4, #2]
 8006304:	e76a      	b.n	80061dc <protocol_buffer_synchronize+0x288>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8006306:	0699      	lsls	r1, r3, #26
 8006308:	d488      	bmi.n	800621c <protocol_buffer_synchronize+0x2c8>
 800630a:	78a2      	ldrb	r2, [r4, #2]
 800630c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006310:	70a2      	strb	r2, [r4, #2]
 8006312:	e783      	b.n	800621c <protocol_buffer_synchronize+0x2c8>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8006314:	2302      	movs	r3, #2
 8006316:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8006318:	f01a 0fc0 	tst.w	sl, #192	; 0xc0
 800631c:	f47f af03 	bne.w	8006126 <protocol_buffer_synchronize+0x1d2>
    st_prep_buffer();
 8006320:	f002 f9d4 	bl	80086cc <st_prep_buffer>
 8006324:	e6b1      	b.n	800608a <protocol_buffer_synchronize+0x136>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8006326:	06da      	lsls	r2, r3, #27
 8006328:	f57f ae61 	bpl.w	8005fee <protocol_buffer_synchronize+0x9a>
 800632c:	78a2      	ldrb	r2, [r4, #2]
 800632e:	07d1      	lsls	r1, r2, #31
 8006330:	f57f ae5d 	bpl.w	8005fee <protocol_buffer_synchronize+0x9a>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8006334:	2b10      	cmp	r3, #16
 8006336:	f47f ae4d 	bne.w	8005fd4 <protocol_buffer_synchronize+0x80>
 800633a:	7ae3      	ldrb	r3, [r4, #11]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f43f ae49 	beq.w	8005fd4 <protocol_buffer_synchronize+0x80>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8006342:	f043 0308 	orr.w	r3, r3, #8
 8006346:	72e3      	strb	r3, [r4, #11]
 8006348:	e651      	b.n	8005fee <protocol_buffer_synchronize+0x9a>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 800634a:	78a3      	ldrb	r3, [r4, #2]
 800634c:	f013 0220 	ands.w	r2, r3, #32
 8006350:	f47f ae4d 	bne.w	8005fee <protocol_buffer_synchronize+0x9a>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8006354:	06d9      	lsls	r1, r3, #27
 8006356:	d417      	bmi.n	8006388 <protocol_buffer_synchronize+0x434>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8006358:	0758      	lsls	r0, r3, #29
 800635a:	f57f ae48 	bpl.w	8005fee <protocol_buffer_synchronize+0x9a>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 800635e:	f043 0308 	orr.w	r3, r3, #8
 8006362:	70a3      	strb	r3, [r4, #2]
 8006364:	e643      	b.n	8005fee <protocol_buffer_synchronize+0x9a>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8006366:	78a3      	ldrb	r3, [r4, #2]
 8006368:	f043 0305 	orr.w	r3, r3, #5
 800636c:	70a3      	strb	r3, [r4, #2]
 800636e:	e778      	b.n	8006262 <protocol_buffer_synchronize+0x30e>
              sys.state = STATE_CYCLE;
 8006370:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8006372:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8006374:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 8006376:	f002 f9a9 	bl	80086cc <st_prep_buffer>
              st_wake_up();
 800637a:	f001 fdc5 	bl	8007f08 <st_wake_up>
 800637e:	e636      	b.n	8005fee <protocol_buffer_synchronize+0x9a>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8006380:	f043 0304 	orr.w	r3, r3, #4
 8006384:	72e3      	strb	r3, [r4, #11]
 8006386:	e7c7      	b.n	8006318 <protocol_buffer_synchronize+0x3c4>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8006388:	7022      	strb	r2, [r4, #0]
 800638a:	e623      	b.n	8005fd4 <protocol_buffer_synchronize+0x80>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 800638c:	fa4f fb8a 	sxtb.w	fp, sl
 8006390:	f1bb 0f00 	cmp.w	fp, #0
 8006394:	f6ff af48 	blt.w	8006228 <protocol_buffer_synchronize+0x2d4>
 8006398:	78a3      	ldrb	r3, [r4, #2]
 800639a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800639e:	70a3      	strb	r3, [r4, #2]
 80063a0:	e742      	b.n	8006228 <protocol_buffer_synchronize+0x2d4>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 80063a2:	0718      	lsls	r0, r3, #28
 80063a4:	f57f af50 	bpl.w	8006248 <protocol_buffer_synchronize+0x2f4>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 80063a8:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 80063ac:	f043 0302 	orr.w	r3, r3, #2
 80063b0:	e74a      	b.n	8006248 <protocol_buffer_synchronize+0x2f4>
 80063b2:	bf00      	nop

080063b4 <protocol_main_loop>:
{
 80063b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE)) {
 80063b8:	4b57      	ldr	r3, [pc, #348]	; (8006518 <protocol_main_loop+0x164>)
 80063ba:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80063be:	071a      	lsls	r2, r3, #28
 80063c0:	f100 8091 	bmi.w	80064e6 <protocol_main_loop+0x132>
 80063c4:	4e55      	ldr	r6, [pc, #340]	; (800651c <protocol_main_loop+0x168>)
  if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
 80063c6:	7833      	ldrb	r3, [r6, #0]
 80063c8:	f013 0381 	ands.w	r3, r3, #129	; 0x81
 80063cc:	f000 8083 	beq.w	80064d6 <protocol_main_loop+0x122>
    report_feedback_message(MESSAGE_ALARM_LOCK);
 80063d0:	2002      	movs	r0, #2
 80063d2:	f000 f8dd 	bl	8006590 <report_feedback_message>
    sys.state = STATE_ALARM; // Ensure alarm state is set.
 80063d6:	2301      	movs	r3, #1
 80063d8:	7033      	strb	r3, [r6, #0]
        line_flags = 0;
 80063da:	2500      	movs	r5, #0
 80063dc:	462c      	mov	r4, r5
        line[char_counter] = 0; // Set string termination character.
 80063de:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8006520 <protocol_main_loop+0x16c>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 80063e2:	f000 ff4b 	bl	800727c <serial_read>
 80063e6:	28ff      	cmp	r0, #255	; 0xff
 80063e8:	d00f      	beq.n	800640a <protocol_main_loop+0x56>
      if ((c == '\n') || (c == '\r')) { // End of line reached
 80063ea:	280a      	cmp	r0, #10
 80063ec:	d01d      	beq.n	800642a <protocol_main_loop+0x76>
 80063ee:	280d      	cmp	r0, #13
 80063f0:	d01b      	beq.n	800642a <protocol_main_loop+0x76>
        if (line_flags) {
 80063f2:	2c00      	cmp	r4, #0
 80063f4:	d035      	beq.n	8006462 <protocol_main_loop+0xae>
          if (c == ')') {
 80063f6:	2829      	cmp	r0, #41	; 0x29
 80063f8:	d1f3      	bne.n	80063e2 <protocol_main_loop+0x2e>
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 80063fa:	07a3      	lsls	r3, r4, #30
 80063fc:	d5f1      	bpl.n	80063e2 <protocol_main_loop+0x2e>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 80063fe:	f000 ff3d 	bl	800727c <serial_read>
 8006402:	28ff      	cmp	r0, #255	; 0xff
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 8006404:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8006408:	d1ef      	bne.n	80063ea <protocol_main_loop+0x36>
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 800640a:	f7fe f831 	bl	8004470 <plan_get_current_block>
 800640e:	b110      	cbz	r0, 8006416 <protocol_main_loop+0x62>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8006410:	2002      	movs	r0, #2
 8006412:	f003 f9ff 	bl	8009814 <system_set_exec_state_flag>
  protocol_exec_rt_system();
 8006416:	f7fe fea9 	bl	800516c <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800641a:	78b3      	ldrb	r3, [r6, #2]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d14a      	bne.n	80064b6 <protocol_main_loop+0x102>
    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 8006420:	7873      	ldrb	r3, [r6, #1]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0dd      	beq.n	80063e2 <protocol_main_loop+0x2e>
 8006426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  protocol_exec_rt_system();
 800642a:	f7fe fe9f 	bl	800516c <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800642e:	78b3      	ldrb	r3, [r6, #2]
 8006430:	bb63      	cbnz	r3, 800648c <protocol_main_loop+0xd8>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 8006432:	7877      	ldrb	r7, [r6, #1]
 8006434:	2f00      	cmp	r7, #0
 8006436:	d1f6      	bne.n	8006426 <protocol_main_loop+0x72>
        line[char_counter] = 0; // Set string termination character.
 8006438:	f808 7005 	strb.w	r7, [r8, r5]
				LedBlink();
 800643c:	f7fd f9be 	bl	80037bc <LedBlink>
        if (line_flags & LINE_FLAG_OVERFLOW) {
 8006440:	f014 0401 	ands.w	r4, r4, #1
 8006444:	d125      	bne.n	8006492 <protocol_main_loop+0xde>
        } else if (line[0] == 0) {
 8006446:	f898 0000 	ldrb.w	r0, [r8]
 800644a:	b378      	cbz	r0, 80064ac <protocol_main_loop+0xf8>
        } else if (line[0] == '$') {
 800644c:	2824      	cmp	r0, #36	; 0x24
 800644e:	d039      	beq.n	80064c4 <protocol_main_loop+0x110>
        } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 8006450:	7833      	ldrb	r3, [r6, #0]
 8006452:	f013 0521 	ands.w	r5, r3, #33	; 0x21
 8006456:	d022      	beq.n	800649e <protocol_main_loop+0xea>
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 8006458:	2009      	movs	r0, #9
        char_counter = 0;
 800645a:	4625      	mov	r5, r4
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 800645c:	f000 f864 	bl	8006528 <report_status_message>
 8006460:	e7bf      	b.n	80063e2 <protocol_main_loop+0x2e>
          if (c <= ' ') {
 8006462:	2820      	cmp	r0, #32
 8006464:	d9bd      	bls.n	80063e2 <protocol_main_loop+0x2e>
          } else if (c == '/') {
 8006466:	282f      	cmp	r0, #47	; 0x2f
 8006468:	d0bb      	beq.n	80063e2 <protocol_main_loop+0x2e>
          } else if (c == '(') {
 800646a:	2828      	cmp	r0, #40	; 0x28
 800646c:	d026      	beq.n	80064bc <protocol_main_loop+0x108>
          } else if (c == ';') {
 800646e:	283b      	cmp	r0, #59	; 0x3b
 8006470:	d02f      	beq.n	80064d2 <protocol_main_loop+0x11e>
          } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 8006472:	2d58      	cmp	r5, #88	; 0x58
 8006474:	d824      	bhi.n	80064c0 <protocol_main_loop+0x10c>
          } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 8006476:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b19      	cmp	r3, #25
            line[char_counter++] = c-'a'+'A';
 800647e:	bf98      	it	ls
 8006480:	3820      	subls	r0, #32
            line[char_counter++] = c;
 8006482:	1c6b      	adds	r3, r5, #1
 8006484:	f808 0005 	strb.w	r0, [r8, r5]
 8006488:	b2dd      	uxtb	r5, r3
 800648a:	e7aa      	b.n	80063e2 <protocol_main_loop+0x2e>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800648c:	f7ff f850 	bl	8005530 <protocol_exec_rt_suspend>
 8006490:	e7cf      	b.n	8006432 <protocol_main_loop+0x7e>
          report_status_message(STATUS_OVERFLOW);
 8006492:	200b      	movs	r0, #11
        char_counter = 0;
 8006494:	463d      	mov	r5, r7
        line_flags = 0;
 8006496:	463c      	mov	r4, r7
          report_status_message(STATUS_OVERFLOW);
 8006498:	f000 f846 	bl	8006528 <report_status_message>
 800649c:	e7a1      	b.n	80063e2 <protocol_main_loop+0x2e>
          report_status_message(gc_execute_line(line));
 800649e:	4640      	mov	r0, r8
 80064a0:	f7fb fbec 	bl	8001c7c <gc_execute_line>
 80064a4:	f000 f840 	bl	8006528 <report_status_message>
        line_flags = 0;
 80064a8:	462c      	mov	r4, r5
 80064aa:	e79a      	b.n	80063e2 <protocol_main_loop+0x2e>
        char_counter = 0;
 80064ac:	4605      	mov	r5, r0
          report_status_message(STATUS_OK);
 80064ae:	f000 f83b 	bl	8006528 <report_status_message>
        line_flags = 0;
 80064b2:	462c      	mov	r4, r5
 80064b4:	e795      	b.n	80063e2 <protocol_main_loop+0x2e>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80064b6:	f7ff f83b 	bl	8005530 <protocol_exec_rt_suspend>
 80064ba:	e7b1      	b.n	8006420 <protocol_main_loop+0x6c>
            line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 80064bc:	2402      	movs	r4, #2
 80064be:	e790      	b.n	80063e2 <protocol_main_loop+0x2e>
            line_flags |= LINE_FLAG_OVERFLOW;
 80064c0:	2401      	movs	r4, #1
 80064c2:	e78e      	b.n	80063e2 <protocol_main_loop+0x2e>
          report_status_message(system_execute_line(line));
 80064c4:	4640      	mov	r0, r8
        char_counter = 0;
 80064c6:	4625      	mov	r5, r4
          report_status_message(system_execute_line(line));
 80064c8:	f002 ff2a 	bl	8009320 <system_execute_line>
 80064cc:	f000 f82c 	bl	8006528 <report_status_message>
 80064d0:	e787      	b.n	80063e2 <protocol_main_loop+0x2e>
            line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 80064d2:	2404      	movs	r4, #4
 80064d4:	e785      	b.n	80063e2 <protocol_main_loop+0x2e>
    sys.state = STATE_IDLE;
 80064d6:	7033      	strb	r3, [r6, #0]
    if (system_check_safety_door_ajar()) {
 80064d8:	f002 ff04 	bl	80092e4 <system_check_safety_door_ajar>
 80064dc:	b978      	cbnz	r0, 80064fe <protocol_main_loop+0x14a>
    system_execute_startup(line); // Execute startup script.
 80064de:	4810      	ldr	r0, [pc, #64]	; (8006520 <protocol_main_loop+0x16c>)
 80064e0:	f002 ff02 	bl	80092e8 <system_execute_startup>
 80064e4:	e779      	b.n	80063da <protocol_main_loop+0x26>
      if (limits_get_state()) {
 80064e6:	f7fc fdd7 	bl	8003098 <limits_get_state>
 80064ea:	2800      	cmp	r0, #0
 80064ec:	f43f af6a 	beq.w	80063c4 <protocol_main_loop+0x10>
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 80064f0:	2301      	movs	r3, #1
 80064f2:	4e0a      	ldr	r6, [pc, #40]	; (800651c <protocol_main_loop+0x168>)
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 80064f4:	2007      	movs	r0, #7
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 80064f6:	7033      	strb	r3, [r6, #0]
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 80064f8:	f000 f84a 	bl	8006590 <report_feedback_message>
 80064fc:	e763      	b.n	80063c6 <protocol_main_loop+0x12>
      bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 80064fe:	4a09      	ldr	r2, [pc, #36]	; (8006524 <protocol_main_loop+0x170>)
 8006500:	7813      	ldrb	r3, [r2, #0]
 8006502:	f043 0320 	orr.w	r3, r3, #32
 8006506:	7013      	strb	r3, [r2, #0]
  protocol_exec_rt_system();
 8006508:	f7fe fe30 	bl	800516c <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800650c:	78b3      	ldrb	r3, [r6, #2]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0e5      	beq.n	80064de <protocol_main_loop+0x12a>
 8006512:	f7ff f80d 	bl	8005530 <protocol_exec_rt_suspend>
 8006516:	e7e2      	b.n	80064de <protocol_main_loop+0x12a>
 8006518:	20001d30 	.word	0x20001d30
 800651c:	20001b6c 	.word	0x20001b6c
 8006520:	20001310 	.word	0x20001310
 8006524:	20001b81 	.word	0x20001b81

08006528 <report_status_message>:
// operation. Errors events can originate from the g-code parser, settings module, or asynchronously
// from a critical error, such as a triggered hard limit. Interface should always monitor for these
// responses.
void report_status_message(uint8_t status_code)
{
  switch(status_code) {
 8006528:	b188      	cbz	r0, 800654e <report_status_message+0x26>
 800652a:	2812      	cmp	r0, #18
 800652c:	d102      	bne.n	8006534 <report_status_message+0xc>
    case STATUS_OK: // STATUS_OK
      printPgmString(PSTR("ok\r\n")); break;
    case STATUS_AXIS_DONE:
      printPgmString(PSTR("done\r\n")); break;
 800652e:	4809      	ldr	r0, [pc, #36]	; (8006554 <report_status_message+0x2c>)
 8006530:	f7fe bb56 	b.w	8004be0 <printString>
{
 8006534:	b510      	push	{r4, lr}
 8006536:	4604      	mov	r4, r0
    default:
      printPgmString(PSTR("error:"));
 8006538:	4807      	ldr	r0, [pc, #28]	; (8006558 <report_status_message+0x30>)
 800653a:	f7fe fb51 	bl	8004be0 <printString>
      print_uint8_base10(status_code);
 800653e:	4620      	mov	r0, r4
 8006540:	f7fe fb5a 	bl	8004bf8 <print_uint8_base10>
      report_util_line_feed();
  }
}
 8006544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006548:	4804      	ldr	r0, [pc, #16]	; (800655c <report_status_message+0x34>)
 800654a:	f7fe bb49 	b.w	8004be0 <printString>
      printPgmString(PSTR("ok\r\n")); break;
 800654e:	4804      	ldr	r0, [pc, #16]	; (8006560 <report_status_message+0x38>)
 8006550:	f7fe bb46 	b.w	8004be0 <printString>
 8006554:	0800c0b0 	.word	0x0800c0b0
 8006558:	0800c0b8 	.word	0x0800c0b8
 800655c:	0800c0b4 	.word	0x0800c0b4
 8006560:	0800c0a8 	.word	0x0800c0a8

08006564 <report_alarm_message>:

// Prints alarm messages.
void report_alarm_message(uint8_t alarm_code)
{
 8006564:	b510      	push	{r4, lr}
 8006566:	4604      	mov	r4, r0
  printPgmString(PSTR("ALARM:"));
 8006568:	4807      	ldr	r0, [pc, #28]	; (8006588 <report_alarm_message+0x24>)
 800656a:	f7fe fb39 	bl	8004be0 <printString>
  print_uint8_base10(alarm_code);
 800656e:	4620      	mov	r0, r4
 8006570:	f7fe fb42 	bl	8004bf8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006574:	4805      	ldr	r0, [pc, #20]	; (800658c <report_alarm_message+0x28>)
 8006576:	f7fe fb33 	bl	8004be0 <printString>
  report_util_line_feed();
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
}
 800657a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
 800657e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006582:	f7fd bd27 	b.w	8003fd4 <delay_ms>
 8006586:	bf00      	nop
 8006588:	0800bea4 	.word	0x0800bea4
 800658c:	0800c0b4 	.word	0x0800c0b4

08006590 <report_feedback_message>:
// user feedback for things that are not of the status/alarm message protocol. These are
// messages such as setup warnings, switch toggling, and how to exit alarms.
// NOTE: For interfaces, messages are always placed within brackets. And if silent mode
// is installed, the message number codes are less than zero.
void report_feedback_message(uint8_t message_code)
{
 8006590:	b510      	push	{r4, lr}
 8006592:	4604      	mov	r4, r0
  printPgmString(PSTR("[MSG:"));
 8006594:	4820      	ldr	r0, [pc, #128]	; (8006618 <report_feedback_message+0x88>)
 8006596:	f7fe fb23 	bl	8004be0 <printString>
  switch(message_code) {
 800659a:	1e60      	subs	r0, r4, #1
 800659c:	280a      	cmp	r0, #10
 800659e:	d80a      	bhi.n	80065b6 <report_feedback_message+0x26>
 80065a0:	e8df f000 	tbb	[pc, r0]
 80065a4:	1d191511 	.word	0x1d191511
 80065a8:	2d292521 	.word	0x2d292521
 80065ac:	3531      	.short	0x3531
 80065ae:	06          	.byte	0x06
 80065af:	00          	.byte	0x00
    case MESSAGE_RESTORE_DEFAULTS:
      printPgmString(PSTR("Restoring defaults")); break;
    case MESSAGE_SPINDLE_RESTORE:
      printPgmString(PSTR("Restoring spindle")); break;
    case MESSAGE_SLEEP_MODE:
      printPgmString(PSTR("Sleeping")); break;
 80065b0:	481a      	ldr	r0, [pc, #104]	; (800661c <report_feedback_message+0x8c>)
 80065b2:	f7fe fb15 	bl	8004be0 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80065b6:	205d      	movs	r0, #93	; 0x5d
 80065b8:	f000 fe36 	bl	8007228 <serial_write>
  }
  report_util_feedback_line_feed();
}
 80065bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80065c0:	4817      	ldr	r0, [pc, #92]	; (8006620 <report_feedback_message+0x90>)
 80065c2:	f7fe bb0d 	b.w	8004be0 <printString>
      printPgmString(PSTR("Reset to continue")); break;
 80065c6:	4817      	ldr	r0, [pc, #92]	; (8006624 <report_feedback_message+0x94>)
 80065c8:	f7fe fb0a 	bl	8004be0 <printString>
 80065cc:	e7f3      	b.n	80065b6 <report_feedback_message+0x26>
      printPgmString(PSTR("'$H'|'$X' to unlock")); break;
 80065ce:	4816      	ldr	r0, [pc, #88]	; (8006628 <report_feedback_message+0x98>)
 80065d0:	f7fe fb06 	bl	8004be0 <printString>
 80065d4:	e7ef      	b.n	80065b6 <report_feedback_message+0x26>
      printPgmString(PSTR("Caution: Unlocked")); break;
 80065d6:	4815      	ldr	r0, [pc, #84]	; (800662c <report_feedback_message+0x9c>)
 80065d8:	f7fe fb02 	bl	8004be0 <printString>
 80065dc:	e7eb      	b.n	80065b6 <report_feedback_message+0x26>
      printPgmString(PSTR("Enabled")); break;
 80065de:	4814      	ldr	r0, [pc, #80]	; (8006630 <report_feedback_message+0xa0>)
 80065e0:	f7fe fafe 	bl	8004be0 <printString>
 80065e4:	e7e7      	b.n	80065b6 <report_feedback_message+0x26>
      printPgmString(PSTR("Disabled")); break;
 80065e6:	4813      	ldr	r0, [pc, #76]	; (8006634 <report_feedback_message+0xa4>)
 80065e8:	f7fe fafa 	bl	8004be0 <printString>
 80065ec:	e7e3      	b.n	80065b6 <report_feedback_message+0x26>
      printPgmString(PSTR("Check Door")); break;
 80065ee:	4812      	ldr	r0, [pc, #72]	; (8006638 <report_feedback_message+0xa8>)
 80065f0:	f7fe faf6 	bl	8004be0 <printString>
 80065f4:	e7df      	b.n	80065b6 <report_feedback_message+0x26>
      printPgmString(PSTR("Check Limits")); break;
 80065f6:	4811      	ldr	r0, [pc, #68]	; (800663c <report_feedback_message+0xac>)
 80065f8:	f7fe faf2 	bl	8004be0 <printString>
 80065fc:	e7db      	b.n	80065b6 <report_feedback_message+0x26>
      printPgmString(PSTR("Pgm End")); break;
 80065fe:	4810      	ldr	r0, [pc, #64]	; (8006640 <report_feedback_message+0xb0>)
 8006600:	f7fe faee 	bl	8004be0 <printString>
 8006604:	e7d7      	b.n	80065b6 <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring defaults")); break;
 8006606:	480f      	ldr	r0, [pc, #60]	; (8006644 <report_feedback_message+0xb4>)
 8006608:	f7fe faea 	bl	8004be0 <printString>
 800660c:	e7d3      	b.n	80065b6 <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring spindle")); break;
 800660e:	480e      	ldr	r0, [pc, #56]	; (8006648 <report_feedback_message+0xb8>)
 8006610:	f7fe fae6 	bl	8004be0 <printString>
 8006614:	e7cf      	b.n	80065b6 <report_feedback_message+0x26>
 8006616:	bf00      	nop
 8006618:	0800bec8 	.word	0x0800bec8
 800661c:	0800bf6c 	.word	0x0800bf6c
 8006620:	0800c0b4 	.word	0x0800c0b4
 8006624:	0800bed0 	.word	0x0800bed0
 8006628:	0800bee4 	.word	0x0800bee4
 800662c:	0800bef8 	.word	0x0800bef8
 8006630:	0800bf0c 	.word	0x0800bf0c
 8006634:	0800bf14 	.word	0x0800bf14
 8006638:	0800bf20 	.word	0x0800bf20
 800663c:	0800bf2c 	.word	0x0800bf2c
 8006640:	0800bf3c 	.word	0x0800bf3c
 8006644:	0800bf44 	.word	0x0800bf44
 8006648:	0800bf58 	.word	0x0800bf58

0800664c <report_init_message>:


// Welcome message
void report_init_message()
{
  printPgmString(PSTR("\r\nGrbl " GRBL_VERSION " ['$' for help]\r\n"));
 800664c:	4801      	ldr	r0, [pc, #4]	; (8006654 <report_init_message+0x8>)
 800664e:	f7fe bac7 	b.w	8004be0 <printString>
 8006652:	bf00      	nop
 8006654:	0800bfe4 	.word	0x0800bfe4

08006658 <report_grbl_help>:
}

// Grbl help message
void report_grbl_help() {
  printPgmString(PSTR("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n"));
 8006658:	4801      	ldr	r0, [pc, #4]	; (8006660 <report_grbl_help+0x8>)
 800665a:	f7fe bac1 	b.w	8004be0 <printString>
 800665e:	bf00      	nop
 8006660:	0800bf98 	.word	0x0800bf98

08006664 <report_grbl_settings>:
}


// Grbl global settings print out.
// NOTE: The numbering scheme here must correlate to storing in settings.c
void report_grbl_settings() {
 8006664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Print Grbl settings.
  report_util_uint8_setting(0,settings.pulse_microseconds);
 8006668:	4cde      	ldr	r4, [pc, #888]	; (80069e4 <report_grbl_settings+0x380>)
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800666a:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(0,settings.pulse_microseconds);
 800666c:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006670:	f000 fdda 	bl	8007228 <serial_write>
 8006674:	2000      	movs	r0, #0
 8006676:	f7fe fabf 	bl	8004bf8 <print_uint8_base10>
 800667a:	203d      	movs	r0, #61	; 0x3d
 800667c:	f000 fdd4 	bl	8007228 <serial_write>
  print_uint8_base10(val);
 8006680:	4628      	mov	r0, r5
 8006682:	f7fe fab9 	bl	8004bf8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006686:	48d8      	ldr	r0, [pc, #864]	; (80069e8 <report_grbl_settings+0x384>)
 8006688:	f7fe faaa 	bl	8004be0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800668c:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(1,settings.stepper_idle_lock_time);
 800668e:	f894 5056 	ldrb.w	r5, [r4, #86]	; 0x56
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006692:	f000 fdc9 	bl	8007228 <serial_write>
 8006696:	2001      	movs	r0, #1
 8006698:	f7fe faae 	bl	8004bf8 <print_uint8_base10>
 800669c:	203d      	movs	r0, #61	; 0x3d
 800669e:	f000 fdc3 	bl	8007228 <serial_write>
  print_uint8_base10(val);
 80066a2:	4628      	mov	r0, r5
 80066a4:	f7fe faa8 	bl	8004bf8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80066a8:	48cf      	ldr	r0, [pc, #828]	; (80069e8 <report_grbl_settings+0x384>)
 80066aa:	f7fe fa99 	bl	8004be0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066ae:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(2,settings.step_invert_mask);
 80066b0:	f8b4 5052 	ldrh.w	r5, [r4, #82]	; 0x52
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066b4:	f000 fdb8 	bl	8007228 <serial_write>
 80066b8:	2002      	movs	r0, #2
 80066ba:	f7fe fa9d 	bl	8004bf8 <print_uint8_base10>
 80066be:	203d      	movs	r0, #61	; 0x3d
 80066c0:	f000 fdb2 	bl	8007228 <serial_write>
  print_uint8_base10(val);
 80066c4:	b2e8      	uxtb	r0, r5
 80066c6:	f7fe fa97 	bl	8004bf8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80066ca:	48c7      	ldr	r0, [pc, #796]	; (80069e8 <report_grbl_settings+0x384>)
 80066cc:	f7fe fa88 	bl	8004be0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066d0:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(3,settings.dir_invert_mask);
 80066d2:	f8b4 5054 	ldrh.w	r5, [r4, #84]	; 0x54
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066d6:	f000 fda7 	bl	8007228 <serial_write>
 80066da:	2003      	movs	r0, #3
 80066dc:	f7fe fa8c 	bl	8004bf8 <print_uint8_base10>
 80066e0:	203d      	movs	r0, #61	; 0x3d
 80066e2:	f000 fda1 	bl	8007228 <serial_write>
  print_uint8_base10(val);
 80066e6:	b2e8      	uxtb	r0, r5
 80066e8:	f7fe fa86 	bl	8004bf8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80066ec:	48be      	ldr	r0, [pc, #760]	; (80069e8 <report_grbl_settings+0x384>)
 80066ee:	f7fe fa77 	bl	8004be0 <printString>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 80066f2:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80066f6:	2024      	movs	r0, #36	; 0x24
 80066f8:	f000 fd96 	bl	8007228 <serial_write>
 80066fc:	2004      	movs	r0, #4
 80066fe:	f7fe fa7b 	bl	8004bf8 <print_uint8_base10>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 8006702:	f3c5 0580 	ubfx	r5, r5, #2, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006706:	203d      	movs	r0, #61	; 0x3d
 8006708:	f000 fd8e 	bl	8007228 <serial_write>
  print_uint8_base10(val);
 800670c:	4628      	mov	r0, r5
 800670e:	f7fe fa73 	bl	8004bf8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006712:	48b5      	ldr	r0, [pc, #724]	; (80069e8 <report_grbl_settings+0x384>)
 8006714:	f7fe fa64 	bl	8004be0 <printString>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 8006718:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800671c:	2024      	movs	r0, #36	; 0x24
 800671e:	f000 fd83 	bl	8007228 <serial_write>
 8006722:	2005      	movs	r0, #5
 8006724:	f7fe fa68 	bl	8004bf8 <print_uint8_base10>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 8006728:	f3c5 1580 	ubfx	r5, r5, #6, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800672c:	203d      	movs	r0, #61	; 0x3d
 800672e:	f000 fd7b 	bl	8007228 <serial_write>
  print_uint8_base10(val);
 8006732:	4628      	mov	r0, r5
 8006734:	f7fe fa60 	bl	8004bf8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006738:	48ab      	ldr	r0, [pc, #684]	; (80069e8 <report_grbl_settings+0x384>)
 800673a:	f7fe fa51 	bl	8004be0 <printString>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 800673e:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006742:	2024      	movs	r0, #36	; 0x24
 8006744:	f000 fd70 	bl	8007228 <serial_write>
 8006748:	2006      	movs	r0, #6
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 800674a:	09ed      	lsrs	r5, r5, #7
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800674c:	f7fe fa54 	bl	8004bf8 <print_uint8_base10>
 8006750:	203d      	movs	r0, #61	; 0x3d
 8006752:	f000 fd69 	bl	8007228 <serial_write>
  print_uint8_base10(val);
 8006756:	4628      	mov	r0, r5
 8006758:	f7fe fa4e 	bl	8004bf8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800675c:	48a2      	ldr	r0, [pc, #648]	; (80069e8 <report_grbl_settings+0x384>)
 800675e:	f7fe fa3f 	bl	8004be0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006762:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(10,settings.status_report_mask);
 8006764:	f894 5057 	ldrb.w	r5, [r4, #87]	; 0x57
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006768:	f000 fd5e 	bl	8007228 <serial_write>
 800676c:	200a      	movs	r0, #10
 800676e:	f7fe fa43 	bl	8004bf8 <print_uint8_base10>
 8006772:	203d      	movs	r0, #61	; 0x3d
 8006774:	f000 fd58 	bl	8007228 <serial_write>
  print_uint8_base10(val);
 8006778:	4628      	mov	r0, r5
 800677a:	f7fe fa3d 	bl	8004bf8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800677e:	489a      	ldr	r0, [pc, #616]	; (80069e8 <report_grbl_settings+0x384>)
 8006780:	f7fe fa2e 	bl	8004be0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006784:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(11,settings.junction_deviation,N_DECIMAL_SETTINGVALUE);
 8006786:	6da5      	ldr	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006788:	f000 fd4e 	bl	8007228 <serial_write>
 800678c:	200b      	movs	r0, #11
 800678e:	f7fe fa33 	bl	8004bf8 <print_uint8_base10>
 8006792:	203d      	movs	r0, #61	; 0x3d
 8006794:	f000 fd48 	bl	8007228 <serial_write>
  printFloat(val, n_decimal);
 8006798:	2103      	movs	r1, #3
 800679a:	4628      	mov	r0, r5
 800679c:	f7fe fa6e 	bl	8004c7c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80067a0:	4891      	ldr	r0, [pc, #580]	; (80069e8 <report_grbl_settings+0x384>)
 80067a2:	f7fe fa1d 	bl	8004be0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067a6:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(12,settings.arc_tolerance,N_DECIMAL_SETTINGVALUE);
 80067a8:	6de5      	ldr	r5, [r4, #92]	; 0x5c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067aa:	f000 fd3d 	bl	8007228 <serial_write>
 80067ae:	200c      	movs	r0, #12
 80067b0:	f7fe fa22 	bl	8004bf8 <print_uint8_base10>
 80067b4:	203d      	movs	r0, #61	; 0x3d
 80067b6:	f000 fd37 	bl	8007228 <serial_write>
  printFloat(val, n_decimal);
 80067ba:	2103      	movs	r1, #3
 80067bc:	4628      	mov	r0, r5
 80067be:	f7fe fa5d 	bl	8004c7c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80067c2:	4889      	ldr	r0, [pc, #548]	; (80069e8 <report_grbl_settings+0x384>)
 80067c4:	f7fe fa0c 	bl	8004be0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067c8:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(13,bit_istrue(settings.flags,BITFLAG_REPORT_INCHES));
 80067ca:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067ce:	f000 fd2b 	bl	8007228 <serial_write>
 80067d2:	200d      	movs	r0, #13
 80067d4:	f7fe fa10 	bl	8004bf8 <print_uint8_base10>
 80067d8:	203d      	movs	r0, #61	; 0x3d
 80067da:	f000 fd25 	bl	8007228 <serial_write>
  print_uint8_base10(val);
 80067de:	f005 0001 	and.w	r0, r5, #1
 80067e2:	f7fe fa09 	bl	8004bf8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80067e6:	4880      	ldr	r0, [pc, #512]	; (80069e8 <report_grbl_settings+0x384>)
 80067e8:	f7fe f9fa 	bl	8004be0 <printString>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 80067ec:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80067f0:	2024      	movs	r0, #36	; 0x24
 80067f2:	f000 fd19 	bl	8007228 <serial_write>
 80067f6:	2014      	movs	r0, #20
 80067f8:	f7fe f9fe 	bl	8004bf8 <print_uint8_base10>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 80067fc:	f3c5 1540 	ubfx	r5, r5, #5, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006800:	203d      	movs	r0, #61	; 0x3d
 8006802:	f000 fd11 	bl	8007228 <serial_write>
  print_uint8_base10(val);
 8006806:	4628      	mov	r0, r5
 8006808:	f7fe f9f6 	bl	8004bf8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800680c:	4876      	ldr	r0, [pc, #472]	; (80069e8 <report_grbl_settings+0x384>)
 800680e:	f7fe f9e7 	bl	8004be0 <printString>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 8006812:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006816:	2024      	movs	r0, #36	; 0x24
 8006818:	f000 fd06 	bl	8007228 <serial_write>
 800681c:	2015      	movs	r0, #21
 800681e:	f7fe f9eb 	bl	8004bf8 <print_uint8_base10>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 8006822:	f3c5 05c0 	ubfx	r5, r5, #3, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006826:	203d      	movs	r0, #61	; 0x3d
 8006828:	f000 fcfe 	bl	8007228 <serial_write>
  print_uint8_base10(val);
 800682c:	4628      	mov	r0, r5
 800682e:	f7fe f9e3 	bl	8004bf8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006832:	486d      	ldr	r0, [pc, #436]	; (80069e8 <report_grbl_settings+0x384>)
 8006834:	f7fe f9d4 	bl	8004be0 <printString>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8006838:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800683c:	2024      	movs	r0, #36	; 0x24
 800683e:	f000 fcf3 	bl	8007228 <serial_write>
 8006842:	2016      	movs	r0, #22
 8006844:	f7fe f9d8 	bl	8004bf8 <print_uint8_base10>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8006848:	f3c5 1500 	ubfx	r5, r5, #4, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800684c:	203d      	movs	r0, #61	; 0x3d
 800684e:	f000 fceb 	bl	8007228 <serial_write>
  print_uint8_base10(val);
 8006852:	4628      	mov	r0, r5
 8006854:	f7fe f9d0 	bl	8004bf8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006858:	4863      	ldr	r0, [pc, #396]	; (80069e8 <report_grbl_settings+0x384>)
 800685a:	f7fe f9c1 	bl	8004be0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800685e:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(23,settings.homing_dir_mask);
 8006860:	f8b4 506a 	ldrh.w	r5, [r4, #106]	; 0x6a
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006864:	f000 fce0 	bl	8007228 <serial_write>
 8006868:	2017      	movs	r0, #23
 800686a:	f7fe f9c5 	bl	8004bf8 <print_uint8_base10>
 800686e:	203d      	movs	r0, #61	; 0x3d
 8006870:	f000 fcda 	bl	8007228 <serial_write>
  print_uint8_base10(val);
 8006874:	b2e8      	uxtb	r0, r5
 8006876:	f7fe f9bf 	bl	8004bf8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800687a:	485b      	ldr	r0, [pc, #364]	; (80069e8 <report_grbl_settings+0x384>)
 800687c:	f7fe f9b0 	bl	8004be0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006880:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(24,settings.homing_feed_rate,N_DECIMAL_SETTINGVALUE);
 8006882:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006884:	f000 fcd0 	bl	8007228 <serial_write>
 8006888:	2018      	movs	r0, #24
 800688a:	f7fe f9b5 	bl	8004bf8 <print_uint8_base10>
 800688e:	203d      	movs	r0, #61	; 0x3d
 8006890:	f000 fcca 	bl	8007228 <serial_write>
  printFloat(val, n_decimal);
 8006894:	2103      	movs	r1, #3
 8006896:	4628      	mov	r0, r5
 8006898:	f7fe f9f0 	bl	8004c7c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800689c:	4852      	ldr	r0, [pc, #328]	; (80069e8 <report_grbl_settings+0x384>)
 800689e:	f7fe f99f 	bl	8004be0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068a2:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(25,settings.homing_seek_rate,N_DECIMAL_SETTINGVALUE);
 80068a4:	6f25      	ldr	r5, [r4, #112]	; 0x70
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068a6:	f000 fcbf 	bl	8007228 <serial_write>
 80068aa:	2019      	movs	r0, #25
 80068ac:	f7fe f9a4 	bl	8004bf8 <print_uint8_base10>
 80068b0:	203d      	movs	r0, #61	; 0x3d
 80068b2:	f000 fcb9 	bl	8007228 <serial_write>
  printFloat(val, n_decimal);
 80068b6:	2103      	movs	r1, #3
 80068b8:	4628      	mov	r0, r5
 80068ba:	f7fe f9df 	bl	8004c7c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80068be:	484a      	ldr	r0, [pc, #296]	; (80069e8 <report_grbl_settings+0x384>)
 80068c0:	f7fe f98e 	bl	8004be0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068c4:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(26,settings.homing_debounce_delay);
 80068c6:	f8b4 5074 	ldrh.w	r5, [r4, #116]	; 0x74
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068ca:	f000 fcad 	bl	8007228 <serial_write>
 80068ce:	201a      	movs	r0, #26
 80068d0:	f7fe f992 	bl	8004bf8 <print_uint8_base10>
 80068d4:	203d      	movs	r0, #61	; 0x3d
 80068d6:	f000 fca7 	bl	8007228 <serial_write>
  print_uint8_base10(val);
 80068da:	b2e8      	uxtb	r0, r5
 80068dc:	f7fe f98c 	bl	8004bf8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80068e0:	4841      	ldr	r0, [pc, #260]	; (80069e8 <report_grbl_settings+0x384>)
 80068e2:	f7fe f97d 	bl	8004be0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068e6:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(27,settings.homing_pulloff,N_DECIMAL_SETTINGVALUE);
 80068e8:	6fa5      	ldr	r5, [r4, #120]	; 0x78
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068ea:	f000 fc9d 	bl	8007228 <serial_write>
 80068ee:	201b      	movs	r0, #27
 80068f0:	f7fe f982 	bl	8004bf8 <print_uint8_base10>
 80068f4:	203d      	movs	r0, #61	; 0x3d
 80068f6:	f000 fc97 	bl	8007228 <serial_write>
  printFloat(val, n_decimal);
 80068fa:	2103      	movs	r1, #3
 80068fc:	4628      	mov	r0, r5
 80068fe:	f7fe f9bd 	bl	8004c7c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006902:	4839      	ldr	r0, [pc, #228]	; (80069e8 <report_grbl_settings+0x384>)
 8006904:	f7fe f96c 	bl	8004be0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006908:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(30,settings.rpm_max,N_DECIMAL_RPMVALUE);
 800690a:	6e25      	ldr	r5, [r4, #96]	; 0x60
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800690c:	f000 fc8c 	bl	8007228 <serial_write>
 8006910:	201e      	movs	r0, #30
 8006912:	f7fe f971 	bl	8004bf8 <print_uint8_base10>
 8006916:	203d      	movs	r0, #61	; 0x3d
 8006918:	f000 fc86 	bl	8007228 <serial_write>
  printFloat(val, n_decimal);
 800691c:	2100      	movs	r1, #0
 800691e:	4628      	mov	r0, r5
 8006920:	f7fe f9ac 	bl	8004c7c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006924:	4830      	ldr	r0, [pc, #192]	; (80069e8 <report_grbl_settings+0x384>)
 8006926:	f7fe f95b 	bl	8004be0 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800692a:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(31,settings.rpm_min,N_DECIMAL_RPMVALUE);
 800692c:	6e65      	ldr	r5, [r4, #100]	; 0x64
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800692e:	f000 fc7b 	bl	8007228 <serial_write>
 8006932:	201f      	movs	r0, #31
 8006934:	f7fe f960 	bl	8004bf8 <print_uint8_base10>
 8006938:	203d      	movs	r0, #61	; 0x3d
 800693a:	f000 fc75 	bl	8007228 <serial_write>
  printFloat(val, n_decimal);
 800693e:	2100      	movs	r1, #0
 8006940:	4628      	mov	r0, r5
 8006942:	f7fe f99b 	bl	8004c7c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006946:	4828      	ldr	r0, [pc, #160]	; (80069e8 <report_grbl_settings+0x384>)
 8006948:	f7fe f94a 	bl	8004be0 <printString>
  #ifdef VARIABLE_SPINDLE
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 800694c:	f894 4068 	ldrb.w	r4, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006950:	2024      	movs	r0, #36	; 0x24
 8006952:	f000 fc69 	bl	8007228 <serial_write>
 8006956:	2020      	movs	r0, #32
 8006958:	f7fe f94e 	bl	8004bf8 <print_uint8_base10>
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 800695c:	f3c4 0440 	ubfx	r4, r4, #1, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006960:	203d      	movs	r0, #61	; 0x3d
 8006962:	f000 fc61 	bl	8007228 <serial_write>
  print_uint8_base10(val);
 8006966:	4620      	mov	r0, r4
 8006968:	f7fe f946 	bl	8004bf8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800696c:	481e      	ldr	r0, [pc, #120]	; (80069e8 <report_grbl_settings+0x384>)
 800696e:	f7fe f937 	bl	8004be0 <printString>
 8006972:	f04f 0800 	mov.w	r8, #0
  #else
    report_util_uint8_setting(32,0);
  #endif
  // Print axis settings
  uint8_t idx, set_idx;
  uint8_t val = AXIS_SETTINGS_START_VAL;
 8006976:	2664      	movs	r6, #100	; 0x64
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006978:	4f1b      	ldr	r7, [pc, #108]	; (80069e8 <report_grbl_settings+0x384>)
 800697a:	fa5f fb88 	uxtb.w	fp, r8
 800697e:	f8df a064 	ldr.w	sl, [pc, #100]	; 80069e4 <report_grbl_settings+0x380>
void report_grbl_settings() {
 8006982:	4635      	mov	r5, r6
 8006984:	2401      	movs	r4, #1
 8006986:	e021      	b.n	80069cc <report_grbl_settings+0x368>
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
    for (idx=0; idx<N_AXIS; idx++) {
      switch (set_idx) {
 8006988:	f1bb 0f03 	cmp.w	fp, #3
 800698c:	d030      	beq.n	80069f0 <report_grbl_settings+0x38c>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800698e:	2024      	movs	r0, #36	; 0x24
      switch (set_idx) {
 8006990:	f1bb 0f01 	cmp.w	fp, #1
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006994:	bf14      	ite	ne
 8006996:	f8da 9000 	ldrne.w	r9, [sl]
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 800699a:	f8da 9014 	ldreq.w	r9, [sl, #20]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800699e:	f000 fc43 	bl	8007228 <serial_write>
 80069a2:	4628      	mov	r0, r5
 80069a4:	f7fe f928 	bl	8004bf8 <print_uint8_base10>
 80069a8:	203d      	movs	r0, #61	; 0x3d
 80069aa:	f000 fc3d 	bl	8007228 <serial_write>
  printFloat(val, n_decimal);
 80069ae:	4648      	mov	r0, r9
 80069b0:	2103      	movs	r1, #3
 80069b2:	f7fe f963 	bl	8004c7c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069b6:	4638      	mov	r0, r7
 80069b8:	f7fe f912 	bl	8004be0 <printString>
    for (idx=0; idx<N_AXIS; idx++) {
 80069bc:	2c05      	cmp	r4, #5
 80069be:	d02f      	beq.n	8006a20 <report_grbl_settings+0x3bc>
 80069c0:	3401      	adds	r4, #1
 80069c2:	1c68      	adds	r0, r5, #1
 80069c4:	b2e4      	uxtb	r4, r4
 80069c6:	b2c5      	uxtb	r5, r0
 80069c8:	f10a 0a04 	add.w	sl, sl, #4
      switch (set_idx) {
 80069cc:	f1bb 0f02 	cmp.w	fp, #2
 80069d0:	d1da      	bne.n	8006988 <report_grbl_settings+0x324>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 80069d2:	4906      	ldr	r1, [pc, #24]	; (80069ec <report_grbl_settings+0x388>)
 80069d4:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 80069d8:	f7fa f96a 	bl	8000cb0 <__aeabi_fmul>
 80069dc:	4681      	mov	r9, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069de:	2024      	movs	r0, #36	; 0x24
 80069e0:	e7dd      	b.n	800699e <report_grbl_settings+0x33a>
 80069e2:	bf00      	nop
 80069e4:	20001d30 	.word	0x20001d30
 80069e8:	0800c0b4 	.word	0x0800c0b4
 80069ec:	3991a2b4 	.word	0x3991a2b4
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 80069f0:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069f4:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 80069f6:	f103 4900 	add.w	r9, r3, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069fa:	f000 fc15 	bl	8007228 <serial_write>
 80069fe:	4628      	mov	r0, r5
 8006a00:	f7fe f8fa 	bl	8004bf8 <print_uint8_base10>
 8006a04:	203d      	movs	r0, #61	; 0x3d
 8006a06:	f000 fc0f 	bl	8007228 <serial_write>
  printFloat(val, n_decimal);
 8006a0a:	4659      	mov	r1, fp
 8006a0c:	4648      	mov	r0, r9
 8006a0e:	f7fe f935 	bl	8004c7c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a12:	4638      	mov	r0, r7
 8006a14:	f7fe f8e4 	bl	8004be0 <printString>
    for (idx=0; idx<N_AXIS; idx++) {
 8006a18:	2c05      	cmp	r4, #5
 8006a1a:	d1d1      	bne.n	80069c0 <report_grbl_settings+0x35c>
 8006a1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
    }
    val += AXIS_SETTINGS_INCREMENT;
 8006a20:	360a      	adds	r6, #10
 8006a22:	b2f6      	uxtb	r6, r6
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 8006a24:	2e8c      	cmp	r6, #140	; 0x8c
 8006a26:	f108 0801 	add.w	r8, r8, #1
 8006a2a:	d1a6      	bne.n	800697a <report_grbl_settings+0x316>
 8006a2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a30 <report_probe_parameters>:

// Prints current probe parameters. Upon a probe command, these parameters are updated upon a
// successful probe or upon a failed probe with the G38.3 without errors command (if supported).
// These values are retained until Grbl is power-cycled, whereby they will be re-zeroed.
void report_probe_parameters()
{
 8006a30:	b530      	push	{r4, r5, lr}
  // Report in terms of machine position.
  printPgmString(PSTR("[PRB:"));
 8006a32:	4812      	ldr	r0, [pc, #72]	; (8006a7c <report_probe_parameters+0x4c>)
{
 8006a34:	b087      	sub	sp, #28
  printPgmString(PSTR("[PRB:"));
 8006a36:	f7fe f8d3 	bl	8004be0 <printString>
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8006a3a:	a801      	add	r0, sp, #4
 8006a3c:	4910      	ldr	r1, [pc, #64]	; (8006a80 <report_probe_parameters+0x50>)
 8006a3e:	f002 fe23 	bl	8009688 <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 8006a42:	9801      	ldr	r0, [sp, #4]
 8006a44:	f7fe f98c 	bl	8004d60 <printFloat_CoordValue>
 8006a48:	ac01      	add	r4, sp, #4
 8006a4a:	ad05      	add	r5, sp, #20
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006a4c:	202c      	movs	r0, #44	; 0x2c
 8006a4e:	f000 fbeb 	bl	8007228 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006a52:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8006a56:	f7fe f983 	bl	8004d60 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006a5a:	42ac      	cmp	r4, r5
 8006a5c:	d1f6      	bne.n	8006a4c <report_probe_parameters+0x1c>
  report_util_axis_values(print_position);
  serial_write(':');
 8006a5e:	203a      	movs	r0, #58	; 0x3a
 8006a60:	f000 fbe2 	bl	8007228 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8006a64:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <report_probe_parameters+0x54>)
 8006a66:	7958      	ldrb	r0, [r3, #5]
 8006a68:	f7fe f8c6 	bl	8004bf8 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006a6c:	205d      	movs	r0, #93	; 0x5d
 8006a6e:	f000 fbdb 	bl	8007228 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a72:	4805      	ldr	r0, [pc, #20]	; (8006a88 <report_probe_parameters+0x58>)
 8006a74:	f7fe f8b4 	bl	8004be0 <printString>
  report_util_feedback_line_feed();
}
 8006a78:	b007      	add	sp, #28
 8006a7a:	bd30      	pop	{r4, r5, pc}
 8006a7c:	0800c020 	.word	0x0800c020
 8006a80:	20001b84 	.word	0x20001b84
 8006a84:	20001b6c 	.word	0x20001b6c
 8006a88:	0800c0b4 	.word	0x0800c0b4

08006a8c <report_ngc_parameters>:


// Prints Grbl NGC parameters (coordinate offsets, probing)
void report_ngc_parameters()
{
 8006a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a90:	2500      	movs	r5, #0
 8006a92:	b08b      	sub	sp, #44	; 0x2c
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
    if (!(settings_read_coord_data(coord_select,coord_data))) {
      report_status_message(STATUS_SETTING_READ_FAIL);
      return;
    }
    printPgmString(PSTR("[G"));
 8006a94:	4f48      	ldr	r7, [pc, #288]	; (8006bb8 <report_ngc_parameters+0x12c>)
    switch (coord_select) {
      case 6: printPgmString(PSTR("28")); break;
 8006a96:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8006bdc <report_ngc_parameters+0x150>
      case 7: printPgmString(PSTR("30")); break;
 8006a9a:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8006be0 <report_ngc_parameters+0x154>
 8006a9e:	e01e      	b.n	8006ade <report_ngc_parameters+0x52>
    switch (coord_select) {
 8006aa0:	2c07      	cmp	r4, #7
 8006aa2:	d12c      	bne.n	8006afe <report_ngc_parameters+0x72>
      case 7: printPgmString(PSTR("30")); break;
 8006aa4:	4640      	mov	r0, r8
 8006aa6:	f7fe f89b 	bl	8004be0 <printString>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
    }
    serial_write(':');
 8006aaa:	203a      	movs	r0, #58	; 0x3a
 8006aac:	f000 fbbc 	bl	8007228 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006ab0:	9800      	ldr	r0, [sp, #0]
 8006ab2:	f7fe f955 	bl	8004d60 <printFloat_CoordValue>
 8006ab6:	466c      	mov	r4, sp
 8006ab8:	ae04      	add	r6, sp, #16
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006aba:	202c      	movs	r0, #44	; 0x2c
 8006abc:	f000 fbb4 	bl	8007228 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006ac0:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8006ac4:	f7fe f94c 	bl	8004d60 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006ac8:	42a6      	cmp	r6, r4
 8006aca:	d1f6      	bne.n	8006aba <report_ngc_parameters+0x2e>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006acc:	205d      	movs	r0, #93	; 0x5d
 8006ace:	f000 fbab 	bl	8007228 <serial_write>
 8006ad2:	3501      	adds	r5, #1
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006ad4:	4839      	ldr	r0, [pc, #228]	; (8006bbc <report_ngc_parameters+0x130>)
 8006ad6:	f7fe f883 	bl	8004be0 <printString>
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
 8006ada:	2d08      	cmp	r5, #8
 8006adc:	d015      	beq.n	8006b0a <report_ngc_parameters+0x7e>
 8006ade:	b2ec      	uxtb	r4, r5
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	4669      	mov	r1, sp
 8006ae4:	f000 fdac 	bl	8007640 <settings_read_coord_data>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d059      	beq.n	8006ba0 <report_ngc_parameters+0x114>
    printPgmString(PSTR("[G"));
 8006aec:	4638      	mov	r0, r7
 8006aee:	f7fe f877 	bl	8004be0 <printString>
    switch (coord_select) {
 8006af2:	2c06      	cmp	r4, #6
 8006af4:	d1d4      	bne.n	8006aa0 <report_ngc_parameters+0x14>
      case 6: printPgmString(PSTR("28")); break;
 8006af6:	4648      	mov	r0, r9
 8006af8:	f7fe f872 	bl	8004be0 <printString>
 8006afc:	e7d5      	b.n	8006aaa <report_ngc_parameters+0x1e>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
 8006afe:	f104 0036 	add.w	r0, r4, #54	; 0x36
 8006b02:	b2c0      	uxtb	r0, r0
 8006b04:	f7fe f878 	bl	8004bf8 <print_uint8_base10>
 8006b08:	e7cf      	b.n	8006aaa <report_ngc_parameters+0x1e>
    printFloat_CoordValue(axis_value[idx]);
 8006b0a:	4d2d      	ldr	r5, [pc, #180]	; (8006bc0 <report_ngc_parameters+0x134>)
    report_util_axis_values(coord_data);
    report_util_feedback_line_feed();
  }
  printPgmString(PSTR("[G92:")); // Print G92,G92.1 which are not persistent in memory
 8006b0c:	482d      	ldr	r0, [pc, #180]	; (8006bc4 <report_ngc_parameters+0x138>)
 8006b0e:	f7fe f867 	bl	8004be0 <printString>
    printFloat_CoordValue(axis_value[idx]);
 8006b12:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8006b14:	f7fe f924 	bl	8004d60 <printFloat_CoordValue>
 8006b18:	f105 0448 	add.w	r4, r5, #72	; 0x48
 8006b1c:	f105 0658 	add.w	r6, r5, #88	; 0x58
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006b20:	202c      	movs	r0, #44	; 0x2c
 8006b22:	f000 fb81 	bl	8007228 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006b26:	f854 0b04 	ldr.w	r0, [r4], #4
 8006b2a:	f7fe f919 	bl	8004d60 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006b2e:	42b4      	cmp	r4, r6
 8006b30:	d1f6      	bne.n	8006b20 <report_ngc_parameters+0x94>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006b32:	205d      	movs	r0, #93	; 0x5d
 8006b34:	f000 fb78 	bl	8007228 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b38:	4820      	ldr	r0, [pc, #128]	; (8006bbc <report_ngc_parameters+0x130>)
 8006b3a:	f7fe f851 	bl	8004be0 <printString>
  report_util_axis_values(gc_state.coord_offset);
  report_util_feedback_line_feed();
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
 8006b3e:	4822      	ldr	r0, [pc, #136]	; (8006bc8 <report_ngc_parameters+0x13c>)
 8006b40:	f7fe f84e 	bl	8004be0 <printString>
  printFloat_CoordValue(gc_state.tool_length_offset);
 8006b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b46:	f7fe f90b 	bl	8004d60 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006b4a:	205d      	movs	r0, #93	; 0x5d
 8006b4c:	f000 fb6c 	bl	8007228 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b50:	481a      	ldr	r0, [pc, #104]	; (8006bbc <report_ngc_parameters+0x130>)
 8006b52:	f7fe f845 	bl	8004be0 <printString>
  printPgmString(PSTR("[PRB:"));
 8006b56:	481d      	ldr	r0, [pc, #116]	; (8006bcc <report_ngc_parameters+0x140>)
 8006b58:	f7fe f842 	bl	8004be0 <printString>
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8006b5c:	a805      	add	r0, sp, #20
 8006b5e:	491c      	ldr	r1, [pc, #112]	; (8006bd0 <report_ngc_parameters+0x144>)
 8006b60:	f002 fd92 	bl	8009688 <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 8006b64:	9805      	ldr	r0, [sp, #20]
 8006b66:	f7fe f8fb 	bl	8004d60 <printFloat_CoordValue>
 8006b6a:	ac05      	add	r4, sp, #20
 8006b6c:	ad09      	add	r5, sp, #36	; 0x24
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006b6e:	202c      	movs	r0, #44	; 0x2c
 8006b70:	f000 fb5a 	bl	8007228 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006b74:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8006b78:	f7fe f8f2 	bl	8004d60 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006b7c:	42ac      	cmp	r4, r5
 8006b7e:	d1f6      	bne.n	8006b6e <report_ngc_parameters+0xe2>
  serial_write(':');
 8006b80:	203a      	movs	r0, #58	; 0x3a
 8006b82:	f000 fb51 	bl	8007228 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8006b86:	4b13      	ldr	r3, [pc, #76]	; (8006bd4 <report_ngc_parameters+0x148>)
 8006b88:	7958      	ldrb	r0, [r3, #5]
 8006b8a:	f7fe f835 	bl	8004bf8 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006b8e:	205d      	movs	r0, #93	; 0x5d
 8006b90:	f000 fb4a 	bl	8007228 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b94:	4809      	ldr	r0, [pc, #36]	; (8006bbc <report_ngc_parameters+0x130>)
 8006b96:	f7fe f823 	bl	8004be0 <printString>
  report_util_feedback_line_feed();
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
}
 8006b9a:	b00b      	add	sp, #44	; 0x2c
 8006b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      printPgmString(PSTR("error:"));
 8006ba0:	480d      	ldr	r0, [pc, #52]	; (8006bd8 <report_ngc_parameters+0x14c>)
 8006ba2:	f7fe f81d 	bl	8004be0 <printString>
      print_uint8_base10(status_code);
 8006ba6:	2007      	movs	r0, #7
 8006ba8:	f7fe f826 	bl	8004bf8 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006bac:	4803      	ldr	r0, [pc, #12]	; (8006bbc <report_ngc_parameters+0x130>)
 8006bae:	f7fe f817 	bl	8004be0 <printString>
}
 8006bb2:	b00b      	add	sp, #44	; 0x2c
 8006bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bb8:	0800c004 	.word	0x0800c004
 8006bbc:	0800c0b4 	.word	0x0800c0b4
 8006bc0:	20001abc 	.word	0x20001abc
 8006bc4:	0800c010 	.word	0x0800c010
 8006bc8:	0800c018 	.word	0x0800c018
 8006bcc:	0800c020 	.word	0x0800c020
 8006bd0:	20001b84 	.word	0x20001b84
 8006bd4:	20001b6c 	.word	0x20001b6c
 8006bd8:	0800c0b8 	.word	0x0800c0b8
 8006bdc:	0800c008 	.word	0x0800c008
 8006be0:	0800c00c 	.word	0x0800c00c

08006be4 <report_gcode_modes>:


// Print current gcode parser mode state
void report_gcode_modes()
{
 8006be4:	b510      	push	{r4, lr}
  printPgmString(PSTR("[GC:G"));
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8006be6:	4c47      	ldr	r4, [pc, #284]	; (8006d04 <report_gcode_modes+0x120>)
  printPgmString(PSTR("[GC:G"));
 8006be8:	4847      	ldr	r0, [pc, #284]	; (8006d08 <report_gcode_modes+0x124>)
 8006bea:	f7fd fff9 	bl	8004be0 <printString>
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8006bee:	7820      	ldrb	r0, [r4, #0]
 8006bf0:	288b      	cmp	r0, #139	; 0x8b
 8006bf2:	d963      	bls.n	8006cbc <report_gcode_modes+0xd8>
    printPgmString(PSTR("38."));
 8006bf4:	4845      	ldr	r0, [pc, #276]	; (8006d0c <report_gcode_modes+0x128>)
 8006bf6:	f7fd fff3 	bl	8004be0 <printString>
    print_uint8_base10(gc_state.modal.motion - (MOTION_MODE_PROBE_TOWARD-2));
 8006bfa:	7820      	ldrb	r0, [r4, #0]
 8006bfc:	3076      	adds	r0, #118	; 0x76
 8006bfe:	b2c0      	uxtb	r0, r0
 8006c00:	f7fd fffa 	bl	8004bf8 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006c04:	4842      	ldr	r0, [pc, #264]	; (8006d10 <report_gcode_modes+0x12c>)
 8006c06:	f7fd ffeb 	bl	8004be0 <printString>
  } else {
    print_uint8_base10(gc_state.modal.motion);
  }

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.coord_select+54);
 8006c0a:	79a0      	ldrb	r0, [r4, #6]
 8006c0c:	3036      	adds	r0, #54	; 0x36
 8006c0e:	b2c0      	uxtb	r0, r0
 8006c10:	f7fd fff2 	bl	8004bf8 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006c14:	483e      	ldr	r0, [pc, #248]	; (8006d10 <report_gcode_modes+0x12c>)
 8006c16:	f7fd ffe3 	bl	8004be0 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.plane_select+17);
 8006c1a:	7920      	ldrb	r0, [r4, #4]
 8006c1c:	3011      	adds	r0, #17
 8006c1e:	b2c0      	uxtb	r0, r0
 8006c20:	f7fd ffea 	bl	8004bf8 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006c24:	483a      	ldr	r0, [pc, #232]	; (8006d10 <report_gcode_modes+0x12c>)
 8006c26:	f7fd ffdb 	bl	8004be0 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(21-gc_state.modal.units);
 8006c2a:	78a0      	ldrb	r0, [r4, #2]
 8006c2c:	f1c0 0015 	rsb	r0, r0, #21
 8006c30:	b2c0      	uxtb	r0, r0
 8006c32:	f7fd ffe1 	bl	8004bf8 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006c36:	4836      	ldr	r0, [pc, #216]	; (8006d10 <report_gcode_modes+0x12c>)
 8006c38:	f7fd ffd2 	bl	8004be0 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.distance+90);
 8006c3c:	78e0      	ldrb	r0, [r4, #3]
 8006c3e:	305a      	adds	r0, #90	; 0x5a
 8006c40:	b2c0      	uxtb	r0, r0
 8006c42:	f7fd ffd9 	bl	8004bf8 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006c46:	4832      	ldr	r0, [pc, #200]	; (8006d10 <report_gcode_modes+0x12c>)
 8006c48:	f7fd ffca 	bl	8004be0 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(94-gc_state.modal.feed_rate);
 8006c4c:	7860      	ldrb	r0, [r4, #1]
 8006c4e:	f1c0 005e 	rsb	r0, r0, #94	; 0x5e
 8006c52:	b2c0      	uxtb	r0, r0
 8006c54:	f7fd ffd0 	bl	8004bf8 <print_uint8_base10>

  if (gc_state.modal.program_flow) {
 8006c58:	79e3      	ldrb	r3, [r4, #7]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d139      	bne.n	8006cd2 <report_gcode_modes+0xee>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006c5e:	482d      	ldr	r0, [pc, #180]	; (8006d14 <report_gcode_modes+0x130>)
 8006c60:	f7fd ffbe 	bl	8004be0 <printString>
        break;
    }
  }

  report_util_gcode_modes_M();
  switch (gc_state.modal.spindle) {
 8006c64:	7a63      	ldrb	r3, [r4, #9]
 8006c66:	2b10      	cmp	r3, #16
 8006c68:	d044      	beq.n	8006cf4 <report_gcode_modes+0x110>
 8006c6a:	2b20      	cmp	r3, #32
 8006c6c:	d03e      	beq.n	8006cec <report_gcode_modes+0x108>
 8006c6e:	b343      	cbz	r3, 8006cc2 <report_gcode_modes+0xde>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006c70:	4828      	ldr	r0, [pc, #160]	; (8006d14 <report_gcode_modes+0x130>)
 8006c72:	f7fd ffb5 	bl	8004be0 <printString>
 8006c76:	4827      	ldr	r0, [pc, #156]	; (8006d14 <report_gcode_modes+0x130>)
 8006c78:	f7fd ffb2 	bl	8004be0 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
    } else { report_util_gcode_modes_M(); serial_write('9'); }
  #else
    report_util_gcode_modes_M();
    if (gc_state.modal.coolant) { serial_write('8'); }
 8006c7c:	7a23      	ldrb	r3, [r4, #8]
 8006c7e:	bb23      	cbnz	r3, 8006cca <report_gcode_modes+0xe6>
    else { serial_write('9'); }
 8006c80:	2039      	movs	r0, #57	; 0x39
 8006c82:	f000 fad1 	bl	8007228 <serial_write>
			report_util_gcode_modes_M();
			print_uint8_base10(56);
		}
	#endif

  printPgmString(PSTR(" T"));
 8006c86:	4824      	ldr	r0, [pc, #144]	; (8006d18 <report_gcode_modes+0x134>)
 8006c88:	f7fd ffaa 	bl	8004be0 <printString>
  print_uint8_base10(gc_state.tool);
 8006c8c:	7d20      	ldrb	r0, [r4, #20]
 8006c8e:	f7fd ffb3 	bl	8004bf8 <print_uint8_base10>

  printPgmString(PSTR(" F"));
 8006c92:	4822      	ldr	r0, [pc, #136]	; (8006d1c <report_gcode_modes+0x138>)
 8006c94:	f7fd ffa4 	bl	8004be0 <printString>
  printFloat_RateValue(gc_state.feed_rate);
 8006c98:	6920      	ldr	r0, [r4, #16]
 8006c9a:	f7fe f949 	bl	8004f30 <printFloat_RateValue>

  #ifdef VARIABLE_SPINDLE
    printPgmString(PSTR(" S"));
 8006c9e:	4820      	ldr	r0, [pc, #128]	; (8006d20 <report_gcode_modes+0x13c>)
 8006ca0:	f7fd ff9e 	bl	8004be0 <printString>
    printFloat(gc_state.spindle_speed,N_DECIMAL_RPMVALUE);
 8006ca4:	68e0      	ldr	r0, [r4, #12]
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	f7fd ffe8 	bl	8004c7c <printFloat>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006cac:	205d      	movs	r0, #93	; 0x5d
 8006cae:	f000 fabb 	bl	8007228 <serial_write>
  #endif

  report_util_feedback_line_feed();
}
 8006cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006cb6:	481b      	ldr	r0, [pc, #108]	; (8006d24 <report_gcode_modes+0x140>)
 8006cb8:	f7fd bf92 	b.w	8004be0 <printString>
    print_uint8_base10(gc_state.modal.motion);
 8006cbc:	f7fd ff9c 	bl	8004bf8 <print_uint8_base10>
 8006cc0:	e7a0      	b.n	8006c04 <report_gcode_modes+0x20>
    case SPINDLE_DISABLE : serial_write('5'); break;
 8006cc2:	2035      	movs	r0, #53	; 0x35
 8006cc4:	f000 fab0 	bl	8007228 <serial_write>
 8006cc8:	e7d2      	b.n	8006c70 <report_gcode_modes+0x8c>
    if (gc_state.modal.coolant) { serial_write('8'); }
 8006cca:	2038      	movs	r0, #56	; 0x38
 8006ccc:	f000 faac 	bl	8007228 <serial_write>
 8006cd0:	e7d9      	b.n	8006c86 <report_gcode_modes+0xa2>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006cd2:	4810      	ldr	r0, [pc, #64]	; (8006d14 <report_gcode_modes+0x130>)
 8006cd4:	f7fd ff84 	bl	8004be0 <printString>
    switch (gc_state.modal.program_flow) {
 8006cd8:	79e0      	ldrb	r0, [r4, #7]
 8006cda:	2803      	cmp	r0, #3
 8006cdc:	d00e      	beq.n	8006cfc <report_gcode_modes+0x118>
 8006cde:	281e      	cmp	r0, #30
 8006ce0:	d001      	beq.n	8006ce6 <report_gcode_modes+0x102>
 8006ce2:	2802      	cmp	r0, #2
 8006ce4:	d1bb      	bne.n	8006c5e <report_gcode_modes+0x7a>
        print_uint8_base10(gc_state.modal.program_flow);
 8006ce6:	f7fd ff87 	bl	8004bf8 <print_uint8_base10>
        break;
 8006cea:	e7b8      	b.n	8006c5e <report_gcode_modes+0x7a>
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
 8006cec:	2034      	movs	r0, #52	; 0x34
 8006cee:	f000 fa9b 	bl	8007228 <serial_write>
 8006cf2:	e7bd      	b.n	8006c70 <report_gcode_modes+0x8c>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
 8006cf4:	2033      	movs	r0, #51	; 0x33
 8006cf6:	f000 fa97 	bl	8007228 <serial_write>
 8006cfa:	e7b9      	b.n	8006c70 <report_gcode_modes+0x8c>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
 8006cfc:	2030      	movs	r0, #48	; 0x30
 8006cfe:	f000 fa93 	bl	8007228 <serial_write>
 8006d02:	e7ac      	b.n	8006c5e <report_gcode_modes+0x7a>
 8006d04:	20001abc 	.word	0x20001abc
 8006d08:	0800bf78 	.word	0x0800bf78
 8006d0c:	0800bf80 	.word	0x0800bf80
 8006d10:	0800bf84 	.word	0x0800bf84
 8006d14:	0800bf88 	.word	0x0800bf88
 8006d18:	0800bf8c 	.word	0x0800bf8c
 8006d1c:	0800bf90 	.word	0x0800bf90
 8006d20:	0800bf94 	.word	0x0800bf94
 8006d24:	0800c0b4 	.word	0x0800c0b4

08006d28 <report_startup_line>:

// Prints specified startup line
void report_startup_line(uint8_t n, char *line)
{
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	460c      	mov	r4, r1
  printPgmString(PSTR("$N"));
 8006d2e:	4808      	ldr	r0, [pc, #32]	; (8006d50 <report_startup_line+0x28>)
 8006d30:	f7fd ff56 	bl	8004be0 <printString>
  print_uint8_base10(n);
 8006d34:	4628      	mov	r0, r5
 8006d36:	f7fd ff5f 	bl	8004bf8 <print_uint8_base10>
  serial_write('=');
 8006d3a:	203d      	movs	r0, #61	; 0x3d
 8006d3c:	f000 fa74 	bl	8007228 <serial_write>
  printString(line);
 8006d40:	4620      	mov	r0, r4
 8006d42:	f7fd ff4d 	bl	8004be0 <printString>
  report_util_line_feed();
}
 8006d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006d4a:	4802      	ldr	r0, [pc, #8]	; (8006d54 <report_startup_line+0x2c>)
 8006d4c:	f7fd bf48 	b.w	8004be0 <printString>
 8006d50:	0800c0a4 	.word	0x0800c0a4
 8006d54:	0800c0b4 	.word	0x0800c0b4

08006d58 <report_execute_startup_message>:

void report_execute_startup_message(char *line, uint8_t status_code)
{
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4605      	mov	r5, r0
 8006d5c:	460c      	mov	r4, r1
  serial_write('>');
 8006d5e:	203e      	movs	r0, #62	; 0x3e
 8006d60:	f000 fa62 	bl	8007228 <serial_write>
  printString(line);
 8006d64:	4628      	mov	r0, r5
 8006d66:	f7fd ff3b 	bl	8004be0 <printString>
  serial_write(':');
 8006d6a:	203a      	movs	r0, #58	; 0x3a
 8006d6c:	f000 fa5c 	bl	8007228 <serial_write>
  switch(status_code) {
 8006d70:	b18c      	cbz	r4, 8006d96 <report_execute_startup_message+0x3e>
 8006d72:	2c12      	cmp	r4, #18
 8006d74:	d104      	bne.n	8006d80 <report_execute_startup_message+0x28>
  report_status_message(status_code);
}
 8006d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      printPgmString(PSTR("done\r\n")); break;
 8006d7a:	4809      	ldr	r0, [pc, #36]	; (8006da0 <report_execute_startup_message+0x48>)
 8006d7c:	f7fd bf30 	b.w	8004be0 <printString>
      printPgmString(PSTR("error:"));
 8006d80:	4808      	ldr	r0, [pc, #32]	; (8006da4 <report_execute_startup_message+0x4c>)
 8006d82:	f7fd ff2d 	bl	8004be0 <printString>
      print_uint8_base10(status_code);
 8006d86:	4620      	mov	r0, r4
 8006d88:	f7fd ff36 	bl	8004bf8 <print_uint8_base10>
}
 8006d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006d90:	4805      	ldr	r0, [pc, #20]	; (8006da8 <report_execute_startup_message+0x50>)
 8006d92:	f7fd bf25 	b.w	8004be0 <printString>
      printPgmString(PSTR("ok\r\n")); break;
 8006d96:	4805      	ldr	r0, [pc, #20]	; (8006dac <report_execute_startup_message+0x54>)
}
 8006d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      printPgmString(PSTR("ok\r\n")); break;
 8006d9c:	f7fd bf20 	b.w	8004be0 <printString>
 8006da0:	0800c0b0 	.word	0x0800c0b0
 8006da4:	0800c0b8 	.word	0x0800c0b8
 8006da8:	0800c0b4 	.word	0x0800c0b4
 8006dac:	0800c0a8 	.word	0x0800c0a8

08006db0 <report_build_info>:

// Prints build info line
void report_build_info(char *line)
{
 8006db0:	b510      	push	{r4, lr}
 8006db2:	4604      	mov	r4, r0
  printPgmString(PSTR("[VER:" GRBL_VERSION "." GRBL_VERSION_BUILD ":"));
 8006db4:	4816      	ldr	r0, [pc, #88]	; (8006e10 <report_build_info+0x60>)
 8006db6:	f7fd ff13 	bl	8004be0 <printString>
  printString(line);
 8006dba:	4620      	mov	r0, r4
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006dbc:	4c15      	ldr	r4, [pc, #84]	; (8006e14 <report_build_info+0x64>)
  printString(line);
 8006dbe:	f7fd ff0f 	bl	8004be0 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006dc2:	205d      	movs	r0, #93	; 0x5d
 8006dc4:	f000 fa30 	bl	8007228 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f7fd ff09 	bl	8004be0 <printString>
  report_util_feedback_line_feed();
  printPgmString(PSTR("[OPT:")); // Generate compile-time build option list
 8006dce:	4812      	ldr	r0, [pc, #72]	; (8006e18 <report_build_info+0x68>)
 8006dd0:	f7fd ff06 	bl	8004be0 <printString>
  #ifdef VARIABLE_SPINDLE
    serial_write('V');
 8006dd4:	2056      	movs	r0, #86	; 0x56
 8006dd6:	f000 fa27 	bl	8007228 <serial_write>
  #endif
  #ifdef PARKING_ENABLE
    serial_write('P');
  #endif
  #ifdef HOMING_FORCE_SET_ORIGIN
    serial_write('Z');
 8006dda:	205a      	movs	r0, #90	; 0x5a
 8006ddc:	f000 fa24 	bl	8007228 <serial_write>
  #endif
  #ifdef HOMING_SINGLE_AXIS_COMMANDS
    serial_write('H');
 8006de0:	2048      	movs	r0, #72	; 0x48
 8006de2:	f000 fa21 	bl	8007228 <serial_write>
	#ifndef HOMING_INIT_LOCK
		serial_write('L');
	#endif

  // NOTE: Compiled values, like override increments/max/min values, may be added at some point later.
	serial_write(',');
 8006de6:	202c      	movs	r0, #44	; 0x2c
 8006de8:	f000 fa1e 	bl	8007228 <serial_write>
	print_uint8_base10(BLOCK_BUFFER_SIZE - 1);
 8006dec:	2047      	movs	r0, #71	; 0x47
 8006dee:	f7fd ff03 	bl	8004bf8 <print_uint8_base10>
	serial_write(',');
 8006df2:	202c      	movs	r0, #44	; 0x2c
 8006df4:	f000 fa18 	bl	8007228 <serial_write>
	print_uint8_base10(RX_BUFFER_SIZE);
 8006df8:	20fe      	movs	r0, #254	; 0xfe
 8006dfa:	f7fd fefd 	bl	8004bf8 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006dfe:	205d      	movs	r0, #93	; 0x5d
 8006e00:	f000 fa12 	bl	8007228 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006e04:	4620      	mov	r0, r4

	report_util_feedback_line_feed();
}
 8006e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006e0a:	f7fd bee9 	b.w	8004be0 <printString>
 8006e0e:	bf00      	nop
 8006e10:	0800beac 	.word	0x0800beac
 8006e14:	0800c0b4 	.word	0x0800c0b4
 8006e18:	0800bec0 	.word	0x0800bec0

08006e1c <report_realtime_status>:
 // and the actual location of the CNC machine. Users may change the following function to their
 // specific needs, but the desired real-time data report must be as short as possible. This is
 // requires as it minimizes the computational overhead and allows grbl to keep running smoothly,
 // especially during g-code programs with fast, short line segments and high frequency reports (5-20Hz).
void report_realtime_status()
{
 8006e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t idx;
  int32_t current_position[N_AXIS]; // Copy current state of the system position variable
  memcpy(current_position, sys_position, sizeof(sys_position));
 8006e1e:	4da8      	ldr	r5, [pc, #672]	; (80070c0 <report_realtime_status+0x2a4>)
{
 8006e20:	b091      	sub	sp, #68	; 0x44
  memcpy(current_position, sys_position, sizeof(sys_position));
 8006e22:	ac01      	add	r4, sp, #4
 8006e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e28:	682b      	ldr	r3, [r5, #0]
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position, current_position);
 8006e2a:	a806      	add	r0, sp, #24
  memcpy(current_position, sys_position, sizeof(sys_position));
 8006e2c:	6023      	str	r3, [r4, #0]
  system_convert_array_steps_to_mpos(print_position, current_position);
 8006e2e:	a901      	add	r1, sp, #4

  // Report current machine state and sub-states
  serial_write('<');
  switch (sys.state) {
 8006e30:	4da4      	ldr	r5, [pc, #656]	; (80070c4 <report_realtime_status+0x2a8>)
  system_convert_array_steps_to_mpos(print_position, current_position);
 8006e32:	f002 fc29 	bl	8009688 <system_convert_array_steps_to_mpos>
  serial_write('<');
 8006e36:	203c      	movs	r0, #60	; 0x3c
 8006e38:	f000 f9f6 	bl	8007228 <serial_write>
  switch (sys.state) {
 8006e3c:	782b      	ldrb	r3, [r5, #0]
 8006e3e:	2b08      	cmp	r3, #8
 8006e40:	f000 81a3 	beq.w	800718a <report_realtime_status+0x36e>
 8006e44:	d951      	bls.n	8006eea <report_realtime_status+0xce>
 8006e46:	2b20      	cmp	r3, #32
 8006e48:	f000 8193 	beq.w	8007172 <report_realtime_status+0x356>
 8006e4c:	f240 8102 	bls.w	8007054 <report_realtime_status+0x238>
 8006e50:	2b40      	cmp	r3, #64	; 0x40
 8006e52:	f000 80eb 	beq.w	800702c <report_realtime_status+0x210>
 8006e56:	2b80      	cmp	r3, #128	; 0x80
 8006e58:	d154      	bne.n	8006f04 <report_realtime_status+0xe8>
    break;
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
  }

  float wco[N_AXIS];
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8006e5a:	4f9b      	ldr	r7, [pc, #620]	; (80070c8 <report_realtime_status+0x2ac>)
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 8006e5c:	489b      	ldr	r0, [pc, #620]	; (80070cc <report_realtime_status+0x2b0>)
 8006e5e:	f7fd febf 	bl	8004be0 <printString>
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8006e62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e66:	07dc      	lsls	r4, r3, #31
 8006e68:	d451      	bmi.n	8006f0e <report_realtime_status+0xf2>
    (sys.report_wco_counter == 0)) {
    for (idx = 0; idx< N_AXIS; idx++) {
      // Apply work coordinate offsets and tool length offset to current position.
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006e6a:	4c99      	ldr	r4, [pc, #612]	; (80070d0 <report_realtime_status+0x2b4>)
 8006e6c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006e6e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006e70:	f7f9 fe16 	bl	8000aa0 <__addsf3>
 8006e74:	4603      	mov	r3, r0
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
      if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
        print_position[idx] -= wco[idx];
 8006e76:	9806      	ldr	r0, [sp, #24]
 8006e78:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006e7a:	930b      	str	r3, [sp, #44]	; 0x2c
        print_position[idx] -= wco[idx];
 8006e7c:	f7f9 fe0e 	bl	8000a9c <__aeabi_fsub>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006e80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
        print_position[idx] -= wco[idx];
 8006e82:	9006      	str	r0, [sp, #24]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006e84:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006e86:	f7f9 fe0b 	bl	8000aa0 <__addsf3>
 8006e8a:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 8006e8c:	9807      	ldr	r0, [sp, #28]
 8006e8e:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006e90:	930c      	str	r3, [sp, #48]	; 0x30
        print_position[idx] -= wco[idx];
 8006e92:	f7f9 fe03 	bl	8000a9c <__aeabi_fsub>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006e96:	6da6      	ldr	r6, [r4, #88]	; 0x58
        print_position[idx] -= wco[idx];
 8006e98:	9007      	str	r0, [sp, #28]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006e9a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006e9c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006e9e:	f7f9 fdff 	bl	8000aa0 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	f7f9 fdfc 	bl	8000aa0 <__addsf3>
 8006ea8:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 8006eaa:	9808      	ldr	r0, [sp, #32]
 8006eac:	4619      	mov	r1, r3
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006eae:	930d      	str	r3, [sp, #52]	; 0x34
        print_position[idx] -= wco[idx];
 8006eb0:	f7f9 fdf4 	bl	8000a9c <__aeabi_fsub>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006eb4:	6d21      	ldr	r1, [r4, #80]	; 0x50
        print_position[idx] -= wco[idx];
 8006eb6:	9008      	str	r0, [sp, #32]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006eb8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006eba:	f7f9 fdf1 	bl	8000aa0 <__addsf3>
 8006ebe:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 8006ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ec2:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006ec4:	930e      	str	r3, [sp, #56]	; 0x38
        print_position[idx] -= wco[idx];
 8006ec6:	f7f9 fde9 	bl	8000a9c <__aeabi_fsub>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006eca:	6d61      	ldr	r1, [r4, #84]	; 0x54
        print_position[idx] -= wco[idx];
 8006ecc:	9009      	str	r0, [sp, #36]	; 0x24
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006ece:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006ed0:	f7f9 fde6 	bl	8000aa0 <__addsf3>
 8006ed4:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 8006ed6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ed8:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006eda:	930f      	str	r3, [sp, #60]	; 0x3c
        print_position[idx] -= wco[idx];
 8006edc:	f7f9 fdde 	bl	8000a9c <__aeabi_fsub>
 8006ee0:	900a      	str	r0, [sp, #40]	; 0x28
  // Report machine position
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
    printPgmString(PSTR("|MPos:"));
  }
  else {
    printPgmString(PSTR("|WPos:"));
 8006ee2:	487c      	ldr	r0, [pc, #496]	; (80070d4 <report_realtime_status+0x2b8>)
 8006ee4:	f7fd fe7c 	bl	8004be0 <printString>
 8006ee8:	e034      	b.n	8006f54 <report_realtime_status+0x138>
  switch (sys.state) {
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	f000 8149 	beq.w	8007182 <report_realtime_status+0x366>
 8006ef0:	f0c0 8143 	bcc.w	800717a <report_realtime_status+0x35e>
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	f000 80a9 	beq.w	800704c <report_realtime_status+0x230>
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d102      	bne.n	8006f04 <report_realtime_status+0xe8>
  case STATE_HOMING: printPgmString(PSTR("Home")); break;
 8006efe:	4876      	ldr	r0, [pc, #472]	; (80070d8 <report_realtime_status+0x2bc>)
 8006f00:	f7fd fe6e 	bl	8004be0 <printString>
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8006f04:	4f70      	ldr	r7, [pc, #448]	; (80070c8 <report_realtime_status+0x2ac>)
 8006f06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f0a:	07dc      	lsls	r4, r3, #31
 8006f0c:	d5ad      	bpl.n	8006e6a <report_realtime_status+0x4e>
 8006f0e:	7b6b      	ldrb	r3, [r5, #13]
 8006f10:	b9eb      	cbnz	r3, 8006f4e <report_realtime_status+0x132>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006f12:	4c6f      	ldr	r4, [pc, #444]	; (80070d0 <report_realtime_status+0x2b4>)
 8006f14:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006f16:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006f18:	f7f9 fdc2 	bl	8000aa0 <__addsf3>
 8006f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f1e:	900b      	str	r0, [sp, #44]	; 0x2c
 8006f20:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006f22:	f7f9 fdbd 	bl	8000aa0 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006f26:	6da6      	ldr	r6, [r4, #88]	; 0x58
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006f28:	900c      	str	r0, [sp, #48]	; 0x30
 8006f2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f2c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006f2e:	f7f9 fdb7 	bl	8000aa0 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006f32:	4631      	mov	r1, r6
 8006f34:	f7f9 fdb4 	bl	8000aa0 <__addsf3>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006f38:	6be1      	ldr	r1, [r4, #60]	; 0x3c
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8006f3a:	900d      	str	r0, [sp, #52]	; 0x34
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8006f3c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006f3e:	f7f9 fdaf 	bl	8000aa0 <__addsf3>
 8006f42:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006f44:	900e      	str	r0, [sp, #56]	; 0x38
 8006f46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f48:	f7f9 fdaa 	bl	8000aa0 <__addsf3>
 8006f4c:	900f      	str	r0, [sp, #60]	; 0x3c
    printPgmString(PSTR("|MPos:"));
 8006f4e:	4863      	ldr	r0, [pc, #396]	; (80070dc <report_realtime_status+0x2c0>)
 8006f50:	f7fd fe46 	bl	8004be0 <printString>
    printFloat_CoordValue(axis_value[idx]);
 8006f54:	9806      	ldr	r0, [sp, #24]
 8006f56:	f7fd ff03 	bl	8004d60 <printFloat_CoordValue>
 8006f5a:	ac06      	add	r4, sp, #24
 8006f5c:	ae0a      	add	r6, sp, #40	; 0x28
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006f5e:	202c      	movs	r0, #44	; 0x2c
 8006f60:	f000 f962 	bl	8007228 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006f64:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8006f68:	f7fd fefa 	bl	8004d60 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006f6c:	42a6      	cmp	r6, r4
 8006f6e:	d1f6      	bne.n	8006f5e <report_realtime_status+0x142>
  }
  report_util_axis_values(print_position);

  // Returns planner and serial read buffer states.
#ifdef REPORT_FIELD_BUFFER_STATE
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_BUFFER_STATE)) {
 8006f70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f74:	0798      	lsls	r0, r3, #30
 8006f76:	f100 80e4 	bmi.w	8007142 <report_realtime_status+0x326>
#endif

  // Report realtime feed speed
#ifdef REPORT_FIELD_CURRENT_FEED_SPEED
#ifdef VARIABLE_SPINDLE
  printPgmString(PSTR("|FS:"));
 8006f7a:	4859      	ldr	r0, [pc, #356]	; (80070e0 <report_realtime_status+0x2c4>)
 8006f7c:	f7fd fe30 	bl	8004be0 <printString>
  printFloat_RateValue(st_get_realtime_rate());
 8006f80:	f002 f904 	bl	800918c <st_get_realtime_rate>
 8006f84:	f7fd ffd4 	bl	8004f30 <printFloat_RateValue>
  serial_write(',');
 8006f88:	202c      	movs	r0, #44	; 0x2c
 8006f8a:	f000 f94d 	bl	8007228 <serial_write>
  printFloat(sys.spindle_speed, N_DECIMAL_RPMVALUE);
 8006f8e:	2100      	movs	r1, #0
 8006f90:	6928      	ldr	r0, [r5, #16]
 8006f92:	f7fd fe73 	bl	8004c7c <printFloat>
  printFloat_RateValue(st_get_realtime_rate());
#endif
#endif

#ifdef REPORT_FIELD_PIN_STATE
  uint8_t lim_pin_state = limits_get_state();
 8006f96:	f7fc f87f 	bl	8003098 <limits_get_state>
 8006f9a:	4604      	mov	r4, r0
  uint8_t ctrl_pin_state = system_control_get_state();
 8006f9c:	f002 f948 	bl	8009230 <system_control_get_state>
 8006fa0:	4606      	mov	r6, r0
  uint8_t prb_pin_state = probe_get_state();
 8006fa2:	f7fe f8a3 	bl	80050ec <probe_get_state>
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 8006fa6:	ea44 0306 	orr.w	r3, r4, r6
 8006faa:	4303      	orrs	r3, r0
 8006fac:	f013 0fff 	tst.w	r3, #255	; 0xff
  uint8_t prb_pin_state = probe_get_state();
 8006fb0:	4607      	mov	r7, r0
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 8006fb2:	f040 80a5 	bne.w	8007100 <report_realtime_status+0x2e4>
    }
  }
#endif

#ifdef REPORT_FIELD_WORK_COORD_OFFSET
  if (sys.report_wco_counter > 0) { sys.report_wco_counter--; }
 8006fb6:	7b6b      	ldrb	r3, [r5, #13]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d05d      	beq.n	8007078 <report_realtime_status+0x25c>
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	736b      	strb	r3, [r5, #13]
    report_util_axis_values(wco);
  }
#endif

  #ifdef REPORT_FIELD_OVERRIDES
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 8006fc0:	7b2b      	ldrb	r3, [r5, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d178      	bne.n	80070b8 <report_realtime_status+0x29c>
    else {
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8006fc6:	782b      	ldrb	r3, [r5, #0]
        sys.report_ovr_counter = (REPORT_OVR_REFRESH_BUSY_COUNT - 1); // Reset counter for slow refresh
      }
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
      printPgmString(PSTR("|Ov:"));
 8006fc8:	4846      	ldr	r0, [pc, #280]	; (80070e4 <report_realtime_status+0x2c8>)
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
 8006fca:	f013 0f7c 	tst.w	r3, #124	; 0x7c
 8006fce:	bf14      	ite	ne
 8006fd0:	2313      	movne	r3, #19
 8006fd2:	2309      	moveq	r3, #9
 8006fd4:	732b      	strb	r3, [r5, #12]
      printPgmString(PSTR("|Ov:"));
 8006fd6:	f7fd fe03 	bl	8004be0 <printString>
      print_uint8_base10(sys.f_override);
 8006fda:	7a28      	ldrb	r0, [r5, #8]
 8006fdc:	f7fd fe0c 	bl	8004bf8 <print_uint8_base10>
      serial_write(',');
 8006fe0:	202c      	movs	r0, #44	; 0x2c
 8006fe2:	f000 f921 	bl	8007228 <serial_write>
      print_uint8_base10(sys.r_override);
 8006fe6:	7a68      	ldrb	r0, [r5, #9]
 8006fe8:	f7fd fe06 	bl	8004bf8 <print_uint8_base10>
      serial_write(',');
 8006fec:	202c      	movs	r0, #44	; 0x2c
 8006fee:	f000 f91b 	bl	8007228 <serial_write>
      print_uint8_base10(sys.spindle_speed_ovr);
 8006ff2:	7aa8      	ldrb	r0, [r5, #10]
 8006ff4:	f7fd fe00 	bl	8004bf8 <print_uint8_base10>

      uint8_t sp_state = spindle_get_state();
 8006ff8:	f000 fdd4 	bl	8007ba4 <spindle_get_state>
 8006ffc:	4605      	mov	r5, r0
      uint8_t cl_state = coolant_get_state();
 8006ffe:	f7fa fd39 	bl	8001a74 <coolant_get_state>
 8007002:	4604      	mov	r4, r0
      if (sp_state || cl_state) {
 8007004:	2d00      	cmp	r5, #0
 8007006:	f040 80ab 	bne.w	8007160 <report_realtime_status+0x344>
 800700a:	b138      	cbz	r0, 800701c <report_realtime_status+0x200>
        printPgmString(PSTR("|A:"));
 800700c:	4836      	ldr	r0, [pc, #216]	; (80070e8 <report_realtime_status+0x2cc>)
 800700e:	f7fd fde7 	bl	8004be0 <printString>
          #else
            if (sp_state & SPINDLE_STATE_CW) { serial_write('S'); } // CW
            else { serial_write('C'); } // CCW
          #endif
        }
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 8007012:	07e3      	lsls	r3, r4, #31
 8007014:	d502      	bpl.n	800701c <report_realtime_status+0x200>
 8007016:	2046      	movs	r0, #70	; 0x46
 8007018:	f000 f906 	bl	8007228 <serial_write>
        #endif
      }
    }
  #endif

  serial_write('>');
 800701c:	203e      	movs	r0, #62	; 0x3e
 800701e:	f000 f903 	bl	8007228 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8007022:	4832      	ldr	r0, [pc, #200]	; (80070ec <report_realtime_status+0x2d0>)
 8007024:	f7fd fddc 	bl	8004be0 <printString>
  report_util_line_feed();
}
 8007028:	b011      	add	sp, #68	; 0x44
 800702a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printPgmString(PSTR("Door:"));
 800702c:	4830      	ldr	r0, [pc, #192]	; (80070f0 <report_realtime_status+0x2d4>)
 800702e:	f7fd fdd7 	bl	8004be0 <printString>
    if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8007032:	78ab      	ldrb	r3, [r5, #2]
 8007034:	071a      	lsls	r2, r3, #28
 8007036:	f100 80cc 	bmi.w	80071d2 <report_realtime_status+0x3b6>
      if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 800703a:	075f      	lsls	r7, r3, #29
 800703c:	f140 80cd 	bpl.w	80071da <report_realtime_status+0x3be>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) {
 8007040:	069e      	lsls	r6, r3, #26
 8007042:	d515      	bpl.n	8007070 <report_realtime_status+0x254>
      else { serial_write('1'); } // Actively holding
 8007044:	2031      	movs	r0, #49	; 0x31
 8007046:	f000 f8ef 	bl	8007228 <serial_write>
 800704a:	e75b      	b.n	8006f04 <report_realtime_status+0xe8>
  case STATE_CHECK_MODE: printPgmString(PSTR("Check")); break;
 800704c:	4829      	ldr	r0, [pc, #164]	; (80070f4 <report_realtime_status+0x2d8>)
 800704e:	f7fd fdc7 	bl	8004be0 <printString>
 8007052:	e757      	b.n	8006f04 <report_realtime_status+0xe8>
  switch (sys.state) {
 8007054:	2b10      	cmp	r3, #16
 8007056:	f47f af55 	bne.w	8006f04 <report_realtime_status+0xe8>
    if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 800705a:	f995 3002 	ldrsb.w	r3, [r5, #2]
 800705e:	2b00      	cmp	r3, #0
 8007060:	f2c0 8087 	blt.w	8007172 <report_realtime_status+0x356>
      printPgmString(PSTR("Hold:"));
 8007064:	4824      	ldr	r0, [pc, #144]	; (80070f8 <report_realtime_status+0x2dc>)
 8007066:	f7fd fdbb 	bl	8004be0 <printString>
      if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
 800706a:	78ab      	ldrb	r3, [r5, #2]
 800706c:	07d9      	lsls	r1, r3, #31
 800706e:	d5e9      	bpl.n	8007044 <report_realtime_status+0x228>
 8007070:	2030      	movs	r0, #48	; 0x30
 8007072:	f000 f8d9 	bl	8007228 <serial_write>
 8007076:	e745      	b.n	8006f04 <report_realtime_status+0xe8>
    if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8007078:	782a      	ldrb	r2, [r5, #0]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 800707a:	7b2b      	ldrb	r3, [r5, #12]
    else { sys.report_wco_counter = (REPORT_WCO_REFRESH_IDLE_COUNT - 1); }
 800707c:	f012 0f7c 	tst.w	r2, #124	; 0x7c
 8007080:	bf14      	ite	ne
 8007082:	221d      	movne	r2, #29
 8007084:	2209      	moveq	r2, #9
 8007086:	736a      	strb	r2, [r5, #13]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 8007088:	b90b      	cbnz	r3, 800708e <report_realtime_status+0x272>
 800708a:	2301      	movs	r3, #1
 800708c:	732b      	strb	r3, [r5, #12]
    printPgmString(PSTR("|WCO:"));
 800708e:	481b      	ldr	r0, [pc, #108]	; (80070fc <report_realtime_status+0x2e0>)
    printFloat_CoordValue(axis_value[idx]);
 8007090:	ac10      	add	r4, sp, #64	; 0x40
    printPgmString(PSTR("|WCO:"));
 8007092:	f7fd fda5 	bl	8004be0 <printString>
    printFloat_CoordValue(axis_value[idx]);
 8007096:	f854 0d14 	ldr.w	r0, [r4, #-20]!
 800709a:	f7fd fe61 	bl	8004d60 <printFloat_CoordValue>
 800709e:	ae0f      	add	r6, sp, #60	; 0x3c
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80070a0:	202c      	movs	r0, #44	; 0x2c
 80070a2:	f000 f8c1 	bl	8007228 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80070a6:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80070aa:	f7fd fe59 	bl	8004d60 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80070ae:	42b4      	cmp	r4, r6
 80070b0:	d1f6      	bne.n	80070a0 <report_realtime_status+0x284>
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 80070b2:	7b2b      	ldrb	r3, [r5, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d086      	beq.n	8006fc6 <report_realtime_status+0x1aa>
 80070b8:	3b01      	subs	r3, #1
 80070ba:	732b      	strb	r3, [r5, #12]
 80070bc:	e7ae      	b.n	800701c <report_realtime_status+0x200>
 80070be:	bf00      	nop
 80070c0:	20001b98 	.word	0x20001b98
 80070c4:	20001b6c 	.word	0x20001b6c
 80070c8:	20001d30 	.word	0x20001d30
 80070cc:	0800c060 	.word	0x0800c060
 80070d0:	20001abc 	.word	0x20001abc
 80070d4:	0800c09c 	.word	0x0800c09c
 80070d8:	0800c040 	.word	0x0800c040
 80070dc:	0800c068 	.word	0x0800c068
 80070e0:	0800c078 	.word	0x0800c078
 80070e4:	0800c090 	.word	0x0800c090
 80070e8:	0800c098 	.word	0x0800c098
 80070ec:	0800c0b4 	.word	0x0800c0b4
 80070f0:	0800c058 	.word	0x0800c058
 80070f4:	0800c050 	.word	0x0800c050
 80070f8:	0800c034 	.word	0x0800c034
 80070fc:	0800c088 	.word	0x0800c088
    printPgmString(PSTR("|Pn:"));
 8007100:	4838      	ldr	r0, [pc, #224]	; (80071e4 <report_realtime_status+0x3c8>)
 8007102:	f7fd fd6d 	bl	8004be0 <printString>
    if (prb_pin_state) { serial_write('P'); }
 8007106:	b9c7      	cbnz	r7, 800713a <report_realtime_status+0x31e>
    if (lim_pin_state) {
 8007108:	b14c      	cbz	r4, 800711e <report_realtime_status+0x302>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 800710a:	07e1      	lsls	r1, r4, #31
 800710c:	d45d      	bmi.n	80071ca <report_realtime_status+0x3ae>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 800710e:	07a2      	lsls	r2, r4, #30
 8007110:	d457      	bmi.n	80071c2 <report_realtime_status+0x3a6>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 8007112:	0763      	lsls	r3, r4, #29
 8007114:	d451      	bmi.n	80071ba <report_realtime_status+0x39e>
	  if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
 8007116:	0727      	lsls	r7, r4, #28
 8007118:	d44b      	bmi.n	80071b2 <report_realtime_status+0x396>
	  if (bit_istrue(lim_pin_state, bit(B_AXIS))) { serial_write('B'); }
 800711a:	06e4      	lsls	r4, r4, #27
 800711c:	d43d      	bmi.n	800719a <report_realtime_status+0x37e>
    if (ctrl_pin_state) {
 800711e:	2e00      	cmp	r6, #0
 8007120:	f43f af49 	beq.w	8006fb6 <report_realtime_status+0x19a>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 8007124:	07f0      	lsls	r0, r6, #31
 8007126:	d440      	bmi.n	80071aa <report_realtime_status+0x38e>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 8007128:	07b1      	lsls	r1, r6, #30
 800712a:	d43a      	bmi.n	80071a2 <report_realtime_status+0x386>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_CYCLE_START)) { serial_write('S'); }
 800712c:	0772      	lsls	r2, r6, #29
 800712e:	f57f af42 	bpl.w	8006fb6 <report_realtime_status+0x19a>
 8007132:	2053      	movs	r0, #83	; 0x53
 8007134:	f000 f878 	bl	8007228 <serial_write>
 8007138:	e73d      	b.n	8006fb6 <report_realtime_status+0x19a>
    if (prb_pin_state) { serial_write('P'); }
 800713a:	2050      	movs	r0, #80	; 0x50
 800713c:	f000 f874 	bl	8007228 <serial_write>
 8007140:	e7e2      	b.n	8007108 <report_realtime_status+0x2ec>
    printPgmString(PSTR("|Bf:"));
 8007142:	4829      	ldr	r0, [pc, #164]	; (80071e8 <report_realtime_status+0x3cc>)
 8007144:	f7fd fd4c 	bl	8004be0 <printString>
    print_uint8_base10(plan_get_block_buffer_available());
 8007148:	f7fd fd28 	bl	8004b9c <plan_get_block_buffer_available>
 800714c:	f7fd fd54 	bl	8004bf8 <print_uint8_base10>
    serial_write(',');
 8007150:	202c      	movs	r0, #44	; 0x2c
 8007152:	f000 f869 	bl	8007228 <serial_write>
    print_uint8_base10(serial_get_rx_buffer_available());
 8007156:	f000 f853 	bl	8007200 <serial_get_rx_buffer_available>
 800715a:	f7fd fd4d 	bl	8004bf8 <print_uint8_base10>
 800715e:	e70c      	b.n	8006f7a <report_realtime_status+0x15e>
        printPgmString(PSTR("|A:"));
 8007160:	4822      	ldr	r0, [pc, #136]	; (80071ec <report_realtime_status+0x3d0>)
 8007162:	f7fd fd3d 	bl	8004be0 <printString>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8007166:	2d01      	cmp	r5, #1
 8007168:	d013      	beq.n	8007192 <report_realtime_status+0x376>
              else { serial_write('C'); } // CCW
 800716a:	2043      	movs	r0, #67	; 0x43
 800716c:	f000 f85c 	bl	8007228 <serial_write>
 8007170:	e74f      	b.n	8007012 <report_realtime_status+0x1f6>
  case STATE_JOG: printPgmString(PSTR("Jog")); break;
 8007172:	481f      	ldr	r0, [pc, #124]	; (80071f0 <report_realtime_status+0x3d4>)
 8007174:	f7fd fd34 	bl	8004be0 <printString>
 8007178:	e6c4      	b.n	8006f04 <report_realtime_status+0xe8>
  case STATE_IDLE: printPgmString(PSTR("Idle")); break;
 800717a:	481e      	ldr	r0, [pc, #120]	; (80071f4 <report_realtime_status+0x3d8>)
 800717c:	f7fd fd30 	bl	8004be0 <printString>
 8007180:	e6c0      	b.n	8006f04 <report_realtime_status+0xe8>
  case STATE_ALARM: printPgmString(PSTR("Alarm")); break;
 8007182:	481d      	ldr	r0, [pc, #116]	; (80071f8 <report_realtime_status+0x3dc>)
 8007184:	f7fd fd2c 	bl	8004be0 <printString>
 8007188:	e6bc      	b.n	8006f04 <report_realtime_status+0xe8>
  case STATE_CYCLE: printPgmString(PSTR("Run")); break;
 800718a:	481c      	ldr	r0, [pc, #112]	; (80071fc <report_realtime_status+0x3e0>)
 800718c:	f7fd fd28 	bl	8004be0 <printString>
 8007190:	e6b8      	b.n	8006f04 <report_realtime_status+0xe8>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8007192:	2053      	movs	r0, #83	; 0x53
 8007194:	f000 f848 	bl	8007228 <serial_write>
 8007198:	e73b      	b.n	8007012 <report_realtime_status+0x1f6>
	  if (bit_istrue(lim_pin_state, bit(B_AXIS))) { serial_write('B'); }
 800719a:	2042      	movs	r0, #66	; 0x42
 800719c:	f000 f844 	bl	8007228 <serial_write>
 80071a0:	e7bd      	b.n	800711e <report_realtime_status+0x302>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 80071a2:	2048      	movs	r0, #72	; 0x48
 80071a4:	f000 f840 	bl	8007228 <serial_write>
 80071a8:	e7c0      	b.n	800712c <report_realtime_status+0x310>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 80071aa:	2052      	movs	r0, #82	; 0x52
 80071ac:	f000 f83c 	bl	8007228 <serial_write>
 80071b0:	e7ba      	b.n	8007128 <report_realtime_status+0x30c>
	  if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
 80071b2:	2041      	movs	r0, #65	; 0x41
 80071b4:	f000 f838 	bl	8007228 <serial_write>
 80071b8:	e7af      	b.n	800711a <report_realtime_status+0x2fe>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 80071ba:	205a      	movs	r0, #90	; 0x5a
 80071bc:	f000 f834 	bl	8007228 <serial_write>
 80071c0:	e7a9      	b.n	8007116 <report_realtime_status+0x2fa>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 80071c2:	2059      	movs	r0, #89	; 0x59
 80071c4:	f000 f830 	bl	8007228 <serial_write>
 80071c8:	e7a3      	b.n	8007112 <report_realtime_status+0x2f6>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 80071ca:	2058      	movs	r0, #88	; 0x58
 80071cc:	f000 f82c 	bl	8007228 <serial_write>
 80071d0:	e79d      	b.n	800710e <report_realtime_status+0x2f2>
      serial_write('3'); // Restoring
 80071d2:	2033      	movs	r0, #51	; 0x33
 80071d4:	f000 f828 	bl	8007228 <serial_write>
 80071d8:	e694      	b.n	8006f04 <report_realtime_status+0xe8>
        serial_write('2'); // Retracting
 80071da:	2032      	movs	r0, #50	; 0x32
 80071dc:	f000 f824 	bl	8007228 <serial_write>
 80071e0:	e690      	b.n	8006f04 <report_realtime_status+0xe8>
 80071e2:	bf00      	nop
 80071e4:	0800c080 	.word	0x0800c080
 80071e8:	0800c070 	.word	0x0800c070
 80071ec:	0800c098 	.word	0x0800c098
 80071f0:	0800c03c 	.word	0x0800c03c
 80071f4:	0800c028 	.word	0x0800c028
 80071f8:	0800c048 	.word	0x0800c048
 80071fc:	0800c030 	.word	0x0800c030

08007200 <serial_get_rx_buffer_available>:


// Returns the number of bytes available in the RX serial buffer.
uint8_t serial_get_rx_buffer_available()
{
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007200:	4b06      	ldr	r3, [pc, #24]	; (800721c <serial_get_rx_buffer_available+0x1c>)
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8007202:	4a07      	ldr	r2, [pc, #28]	; (8007220 <serial_get_rx_buffer_available+0x20>)
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007204:	781b      	ldrb	r3, [r3, #0]
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8007206:	7812      	ldrb	r2, [r2, #0]
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007208:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 800720a:	4293      	cmp	r3, r2
 800720c:	bf94      	ite	ls
 800720e:	1e98      	subls	r0, r3, #2
  return((rtail-serial_rx_buffer_head-1));
 8007210:	f103 30ff 	addhi.w	r0, r3, #4294967295
 8007214:	1a80      	subs	r0, r0, r2
 8007216:	b2c0      	uxtb	r0, r0
}
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	2000136b 	.word	0x2000136b
 8007220:	2000136a 	.word	0x2000136a

08007224 <serial_init>:
  return (TX_RING_BUFFER - (ttail-serial_tx_buffer_head));
}


void serial_init()
{
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop

08007228 <serial_write>:
}
#endif


// Writes one byte to the TX serial buffer. Called by main program.
void serial_write(uint8_t data) {
 8007228:	b470      	push	{r4, r5, r6}
  // Calculate next head
  uint8_t next_head = serial_tx_buffer_head + 1;
 800722a:	4e0f      	ldr	r6, [pc, #60]	; (8007268 <serial_write+0x40>)
 800722c:	490f      	ldr	r1, [pc, #60]	; (800726c <serial_write+0x44>)
 800722e:	7835      	ldrb	r5, [r6, #0]
  if (next_head == TX_RING_BUFFER) { next_head = 0; }

  // Wait until there is space in the buffer
  while (next_head == serial_tx_buffer_tail) {
    // TODO: Restructure st_prep_buffer() calls to be executed here during a long print.
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 8007230:	4c0f      	ldr	r4, [pc, #60]	; (8007270 <serial_write+0x48>)
  uint8_t next_head = serial_tx_buffer_head + 1;
 8007232:	1c6a      	adds	r2, r5, #1
 8007234:	b2d2      	uxtb	r2, r2
  if (next_head == TX_RING_BUFFER) { next_head = 0; }
 8007236:	2a80      	cmp	r2, #128	; 0x80
 8007238:	bf08      	it	eq
 800723a:	2200      	moveq	r2, #0
 800723c:	e002      	b.n	8007244 <serial_write+0x1c>
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 800723e:	7823      	ldrb	r3, [r4, #0]
 8007240:	06db      	lsls	r3, r3, #27
 8007242:	d40e      	bmi.n	8007262 <serial_write+0x3a>
  while (next_head == serial_tx_buffer_tail) {
 8007244:	780b      	ldrb	r3, [r1, #0]
 8007246:	4293      	cmp	r3, r2
 8007248:	d0f9      	beq.n	800723e <serial_write+0x16>
     Sleep(1);
#endif
  }

  // Store data and advance head
  serial_tx_buffer[serial_tx_buffer_head] = data;
 800724a:	4b0a      	ldr	r3, [pc, #40]	; (8007274 <serial_write+0x4c>)
 800724c:	490a      	ldr	r1, [pc, #40]	; (8007278 <serial_write+0x50>)
 800724e:	5558      	strb	r0, [r3, r5]
#ifdef USB_CHANGED_DEBUG
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 8007250:	4807      	ldr	r0, [pc, #28]	; (8007270 <serial_write+0x48>)
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 8007252:	e002      	b.n	800725a <serial_write+0x32>
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 8007254:	7803      	ldrb	r3, [r0, #0]
 8007256:	06db      	lsls	r3, r3, #27
 8007258:	d403      	bmi.n	8007262 <serial_write+0x3a>
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 800725a:	780b      	ldrb	r3, [r1, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1f9      	bne.n	8007254 <serial_write+0x2c>
  }
#endif
  serial_tx_buffer_head = next_head;
 8007260:	7032      	strb	r2, [r6, #0]

#ifdef AVRTARGET
  // Enable Data Register Empty Interrupt to make sure tx-streaming is running
  UCSR0B |=  (1 << UDRIE0);
#endif
}
 8007262:	bc70      	pop	{r4, r5, r6}
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	2000136c 	.word	0x2000136c
 800726c:	2000136d 	.word	0x2000136d
 8007270:	20001b81 	.word	0x20001b81
 8007274:	20001bb0 	.word	0x20001bb0
 8007278:	200016b4 	.word	0x200016b4

0800727c <serial_read>:
#endif

// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial_read()
{
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 800727c:	4908      	ldr	r1, [pc, #32]	; (80072a0 <serial_read+0x24>)
  if (serial_rx_buffer_head == tail) {
 800727e:	4a09      	ldr	r2, [pc, #36]	; (80072a4 <serial_read+0x28>)
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8007280:	780b      	ldrb	r3, [r1, #0]
  if (serial_rx_buffer_head == tail) {
 8007282:	7812      	ldrb	r2, [r2, #0]
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8007284:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head == tail) {
 8007286:	429a      	cmp	r2, r3
 8007288:	d008      	beq.n	800729c <serial_read+0x20>
    return SERIAL_NO_DATA;
  } else {
    uint8_t data = serial_rx_buffer[tail];

    tail++;
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	b2d2      	uxtb	r2, r2
    if (tail == RX_RING_BUFFER) { tail = 0; }
 800728e:	2afe      	cmp	r2, #254	; 0xfe
 8007290:	bf08      	it	eq
 8007292:	2200      	moveq	r2, #0
    uint8_t data = serial_rx_buffer[tail];
 8007294:	4804      	ldr	r0, [pc, #16]	; (80072a8 <serial_read+0x2c>)
    serial_rx_buffer_tail = tail;
 8007296:	700a      	strb	r2, [r1, #0]
    uint8_t data = serial_rx_buffer[tail];
 8007298:	5cc0      	ldrb	r0, [r0, r3]

    return data;
 800729a:	4770      	bx	lr
    return SERIAL_NO_DATA;
 800729c:	20ff      	movs	r0, #255	; 0xff
  }
}
 800729e:	4770      	bx	lr
 80072a0:	2000136b 	.word	0x2000136b
 80072a4:	2000136a 	.word	0x2000136a
 80072a8:	20001c30 	.word	0x20001c30

080072ac <OnUsbDataRx>:
	//lcd_write_char(*dataIn);
	uint8_t next_head;
    uint8_t data;

	// Write data to buffer unless it is full.
	while (length != 0)
 80072ac:	2900      	cmp	r1, #0
 80072ae:	d077      	beq.n	80073a0 <OnUsbDataRx+0xf4>
{
 80072b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b4:	1e4d      	subs	r5, r1, #1
 80072b6:	b2ed      	uxtb	r5, r5
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
          #endif
        }
        // Throw away any unfound extended-ASCII character by not passing it to the serial buffer.
      } else { // Write character to buffer
        next_head = serial_rx_buffer_head + 1;
 80072b8:	4e5e      	ldr	r6, [pc, #376]	; (8007434 <OnUsbDataRx+0x188>)
        if (next_head == RX_RING_BUFFER) { next_head = 0; }

        // Write data to buffer unless it is full.
        if (next_head != serial_rx_buffer_tail) {
 80072ba:	4f5f      	ldr	r7, [pc, #380]	; (8007438 <OnUsbDataRx+0x18c>)
          serial_rx_buffer[serial_rx_buffer_head] = data;
 80072bc:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8007440 <OnUsbDataRx+0x194>
 80072c0:	4405      	add	r5, r0
 80072c2:	1e44      	subs	r4, r0, #1
 80072c4:	e007      	b.n	80072d6 <OnUsbDataRx+0x2a>
  switch (data) {
 80072c6:	2b7e      	cmp	r3, #126	; 0x7e
 80072c8:	d026      	beq.n	8007318 <OnUsbDataRx+0x6c>
 80072ca:	2b80      	cmp	r3, #128	; 0x80
 80072cc:	d115      	bne.n	80072fa <OnUsbDataRx+0x4e>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 80072ce:	f7fc fd91 	bl	8003df4 <mc_reset>
	while (length != 0)
 80072d2:	42ac      	cmp	r4, r5
 80072d4:	d00b      	beq.n	80072ee <OnUsbDataRx+0x42>
        data = *dataIn ++;
 80072d6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  switch (data) {
 80072da:	2b3f      	cmp	r3, #63	; 0x3f
 80072dc:	d009      	beq.n	80072f2 <OnUsbDataRx+0x46>
 80072de:	d8f2      	bhi.n	80072c6 <OnUsbDataRx+0x1a>
 80072e0:	2b21      	cmp	r3, #33	; 0x21
 80072e2:	d10a      	bne.n	80072fa <OnUsbDataRx+0x4e>
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
 80072e4:	2008      	movs	r0, #8
 80072e6:	f002 fa95 	bl	8009814 <system_set_exec_state_flag>
	while (length != 0)
 80072ea:	42ac      	cmp	r4, r5
 80072ec:	d1f3      	bne.n	80072d6 <OnUsbDataRx+0x2a>
 80072ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
 80072f2:	2001      	movs	r0, #1
 80072f4:	f002 fa8e 	bl	8009814 <system_set_exec_state_flag>
 80072f8:	e7eb      	b.n	80072d2 <OnUsbDataRx+0x26>
      if (data > 0x7F) { // Real-time control characters are extended ACSII only.
 80072fa:	061a      	lsls	r2, r3, #24
 80072fc:	d410      	bmi.n	8007320 <OnUsbDataRx+0x74>
        next_head = serial_rx_buffer_head + 1;
 80072fe:	7831      	ldrb	r1, [r6, #0]
        if (next_head != serial_rx_buffer_tail) {
 8007300:	7838      	ldrb	r0, [r7, #0]
        next_head = serial_rx_buffer_head + 1;
 8007302:	1c4a      	adds	r2, r1, #1
 8007304:	b2d2      	uxtb	r2, r2
        if (next_head == RX_RING_BUFFER) { next_head = 0; }
 8007306:	2afe      	cmp	r2, #254	; 0xfe
 8007308:	bf08      	it	eq
 800730a:	2200      	moveq	r2, #0
        if (next_head != serial_rx_buffer_tail) {
 800730c:	4282      	cmp	r2, r0
          serial_rx_buffer[serial_rx_buffer_head] = data;
 800730e:	bf1c      	itt	ne
 8007310:	f808 3001 	strbne.w	r3, [r8, r1]
          serial_rx_buffer_head = next_head;
 8007314:	7032      	strbne	r2, [r6, #0]
 8007316:	e7dc      	b.n	80072d2 <OnUsbDataRx+0x26>
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 8007318:	2002      	movs	r0, #2
 800731a:	f002 fa7b 	bl	8009814 <system_set_exec_state_flag>
 800731e:	e7d8      	b.n	80072d2 <OnUsbDataRx+0x26>
        switch(data) {
 8007320:	3b84      	subs	r3, #132	; 0x84
 8007322:	2b1c      	cmp	r3, #28
 8007324:	d8d5      	bhi.n	80072d2 <OnUsbDataRx+0x26>
 8007326:	a201      	add	r2, pc, #4	; (adr r2, 800732c <OnUsbDataRx+0x80>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	0800742d 	.word	0x0800742d
 8007330:	0800741b 	.word	0x0800741b
 8007334:	080072d3 	.word	0x080072d3
 8007338:	080072d3 	.word	0x080072d3
 800733c:	080072d3 	.word	0x080072d3
 8007340:	080072d3 	.word	0x080072d3
 8007344:	080072d3 	.word	0x080072d3
 8007348:	080072d3 	.word	0x080072d3
 800734c:	080072d3 	.word	0x080072d3
 8007350:	080072d3 	.word	0x080072d3
 8007354:	080072d3 	.word	0x080072d3
 8007358:	080072d3 	.word	0x080072d3
 800735c:	08007413 	.word	0x08007413
 8007360:	0800740b 	.word	0x0800740b
 8007364:	08007403 	.word	0x08007403
 8007368:	080073fb 	.word	0x080073fb
 800736c:	080073f3 	.word	0x080073f3
 8007370:	080073eb 	.word	0x080073eb
 8007374:	080073e3 	.word	0x080073e3
 8007378:	080073db 	.word	0x080073db
 800737c:	080072d3 	.word	0x080072d3
 8007380:	080073d3 	.word	0x080073d3
 8007384:	080073cb 	.word	0x080073cb
 8007388:	080073c3 	.word	0x080073c3
 800738c:	080073bb 	.word	0x080073bb
 8007390:	080073b3 	.word	0x080073b3
 8007394:	080073ab 	.word	0x080073ab
 8007398:	080072d3 	.word	0x080072d3
 800739c:	080073a3 	.word	0x080073a3
 80073a0:	4770      	bx	lr
          case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_FLOOD_OVR_TOGGLE); break;
 80073a2:	2040      	movs	r0, #64	; 0x40
 80073a4:	f002 fa64 	bl	8009870 <system_set_exec_accessory_override_flag>
 80073a8:	e793      	b.n	80072d2 <OnUsbDataRx+0x26>
          case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP); break;
 80073aa:	2020      	movs	r0, #32
 80073ac:	f002 fa60 	bl	8009870 <system_set_exec_accessory_override_flag>
 80073b0:	e78f      	b.n	80072d2 <OnUsbDataRx+0x26>
          case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_MINUS); break;
 80073b2:	2010      	movs	r0, #16
 80073b4:	f002 fa5c 	bl	8009870 <system_set_exec_accessory_override_flag>
 80073b8:	e78b      	b.n	80072d2 <OnUsbDataRx+0x26>
          case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_PLUS); break;
 80073ba:	2008      	movs	r0, #8
 80073bc:	f002 fa58 	bl	8009870 <system_set_exec_accessory_override_flag>
 80073c0:	e787      	b.n	80072d2 <OnUsbDataRx+0x26>
          case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_MINUS); break;
 80073c2:	2004      	movs	r0, #4
 80073c4:	f002 fa54 	bl	8009870 <system_set_exec_accessory_override_flag>
 80073c8:	e783      	b.n	80072d2 <OnUsbDataRx+0x26>
          case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_PLUS); break;
 80073ca:	2002      	movs	r0, #2
 80073cc:	f002 fa50 	bl	8009870 <system_set_exec_accessory_override_flag>
 80073d0:	e77f      	b.n	80072d2 <OnUsbDataRx+0x26>
          case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESET); break;
 80073d2:	2001      	movs	r0, #1
 80073d4:	f002 fa4c 	bl	8009870 <system_set_exec_accessory_override_flag>
 80073d8:	e77b      	b.n	80072d2 <OnUsbDataRx+0x26>
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 80073da:	2080      	movs	r0, #128	; 0x80
 80073dc:	f002 fa3e 	bl	800985c <system_set_exec_motion_override_flag>
 80073e0:	e777      	b.n	80072d2 <OnUsbDataRx+0x26>
          case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); break;
 80073e2:	2040      	movs	r0, #64	; 0x40
 80073e4:	f002 fa3a 	bl	800985c <system_set_exec_motion_override_flag>
 80073e8:	e773      	b.n	80072d2 <OnUsbDataRx+0x26>
          case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); break;
 80073ea:	2020      	movs	r0, #32
 80073ec:	f002 fa36 	bl	800985c <system_set_exec_motion_override_flag>
 80073f0:	e76f      	b.n	80072d2 <OnUsbDataRx+0x26>
          case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MINUS); break;
 80073f2:	2010      	movs	r0, #16
 80073f4:	f002 fa32 	bl	800985c <system_set_exec_motion_override_flag>
 80073f8:	e76b      	b.n	80072d2 <OnUsbDataRx+0x26>
          case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS); break;
 80073fa:	2008      	movs	r0, #8
 80073fc:	f002 fa2e 	bl	800985c <system_set_exec_motion_override_flag>
 8007400:	e767      	b.n	80072d2 <OnUsbDataRx+0x26>
          case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_MINUS); break;
 8007402:	2004      	movs	r0, #4
 8007404:	f002 fa2a 	bl	800985c <system_set_exec_motion_override_flag>
 8007408:	e763      	b.n	80072d2 <OnUsbDataRx+0x26>
          case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_PLUS); break;
 800740a:	2002      	movs	r0, #2
 800740c:	f002 fa26 	bl	800985c <system_set_exec_motion_override_flag>
 8007410:	e75f      	b.n	80072d2 <OnUsbDataRx+0x26>
          case CMD_FEED_OVR_RESET: system_set_exec_motion_override_flag(EXEC_FEED_OVR_RESET); break;
 8007412:	2001      	movs	r0, #1
 8007414:	f002 fa22 	bl	800985c <system_set_exec_motion_override_flag>
 8007418:	e75b      	b.n	80072d2 <OnUsbDataRx+0x26>
            if (sys.state & STATE_JOG) { // Block all other states from invoking motion cancel.
 800741a:	4b08      	ldr	r3, [pc, #32]	; (800743c <OnUsbDataRx+0x190>)
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	069b      	lsls	r3, r3, #26
 8007420:	f57f af57 	bpl.w	80072d2 <OnUsbDataRx+0x26>
              system_set_exec_state_flag(EXEC_MOTION_CANCEL); 
 8007424:	2040      	movs	r0, #64	; 0x40
 8007426:	f002 f9f5 	bl	8009814 <system_set_exec_state_flag>
 800742a:	e752      	b.n	80072d2 <OnUsbDataRx+0x26>
          case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as true
 800742c:	2020      	movs	r0, #32
 800742e:	f002 f9f1 	bl	8009814 <system_set_exec_state_flag>
 8007432:	e74e      	b.n	80072d2 <OnUsbDataRx+0x26>
 8007434:	2000136a 	.word	0x2000136a
 8007438:	2000136b 	.word	0x2000136b
 800743c:	20001b6c 	.word	0x20001b6c
 8007440:	20001c30 	.word	0x20001c30

08007444 <serial_reset_read_buffer>:
#endif
}

void serial_reset_read_buffer()
{
  serial_rx_buffer_tail = serial_rx_buffer_head;
 8007444:	4a02      	ldr	r2, [pc, #8]	; (8007450 <serial_reset_read_buffer+0xc>)
 8007446:	4b03      	ldr	r3, [pc, #12]	; (8007454 <serial_reset_read_buffer+0x10>)
 8007448:	7812      	ldrb	r2, [r2, #0]
 800744a:	701a      	strb	r2, [r3, #0]
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	2000136a 	.word	0x2000136a
 8007454:	2000136b 	.word	0x2000136b

08007458 <settings_store_startup_line>:

settings_t settings;

// Method to store startup lines into EEPROM
void settings_store_startup_line(uint8_t n, char *line)
{
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4605      	mov	r5, r0
 800745c:	460c      	mov	r4, r1
#ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
  protocol_buffer_synchronize(); // A startup line may contain a motion and be executing.
 800745e:	f7fe fd79 	bl	8005f54 <protocol_buffer_synchronize>
#endif
  uint32_t addr = n * (LINE_BUFFER_SIZE + 1) + EEPROM_ADDR_STARTUP_BLOCK;
 8007462:	235b      	movs	r3, #91	; 0x5b
 8007464:	fb03 f005 	mul.w	r0, r3, r5
  memcpy_to_eeprom_with_checksum(addr, (char *)line, LINE_BUFFER_SIZE);
 8007468:	4621      	mov	r1, r4
}
 800746a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr, (char *)line, LINE_BUFFER_SIZE);
 800746e:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8007472:	225a      	movs	r2, #90	; 0x5a
 8007474:	f7fa bb70 	b.w	8001b58 <memcpy_to_eeprom_with_checksum>

08007478 <settings_store_build_info>:
// Method to store build info into EEPROM
// NOTE: This function can only be called in IDLE state.
void settings_store_build_info(char *line)
{
  // Build info can only be stored when state is IDLE.
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO, (char *)line, LINE_BUFFER_SIZE);
 8007478:	4601      	mov	r1, r0
 800747a:	225a      	movs	r2, #90	; 0x5a
 800747c:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007480:	f7fa bb6a 	b.w	8001b58 <memcpy_to_eeprom_with_checksum>

08007484 <settings_write_coord_data>:
}

// Method to store coord data parameters into EEPROM
void settings_write_coord_data(uint8_t coord_select, float *coord_data)
{
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4604      	mov	r4, r0
 8007488:	460d      	mov	r5, r1
#ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
  protocol_buffer_synchronize();
#endif
  uint32_t addr = coord_select * (sizeof(float) * N_AXIS + 1) + EEPROM_ADDR_PARAMETERS;
 800748a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800748e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
  protocol_buffer_synchronize();
 8007492:	f7fe fd5f 	bl	8005f54 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr, (char *)coord_data, sizeof(float) * N_AXIS);
 8007496:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800749a:	4629      	mov	r1, r5
}
 800749c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr, (char *)coord_data, sizeof(float) * N_AXIS);
 80074a0:	2214      	movs	r2, #20
 80074a2:	f7fa bb59 	b.w	8001b58 <memcpy_to_eeprom_with_checksum>
 80074a6:	bf00      	nop

080074a8 <settings_restore>:
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char *)&settings, sizeof(settings_t));
}

// Method to restore EEPROM-saved Grbl global settings back to defaults.
void settings_restore(uint8_t restore_flag)
{
 80074a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074aa:	4605      	mov	r5, r0
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS)
 80074ac:	07c0      	lsls	r0, r0, #31
{
 80074ae:	b087      	sub	sp, #28
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS)
 80074b0:	d43a      	bmi.n	8007528 <settings_restore+0x80>
#endif
    // ---
    write_global_settings();
  }

  if (restore_flag & SETTINGS_RESTORE_PARAMETERS)
 80074b2:	07a9      	lsls	r1, r5, #30
 80074b4:	d424      	bmi.n	8007500 <settings_restore+0x58>
    {
      settings_write_coord_data(idx, coord_data);
    }
  }

  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES)
 80074b6:	076a      	lsls	r2, r5, #29
 80074b8:	d40d      	bmi.n	80074d6 <settings_restore+0x2e>
    eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK + (LINE_BUFFER_SIZE + 1), 0);
    eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK + (LINE_BUFFER_SIZE + 2), 0); // Checksum
#endif
  }

  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO)
 80074ba:	072b      	lsls	r3, r5, #28
 80074bc:	d509      	bpl.n	80074d2 <settings_restore+0x2a>
  {
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO, 0);
 80074be:	2100      	movs	r1, #0
 80074c0:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 80074c4:	f7fa fb42 	bl	8001b4c <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO + 1, 0); // Checksum
 80074c8:	2100      	movs	r1, #0
 80074ca:	f240 30c1 	movw	r0, #961	; 0x3c1
 80074ce:	f7fa fb3d 	bl	8001b4c <eeprom_put_char>
  }
}
 80074d2:	b007      	add	sp, #28
 80074d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 80074d6:	2100      	movs	r1, #0
 80074d8:	f44f 7040 	mov.w	r0, #768	; 0x300
 80074dc:	f7fa fb36 	bl	8001b4c <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK + 1, 0); // Checksum
 80074e0:	2100      	movs	r1, #0
 80074e2:	f240 3001 	movw	r0, #769	; 0x301
 80074e6:	f7fa fb31 	bl	8001b4c <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK + (LINE_BUFFER_SIZE + 1), 0);
 80074ea:	2100      	movs	r1, #0
 80074ec:	f240 305b 	movw	r0, #859	; 0x35b
 80074f0:	f7fa fb2c 	bl	8001b4c <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK + (LINE_BUFFER_SIZE + 2), 0); // Checksum
 80074f4:	2100      	movs	r1, #0
 80074f6:	f44f 7057 	mov.w	r0, #860	; 0x35c
 80074fa:	f7fa fb27 	bl	8001b4c <eeprom_put_char>
 80074fe:	e7dc      	b.n	80074ba <settings_restore+0x12>
    memset(&coord_data, 0, sizeof(coord_data));
 8007500:	2300      	movs	r3, #0
 8007502:	f44f 7400 	mov.w	r4, #512	; 0x200
 8007506:	9301      	str	r3, [sp, #4]
 8007508:	9302      	str	r3, [sp, #8]
 800750a:	9303      	str	r3, [sp, #12]
 800750c:	9304      	str	r3, [sp, #16]
 800750e:	9305      	str	r3, [sp, #20]
  protocol_buffer_synchronize();
 8007510:	f7fe fd20 	bl	8005f54 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr, (char *)coord_data, sizeof(float) * N_AXIS);
 8007514:	4620      	mov	r0, r4
 8007516:	2214      	movs	r2, #20
 8007518:	a901      	add	r1, sp, #4
 800751a:	3415      	adds	r4, #21
 800751c:	f7fa fb1c 	bl	8001b58 <memcpy_to_eeprom_with_checksum>
    for (idx = 0; idx <= SETTING_INDEX_NCOORD; idx++)
 8007520:	f5b4 7f2a 	cmp.w	r4, #680	; 0x2a8
 8007524:	d1f4      	bne.n	8007510 <settings_restore+0x68>
 8007526:	e7c6      	b.n	80074b6 <settings_restore+0xe>
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007528:	4c24      	ldr	r4, [pc, #144]	; (80075bc <settings_restore+0x114>)
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 800752a:	4a25      	ldr	r2, [pc, #148]	; (80075c0 <settings_restore+0x118>)
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 800752c:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007530:	65a2      	str	r2, [r4, #88]	; 0x58
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007532:	2200      	movs	r2, #0
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007534:	f04f 0e60 	mov.w	lr, #96	; 0x60
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007538:	6662      	str	r2, [r4, #100]	; 0x64
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 800753a:	271f      	movs	r7, #31
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 800753c:	26fa      	movs	r6, #250	; 0xfa
      settings.flags |= BITFLAG_HOMING_ENABLE;
 800753e:	231e      	movs	r3, #30
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007540:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007544:	2000      	movs	r0, #0
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007546:	f8c4 1052 	str.w	r1, [r4, #82]	; 0x52
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 800754a:	491e      	ldr	r1, [pc, #120]	; (80075c4 <settings_restore+0x11c>)
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 800754c:	f884 e050 	strb.w	lr, [r4, #80]	; 0x50
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007550:	65e1      	str	r1, [r4, #92]	; 0x5c
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007552:	491d      	ldr	r1, [pc, #116]	; (80075c8 <settings_restore+0x120>)
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007554:	f8df e088 	ldr.w	lr, [pc, #136]	; 80075e0 <settings_restore+0x138>
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007558:	66e1      	str	r1, [r4, #108]	; 0x6c
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 800755a:	491c      	ldr	r1, [pc, #112]	; (80075cc <settings_restore+0x124>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 800755c:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007560:	f8a4 6074 	strh.w	r6, [r4, #116]	; 0x74
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007564:	67a2      	str	r2, [r4, #120]	; 0x78
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007566:	4e1a      	ldr	r6, [pc, #104]	; (80075d0 <settings_restore+0x128>)
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007568:	4a1a      	ldr	r2, [pc, #104]	; (80075d4 <settings_restore+0x12c>)
      settings.flags |= BITFLAG_HOMING_ENABLE;
 800756a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 800756e:	4f1a      	ldr	r7, [pc, #104]	; (80075d8 <settings_restore+0x130>)
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007570:	4b1a      	ldr	r3, [pc, #104]	; (80075dc <settings_restore+0x134>)
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8007572:	6061      	str	r1, [r4, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8007574:	60a1      	str	r1, [r4, #8]
    settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 8007576:	60e1      	str	r1, [r4, #12]
    settings.steps_per_mm[B_AXIS] = DEFAULT_B_STEPS_PER_MM;
 8007578:	6121      	str	r1, [r4, #16]
  eeprom_put_char(0, SETTINGS_VERSION);
 800757a:	210a      	movs	r1, #10
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 800757c:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 8007580:	f884 0057 	strb.w	r0, [r4, #87]	; 0x57
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007584:	62a2      	str	r2, [r4, #40]	; 0x28
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8007586:	62e2      	str	r2, [r4, #44]	; 0x2c
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8007588:	6322      	str	r2, [r4, #48]	; 0x30
    settings.acceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 800758a:	6362      	str	r2, [r4, #52]	; 0x34
    settings.acceleration[B_AXIS] = DEFAULT_B_ACCELERATION;
 800758c:	63a2      	str	r2, [r4, #56]	; 0x38
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 800758e:	f8c4 e060 	str.w	lr, [r4, #96]	; 0x60
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007592:	f8c4 e070 	str.w	lr, [r4, #112]	; 0x70
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007596:	63e3      	str	r3, [r4, #60]	; 0x3c
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8007598:	6423      	str	r3, [r4, #64]	; 0x40
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 800759a:	6463      	str	r3, [r4, #68]	; 0x44
    settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 800759c:	64a3      	str	r3, [r4, #72]	; 0x48
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 800759e:	6166      	str	r6, [r4, #20]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 80075a0:	61a6      	str	r6, [r4, #24]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 80075a2:	61e6      	str	r6, [r4, #28]
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 80075a4:	6227      	str	r7, [r4, #32]
    settings.max_rate[B_AXIS] = DEFAULT_B_MAX_RATE;
 80075a6:	6267      	str	r7, [r4, #36]	; 0x24
    settings.max_travel[B_AXIS] = (-DEFAULT_B_MAX_TRAVEL);
 80075a8:	64e3      	str	r3, [r4, #76]	; 0x4c
  eeprom_put_char(0, SETTINGS_VERSION);
 80075aa:	f7fa facf 	bl	8001b4c <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char *)&settings, sizeof(settings_t));
 80075ae:	4621      	mov	r1, r4
 80075b0:	227c      	movs	r2, #124	; 0x7c
 80075b2:	2001      	movs	r0, #1
 80075b4:	f7fa fad0 	bl	8001b58 <memcpy_to_eeprom_with_checksum>
 80075b8:	e77b      	b.n	80074b2 <settings_restore+0xa>
 80075ba:	bf00      	nop
 80075bc:	20001d30 	.word	0x20001d30
 80075c0:	3c23d70a 	.word	0x3c23d70a
 80075c4:	3b03126f 	.word	0x3b03126f
 80075c8:	42c80000 	.word	0x42c80000
 80075cc:	42480000 	.word	0x42480000
 80075d0:	44fa0000 	.word	0x44fa0000
 80075d4:	4bdbba00 	.word	0x4bdbba00
 80075d8:	44160000 	.word	0x44160000
 80075dc:	c38c0000 	.word	0xc38c0000
 80075e0:	447a0000 	.word	0x447a0000

080075e4 <settings_read_startup_line>:

// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_startup_line(uint8_t n, char *line)
{
 80075e4:	b570      	push	{r4, r5, r6, lr}
  uint32_t addr = n * (LINE_BUFFER_SIZE + 1) + EEPROM_ADDR_STARTUP_BLOCK;
 80075e6:	245b      	movs	r4, #91	; 0x5b
{
 80075e8:	460e      	mov	r6, r1
  uint32_t addr = n * (LINE_BUFFER_SIZE + 1) + EEPROM_ADDR_STARTUP_BLOCK;
 80075ea:	fb04 f400 	mul.w	r4, r4, r0
 80075ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
  if (!(memcpy_from_eeprom_with_checksum((char *)line, addr, LINE_BUFFER_SIZE)))
 80075f2:	4621      	mov	r1, r4
 80075f4:	4630      	mov	r0, r6
 80075f6:	225a      	movs	r2, #90	; 0x5a
 80075f8:	f7fa fb00 	bl	8001bfc <memcpy_from_eeprom_with_checksum>
 80075fc:	b108      	cbz	r0, 8007602 <settings_read_startup_line+0x1e>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_startup_line(n, line);
    return (false);
  }
  return (true);
 80075fe:	2001      	movs	r0, #1
}
 8007600:	bd70      	pop	{r4, r5, r6, pc}
 8007602:	4605      	mov	r5, r0
    line[0] = 0; // Empty line
 8007604:	7030      	strb	r0, [r6, #0]
  protocol_buffer_synchronize(); // A startup line may contain a motion and be executing.
 8007606:	f7fe fca5 	bl	8005f54 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr, (char *)line, LINE_BUFFER_SIZE);
 800760a:	4620      	mov	r0, r4
 800760c:	4631      	mov	r1, r6
 800760e:	225a      	movs	r2, #90	; 0x5a
 8007610:	f7fa faa2 	bl	8001b58 <memcpy_to_eeprom_with_checksum>
    return (false);
 8007614:	4628      	mov	r0, r5
 8007616:	bd70      	pop	{r4, r5, r6, pc}

08007618 <settings_read_build_info>:

// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_build_info(char *line)
{
 8007618:	b538      	push	{r3, r4, r5, lr}
  if (!(memcpy_from_eeprom_with_checksum((char *)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE)))
 800761a:	225a      	movs	r2, #90	; 0x5a
 800761c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
{
 8007620:	4605      	mov	r5, r0
  if (!(memcpy_from_eeprom_with_checksum((char *)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE)))
 8007622:	f7fa faeb 	bl	8001bfc <memcpy_from_eeprom_with_checksum>
 8007626:	b108      	cbz	r0, 800762c <settings_read_build_info+0x14>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_build_info(line);
    return (false);
  }
  return (true);
 8007628:	2001      	movs	r0, #1
}
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	4604      	mov	r4, r0
    line[0] = 0; // Empty line
 800762e:	7028      	strb	r0, [r5, #0]
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO, (char *)line, LINE_BUFFER_SIZE);
 8007630:	4629      	mov	r1, r5
 8007632:	225a      	movs	r2, #90	; 0x5a
 8007634:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007638:	f7fa fa8e 	bl	8001b58 <memcpy_to_eeprom_with_checksum>
    return (false);
 800763c:	4620      	mov	r0, r4
 800763e:	bd38      	pop	{r3, r4, r5, pc}

08007640 <settings_read_coord_data>:

// Read selected coordinate data from EEPROM. Updates pointed coord_data value.
uint8_t settings_read_coord_data(uint8_t coord_select, float *coord_data)
{
 8007640:	b570      	push	{r4, r5, r6, lr}
 8007642:	460e      	mov	r6, r1
  uint32_t addr = coord_select * (sizeof(float) * N_AXIS + 1) + EEPROM_ADDR_PARAMETERS;
 8007644:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007648:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800764c:	f500 7400 	add.w	r4, r0, #512	; 0x200
  if (!(memcpy_from_eeprom_with_checksum((char *)coord_data, addr, sizeof(float) * N_AXIS)))
 8007650:	4621      	mov	r1, r4
 8007652:	4630      	mov	r0, r6
 8007654:	2214      	movs	r2, #20
 8007656:	f7fa fad1 	bl	8001bfc <memcpy_from_eeprom_with_checksum>
 800765a:	b108      	cbz	r0, 8007660 <settings_read_coord_data+0x20>
#endif
    // ---
    settings_write_coord_data(coord_select, coord_data);
    return (false);
  }
  return (true);
 800765c:	2001      	movs	r0, #1
}
 800765e:	bd70      	pop	{r4, r5, r6, pc}
    coord_data[X_AXIS] = 0.0f;
 8007660:	2300      	movs	r3, #0
 8007662:	4605      	mov	r5, r0
 8007664:	6033      	str	r3, [r6, #0]
    coord_data[Y_AXIS] = 0.0f;
 8007666:	6073      	str	r3, [r6, #4]
    coord_data[Z_AXIS] = 0.0f;
 8007668:	60b3      	str	r3, [r6, #8]
    coord_data[A_AXIS] = 0.0f;
 800766a:	60f3      	str	r3, [r6, #12]
    coord_data[B_AXIS] = 0.0f;
 800766c:	6133      	str	r3, [r6, #16]
  protocol_buffer_synchronize();
 800766e:	f7fe fc71 	bl	8005f54 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr, (char *)coord_data, sizeof(float) * N_AXIS);
 8007672:	4620      	mov	r0, r4
 8007674:	4631      	mov	r1, r6
 8007676:	2214      	movs	r2, #20
 8007678:	f7fa fa6e 	bl	8001b58 <memcpy_to_eeprom_with_checksum>
    return (false);
 800767c:	4628      	mov	r0, r5
 800767e:	bd70      	pop	{r4, r5, r6, pc}

08007680 <settings_store_global_setting>:
  return (true);
}

// A helper method to set settings from command line
uint8_t settings_store_global_setting(uint8_t parameter, float value)
{
 8007680:	b538      	push	{r3, r4, r5, lr}
 8007682:	460d      	mov	r5, r1
 8007684:	4604      	mov	r4, r0
  if (value < 0.0f)
 8007686:	2100      	movs	r1, #0
 8007688:	4628      	mov	r0, r5
 800768a:	f7f9 fcaf 	bl	8000fec <__aeabi_fcmplt>
 800768e:	2800      	cmp	r0, #0
 8007690:	d16c      	bne.n	800776c <settings_store_global_setting+0xec>
  {
    return (STATUS_NEGATIVE_VALUE);
  }
  if (parameter >= AXIS_SETTINGS_START_VAL)
 8007692:	2c63      	cmp	r4, #99	; 0x63
 8007694:	d91e      	bls.n	80076d4 <settings_store_global_setting+0x54>
  {
    // Store axis configuration. Axis numbering sequence set by AXIS_SETTING defines.
    // NOTE: Ensure the setting index corresponds to the report.c settings printout.
    parameter -= AXIS_SETTINGS_START_VAL;
 8007696:	f1a4 0364 	sub.w	r3, r4, #100	; 0x64
 800769a:	b2db      	uxtb	r3, r3
    uint8_t set_idx = 0;
    while (set_idx < AXIS_N_SETTINGS)
    {
      if (parameter < N_AXIS)
 800769c:	2b04      	cmp	r3, #4
 800769e:	f240 813b 	bls.w	8007918 <settings_store_global_setting+0x298>
      }
      else
      {
        set_idx++;
        // If axis index greater than N_AXIS or setting index greater than number of axis settings, error out.
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS))
 80076a2:	2b09      	cmp	r3, #9
 80076a4:	d914      	bls.n	80076d0 <settings_store_global_setting+0x50>
        {
          return (STATUS_INVALID_STATEMENT);
        }
        parameter -= AXIS_SETTINGS_INCREMENT;
 80076a6:	f1a4 036e 	sub.w	r3, r4, #110	; 0x6e
 80076aa:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS)
 80076ac:	2b04      	cmp	r3, #4
 80076ae:	f240 811d 	bls.w	80078ec <settings_store_global_setting+0x26c>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS))
 80076b2:	2b09      	cmp	r3, #9
 80076b4:	d90c      	bls.n	80076d0 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 80076b6:	f1a4 0378 	sub.w	r3, r4, #120	; 0x78
 80076ba:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS)
 80076bc:	2b04      	cmp	r3, #4
 80076be:	f240 811a 	bls.w	80078f6 <settings_store_global_setting+0x276>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS))
 80076c2:	2b09      	cmp	r3, #9
 80076c4:	d904      	bls.n	80076d0 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 80076c6:	347e      	adds	r4, #126	; 0x7e
 80076c8:	b2e4      	uxtb	r4, r4
      if (parameter < N_AXIS)
 80076ca:	2c04      	cmp	r4, #4
 80076cc:	f240 811d 	bls.w	800790a <settings_store_global_setting+0x28a>
#else
      return (STATUS_SETTING_DISABLED_LASER);
#endif
      break;
    default:
      return (STATUS_INVALID_STATEMENT);
 80076d0:	2003      	movs	r0, #3
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t int_value = truncf(value);
 80076d4:	4628      	mov	r0, r5
 80076d6:	f7f9 fced 	bl	80010b4 <__aeabi_f2uiz>
 80076da:	b2c0      	uxtb	r0, r0
    switch (parameter)
 80076dc:	2c20      	cmp	r4, #32
 80076de:	d8f7      	bhi.n	80076d0 <settings_store_global_setting+0x50>
 80076e0:	a301      	add	r3, pc, #4	; (adr r3, 80076e8 <settings_store_global_setting+0x68>)
 80076e2:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 80076e6:	bf00      	nop
 80076e8:	0800779b 	.word	0x0800779b
 80076ec:	080077a9 	.word	0x080077a9
 80076f0:	080077d1 	.word	0x080077d1
 80076f4:	080077b1 	.word	0x080077b1
 80076f8:	080077bd 	.word	0x080077bd
 80076fc:	080077dd 	.word	0x080077dd
 8007700:	080077f1 	.word	0x080077f1
 8007704:	080076d1 	.word	0x080076d1
 8007708:	080076d1 	.word	0x080076d1
 800770c:	080076d1 	.word	0x080076d1
 8007710:	0800785b 	.word	0x0800785b
 8007714:	08007863 	.word	0x08007863
 8007718:	0800781f 	.word	0x0800781f
 800771c:	0800788f 	.word	0x0800788f
 8007720:	080076d1 	.word	0x080076d1
 8007724:	080076d1 	.word	0x080076d1
 8007728:	080076d1 	.word	0x080076d1
 800772c:	080076d1 	.word	0x080076d1
 8007730:	080076d1 	.word	0x080076d1
 8007734:	080076d1 	.word	0x080076d1
 8007738:	08007869 	.word	0x08007869
 800773c:	08007879 	.word	0x08007879
 8007740:	0800780b 	.word	0x0800780b
 8007744:	08007853 	.word	0x08007853
 8007748:	08007847 	.word	0x08007847
 800774c:	0800784d 	.word	0x0800784d
 8007750:	08007825 	.word	0x08007825
 8007754:	0800782d 	.word	0x0800782d
 8007758:	080076d1 	.word	0x080076d1
 800775c:	080076d1 	.word	0x080076d1
 8007760:	08007833 	.word	0x08007833
 8007764:	0800783d 	.word	0x0800783d
 8007768:	08007771 	.word	0x08007771
    return (STATUS_NEGATIVE_VALUE);
 800776c:	2004      	movs	r0, #4
 800776e:	bd38      	pop	{r3, r4, r5, pc}
        settings.flags |= BITFLAG_LASER_MODE;
 8007770:	4a6e      	ldr	r2, [pc, #440]	; (800792c <settings_store_global_setting+0x2ac>)
 8007772:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
      if (int_value)
 8007776:	2800      	cmp	r0, #0
 8007778:	f000 809a 	beq.w	80078b0 <settings_store_global_setting+0x230>
        settings.flags |= BITFLAG_LASER_MODE;
 800777c:	f043 0302 	orr.w	r3, r3, #2
 8007780:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
  eeprom_put_char(0, SETTINGS_VERSION);
 8007784:	210a      	movs	r1, #10
 8007786:	2000      	movs	r0, #0
 8007788:	f7fa f9e0 	bl	8001b4c <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char *)&settings, sizeof(settings_t));
 800778c:	227c      	movs	r2, #124	; 0x7c
 800778e:	4967      	ldr	r1, [pc, #412]	; (800792c <settings_store_global_setting+0x2ac>)
 8007790:	2001      	movs	r0, #1
 8007792:	f7fa f9e1 	bl	8001b58 <memcpy_to_eeprom_with_checksum>
    }
  }
  write_global_settings();
  return (STATUS_OK);
 8007796:	2000      	movs	r0, #0
 8007798:	bd38      	pop	{r3, r4, r5, pc}
      if (int_value < 2)
 800779a:	2801      	cmp	r0, #1
 800779c:	f240 80a4 	bls.w	80078e8 <settings_store_global_setting+0x268>
      settings.pulse_microseconds = int_value;
 80077a0:	4b62      	ldr	r3, [pc, #392]	; (800792c <settings_store_global_setting+0x2ac>)
 80077a2:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
      break;
 80077a6:	e7ed      	b.n	8007784 <settings_store_global_setting+0x104>
      settings.stepper_idle_lock_time = int_value;
 80077a8:	4b60      	ldr	r3, [pc, #384]	; (800792c <settings_store_global_setting+0x2ac>)
 80077aa:	f883 0056 	strb.w	r0, [r3, #86]	; 0x56
      break;
 80077ae:	e7e9      	b.n	8007784 <settings_store_global_setting+0x104>
      settings.dir_invert_mask = int_value;
 80077b0:	4b5e      	ldr	r3, [pc, #376]	; (800792c <settings_store_global_setting+0x2ac>)
 80077b2:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
      st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 80077b6:	f000 fdc3 	bl	8008340 <st_generate_step_dir_invert_masks>
      break;
 80077ba:	e7e3      	b.n	8007784 <settings_store_global_setting+0x104>
        settings.flags |= BITFLAG_INVERT_ST_ENABLE;
 80077bc:	4a5b      	ldr	r2, [pc, #364]	; (800792c <settings_store_global_setting+0x2ac>)
 80077be:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
      if (int_value)
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d079      	beq.n	80078ba <settings_store_global_setting+0x23a>
        settings.flags |= BITFLAG_INVERT_ST_ENABLE;
 80077c6:	f043 0304 	orr.w	r3, r3, #4
 80077ca:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 80077ce:	e7d9      	b.n	8007784 <settings_store_global_setting+0x104>
      settings.step_invert_mask = int_value;
 80077d0:	4b56      	ldr	r3, [pc, #344]	; (800792c <settings_store_global_setting+0x2ac>)
 80077d2:	f8a3 0052 	strh.w	r0, [r3, #82]	; 0x52
      st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 80077d6:	f000 fdb3 	bl	8008340 <st_generate_step_dir_invert_masks>
      break;
 80077da:	e7d3      	b.n	8007784 <settings_store_global_setting+0x104>
        settings.flags |= BITFLAG_INVERT_LIMIT_PINS;
 80077dc:	4a53      	ldr	r2, [pc, #332]	; (800792c <settings_store_global_setting+0x2ac>)
 80077de:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
      if (int_value)
 80077e2:	2800      	cmp	r0, #0
 80077e4:	d06e      	beq.n	80078c4 <settings_store_global_setting+0x244>
        settings.flags |= BITFLAG_INVERT_LIMIT_PINS;
 80077e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ea:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 80077ee:	e7c9      	b.n	8007784 <settings_store_global_setting+0x104>
        settings.flags |= BITFLAG_INVERT_PROBE_PIN;
 80077f0:	4b4e      	ldr	r3, [pc, #312]	; (800792c <settings_store_global_setting+0x2ac>)
 80077f2:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
      if (int_value)
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d054      	beq.n	80078a4 <settings_store_global_setting+0x224>
        settings.flags |= BITFLAG_INVERT_PROBE_PIN;
 80077fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      probe_configure_invert_mask(false);
 80077fe:	2000      	movs	r0, #0
 8007800:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8007804:	f7fd fc5e 	bl	80050c4 <probe_configure_invert_mask>
      break;
 8007808:	e7bc      	b.n	8007784 <settings_store_global_setting+0x104>
        settings.flags |= BITFLAG_HOMING_ENABLE;
 800780a:	4a48      	ldr	r2, [pc, #288]	; (800792c <settings_store_global_setting+0x2ac>)
 800780c:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
      if (int_value)
 8007810:	2800      	cmp	r0, #0
 8007812:	d061      	beq.n	80078d8 <settings_store_global_setting+0x258>
        settings.flags |= BITFLAG_HOMING_ENABLE;
 8007814:	f043 0310 	orr.w	r3, r3, #16
 8007818:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 800781c:	e7b2      	b.n	8007784 <settings_store_global_setting+0x104>
      settings.arc_tolerance = value;
 800781e:	4b43      	ldr	r3, [pc, #268]	; (800792c <settings_store_global_setting+0x2ac>)
 8007820:	65dd      	str	r5, [r3, #92]	; 0x5c
      break;
 8007822:	e7af      	b.n	8007784 <settings_store_global_setting+0x104>
      settings.homing_debounce_delay = int_value;
 8007824:	4b41      	ldr	r3, [pc, #260]	; (800792c <settings_store_global_setting+0x2ac>)
 8007826:	f8a3 0074 	strh.w	r0, [r3, #116]	; 0x74
      break;
 800782a:	e7ab      	b.n	8007784 <settings_store_global_setting+0x104>
      settings.homing_pulloff = value;
 800782c:	4b3f      	ldr	r3, [pc, #252]	; (800792c <settings_store_global_setting+0x2ac>)
 800782e:	679d      	str	r5, [r3, #120]	; 0x78
      break;
 8007830:	e7a8      	b.n	8007784 <settings_store_global_setting+0x104>
      settings.rpm_max = value;
 8007832:	4b3e      	ldr	r3, [pc, #248]	; (800792c <settings_store_global_setting+0x2ac>)
 8007834:	661d      	str	r5, [r3, #96]	; 0x60
      spindle_init();
 8007836:	f000 f91f 	bl	8007a78 <spindle_init>
      break; // Re-initialize spindle rpm calibration
 800783a:	e7a3      	b.n	8007784 <settings_store_global_setting+0x104>
      settings.rpm_min = value;
 800783c:	4b3b      	ldr	r3, [pc, #236]	; (800792c <settings_store_global_setting+0x2ac>)
 800783e:	665d      	str	r5, [r3, #100]	; 0x64
      spindle_init();
 8007840:	f000 f91a 	bl	8007a78 <spindle_init>
      break; // Re-initialize spindle rpm calibration
 8007844:	e79e      	b.n	8007784 <settings_store_global_setting+0x104>
      settings.homing_feed_rate = value;
 8007846:	4b39      	ldr	r3, [pc, #228]	; (800792c <settings_store_global_setting+0x2ac>)
 8007848:	66dd      	str	r5, [r3, #108]	; 0x6c
      break;
 800784a:	e79b      	b.n	8007784 <settings_store_global_setting+0x104>
      settings.homing_seek_rate = value;
 800784c:	4b37      	ldr	r3, [pc, #220]	; (800792c <settings_store_global_setting+0x2ac>)
 800784e:	671d      	str	r5, [r3, #112]	; 0x70
      break;
 8007850:	e798      	b.n	8007784 <settings_store_global_setting+0x104>
      settings.homing_dir_mask = int_value;
 8007852:	4b36      	ldr	r3, [pc, #216]	; (800792c <settings_store_global_setting+0x2ac>)
 8007854:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
      break;
 8007858:	e794      	b.n	8007784 <settings_store_global_setting+0x104>
      settings.status_report_mask = int_value;
 800785a:	4b34      	ldr	r3, [pc, #208]	; (800792c <settings_store_global_setting+0x2ac>)
 800785c:	f883 0057 	strb.w	r0, [r3, #87]	; 0x57
      break;
 8007860:	e790      	b.n	8007784 <settings_store_global_setting+0x104>
      settings.junction_deviation = value;
 8007862:	4b32      	ldr	r3, [pc, #200]	; (800792c <settings_store_global_setting+0x2ac>)
 8007864:	659d      	str	r5, [r3, #88]	; 0x58
      break;
 8007866:	e78d      	b.n	8007784 <settings_store_global_setting+0x104>
        if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE))
 8007868:	4a30      	ldr	r2, [pc, #192]	; (800792c <settings_store_global_setting+0x2ac>)
 800786a:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
      if (int_value)
 800786e:	b370      	cbz	r0, 80078ce <settings_store_global_setting+0x24e>
        if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE))
 8007870:	06d9      	lsls	r1, r3, #27
 8007872:	d455      	bmi.n	8007920 <settings_store_global_setting+0x2a0>
          return (STATUS_SOFT_LIMIT_ERROR);
 8007874:	200a      	movs	r0, #10
 8007876:	bd38      	pop	{r3, r4, r5, pc}
        settings.flags |= BITFLAG_HARD_LIMIT_ENABLE;
 8007878:	4b2c      	ldr	r3, [pc, #176]	; (800792c <settings_store_global_setting+0x2ac>)
 800787a:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
      if (int_value)
 800787e:	b380      	cbz	r0, 80078e2 <settings_store_global_setting+0x262>
        settings.flags |= BITFLAG_HARD_LIMIT_ENABLE;
 8007880:	f042 0208 	orr.w	r2, r2, #8
 8007884:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      limits_init(); // Re-init to immediately change. NOTE: Nice to have but could be problematic later.
 8007888:	f7fb fba4 	bl	8002fd4 <limits_init>
      break;
 800788c:	e77a      	b.n	8007784 <settings_store_global_setting+0x104>
        settings.flags |= BITFLAG_REPORT_INCHES;
 800788e:	4b27      	ldr	r3, [pc, #156]	; (800792c <settings_store_global_setting+0x2ac>)
 8007890:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
      if (int_value)
 8007894:	b148      	cbz	r0, 80078aa <settings_store_global_setting+0x22a>
        settings.flags |= BITFLAG_REPORT_INCHES;
 8007896:	f042 0201 	orr.w	r2, r2, #1
 800789a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      system_flag_wco_change(); // Make sure WCO is immediately updated.
 800789e:	f001 fee9 	bl	8009674 <system_flag_wco_change>
      break;
 80078a2:	e76f      	b.n	8007784 <settings_store_global_setting+0x104>
        settings.flags &= ~BITFLAG_INVERT_PROBE_PIN;
 80078a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078a8:	e7a9      	b.n	80077fe <settings_store_global_setting+0x17e>
        settings.flags &= ~BITFLAG_REPORT_INCHES;
 80078aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078ae:	e7f4      	b.n	800789a <settings_store_global_setting+0x21a>
        settings.flags &= ~BITFLAG_LASER_MODE;
 80078b0:	f023 0302 	bic.w	r3, r3, #2
 80078b4:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 80078b8:	e764      	b.n	8007784 <settings_store_global_setting+0x104>
        settings.flags &= ~BITFLAG_INVERT_ST_ENABLE;
 80078ba:	f023 0304 	bic.w	r3, r3, #4
 80078be:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 80078c2:	e75f      	b.n	8007784 <settings_store_global_setting+0x104>
        settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS;
 80078c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c8:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 80078cc:	e75a      	b.n	8007784 <settings_store_global_setting+0x104>
        settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE;
 80078ce:	f023 0320 	bic.w	r3, r3, #32
 80078d2:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 80078d6:	e755      	b.n	8007784 <settings_store_global_setting+0x104>
        settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
 80078d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80078dc:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 80078e0:	e750      	b.n	8007784 <settings_store_global_setting+0x104>
        settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE;
 80078e2:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 80078e6:	e7cd      	b.n	8007884 <settings_store_global_setting+0x204>
        return (STATUS_SETTING_STEP_PULSE_MIN);
 80078e8:	2006      	movs	r0, #6
 80078ea:	bd38      	pop	{r3, r4, r5, pc}
          settings.max_rate[parameter] = value;
 80078ec:	4a0f      	ldr	r2, [pc, #60]	; (800792c <settings_store_global_setting+0x2ac>)
 80078ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80078f2:	615d      	str	r5, [r3, #20]
          break;
 80078f4:	e746      	b.n	8007784 <settings_store_global_setting+0x104>
          settings.acceleration[parameter] = value * 60 * 60;
 80078f6:	4628      	mov	r0, r5
 80078f8:	490d      	ldr	r1, [pc, #52]	; (8007930 <settings_store_global_setting+0x2b0>)
 80078fa:	f103 040a 	add.w	r4, r3, #10
 80078fe:	f7f9 f9d7 	bl	8000cb0 <__aeabi_fmul>
 8007902:	4b0a      	ldr	r3, [pc, #40]	; (800792c <settings_store_global_setting+0x2ac>)
 8007904:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
          break; // Convert to mm/min^2 for grbl internal use.
 8007908:	e73c      	b.n	8007784 <settings_store_global_setting+0x104>
          settings.max_travel[parameter] = -value;
 800790a:	4b08      	ldr	r3, [pc, #32]	; (800792c <settings_store_global_setting+0x2ac>)
 800790c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8007910:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007914:	63e5      	str	r5, [r4, #60]	; 0x3c
          break; // Store as negative for grbl internal use.
 8007916:	e735      	b.n	8007784 <settings_store_global_setting+0x104>
          settings.steps_per_mm[parameter] = value;
 8007918:	4a04      	ldr	r2, [pc, #16]	; (800792c <settings_store_global_setting+0x2ac>)
 800791a:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
          break;
 800791e:	e731      	b.n	8007784 <settings_store_global_setting+0x104>
        settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE;
 8007920:	f043 0320 	orr.w	r3, r3, #32
 8007924:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 8007928:	e72c      	b.n	8007784 <settings_store_global_setting+0x104>
 800792a:	bf00      	nop
 800792c:	20001d30 	.word	0x20001d30
 8007930:	45610000 	.word	0x45610000

08007934 <settings_init>:
}

// Initialize the config subsystem
void settings_init()
{
 8007934:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t version = eeprom_get_char(0);
 8007936:	2000      	movs	r0, #0
{
 8007938:	b087      	sub	sp, #28
  uint8_t version = eeprom_get_char(0);
 800793a:	f7fa f901 	bl	8001b40 <eeprom_get_char>
  if (version == SETTINGS_VERSION)
 800793e:	280a      	cmp	r0, #10
 8007940:	d07b      	beq.n	8007a3a <settings_init+0x106>
  if (!read_global_settings())
  {
    report_status_message(STATUS_SETTING_READ_FAIL);
 8007942:	2007      	movs	r0, #7
 8007944:	f7fe fdf0 	bl	8006528 <report_status_message>
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007948:	2360      	movs	r3, #96	; 0x60
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 800794a:	f44f 10f8 	mov.w	r0, #2031616	; 0x1f0000
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 800794e:	4c40      	ldr	r4, [pc, #256]	; (8007a50 <settings_init+0x11c>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007950:	211f      	movs	r1, #31
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007952:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007956:	4b3f      	ldr	r3, [pc, #252]	; (8007a54 <settings_init+0x120>)
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007958:	f8c4 0052 	str.w	r0, [r4, #82]	; 0x52
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 800795c:	2000      	movs	r0, #0
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 800795e:	65e3      	str	r3, [r4, #92]	; 0x5c
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007960:	22fa      	movs	r2, #250	; 0xfa
      settings.flags |= BITFLAG_HOMING_ENABLE;
 8007962:	271e      	movs	r7, #30
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007964:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007968:	2500      	movs	r5, #0
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 800796a:	4e3b      	ldr	r6, [pc, #236]	; (8007a58 <settings_init+0x124>)
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 800796c:	6660      	str	r0, [r4, #100]	; 0x64
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 800796e:	65a6      	str	r6, [r4, #88]	; 0x58
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007970:	4e3a      	ldr	r6, [pc, #232]	; (8007a5c <settings_init+0x128>)
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007972:	483b      	ldr	r0, [pc, #236]	; (8007a60 <settings_init+0x12c>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007974:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8007978:	493a      	ldr	r1, [pc, #232]	; (8007a64 <settings_init+0x130>)
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 800797a:	66e6      	str	r6, [r4, #108]	; 0x6c
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 800797c:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007980:	4e39      	ldr	r6, [pc, #228]	; (8007a68 <settings_init+0x134>)
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007982:	4a3a      	ldr	r2, [pc, #232]	; (8007a6c <settings_init+0x138>)
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007984:	67a3      	str	r3, [r4, #120]	; 0x78
      settings.flags |= BITFLAG_HOMING_ENABLE;
 8007986:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 800798a:	4b39      	ldr	r3, [pc, #228]	; (8007a70 <settings_init+0x13c>)
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 800798c:	4f39      	ldr	r7, [pc, #228]	; (8007a74 <settings_init+0x140>)
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 800798e:	6620      	str	r0, [r4, #96]	; 0x60
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007990:	6720      	str	r0, [r4, #112]	; 0x70
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8007992:	6061      	str	r1, [r4, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8007994:	60a1      	str	r1, [r4, #8]
    settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 8007996:	60e1      	str	r1, [r4, #12]
    settings.steps_per_mm[B_AXIS] = DEFAULT_B_STEPS_PER_MM;
 8007998:	6121      	str	r1, [r4, #16]
  eeprom_put_char(0, SETTINGS_VERSION);
 800799a:	4628      	mov	r0, r5
 800799c:	210a      	movs	r1, #10
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 800799e:	62a2      	str	r2, [r4, #40]	; 0x28
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 80079a0:	62e2      	str	r2, [r4, #44]	; 0x2c
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 80079a2:	6322      	str	r2, [r4, #48]	; 0x30
    settings.acceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 80079a4:	6362      	str	r2, [r4, #52]	; 0x34
    settings.acceleration[B_AXIS] = DEFAULT_B_ACCELERATION;
 80079a6:	63a2      	str	r2, [r4, #56]	; 0x38
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 80079a8:	63e3      	str	r3, [r4, #60]	; 0x3c
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 80079aa:	6423      	str	r3, [r4, #64]	; 0x40
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 80079ac:	6463      	str	r3, [r4, #68]	; 0x44
    settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 80079ae:	64a3      	str	r3, [r4, #72]	; 0x48
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 80079b0:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 80079b4:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 80079b8:	6166      	str	r6, [r4, #20]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 80079ba:	61a6      	str	r6, [r4, #24]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 80079bc:	61e6      	str	r6, [r4, #28]
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 80079be:	6227      	str	r7, [r4, #32]
    settings.max_rate[B_AXIS] = DEFAULT_B_MAX_RATE;
 80079c0:	6267      	str	r7, [r4, #36]	; 0x24
    settings.max_travel[B_AXIS] = (-DEFAULT_B_MAX_TRAVEL);
 80079c2:	64e3      	str	r3, [r4, #76]	; 0x4c
  eeprom_put_char(0, SETTINGS_VERSION);
 80079c4:	f7fa f8c2 	bl	8001b4c <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char *)&settings, sizeof(settings_t));
 80079c8:	4621      	mov	r1, r4
    memset(&coord_data, 0, sizeof(coord_data));
 80079ca:	f44f 7400 	mov.w	r4, #512	; 0x200
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char *)&settings, sizeof(settings_t));
 80079ce:	227c      	movs	r2, #124	; 0x7c
 80079d0:	2001      	movs	r0, #1
 80079d2:	f7fa f8c1 	bl	8001b58 <memcpy_to_eeprom_with_checksum>
    memset(&coord_data, 0, sizeof(coord_data));
 80079d6:	9501      	str	r5, [sp, #4]
 80079d8:	9502      	str	r5, [sp, #8]
 80079da:	9503      	str	r5, [sp, #12]
 80079dc:	9504      	str	r5, [sp, #16]
 80079de:	9505      	str	r5, [sp, #20]
  protocol_buffer_synchronize();
 80079e0:	f7fe fab8 	bl	8005f54 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr, (char *)coord_data, sizeof(float) * N_AXIS);
 80079e4:	4620      	mov	r0, r4
 80079e6:	2214      	movs	r2, #20
 80079e8:	a901      	add	r1, sp, #4
 80079ea:	3415      	adds	r4, #21
 80079ec:	f7fa f8b4 	bl	8001b58 <memcpy_to_eeprom_with_checksum>
    for (idx = 0; idx <= SETTING_INDEX_NCOORD; idx++)
 80079f0:	f5b4 7f2a 	cmp.w	r4, #680	; 0x2a8
 80079f4:	d1f4      	bne.n	80079e0 <settings_init+0xac>
    eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 80079f6:	2100      	movs	r1, #0
 80079f8:	f44f 7040 	mov.w	r0, #768	; 0x300
 80079fc:	f7fa f8a6 	bl	8001b4c <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK + 1, 0); // Checksum
 8007a00:	2100      	movs	r1, #0
 8007a02:	f240 3001 	movw	r0, #769	; 0x301
 8007a06:	f7fa f8a1 	bl	8001b4c <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK + (LINE_BUFFER_SIZE + 1), 0);
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	f240 305b 	movw	r0, #859	; 0x35b
 8007a10:	f7fa f89c 	bl	8001b4c <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK + (LINE_BUFFER_SIZE + 2), 0); // Checksum
 8007a14:	2100      	movs	r1, #0
 8007a16:	f44f 7057 	mov.w	r0, #860	; 0x35c
 8007a1a:	f7fa f897 	bl	8001b4c <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO, 0);
 8007a1e:	2100      	movs	r1, #0
 8007a20:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007a24:	f7fa f892 	bl	8001b4c <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO + 1, 0); // Checksum
 8007a28:	2100      	movs	r1, #0
 8007a2a:	f240 30c1 	movw	r0, #961	; 0x3c1
 8007a2e:	f7fa f88d 	bl	8001b4c <eeprom_put_char>
    settings_restore(SETTINGS_RESTORE_ALL); // Force restore all EEPROM data.
    report_grbl_settings();
 8007a32:	f7fe fe17 	bl	8006664 <report_grbl_settings>
  }
}
 8007a36:	b007      	add	sp, #28
 8007a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(memcpy_from_eeprom_with_checksum((char *)&settings, EEPROM_ADDR_GLOBAL, sizeof(settings_t))))
 8007a3a:	227c      	movs	r2, #124	; 0x7c
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	4804      	ldr	r0, [pc, #16]	; (8007a50 <settings_init+0x11c>)
 8007a40:	f7fa f8dc 	bl	8001bfc <memcpy_from_eeprom_with_checksum>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	f43f af7c 	beq.w	8007942 <settings_init+0xe>
}
 8007a4a:	b007      	add	sp, #28
 8007a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20001d30 	.word	0x20001d30
 8007a54:	3b03126f 	.word	0x3b03126f
 8007a58:	3c23d70a 	.word	0x3c23d70a
 8007a5c:	42c80000 	.word	0x42c80000
 8007a60:	447a0000 	.word	0x447a0000
 8007a64:	42480000 	.word	0x42480000
 8007a68:	44fa0000 	.word	0x44fa0000
 8007a6c:	4bdbba00 	.word	0x4bdbba00
 8007a70:	c38c0000 	.word	0xc38c0000
 8007a74:	44160000 	.word	0x44160000

08007a78 <spindle_init>:
  static float pwm_gradient; // Precalulated value to speed up rpm to PWM conversions.
#endif


void spindle_init()
{
 8007a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#ifdef VARIABLE_SPINDLE
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007a7c:	4b40      	ldr	r3, [pc, #256]	; (8007b80 <spindle_init+0x108>)
{
 8007a7e:	b088      	sub	sp, #32
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007a80:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8007a82:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007a84:	f7f9 f80a 	bl	8000a9c <__aeabi_fsub>
 8007a88:	4601      	mov	r1, r0
 8007a8a:	483e      	ldr	r0, [pc, #248]	; (8007b84 <spindle_init+0x10c>)
#if defined (STM32F103C8)
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007a8c:	2601      	movs	r6, #1
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007a8e:	f7f9 f9c3 	bl	8000e18 <__aeabi_fdiv>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007a92:	f04f 0803 	mov.w	r8, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007a96:	2510      	movs	r5, #16
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);

#ifdef USE_SPINDLE_ENABLE_PIN
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 8007a98:	f04f 0902 	mov.w	r9, #2
#endif

#ifdef VARIABLE_SPINDLE
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
  TIM_TimeBaseInitTypeDef timerInitStructure;
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8007a9c:	2400      	movs	r4, #0
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007a9e:	4b3a      	ldr	r3, [pc, #232]	; (8007b88 <spindle_init+0x110>)
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007aa0:	f10d 0a20 	add.w	sl, sp, #32
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007aa4:	6018      	str	r0, [r3, #0]
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007aa6:	4f39      	ldr	r7, [pc, #228]	; (8007b8c <spindle_init+0x114>)
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
 8007aa8:	4631      	mov	r1, r6
 8007aaa:	2008      	movs	r0, #8
 8007aac:	f7f9 fec4 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007ab0:	f82a 6d20 	strh.w	r6, [sl, #-32]!
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007ab4:	4651      	mov	r1, sl
 8007ab6:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007ab8:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007abc:	f88d 8002 	strb.w	r8, [sp, #2]
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007ac0:	f7f9 fc9e 	bl	8001400 <GPIO_Init>
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8007ac4:	4651      	mov	r1, sl
 8007ac6:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007ac8:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007acc:	f88d 8002 	strb.w	r8, [sp, #2]
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 8007ad0:	f8ad 9000 	strh.w	r9, [sp]
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8007ad4:	f7f9 fc94 	bl	8001400 <GPIO_Init>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8007ad8:	4631      	mov	r1, r6
 8007ada:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007ade:	f7f9 feab 	bl	8001838 <RCC_APB2PeriphClockCmd>
  TIM_TimeBaseStructInit(&timerInitStructure);
 8007ae2:	a801      	add	r0, sp, #4
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8007ae4:	9404      	str	r4, [sp, #16]
 8007ae6:	9405      	str	r4, [sp, #20]
 8007ae8:	9406      	str	r4, [sp, #24]
 8007aea:	9407      	str	r4, [sp, #28]
  TIM_TimeBaseStructInit(&timerInitStructure);
 8007aec:	f7f9 ff5a 	bl	80019a4 <TIM_TimeBaseStructInit>

  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 8007af0:	2263      	movs	r2, #99	; 0x63
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8007af2:	4b27      	ldr	r3, [pc, #156]	; (8007b90 <spindle_init+0x118>)
 8007af4:	4827      	ldr	r0, [pc, #156]	; (8007b94 <spindle_init+0x11c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  timerInitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007af8:	4d27      	ldr	r5, [pc, #156]	; (8007b98 <spindle_init+0x120>)
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8007afa:	fba0 0303 	umull	r0, r3, r0, r3
 8007afe:	0c9b      	lsrs	r3, r3, #18
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007b00:	a901      	add	r1, sp, #4
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8007b02:	3b01      	subs	r3, #1
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007b04:	4628      	mov	r0, r5
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 8007b06:	f8ad 2008 	strh.w	r2, [sp, #8]
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8007b0a:	f8ad 3004 	strh.w	r3, [sp, #4]
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8007b0e:	f8ad 4006 	strh.w	r4, [sp, #6]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8007b12:	f8ad 400a 	strh.w	r4, [sp, #10]
  timerInitStructure.TIM_RepetitionCounter = 0;
 8007b16:	f88d 400c 	strb.w	r4, [sp, #12]
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007b1a:	f7f9 fea5 	bl	8001868 <TIM_TimeBaseInit>

  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8007b1e:	4b1f      	ldr	r3, [pc, #124]	; (8007b9c <spindle_init+0x124>)
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
  outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
  outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;

  TIM_OC1Init(TIM1, &outputChannelInit);
 8007b20:	a904      	add	r1, sp, #16
 8007b22:	4628      	mov	r0, r5
  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8007b24:	9304      	str	r3, [sp, #16]
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
 8007b26:	f8cd 4016 	str.w	r4, [sp, #22]
  TIM_OC1Init(TIM1, &outputChannelInit);
 8007b2a:	f7f9 fef3 	bl	8001914 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8007b2e:	4628      	mov	r0, r5
 8007b30:	2108      	movs	r1, #8
 8007b32:	f7f9 ff67 	bl	8001a04 <TIM_OC1PreloadConfig>
  TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007b36:	4621      	mov	r1, r4
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f7f9 ff49 	bl	80019d0 <TIM_CtrlPWMOutputs>
  TIM_Cmd(TIM1, ENABLE);
 8007b3e:	4631      	mov	r1, r6
 8007b40:	4628      	mov	r0, r5
 8007b42:	f7f9 ff37 	bl	80019b4 <TIM_Cmd>

  RCC_APB2PeriphClockCmd(RCC_SPINDLE_PWM_PORT, ENABLE);
 8007b46:	4631      	mov	r1, r6
 8007b48:	2004      	movs	r0, #4
 8007b4a:	f7f9 fe75 	bl	8001838 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8007b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8007b52:	2218      	movs	r2, #24
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8007b54:	4651      	mov	r1, sl
 8007b56:	4812      	ldr	r0, [pc, #72]	; (8007ba0 <spindle_init+0x128>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8007b58:	f88d 2003 	strb.w	r2, [sp, #3]
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8007b5c:	f8ad 3000 	strh.w	r3, [sp]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007b60:	f88d 8002 	strb.w	r8, [sp, #2]
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8007b64:	f7f9 fc4c 	bl	8001400 <GPIO_Init>
#endif
#endif

#if defined (STM32F103C8)
	#ifdef VARIABLE_SPINDLE
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007b68:	4621      	mov	r1, r4
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f7f9 ff30 	bl	80019d0 <TIM_CtrlPWMOutputs>
	#endif
    #ifdef USE_SPINDLE_ENABLE_PIN
      #ifdef INVERT_SPINDLE_ENABLE_PIN
        SetSpindleEnablebit();
 8007b70:	4632      	mov	r2, r6
 8007b72:	4649      	mov	r1, r9
 8007b74:	4638      	mov	r0, r7
 8007b76:	f7f9 fe05 	bl	8001784 <GPIO_WriteBit>
}
 8007b7a:	b008      	add	sp, #32
 8007b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b80:	20001d30 	.word	0x20001d30
 8007b84:	42be0000 	.word	0x42be0000
 8007b88:	20001370 	.word	0x20001370
 8007b8c:	40010c00 	.word	0x40010c00
 8007b90:	20000004 	.word	0x20000004
 8007b94:	431bde83 	.word	0x431bde83
 8007b98:	40012c00 	.word	0x40012c00
 8007b9c:	00010060 	.word	0x00010060
 8007ba0:	40010800 	.word	0x40010800

08007ba4 <spindle_get_state>:
{
 8007ba4:	b508      	push	{r3, lr}
  pin = GPIO_ReadInputData(SPINDLE_ENABLE_PORT);
 8007ba6:	4807      	ldr	r0, [pc, #28]	; (8007bc4 <spindle_get_state+0x20>)
 8007ba8:	f7f9 fde0 	bl	800176c <GPIO_ReadInputData>
 8007bac:	b2c0      	uxtb	r0, r0
		  if (bit_isfalse(pin,(1<<SPINDLE_ENABLE_BIT)))
 8007bae:	0783      	lsls	r3, r0, #30
 8007bb0:	d405      	bmi.n	8007bbe <spindle_get_state+0x1a>
		  if (pin & (1 << SPINDLE_DIRECTION_BIT)) { return(SPINDLE_STATE_CCW); }
 8007bb2:	f010 0f01 	tst.w	r0, #1
		  else { return(SPINDLE_STATE_CW); }
 8007bb6:	bf14      	ite	ne
 8007bb8:	2002      	movne	r0, #2
 8007bba:	2001      	moveq	r0, #1
 8007bbc:	bd08      	pop	{r3, pc}
		} else { return(SPINDLE_STATE_DISABLE); }
 8007bbe:	2000      	movs	r0, #0
}
 8007bc0:	bd08      	pop	{r3, pc}
 8007bc2:	bf00      	nop
 8007bc4:	40010c00 	.word	0x40010c00

08007bc8 <spindle_stop>:
{
 8007bc8:	b508      	push	{r3, lr}
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007bca:	2100      	movs	r1, #0
 8007bcc:	4804      	ldr	r0, [pc, #16]	; (8007be0 <spindle_stop+0x18>)
 8007bce:	f7f9 feff 	bl	80019d0 <TIM_CtrlPWMOutputs>
      #else
        ResetSpindleEnablebit();
      #endif
    #endif
#endif
}
 8007bd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        SetSpindleEnablebit();
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	2102      	movs	r1, #2
 8007bda:	4802      	ldr	r0, [pc, #8]	; (8007be4 <spindle_stop+0x1c>)
 8007bdc:	f7f9 bdd2 	b.w	8001784 <GPIO_WriteBit>
 8007be0:	40012c00 	.word	0x40012c00
 8007be4:	40010c00 	.word	0x40010c00

08007be8 <spindle_set_speed>:

#ifdef VARIABLE_SPINDLE
  // Sets spindle speed PWM output and enable pin, if configured. Called by spindle_set_state()
  // and stepper ISR. Keep routine small and efficient.
  void spindle_set_speed(SPINDLE_PWM_TYPE pwm_value)
  {
 8007be8:	4601      	mov	r1, r0
#ifdef AVRTARGET
		SPINDLE_OCR_REGISTER = pwm_value; // Set PWM output level.
#endif
#if defined (STM32F103C8)
		TIM1->CCR1 = pwm_value;
 8007bea:	4803      	ldr	r0, [pc, #12]	; (8007bf8 <spindle_set_speed+0x10>)
 8007bec:	8681      	strh	r1, [r0, #52]	; 0x34
					SetSpindleEnablebit();
				  #endif
				#endif
		 }
		#else
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8007bee:	b101      	cbz	r1, 8007bf2 <spindle_set_speed+0xa>
			} else {
			#ifdef AVRTARGET
      SPINDLE_TCCRA_REGISTER |= (1<<SPINDLE_COMB_BIT); // Ensure PWM output is enabled.
			#endif
			#if defined (STM32F103C8)
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	f7f9 beed 	b.w	80019d0 <TIM_CtrlPWMOutputs>
 8007bf6:	bf00      	nop
 8007bf8:	40012c00 	.word	0x40012c00

08007bfc <spindle_compute_pwm_value>:
		return(pwm_value);
	}
  #else
	// Called by spindle_set_state() and step segment generator. Keep routine small and efficient.
	SPINDLE_PWM_TYPE spindle_compute_pwm_value(float rpm) // 328p PWM register is 8-bit.
	{
 8007bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		SPINDLE_PWM_TYPE pwm_value;
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
																					 // Calculate PWM register value based on rpm max/min settings and programmed rpm.
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007bfe:	4b1e      	ldr	r3, [pc, #120]	; (8007c78 <spindle_compute_pwm_value+0x7c>)
	{
 8007c00:	4607      	mov	r7, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007c02:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8007c04:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8007c06:	4630      	mov	r0, r6
 8007c08:	4621      	mov	r1, r4
 8007c0a:	f7f9 fa03 	bl	8001014 <__aeabi_fcmpge>
 8007c0e:	4d1b      	ldr	r5, [pc, #108]	; (8007c7c <spindle_compute_pwm_value+0x80>)
 8007c10:	b110      	cbz	r0, 8007c18 <spindle_compute_pwm_value+0x1c>
			// No PWM range possible. Set simple on/off spindle control pin state.
			sys.spindle_speed = settings.rpm_max;
 8007c12:	612c      	str	r4, [r5, #16]
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 8007c14:	2064      	movs	r0, #100	; 0x64
 8007c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007c18:	7aa8      	ldrb	r0, [r5, #10]
 8007c1a:	f7f8 fff5 	bl	8000c08 <__aeabi_i2f>
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f9 f846 	bl	8000cb0 <__aeabi_fmul>
 8007c24:	4916      	ldr	r1, [pc, #88]	; (8007c80 <spindle_compute_pwm_value+0x84>)
 8007c26:	f7f9 f843 	bl	8000cb0 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007c2a:	4621      	mov	r1, r4
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007c2c:	4607      	mov	r7, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007c2e:	f7f9 f9f1 	bl	8001014 <__aeabi_fcmpge>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d1ed      	bne.n	8007c12 <spindle_compute_pwm_value+0x16>
		}
		else if (rpm <= settings.rpm_min) {
 8007c36:	4631      	mov	r1, r6
 8007c38:	4638      	mov	r0, r7
 8007c3a:	f7f9 f9e1 	bl	8001000 <__aeabi_fcmple>
 8007c3e:	b140      	cbz	r0, 8007c52 <spindle_compute_pwm_value+0x56>
			if (rpm == 0.0f) { // S0 disables spindle
 8007c40:	2400      	movs	r4, #0
 8007c42:	4638      	mov	r0, r7
 8007c44:	4621      	mov	r1, r4
 8007c46:	f7f9 f9c7 	bl	8000fd8 <__aeabi_fcmpeq>
 8007c4a:	b990      	cbnz	r0, 8007c72 <spindle_compute_pwm_value+0x76>
				sys.spindle_speed = 0.0f;
				pwm_value = SPINDLE_PWM_OFF_VALUE;
			}
			else { // Set minimum PWM output
				sys.spindle_speed = settings.rpm_min;
 8007c4c:	612e      	str	r6, [r5, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 8007c4e:	2005      	movs	r0, #5
 8007c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else {
			// Compute intermediate PWM value with linear spindle speed model.
			// NOTE: A nonlinear model could be installed here, if required, but keep it VERY light-weight.
			sys.spindle_speed = rpm;
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007c52:	4631      	mov	r1, r6
			sys.spindle_speed = rpm;
 8007c54:	612f      	str	r7, [r5, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007c56:	4638      	mov	r0, r7
 8007c58:	f7f8 ff20 	bl	8000a9c <__aeabi_fsub>
 8007c5c:	4b09      	ldr	r3, [pc, #36]	; (8007c84 <spindle_compute_pwm_value+0x88>)
 8007c5e:	6819      	ldr	r1, [r3, #0]
 8007c60:	f7f9 f826 	bl	8000cb0 <__aeabi_fmul>
 8007c64:	f003 f8e4 	bl	800ae30 <floorf>
 8007c68:	f7f9 fa24 	bl	80010b4 <__aeabi_f2uiz>
 8007c6c:	3005      	adds	r0, #5
 8007c6e:	b280      	uxth	r0, r0
		}
		return(pwm_value);
	}
 8007c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				sys.spindle_speed = 0.0f;
 8007c72:	612c      	str	r4, [r5, #16]
				pwm_value = SPINDLE_PWM_OFF_VALUE;
 8007c74:	2000      	movs	r0, #0
 8007c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c78:	20001d30 	.word	0x20001d30
 8007c7c:	20001b6c 	.word	0x20001b6c
 8007c80:	3c23d70a 	.word	0x3c23d70a
 8007c84:	20001370 	.word	0x20001370

08007c88 <spindle_set_state>:
#ifdef VARIABLE_SPINDLE
  void spindle_set_state(uint8_t state, float rpm)
#else
  void _spindle_set_state(uint8_t state)
#endif
{
 8007c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (sys.abort) { return; } // Block during abort.
 8007c8a:	4c3e      	ldr	r4, [pc, #248]	; (8007d84 <spindle_set_state+0xfc>)
 8007c8c:	7862      	ldrb	r2, [r4, #1]
 8007c8e:	bb2a      	cbnz	r2, 8007cdc <spindle_set_state+0x54>
 8007c90:	4605      	mov	r5, r0
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8007c92:	b320      	cbz	r0, 8007cde <spindle_set_state+0x56>
    #endif
    spindle_stop();
  
  } else {
    #if !(defined(AVRTARGET) && defined(USE_SPINDLE_DIR_AS_ENABLE_PIN))
      if (state == SPINDLE_ENABLE_CW) {
 8007c94:	2810      	cmp	r0, #16
 8007c96:	460e      	mov	r6, r1
 8007c98:	d050      	beq.n	8007d3c <spindle_set_state+0xb4>
        ResetSpindleDirectionBit();
	  }
	  else {
      SetSpindleDirectionBit();
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	483a      	ldr	r0, [pc, #232]	; (8007d88 <spindle_set_state+0x100>)
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	f7f9 fd70 	bl	8001784 <GPIO_WriteBit>
      }
    #endif
  
    #ifdef VARIABLE_SPINDLE
      // NOTE: Assumes all calls to this function is when Grbl is not moving or must remain off.
      if (settings.flags & BITFLAG_LASER_MODE) {
 8007ca4:	4b39      	ldr	r3, [pc, #228]	; (8007d8c <spindle_set_state+0x104>)
 8007ca6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8007caa:	0792      	lsls	r2, r2, #30
 8007cac:	d425      	bmi.n	8007cfa <spindle_set_state+0x72>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007cae:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8007cb0:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	f7f9 f9ad 	bl	8001014 <__aeabi_fcmpge>
 8007cba:	b310      	cbz	r0, 8007d02 <spindle_set_state+0x7a>
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 8007cbc:	2264      	movs	r2, #100	; 0x64
			sys.spindle_speed = settings.rpm_max;
 8007cbe:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007cc0:	4b33      	ldr	r3, [pc, #204]	; (8007d90 <spindle_set_state+0x108>)
 8007cc2:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	4832      	ldr	r0, [pc, #200]	; (8007d90 <spindle_set_state+0x108>)
 8007cc8:	f7f9 fe82 	bl	80019d0 <TIM_CtrlPWMOutputs>

	#if defined (STM32F103C8)
#if (defined(USE_SPINDLE_ENABLE_PIN) && \
        !defined(SPINDLE_ENABLE_OFF_WITH_ZERO_SPEED)) || !defined(VARIABLE_SPINDLE)
	  #ifdef INVERT_SPINDLE_ENABLE_PIN
		ResetSpindleEnablebit();
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2102      	movs	r1, #2
 8007cd0:	482d      	ldr	r0, [pc, #180]	; (8007d88 <spindle_set_state+0x100>)
 8007cd2:	f7f9 fd57 	bl	8001784 <GPIO_WriteBit>
	  #endif
	#endif
	#endif
  }
  
  sys.report_ovr_counter = 0; // Set to report change immediately
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	7323      	strb	r3, [r4, #12]
 8007cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sys.spindle_speed = 0.0f;
 8007cde:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007ce0:	4601      	mov	r1, r0
 8007ce2:	482b      	ldr	r0, [pc, #172]	; (8007d90 <spindle_set_state+0x108>)
      sys.spindle_speed = 0.0f;
 8007ce4:	6123      	str	r3, [r4, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007ce6:	f7f9 fe73 	bl	80019d0 <TIM_CtrlPWMOutputs>
        SetSpindleEnablebit();
 8007cea:	2201      	movs	r2, #1
 8007cec:	2102      	movs	r1, #2
 8007cee:	4826      	ldr	r0, [pc, #152]	; (8007d88 <spindle_set_state+0x100>)
 8007cf0:	f7f9 fd48 	bl	8001784 <GPIO_WriteBit>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	7323      	strb	r3, [r4, #12]
 8007cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8007cfa:	2d20      	cmp	r5, #32
 8007cfc:	bf08      	it	eq
 8007cfe:	2600      	moveq	r6, #0
 8007d00:	e7d5      	b.n	8007cae <spindle_set_state+0x26>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007d02:	7aa0      	ldrb	r0, [r4, #10]
 8007d04:	f7f8 ff80 	bl	8000c08 <__aeabi_i2f>
 8007d08:	4922      	ldr	r1, [pc, #136]	; (8007d94 <spindle_set_state+0x10c>)
 8007d0a:	f7f8 ffd1 	bl	8000cb0 <__aeabi_fmul>
 8007d0e:	4631      	mov	r1, r6
 8007d10:	f7f8 ffce 	bl	8000cb0 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007d14:	4629      	mov	r1, r5
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007d16:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007d18:	f7f9 f97c 	bl	8001014 <__aeabi_fcmpge>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d1cd      	bne.n	8007cbc <spindle_set_state+0x34>
		else if (rpm <= settings.rpm_min) {
 8007d20:	4639      	mov	r1, r7
 8007d22:	4630      	mov	r0, r6
 8007d24:	f7f9 f96c 	bl	8001000 <__aeabi_fcmple>
 8007d28:	b170      	cbz	r0, 8007d48 <spindle_set_state+0xc0>
			if (rpm == 0.0f) { // S0 disables spindle
 8007d2a:	2500      	movs	r5, #0
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	4629      	mov	r1, r5
 8007d30:	f7f9 f952 	bl	8000fd8 <__aeabi_fcmpeq>
 8007d34:	bb00      	cbnz	r0, 8007d78 <spindle_set_state+0xf0>
				sys.spindle_speed = settings.rpm_min;
 8007d36:	6127      	str	r7, [r4, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 8007d38:	2205      	movs	r2, #5
 8007d3a:	e7c1      	b.n	8007cc0 <spindle_set_state+0x38>
        ResetSpindleDirectionBit();
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	4812      	ldr	r0, [pc, #72]	; (8007d88 <spindle_set_state+0x100>)
 8007d40:	f7f9 fd20 	bl	8001784 <GPIO_WriteBit>
 8007d44:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <spindle_set_state+0x104>)
 8007d46:	e7b2      	b.n	8007cae <spindle_set_state+0x26>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007d48:	4639      	mov	r1, r7
 8007d4a:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 8007d4c:	6126      	str	r6, [r4, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007d4e:	f7f8 fea5 	bl	8000a9c <__aeabi_fsub>
 8007d52:	4b11      	ldr	r3, [pc, #68]	; (8007d98 <spindle_set_state+0x110>)
 8007d54:	6819      	ldr	r1, [r3, #0]
 8007d56:	f7f8 ffab 	bl	8000cb0 <__aeabi_fmul>
 8007d5a:	f003 f869 	bl	800ae30 <floorf>
 8007d5e:	f7f9 f9a9 	bl	80010b4 <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 8007d62:	4b0b      	ldr	r3, [pc, #44]	; (8007d90 <spindle_set_state+0x108>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007d64:	3005      	adds	r0, #5
 8007d66:	b280      	uxth	r0, r0
		TIM1->CCR1 = pwm_value;
 8007d68:	8698      	strh	r0, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d1aa      	bne.n	8007cc4 <spindle_set_state+0x3c>
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007d6e:	2100      	movs	r1, #0
 8007d70:	4807      	ldr	r0, [pc, #28]	; (8007d90 <spindle_set_state+0x108>)
 8007d72:	f7f9 fe2d 	bl	80019d0 <TIM_CtrlPWMOutputs>
 8007d76:	e7a9      	b.n	8007ccc <spindle_set_state+0x44>
		TIM1->CCR1 = pwm_value;
 8007d78:	2200      	movs	r2, #0
 8007d7a:	4b05      	ldr	r3, [pc, #20]	; (8007d90 <spindle_set_state+0x108>)
				sys.spindle_speed = 0.0f;
 8007d7c:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007d7e:	869a      	strh	r2, [r3, #52]	; 0x34
 8007d80:	e7f5      	b.n	8007d6e <spindle_set_state+0xe6>
 8007d82:	bf00      	nop
 8007d84:	20001b6c 	.word	0x20001b6c
 8007d88:	40010c00 	.word	0x40010c00
 8007d8c:	20001d30 	.word	0x20001d30
 8007d90:	40012c00 	.word	0x40012c00
 8007d94:	3c23d70a 	.word	0x3c23d70a
 8007d98:	20001370 	.word	0x20001370

08007d9c <spindle_sync>:

// G-code parser entry-point for setting spindle state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
#ifdef VARIABLE_SPINDLE
  void spindle_sync(uint8_t state, float rpm)
  {
 8007d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (sys.state == STATE_CHECK_MODE) { return; }
 8007d9e:	4c3f      	ldr	r4, [pc, #252]	; (8007e9c <spindle_sync+0x100>)
 8007da0:	7823      	ldrb	r3, [r4, #0]
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d005      	beq.n	8007db2 <spindle_sync+0x16>
 8007da6:	4605      	mov	r5, r0
 8007da8:	460e      	mov	r6, r1
    protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
 8007daa:	f7fe f8d3 	bl	8005f54 <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.
 8007dae:	7862      	ldrb	r2, [r4, #1]
 8007db0:	b102      	cbz	r2, 8007db4 <spindle_sync+0x18>
 8007db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8007db4:	b32d      	cbz	r5, 8007e02 <spindle_sync+0x66>
      if (state == SPINDLE_ENABLE_CW) {
 8007db6:	2d10      	cmp	r5, #16
 8007db8:	d04c      	beq.n	8007e54 <spindle_sync+0xb8>
      SetSpindleDirectionBit();
 8007dba:	2201      	movs	r2, #1
 8007dbc:	4838      	ldr	r0, [pc, #224]	; (8007ea0 <spindle_sync+0x104>)
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	f7f9 fce0 	bl	8001784 <GPIO_WriteBit>
      if (settings.flags & BITFLAG_LASER_MODE) {
 8007dc4:	4b37      	ldr	r3, [pc, #220]	; (8007ea4 <spindle_sync+0x108>)
 8007dc6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8007dca:	0792      	lsls	r2, r2, #30
 8007dcc:	d502      	bpl.n	8007dd4 <spindle_sync+0x38>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8007dce:	2d20      	cmp	r5, #32
 8007dd0:	bf08      	it	eq
 8007dd2:	2600      	moveq	r6, #0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007dd4:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8007dd6:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8007dd8:	4638      	mov	r0, r7
 8007dda:	4629      	mov	r1, r5
 8007ddc:	f7f9 f91a 	bl	8001014 <__aeabi_fcmpge>
 8007de0:	b1d8      	cbz	r0, 8007e1a <spindle_sync+0x7e>
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 8007de2:	2264      	movs	r2, #100	; 0x64
			sys.spindle_speed = settings.rpm_max;
 8007de4:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007de6:	4b30      	ldr	r3, [pc, #192]	; (8007ea8 <spindle_sync+0x10c>)
 8007de8:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8007dea:	2101      	movs	r1, #1
 8007dec:	482e      	ldr	r0, [pc, #184]	; (8007ea8 <spindle_sync+0x10c>)
 8007dee:	f7f9 fdef 	bl	80019d0 <TIM_CtrlPWMOutputs>
		ResetSpindleEnablebit();
 8007df2:	2200      	movs	r2, #0
 8007df4:	2102      	movs	r1, #2
 8007df6:	482a      	ldr	r0, [pc, #168]	; (8007ea0 <spindle_sync+0x104>)
 8007df8:	f7f9 fcc4 	bl	8001784 <GPIO_WriteBit>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	7323      	strb	r3, [r4, #12]
 8007e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sys.spindle_speed = 0.0f;
 8007e02:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007e04:	4629      	mov	r1, r5
 8007e06:	4828      	ldr	r0, [pc, #160]	; (8007ea8 <spindle_sync+0x10c>)
      sys.spindle_speed = 0.0f;
 8007e08:	6123      	str	r3, [r4, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007e0a:	f7f9 fde1 	bl	80019d0 <TIM_CtrlPWMOutputs>
        SetSpindleEnablebit();
 8007e0e:	2201      	movs	r2, #1
 8007e10:	2102      	movs	r1, #2
 8007e12:	4823      	ldr	r0, [pc, #140]	; (8007ea0 <spindle_sync+0x104>)
 8007e14:	f7f9 fcb6 	bl	8001784 <GPIO_WriteBit>
 8007e18:	e7f0      	b.n	8007dfc <spindle_sync+0x60>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007e1a:	7aa0      	ldrb	r0, [r4, #10]
 8007e1c:	f7f8 fef4 	bl	8000c08 <__aeabi_i2f>
 8007e20:	4922      	ldr	r1, [pc, #136]	; (8007eac <spindle_sync+0x110>)
 8007e22:	f7f8 ff45 	bl	8000cb0 <__aeabi_fmul>
 8007e26:	4631      	mov	r1, r6
 8007e28:	f7f8 ff42 	bl	8000cb0 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007e2c:	4629      	mov	r1, r5
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007e2e:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007e30:	f7f9 f8f0 	bl	8001014 <__aeabi_fcmpge>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d1d4      	bne.n	8007de2 <spindle_sync+0x46>
		else if (rpm <= settings.rpm_min) {
 8007e38:	4639      	mov	r1, r7
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	f7f9 f8e0 	bl	8001000 <__aeabi_fcmple>
 8007e40:	b170      	cbz	r0, 8007e60 <spindle_sync+0xc4>
			if (rpm == 0.0f) { // S0 disables spindle
 8007e42:	2500      	movs	r5, #0
 8007e44:	4630      	mov	r0, r6
 8007e46:	4629      	mov	r1, r5
 8007e48:	f7f9 f8c6 	bl	8000fd8 <__aeabi_fcmpeq>
 8007e4c:	bb00      	cbnz	r0, 8007e90 <spindle_sync+0xf4>
				sys.spindle_speed = settings.rpm_min;
 8007e4e:	6127      	str	r7, [r4, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 8007e50:	2205      	movs	r2, #5
 8007e52:	e7c8      	b.n	8007de6 <spindle_sync+0x4a>
        ResetSpindleDirectionBit();
 8007e54:	2101      	movs	r1, #1
 8007e56:	4812      	ldr	r0, [pc, #72]	; (8007ea0 <spindle_sync+0x104>)
 8007e58:	f7f9 fc94 	bl	8001784 <GPIO_WriteBit>
 8007e5c:	4b11      	ldr	r3, [pc, #68]	; (8007ea4 <spindle_sync+0x108>)
 8007e5e:	e7b9      	b.n	8007dd4 <spindle_sync+0x38>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007e60:	4639      	mov	r1, r7
 8007e62:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 8007e64:	6126      	str	r6, [r4, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007e66:	f7f8 fe19 	bl	8000a9c <__aeabi_fsub>
 8007e6a:	4b11      	ldr	r3, [pc, #68]	; (8007eb0 <spindle_sync+0x114>)
 8007e6c:	6819      	ldr	r1, [r3, #0]
 8007e6e:	f7f8 ff1f 	bl	8000cb0 <__aeabi_fmul>
 8007e72:	f002 ffdd 	bl	800ae30 <floorf>
 8007e76:	f7f9 f91d 	bl	80010b4 <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 8007e7a:	4a0b      	ldr	r2, [pc, #44]	; (8007ea8 <spindle_sync+0x10c>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007e7c:	1d43      	adds	r3, r0, #5
 8007e7e:	b29b      	uxth	r3, r3
		TIM1->CCR1 = pwm_value;
 8007e80:	8693      	strh	r3, [r2, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1b1      	bne.n	8007dea <spindle_sync+0x4e>
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007e86:	2100      	movs	r1, #0
 8007e88:	4807      	ldr	r0, [pc, #28]	; (8007ea8 <spindle_sync+0x10c>)
 8007e8a:	f7f9 fda1 	bl	80019d0 <TIM_CtrlPWMOutputs>
 8007e8e:	e7b0      	b.n	8007df2 <spindle_sync+0x56>
		TIM1->CCR1 = pwm_value;
 8007e90:	2200      	movs	r2, #0
 8007e92:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <spindle_sync+0x10c>)
				sys.spindle_speed = 0.0f;
 8007e94:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007e96:	869a      	strh	r2, [r3, #52]	; 0x34
 8007e98:	e7f5      	b.n	8007e86 <spindle_sync+0xea>
 8007e9a:	bf00      	nop
 8007e9c:	20001b6c 	.word	0x20001b6c
 8007ea0:	40010c00 	.word	0x40010c00
 8007ea4:	20001d30 	.word	0x20001d30
 8007ea8:	40012c00 	.word	0x40012c00
 8007eac:	3c23d70a 	.word	0x3c23d70a
 8007eb0:	20001370 	.word	0x20001370

08007eb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007eec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007eb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007eba:	e003      	b.n	8007ec4 <LoopCopyDataInit>

08007ebc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007ebc:	4b0c      	ldr	r3, [pc, #48]	; (8007ef0 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8007ebe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007ec0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007ec2:	3104      	adds	r1, #4

08007ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007ec4:	480b      	ldr	r0, [pc, #44]	; (8007ef4 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8007ec6:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8007ec8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007eca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007ecc:	d3f6      	bcc.n	8007ebc <CopyDataInit>
	ldr	r2, =_sbss
 8007ece:	4a0b      	ldr	r2, [pc, #44]	; (8007efc <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8007ed0:	e002      	b.n	8007ed8 <LoopFillZerobss>

08007ed2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007ed2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007ed4:	f842 3b04 	str.w	r3, [r2], #4

08007ed8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007ed8:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8007eda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007edc:	d3f9      	bcc.n	8007ed2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007ede:	f001 fce1 	bl	80098a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007ee2:	f002 fef5 	bl	800acd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007ee6:	f7fb fbbf 	bl	8003668 <main>
	bx	lr
 8007eea:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007eec:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8007ef0:	0800c570 	.word	0x0800c570
	ldr	r0, =_sdata
 8007ef4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007ef8:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8007efc:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8007f00:	20001e2c 	.word	0x20001e2c

08007f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007f04:	e7fe      	b.n	8007f04 <ADC1_2_IRQHandler>
	...

08007f08 <st_wake_up>:
*/

// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up()
{
 8007f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mc_reset();
    return;
  }
#endif
  // Enable stepper drivers.
  if (bit_istrue(settings.flags, BITFLAG_INVERT_ST_ENABLE))
 8007f0a:	4d19      	ldr	r5, [pc, #100]	; (8007f70 <st_wake_up+0x68>)
  {
    SetStepperDisableBit();
 8007f0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  if (bit_istrue(settings.flags, BITFLAG_INVERT_ST_ENABLE))
 8007f10:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    SetStepperDisableBit();
 8007f14:	4817      	ldr	r0, [pc, #92]	; (8007f74 <st_wake_up+0x6c>)
  if (bit_istrue(settings.flags, BITFLAG_INVERT_ST_ENABLE))
 8007f16:	075b      	lsls	r3, r3, #29
 8007f18:	d426      	bmi.n	8007f68 <st_wake_up+0x60>
  }
  else
  {
    ResetStepperDisableBit();
 8007f1a:	f7f9 fc31 	bl	8001780 <GPIO_ResetBits>
#ifdef WIN32
  nTimer1Out = 1;
#endif
#if defined(STM32F103C8)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 8007f1e:	2401      	movs	r4, #1
  TIM3->SR = ~TIM_SR_UIF;
 8007f20:	f64f 76fe 	movw	r6, #65534	; 0xfffe

  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8007f24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  st.step_pulse_time = (settings.pulse_microseconds) * TICKS_PER_MICROSECOND - 58;
 8007f28:	4b13      	ldr	r3, [pc, #76]	; (8007f78 <st_wake_up+0x70>)
 8007f2a:	4814      	ldr	r0, [pc, #80]	; (8007f7c <st_wake_up+0x74>)
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8007f32:	fba0 0202 	umull	r0, r2, r0, r2
 8007f36:	0c92      	lsrs	r2, r2, #18
 8007f38:	fb03 f302 	mul.w	r3, r3, r2
  st.step_outbits = step_port_invert_mask;
 8007f3c:	4810      	ldr	r0, [pc, #64]	; (8007f80 <st_wake_up+0x78>)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 8007f3e:	4a11      	ldr	r2, [pc, #68]	; (8007f84 <st_wake_up+0x7c>)
  st.step_pulse_time = (settings.pulse_microseconds) * TICKS_PER_MICROSECOND - 58;
 8007f40:	3b3a      	subs	r3, #58	; 0x3a
  st.step_outbits = step_port_invert_mask;
 8007f42:	4d11      	ldr	r5, [pc, #68]	; (8007f88 <st_wake_up+0x80>)
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8007f44:	6b87      	ldr	r7, [r0, #56]	; 0x38
  st.step_pulse_time = (settings.pulse_microseconds) * TICKS_PER_MICROSECOND - 58;
 8007f46:	b29b      	uxth	r3, r3
  st.step_outbits = step_port_invert_mask;
 8007f48:	882d      	ldrh	r5, [r5, #0]
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 8007f4a:	8593      	strh	r3, [r2, #44]	; 0x2c
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 8007f4c:	8294      	strh	r4, [r2, #20]
  TIM3->SR = ~TIM_SR_UIF;
 8007f4e:	8216      	strh	r6, [r2, #16]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8007f50:	887a      	ldrh	r2, [r7, #2]
  st.step_pulse_time = (settings.pulse_microseconds) * TICKS_PER_MICROSECOND - 58;
 8007f52:	82c3      	strh	r3, [r0, #22]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8007f54:	1e53      	subs	r3, r2, #1
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	858b      	strh	r3, [r1, #44]	; 0x2c
  /* Set the Autoreload value */
#ifndef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
  TIM2->PSC = st.exec_segment->prescaler;
#endif
  TIM2->EGR = TIM_PSCReloadMode_Immediate;
 8007f5a:	828c      	strh	r4, [r1, #20]
  TIM2->CR1 |= TIM_CR1_CEN;
 8007f5c:	880b      	ldrh	r3, [r1, #0]
  st.step_outbits = step_port_invert_mask;
 8007f5e:	8305      	strh	r5, [r0, #24]
  TIM2->CR1 |= TIM_CR1_CEN;
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	4323      	orrs	r3, r4
 8007f64:	800b      	strh	r3, [r1, #0]
 8007f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SetStepperDisableBit();
 8007f68:	f7f9 fc08 	bl	800177c <GPIO_SetBits>
 8007f6c:	e7d7      	b.n	8007f1e <st_wake_up+0x16>
 8007f6e:	bf00      	nop
 8007f70:	20001d30 	.word	0x20001d30
 8007f74:	40010800 	.word	0x40010800
 8007f78:	20000004 	.word	0x20000004
 8007f7c:	431bde83 	.word	0x431bde83
 8007f80:	20001458 	.word	0x20001458
 8007f84:	40000400 	.word	0x40000400
 8007f88:	200016ac 	.word	0x200016ac

08007f8c <st_go_idle>:
#endif
#ifdef WIN32
  nTimer1Out = 0;
#endif
#ifdef STM32F103C8
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8007f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM2->CNT = 0;
 8007f90:	2100      	movs	r1, #0
{
 8007f92:	b538      	push	{r3, r4, r5, lr}
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8007f94:	8813      	ldrh	r3, [r2, #0]

  busy = false;

  // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
  bool pin_state = false; // Keep enabled.
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING)
 8007f96:	4c18      	ldr	r4, [pc, #96]	; (8007ff8 <st_go_idle+0x6c>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8007f98:	f023 0301 	bic.w	r3, r3, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING)
 8007f9c:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8007fa0:	041b      	lsls	r3, r3, #16
  busy = false;
 8007fa2:	4d16      	ldr	r5, [pc, #88]	; (8007ffc <st_go_idle+0x70>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8007fa4:	0c1b      	lsrs	r3, r3, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING)
 8007fa6:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8007fa8:	8013      	strh	r3, [r2, #0]
  TIM2->CNT = 0;
 8007faa:	8491      	strh	r1, [r2, #36]	; 0x24
  busy = false;
 8007fac:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING)
 8007fae:	d00e      	beq.n	8007fce <st_go_idle+0x42>
 8007fb0:	4b13      	ldr	r3, [pc, #76]	; (8008000 <st_go_idle+0x74>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	2b04      	cmp	r3, #4
 8007fb6:	d112      	bne.n	8007fde <st_go_idle+0x52>
    // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
    // stop and not drift from residual inertial forces at the end of the last movement.
    delay_ms(settings.stepper_idle_lock_time);
    pin_state = true; // Override. Disable steppers.
  }
  if (bit_istrue(settings.flags, BITFLAG_INVERT_ST_ENABLE))
 8007fb8:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8007fbc:	075b      	lsls	r3, r3, #29
 8007fbe:	d414      	bmi.n	8007fea <st_go_idle+0x5e>
  }
  else
  {
    ResetStepperDisableBit();
  }
}
 8007fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ResetStepperDisableBit();
 8007fc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007fc8:	480e      	ldr	r0, [pc, #56]	; (8008004 <st_go_idle+0x78>)
 8007fca:	f7f9 bbd9 	b.w	8001780 <GPIO_ResetBits>
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING)
 8007fce:	4b0e      	ldr	r3, [pc, #56]	; (8008008 <st_go_idle+0x7c>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1ec      	bne.n	8007fb0 <st_go_idle+0x24>
 8007fd6:	4b0a      	ldr	r3, [pc, #40]	; (8008000 <st_go_idle+0x74>)
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2b80      	cmp	r3, #128	; 0x80
 8007fdc:	d1ec      	bne.n	8007fb8 <st_go_idle+0x2c>
    delay_ms(settings.stepper_idle_lock_time);
 8007fde:	f7fb fff9 	bl	8003fd4 <delay_ms>
  if (bit_istrue(settings.flags, BITFLAG_INVERT_ST_ENABLE))
 8007fe2:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8007fe6:	075a      	lsls	r2, r3, #29
 8007fe8:	d4ea      	bmi.n	8007fc0 <st_go_idle+0x34>
    SetStepperDisableBit();
 8007fea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
}
 8007fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SetStepperDisableBit();
 8007ff2:	4804      	ldr	r0, [pc, #16]	; (8008004 <st_go_idle+0x78>)
 8007ff4:	f7f9 bbc2 	b.w	800177c <GPIO_SetBits>
 8007ff8:	20001d30 	.word	0x20001d30
 8007ffc:	20001374 	.word	0x20001374
 8008000:	20001b6c 	.word	0x20001b6c
 8008004:	40010800 	.word	0x40010800
 8008008:	20001bac 	.word	0x20001bac

0800800c <TIM2_IRQHandler>:
#ifdef WIN32
        void Timer1Proc()
#endif
{
#ifdef STM32F103C8
  if ((TIM2->SR & TIM_SR_UIF) != 0) // check interrupt source
 800800c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008010:	8a1a      	ldrh	r2, [r3, #16]
 8008012:	07d2      	lsls	r2, r2, #31
 8008014:	f140 80ad 	bpl.w	8008172 <TIM2_IRQHandler+0x166>
  {
    TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
    TIM2->CNT = 0;
 8008018:	2200      	movs	r2, #0
    TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 800801a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
{
 800801e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return;
  }
#endif

  if (busy)
 8008022:	4d9c      	ldr	r5, [pc, #624]	; (8008294 <TIM2_IRQHandler+0x288>)
    TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 8008024:	8219      	strh	r1, [r3, #16]
    TIM2->CNT = 0;
 8008026:	849a      	strh	r2, [r3, #36]	; 0x24
  if (busy)
 8008028:	782a      	ldrb	r2, [r5, #0]
 800802a:	2a00      	cmp	r2, #0
 800802c:	f040 809f 	bne.w	800816e <TIM2_IRQHandler+0x162>
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK);
#endif
#ifdef STM32F103C8
  // GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF);
 8008030:	f64f 77fc 	movw	r7, #65532	; 0xfffc
  nTimer0Out = st.step_pulse_time;
#endif
#ifdef STM32F103C8
  TIM3->CR1 |= TIM_CR1_CEN;
#endif
  busy = true;
 8008034:	2001      	movs	r0, #1
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 8008036:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800803a:	4c97      	ldr	r4, [pc, #604]	; (8008298 <TIM2_IRQHandler+0x28c>)
 800803c:	f601 0102 	addw	r1, r1, #2050	; 0x802
 8008040:	68ce      	ldr	r6, [r1, #12]
 8008042:	8b62      	ldrh	r2, [r4, #26]
 8008044:	f426 669e 	bic.w	r6, r6, #1264	; 0x4f0
 8008048:	f402 629e 	and.w	r2, r2, #1264	; 0x4f0
 800804c:	4332      	orrs	r2, r6
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF);
 800804e:	4e93      	ldr	r6, [pc, #588]	; (800829c <TIM2_IRQHandler+0x290>)
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 8008050:	60ca      	str	r2, [r1, #12]
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF);
 8008052:	8237      	strh	r7, [r6, #16]
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | st.step_outbits);
 8008054:	68ca      	ldr	r2, [r1, #12]
 8008056:	8b27      	ldrh	r7, [r4, #24]
 8008058:	f422 7203 	bic.w	r2, r2, #524	; 0x20c
 800805c:	f022 0203 	bic.w	r2, r2, #3
 8008060:	433a      	orrs	r2, r7
 8008062:	60ca      	str	r2, [r1, #12]
  TIM3->CR1 |= TIM_CR1_CEN;
 8008064:	8832      	ldrh	r2, [r6, #0]
  sei(); // Re-enable interrupts to allow Stepper Port Reset Interrupt to fire on-time.
         // NOTE: The remaining code in this ISR will finish before returning to main program.
#endif

  // If there is no step segment, attempt to pop one from the stepper buffer
  if (st.exec_segment == NULL)
 8008066:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  TIM3->CR1 |= TIM_CR1_CEN;
 8008068:	b292      	uxth	r2, r2
 800806a:	4302      	orrs	r2, r0
 800806c:	8032      	strh	r2, [r6, #0]
  busy = true;
 800806e:	7028      	strb	r0, [r5, #0]
  if (st.exec_segment == NULL)
 8008070:	2900      	cmp	r1, #0
 8008072:	f000 8099 	beq.w	80081a8 <TIM2_IRQHandler+0x19c>
      return;                                      // Nothing to do but exit.
    }
  }

  // Check probing state.
  if (sys_probe_state == PROBE_ACTIVE)
 8008076:	4b8a      	ldr	r3, [pc, #552]	; (80082a0 <TIM2_IRQHandler+0x294>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b01      	cmp	r3, #1
 800807c:	f000 80db 	beq.w	8008236 <TIM2_IRQHandler+0x22a>
  {
    probe_state_monitor();
  }

  // Reset step out bits.
  st.step_outbits = 0;
 8008080:	2300      	movs	r3, #0
#ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
  st.counter_x += st.steps[X_AXIS];
#else
  st.counter_x += st.exec_block->steps[X_AXIS];
#endif
  if (st.counter_x > st.exec_block->step_event_count)
 8008082:	6b60      	ldr	r0, [r4, #52]	; 0x34
  st.counter_x += st.steps[X_AXIS];
 8008084:	6821      	ldr	r1, [r4, #0]
 8008086:	69e6      	ldr	r6, [r4, #28]
  if (st.counter_x > st.exec_block->step_event_count)
 8008088:	6942      	ldr	r2, [r0, #20]
  st.counter_x += st.steps[X_AXIS];
 800808a:	4431      	add	r1, r6
  if (st.counter_x > st.exec_block->step_event_count)
 800808c:	4291      	cmp	r1, r2
  st.counter_x += st.steps[X_AXIS];
 800808e:	6021      	str	r1, [r4, #0]
  st.step_outbits = 0;
 8008090:	8323      	strh	r3, [r4, #24]
  if (st.counter_x > st.exec_block->step_event_count)
 8008092:	d86f      	bhi.n	8008174 <TIM2_IRQHandler+0x168>
 8008094:	2602      	movs	r6, #2
    {
      sys_position[X_AXIS]++;
    }
  }
#ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
  st.counter_y += st.steps[Y_AXIS];
 8008096:	6861      	ldr	r1, [r4, #4]
 8008098:	6a27      	ldr	r7, [r4, #32]
 800809a:	4439      	add	r1, r7
#else
  st.counter_y += st.exec_block->steps[Y_AXIS];
#endif
  if (st.counter_y > st.exec_block->step_event_count)
 800809c:	428a      	cmp	r2, r1
  st.counter_y += st.steps[Y_AXIS];
 800809e:	6061      	str	r1, [r4, #4]
  if (st.counter_y > st.exec_block->step_event_count)
 80080a0:	d20a      	bcs.n	80080b8 <TIM2_IRQHandler+0xac>
  {
    st.step_outbits |= (1 << Y_STEP_BIT);
    st.counter_y -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1 << Y_DIRECTION_BIT))
 80080a2:	8b03      	ldrh	r3, [r0, #24]
    st.counter_y -= st.exec_block->step_event_count;
 80080a4:	1a89      	subs	r1, r1, r2
    if (st.exec_block->direction_bits & (1 << Y_DIRECTION_BIT))
 80080a6:	069f      	lsls	r7, r3, #26
    st.counter_y -= st.exec_block->step_event_count;
 80080a8:	6061      	str	r1, [r4, #4]
    st.step_outbits |= (1 << Y_STEP_BIT);
 80080aa:	8326      	strh	r6, [r4, #24]
    if (st.exec_block->direction_bits & (1 << Y_DIRECTION_BIT))
 80080ac:	d576      	bpl.n	800819c <TIM2_IRQHandler+0x190>
 80080ae:	4633      	mov	r3, r6
    {
      sys_position[Y_AXIS]--;
 80080b0:	4f7c      	ldr	r7, [pc, #496]	; (80082a4 <TIM2_IRQHandler+0x298>)
 80080b2:	6879      	ldr	r1, [r7, #4]
 80080b4:	3901      	subs	r1, #1
 80080b6:	6079      	str	r1, [r7, #4]
    {
      sys_position[Y_AXIS]++;
    }
  }
#ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
  st.counter_z += st.steps[Z_AXIS];
 80080b8:	68a1      	ldr	r1, [r4, #8]
 80080ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080bc:	4431      	add	r1, r6
#else
  st.counter_z += st.exec_block->steps[Z_AXIS];
#endif
  if (st.counter_z > st.exec_block->step_event_count)
 80080be:	428a      	cmp	r2, r1
  st.counter_z += st.steps[Z_AXIS];
 80080c0:	60a1      	str	r1, [r4, #8]
  if (st.counter_z > st.exec_block->step_event_count)
 80080c2:	d20f      	bcs.n	80080e4 <TIM2_IRQHandler+0xd8>
  {
    st.step_outbits |= (1 << Z_STEP_BIT);
    st.counter_z -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1 << Z_DIRECTION_BIT))
 80080c4:	8b06      	ldrh	r6, [r0, #24]
    st.counter_z -= st.exec_block->step_event_count;
 80080c6:	1a89      	subs	r1, r1, r2
    if (st.exec_block->direction_bits & (1 << Z_DIRECTION_BIT))
 80080c8:	f016 0f40 	tst.w	r6, #64	; 0x40
    {
      sys_position[Z_AXIS]--;
 80080cc:	4e75      	ldr	r6, [pc, #468]	; (80082a4 <TIM2_IRQHandler+0x298>)
    st.counter_z -= st.exec_block->step_event_count;
 80080ce:	60a1      	str	r1, [r4, #8]
      sys_position[Z_AXIS]--;
 80080d0:	68b1      	ldr	r1, [r6, #8]
    st.step_outbits |= (1 << Z_STEP_BIT);
 80080d2:	f043 0304 	orr.w	r3, r3, #4
 80080d6:	b29b      	uxth	r3, r3
      sys_position[Z_AXIS]--;
 80080d8:	bf14      	ite	ne
 80080da:	f101 31ff 	addne.w	r1, r1, #4294967295
    }
    else
    {
      sys_position[Z_AXIS]++;
 80080de:	3101      	addeq	r1, #1
    st.step_outbits |= (1 << Z_STEP_BIT);
 80080e0:	8323      	strh	r3, [r4, #24]
      sys_position[Z_AXIS]++;
 80080e2:	60b1      	str	r1, [r6, #8]
    }
  }
  // --- YSV 22-06-2018
#if defined(AA_AXIS) || defined(AB_AXIS) || defined(ABC_AXIS)
#ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
  st.counter_a += st.steps[A_AXIS];
 80080e4:	68e1      	ldr	r1, [r4, #12]
 80080e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080e8:	4431      	add	r1, r6
#else
  st.counter_a += st.exec_block->steps[A_AXIS];
#endif
  if (st.counter_a > st.exec_block->step_event_count)
 80080ea:	428a      	cmp	r2, r1
  st.counter_a += st.steps[A_AXIS];
 80080ec:	60e1      	str	r1, [r4, #12]
  if (st.counter_a > st.exec_block->step_event_count)
 80080ee:	d20f      	bcs.n	8008110 <TIM2_IRQHandler+0x104>
  {
    st.step_outbits |= (1 << A_STEP_BIT);
    st.counter_a -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1 << A_DIRECTION_BIT))
 80080f0:	8b06      	ldrh	r6, [r0, #24]
    st.counter_a -= st.exec_block->step_event_count;
 80080f2:	1a89      	subs	r1, r1, r2
    if (st.exec_block->direction_bits & (1 << A_DIRECTION_BIT))
 80080f4:	f016 0f80 	tst.w	r6, #128	; 0x80
    {
      sys_position[A_AXIS]--;
 80080f8:	4e6a      	ldr	r6, [pc, #424]	; (80082a4 <TIM2_IRQHandler+0x298>)
    st.counter_a -= st.exec_block->step_event_count;
 80080fa:	60e1      	str	r1, [r4, #12]
      sys_position[A_AXIS]--;
 80080fc:	68f1      	ldr	r1, [r6, #12]
    st.step_outbits |= (1 << A_STEP_BIT);
 80080fe:	f043 0308 	orr.w	r3, r3, #8
 8008102:	b29b      	uxth	r3, r3
      sys_position[A_AXIS]--;
 8008104:	bf14      	ite	ne
 8008106:	f101 31ff 	addne.w	r1, r1, #4294967295
    }
    else
    {
      sys_position[A_AXIS]++;
 800810a:	3101      	addeq	r1, #1
    st.step_outbits |= (1 << A_STEP_BIT);
 800810c:	8323      	strh	r3, [r4, #24]
      sys_position[A_AXIS]++;
 800810e:	60f1      	str	r1, [r6, #12]
    }
  }
#endif
#if defined(AB_AXIS) || defined(ABC_AXIS)
#ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
  st.counter_b += st.steps[B_AXIS];
 8008110:	6921      	ldr	r1, [r4, #16]
 8008112:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008114:	4431      	add	r1, r6
#else
  st.counter_b += st.exec_block->steps[B_AXIS];
#endif
  if (st.counter_b > st.exec_block->step_event_count)
 8008116:	428a      	cmp	r2, r1
  st.counter_b += st.steps[B_AXIS];
 8008118:	6121      	str	r1, [r4, #16]
  if (st.counter_b > st.exec_block->step_event_count)
 800811a:	d20e      	bcs.n	800813a <TIM2_IRQHandler+0x12e>
  {
    st.step_outbits |= (1 << B_STEP_BIT);
    st.counter_b -= st.exec_block->step_event_count;
 800811c:	1a8a      	subs	r2, r1, r2
    if (st.exec_block->direction_bits & (1 << B_DIRECTION_BIT))
    {
      sys_position[B_AXIS]--;
 800811e:	4961      	ldr	r1, [pc, #388]	; (80082a4 <TIM2_IRQHandler+0x298>)
    if (st.exec_block->direction_bits & (1 << B_DIRECTION_BIT))
 8008120:	8b00      	ldrh	r0, [r0, #24]
    st.counter_b -= st.exec_block->step_event_count;
 8008122:	6122      	str	r2, [r4, #16]
      sys_position[B_AXIS]--;
 8008124:	690a      	ldr	r2, [r1, #16]
    if (st.exec_block->direction_bits & (1 << B_DIRECTION_BIT))
 8008126:	0540      	lsls	r0, r0, #21
    st.step_outbits |= (1 << B_STEP_BIT);
 8008128:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800812c:	b29b      	uxth	r3, r3
      sys_position[B_AXIS]--;
 800812e:	bf4c      	ite	mi
 8008130:	f102 32ff 	addmi.w	r2, r2, #4294967295
    }
    else
    {
      sys_position[B_AXIS]++;
 8008134:	3201      	addpl	r2, #1
    st.step_outbits |= (1 << B_STEP_BIT);
 8008136:	8323      	strh	r3, [r4, #24]
      sys_position[B_AXIS]++;
 8008138:	610a      	str	r2, [r1, #16]
    }
  }
#endif
  // ---
  // During a homing cycle, lock out and prevent desired axes from moving.
  if (sys.state == STATE_HOMING)
 800813a:	4a5b      	ldr	r2, [pc, #364]	; (80082a8 <TIM2_IRQHandler+0x29c>)
 800813c:	7811      	ldrb	r1, [r2, #0]
 800813e:	2904      	cmp	r1, #4
 8008140:	d028      	beq.n	8008194 <TIM2_IRQHandler+0x188>
  {
    st.step_outbits &= sys.homing_axis_lock;
  }

  st.step_count--; // Decrement step events count
 8008142:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8008144:	3a01      	subs	r2, #1
 8008146:	b292      	uxth	r2, r2
 8008148:	8622      	strh	r2, [r4, #48]	; 0x30
  if (st.step_count == 0)
 800814a:	b942      	cbnz	r2, 800815e <TIM2_IRQHandler+0x152>
  {
    // Segment is complete. Discard current segment and advance segment indexing.
    st.exec_segment = NULL;
#ifndef WIN32
    uint8_t segment_tail_next = segment_buffer_tail + 1;
 800814c:	4957      	ldr	r1, [pc, #348]	; (80082ac <TIM2_IRQHandler+0x2a0>)
    st.exec_segment = NULL;
 800814e:	63a2      	str	r2, [r4, #56]	; 0x38
    uint8_t segment_tail_next = segment_buffer_tail + 1;
 8008150:	780a      	ldrb	r2, [r1, #0]
 8008152:	3201      	adds	r2, #1
 8008154:	b2d2      	uxtb	r2, r2
    if (segment_tail_next == SEGMENT_BUFFER_SIZE)
      segment_tail_next = 0;
 8008156:	2a14      	cmp	r2, #20
 8008158:	bf08      	it	eq
 800815a:	2200      	moveq	r2, #0
    segment_buffer_tail = segment_tail_next;
 800815c:	700a      	strb	r2, [r1, #0]
    }
#endif
  }

  st.step_outbits ^= step_port_invert_mask; // Apply step port invert mask
  busy = false;
 800815e:	2100      	movs	r1, #0
  st.step_outbits ^= step_port_invert_mask; // Apply step port invert mask
 8008160:	4a53      	ldr	r2, [pc, #332]	; (80082b0 <TIM2_IRQHandler+0x2a4>)
  busy = false;
 8008162:	7029      	strb	r1, [r5, #0]
  st.step_outbits ^= step_port_invert_mask; // Apply step port invert mask
 8008164:	8812      	ldrh	r2, [r2, #0]
 8008166:	4053      	eors	r3, r2
 8008168:	8323      	strh	r3, [r4, #24]
 800816a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800816e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008172:	4770      	bx	lr
    st.step_outbits |= (1 << X_STEP_BIT);
 8008174:	2301      	movs	r3, #1
      sys_position[X_AXIS]--;
 8008176:	4f4b      	ldr	r7, [pc, #300]	; (80082a4 <TIM2_IRQHandler+0x298>)
    if (st.exec_block->direction_bits & (1 << X_DIRECTION_BIT))
 8008178:	8b06      	ldrh	r6, [r0, #24]
    st.counter_x -= st.exec_block->step_event_count;
 800817a:	1a89      	subs	r1, r1, r2
 800817c:	6021      	str	r1, [r4, #0]
      sys_position[X_AXIS]--;
 800817e:	6839      	ldr	r1, [r7, #0]
    if (st.exec_block->direction_bits & (1 << X_DIRECTION_BIT))
 8008180:	f016 0f10 	tst.w	r6, #16
      sys_position[X_AXIS]--;
 8008184:	bf14      	ite	ne
 8008186:	f101 31ff 	addne.w	r1, r1, #4294967295
      sys_position[X_AXIS]++;
 800818a:	3101      	addeq	r1, #1
    st.step_outbits |= (1 << X_STEP_BIT);
 800818c:	8323      	strh	r3, [r4, #24]
 800818e:	2603      	movs	r6, #3
      sys_position[X_AXIS]++;
 8008190:	6039      	str	r1, [r7, #0]
 8008192:	e780      	b.n	8008096 <TIM2_IRQHandler+0x8a>
    st.step_outbits &= sys.homing_axis_lock;
 8008194:	88d2      	ldrh	r2, [r2, #6]
 8008196:	4013      	ands	r3, r2
 8008198:	8323      	strh	r3, [r4, #24]
 800819a:	e7d2      	b.n	8008142 <TIM2_IRQHandler+0x136>
      sys_position[Y_AXIS]++;
 800819c:	4633      	mov	r3, r6
 800819e:	4e41      	ldr	r6, [pc, #260]	; (80082a4 <TIM2_IRQHandler+0x298>)
 80081a0:	6871      	ldr	r1, [r6, #4]
 80081a2:	3101      	adds	r1, #1
 80081a4:	6071      	str	r1, [r6, #4]
 80081a6:	e787      	b.n	80080b8 <TIM2_IRQHandler+0xac>
    if (segment_buffer_head != segment_buffer_tail)
 80081a8:	4a40      	ldr	r2, [pc, #256]	; (80082ac <TIM2_IRQHandler+0x2a0>)
 80081aa:	4e42      	ldr	r6, [pc, #264]	; (80082b4 <TIM2_IRQHandler+0x2a8>)
 80081ac:	7810      	ldrb	r0, [r2, #0]
 80081ae:	7836      	ldrb	r6, [r6, #0]
 80081b0:	4286      	cmp	r6, r0
 80081b2:	d043      	beq.n	800823c <TIM2_IRQHandler+0x230>
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 80081b4:	7810      	ldrb	r0, [r2, #0]
 80081b6:	4a40      	ldr	r2, [pc, #256]	; (80082b8 <TIM2_IRQHandler+0x2ac>)
 80081b8:	b2c0      	uxtb	r0, r0
 80081ba:	00c7      	lsls	r7, r0, #3
 80081bc:	19d6      	adds	r6, r2, r7
      TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 80081be:	8871      	ldrh	r1, [r6, #2]
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 80081c0:	63a6      	str	r6, [r4, #56]	; 0x38
      TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 80081c2:	3901      	subs	r1, #1
 80081c4:	b289      	uxth	r1, r1
 80081c6:	8599      	strh	r1, [r3, #44]	; 0x2c
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 80081c8:	f832 1030 	ldrh.w	r1, [r2, r0, lsl #3]
      if (st.exec_block_index != st.exec_segment->st_block_index)
 80081cc:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80081d0:	7930      	ldrb	r0, [r6, #4]
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 80081d2:	8621      	strh	r1, [r4, #48]	; 0x30
      if (st.exec_block_index != st.exec_segment->st_block_index)
 80081d4:	4283      	cmp	r3, r0
 80081d6:	d05b      	beq.n	8008290 <TIM2_IRQHandler+0x284>
        st.exec_block = &st_block_buffer[st.exec_block_index];
 80081d8:	4b38      	ldr	r3, [pc, #224]	; (80082bc <TIM2_IRQHandler+0x2b0>)
 80081da:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 80081de:	eb03 0381 	add.w	r3, r3, r1, lsl #2
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = st.counter_b = (st.exec_block->step_event_count >> 1);
 80081e2:	6959      	ldr	r1, [r3, #20]
        st.exec_block_index = st.exec_segment->st_block_index;
 80081e4:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = st.counter_b = (st.exec_block->step_event_count >> 1);
 80081e8:	0849      	lsrs	r1, r1, #1
        st.exec_block = &st_block_buffer[st.exec_block_index];
 80081ea:	6363      	str	r3, [r4, #52]	; 0x34
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = st.counter_b = (st.exec_block->step_event_count >> 1);
 80081ec:	6121      	str	r1, [r4, #16]
 80081ee:	60e1      	str	r1, [r4, #12]
 80081f0:	60a1      	str	r1, [r4, #8]
 80081f2:	6061      	str	r1, [r4, #4]
 80081f4:	6021      	str	r1, [r4, #0]
      st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80081f6:	443a      	add	r2, r7
 80081f8:	681e      	ldr	r6, [r3, #0]
 80081fa:	7951      	ldrb	r1, [r2, #5]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80081fc:	4830      	ldr	r0, [pc, #192]	; (80082c0 <TIM2_IRQHandler+0x2b4>)
 80081fe:	f8b3 8018 	ldrh.w	r8, [r3, #24]
 8008202:	f8b0 e000 	ldrh.w	lr, [r0]
      spindle_set_speed(st.exec_segment->spindle_pwm);
 8008206:	7990      	ldrb	r0, [r2, #6]
      st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 8008208:	fa26 f201 	lsr.w	r2, r6, r1
      st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 800820c:	685f      	ldr	r7, [r3, #4]
      st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 800820e:	689e      	ldr	r6, [r3, #8]
      st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 8008210:	61e2      	str	r2, [r4, #28]
      st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 8008212:	68da      	ldr	r2, [r3, #12]
      st.steps[B_AXIS] = st.exec_block->steps[B_AXIS] >> st.exec_segment->amass_level;
 8008214:	691b      	ldr	r3, [r3, #16]
      st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 8008216:	40cf      	lsrs	r7, r1
      st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 8008218:	40ce      	lsrs	r6, r1
      st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 800821a:	40ca      	lsrs	r2, r1
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 800821c:	ea88 0e0e 	eor.w	lr, r8, lr
      st.steps[B_AXIS] = st.exec_block->steps[B_AXIS] >> st.exec_segment->amass_level;
 8008220:	fa23 f101 	lsr.w	r1, r3, r1
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8008224:	f8a4 e01a 	strh.w	lr, [r4, #26]
      st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 8008228:	6227      	str	r7, [r4, #32]
      st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 800822a:	6266      	str	r6, [r4, #36]	; 0x24
      st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 800822c:	62a2      	str	r2, [r4, #40]	; 0x28
      st.steps[B_AXIS] = st.exec_block->steps[B_AXIS] >> st.exec_segment->amass_level;
 800822e:	62e1      	str	r1, [r4, #44]	; 0x2c
      spindle_set_speed(st.exec_segment->spindle_pwm);
 8008230:	f7ff fcda 	bl	8007be8 <spindle_set_speed>
 8008234:	e71f      	b.n	8008076 <TIM2_IRQHandler+0x6a>
    probe_state_monitor();
 8008236:	f7fc ff69 	bl	800510c <probe_state_monitor>
 800823a:	e721      	b.n	8008080 <TIM2_IRQHandler+0x74>
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800823c:	881a      	ldrh	r2, [r3, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING)
 800823e:	4e21      	ldr	r6, [pc, #132]	; (80082c4 <TIM2_IRQHandler+0x2b8>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008240:	f022 0201 	bic.w	r2, r2, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING)
 8008244:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008248:	0412      	lsls	r2, r2, #16
 800824a:	0c12      	lsrs	r2, r2, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING)
 800824c:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800824e:	801a      	strh	r2, [r3, #0]
  TIM2->CNT = 0;
 8008250:	8499      	strh	r1, [r3, #36]	; 0x24
  busy = false;
 8008252:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING)
 8008254:	d03a      	beq.n	80082cc <TIM2_IRQHandler+0x2c0>
 8008256:	4b14      	ldr	r3, [pc, #80]	; (80082a8 <TIM2_IRQHandler+0x29c>)
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	2b04      	cmp	r3, #4
 800825c:	d03e      	beq.n	80082dc <TIM2_IRQHandler+0x2d0>
    delay_ms(settings.stepper_idle_lock_time);
 800825e:	f7fb feb9 	bl	8003fd4 <delay_ms>
  if (bit_istrue(settings.flags, BITFLAG_INVERT_ST_ENABLE))
 8008262:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
 8008266:	075b      	lsls	r3, r3, #29
 8008268:	d53c      	bpl.n	80082e4 <TIM2_IRQHandler+0x2d8>
    ResetStepperDisableBit();
 800826a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800826e:	4816      	ldr	r0, [pc, #88]	; (80082c8 <TIM2_IRQHandler+0x2bc>)
 8008270:	f7f9 fa86 	bl	8001780 <GPIO_ResetBits>
      if (st.exec_block->is_pwm_rate_adjusted)
 8008274:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008276:	7e9b      	ldrb	r3, [r3, #26]
 8008278:	b113      	cbz	r3, 8008280 <TIM2_IRQHandler+0x274>
        spindle_set_speed(SPINDLE_PWM_OFF_VALUE);
 800827a:	2000      	movs	r0, #0
 800827c:	f7ff fcb4 	bl	8007be8 <spindle_set_speed>
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 8008280:	2004      	movs	r0, #4
 8008282:	f001 fac7 	bl	8009814 <system_set_exec_state_flag>
}
 8008286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      report_status_message(STATUS_AXIS_DONE);
 800828a:	2012      	movs	r0, #18
 800828c:	f7fe b94c 	b.w	8006528 <report_status_message>
 8008290:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008292:	e7b0      	b.n	80081f6 <TIM2_IRQHandler+0x1ea>
 8008294:	20001374 	.word	0x20001374
 8008298:	20001458 	.word	0x20001458
 800829c:	40000400 	.word	0x40000400
 80082a0:	20001b82 	.word	0x20001b82
 80082a4:	20001b98 	.word	0x20001b98
 80082a8:	20001b6c 	.word	0x20001b6c
 80082ac:	20001455 	.word	0x20001455
 80082b0:	200016ac 	.word	0x200016ac
 80082b4:	20001454 	.word	0x20001454
 80082b8:	200013b4 	.word	0x200013b4
 80082bc:	20001494 	.word	0x20001494
 80082c0:	20001376 	.word	0x20001376
 80082c4:	20001d30 	.word	0x20001d30
 80082c8:	40010800 	.word	0x40010800
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING)
 80082cc:	4b08      	ldr	r3, [pc, #32]	; (80082f0 <TIM2_IRQHandler+0x2e4>)
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1c0      	bne.n	8008256 <TIM2_IRQHandler+0x24a>
 80082d4:	4b07      	ldr	r3, [pc, #28]	; (80082f4 <TIM2_IRQHandler+0x2e8>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	2b80      	cmp	r3, #128	; 0x80
 80082da:	d0c0      	beq.n	800825e <TIM2_IRQHandler+0x252>
  if (bit_istrue(settings.flags, BITFLAG_INVERT_ST_ENABLE))
 80082dc:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
 80082e0:	075b      	lsls	r3, r3, #29
 80082e2:	d5c2      	bpl.n	800826a <TIM2_IRQHandler+0x25e>
    SetStepperDisableBit();
 80082e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80082e8:	4803      	ldr	r0, [pc, #12]	; (80082f8 <TIM2_IRQHandler+0x2ec>)
 80082ea:	f7f9 fa47 	bl	800177c <GPIO_SetBits>
 80082ee:	e7c1      	b.n	8008274 <TIM2_IRQHandler+0x268>
 80082f0:	20001bac 	.word	0x20001bac
 80082f4:	20001b6c 	.word	0x20001b6c
 80082f8:	40010800 	.word	0x40010800

080082fc <TIM3_IRQHandler>:
    TIM3->SR = ~TIM_SR_CC1IF;                                        // clear CC1IF flag
  }
  else
#endif
  {
    STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80082fc:	f240 230f 	movw	r3, #527	; 0x20f
{
 8008300:	b430      	push	{r4, r5}
    TIM3->CR1 &= ~TIM_CR1_CEN;
    TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
    TIM3->CNT = 0;
 8008302:	2000      	movs	r0, #0
    TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 8008304:	f64f 74fc 	movw	r4, #65532	; 0xfffc
    STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008308:	490a      	ldr	r1, [pc, #40]	; (8008334 <TIM3_IRQHandler+0x38>)
 800830a:	4d0b      	ldr	r5, [pc, #44]	; (8008338 <TIM3_IRQHandler+0x3c>)
 800830c:	68ca      	ldr	r2, [r1, #12]
 800830e:	882d      	ldrh	r5, [r5, #0]
 8008310:	f422 7203 	bic.w	r2, r2, #524	; 0x20c
 8008314:	f022 0203 	bic.w	r2, r2, #3
 8008318:	402b      	ands	r3, r5
 800831a:	4313      	orrs	r3, r2
    TIM3->CR1 &= ~TIM_CR1_CEN;
 800831c:	4a07      	ldr	r2, [pc, #28]	; (800833c <TIM3_IRQHandler+0x40>)
    STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 800831e:	60cb      	str	r3, [r1, #12]
    TIM3->CR1 &= ~TIM_CR1_CEN;
 8008320:	8813      	ldrh	r3, [r2, #0]
 8008322:	f023 0301 	bic.w	r3, r3, #1
 8008326:	041b      	lsls	r3, r3, #16
 8008328:	0c1b      	lsrs	r3, r3, #16
 800832a:	8013      	strh	r3, [r2, #0]
    TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 800832c:	8214      	strh	r4, [r2, #16]
    TIM3->CNT = 0;
 800832e:	8490      	strh	r0, [r2, #36]	; 0x24
  TCCR0B = 0; // Disable Timer0 to prevent re-entering this interrupt when it's not needed.
#endif
#ifdef WIN32
  nTimer0Out = 0;
#endif
}
 8008330:	bc30      	pop	{r4, r5}
 8008332:	4770      	bx	lr
 8008334:	40010800 	.word	0x40010800
 8008338:	200016ac 	.word	0x200016ac
 800833c:	40000400 	.word	0x40000400

08008340 <st_generate_step_dir_invert_masks>:
#endif
#endif

// Generates the step and direction port invert masks used in the Stepper Interrupt Driver.
void st_generate_step_dir_invert_masks()
{
 8008340:	4b1b      	ldr	r3, [pc, #108]	; (80083b0 <st_generate_step_dir_invert_masks+0x70>)
 8008342:	f8b3 1054 	ldrh.w	r1, [r3, #84]	; 0x54
 8008346:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
  {
    if (bit_istrue(settings.step_invert_mask, bit(idx)))
    {
      step_port_invert_mask |= step_pin_mask[idx];
    }
    if (bit_istrue(settings.dir_invert_mask, bit(idx)))
 800834a:	f011 0f01 	tst.w	r1, #1
 800834e:	bf14      	ite	ne
 8008350:	2310      	movne	r3, #16
 8008352:	2300      	moveq	r3, #0
      step_port_invert_mask |= step_pin_mask[idx];
 8008354:	f000 0201 	and.w	r2, r0, #1
    if (bit_istrue(settings.step_invert_mask, bit(idx)))
 8008358:	f010 0f02 	tst.w	r0, #2
      step_port_invert_mask |= step_pin_mask[idx];
 800835c:	bf18      	it	ne
 800835e:	f042 0202 	orrne.w	r2, r2, #2
    if (bit_istrue(settings.dir_invert_mask, bit(idx)))
 8008362:	f011 0f02 	tst.w	r1, #2
    {
      dir_port_invert_mask |= direction_pin_mask[idx];
 8008366:	bf18      	it	ne
 8008368:	f043 0320 	orrne.w	r3, r3, #32
    if (bit_istrue(settings.step_invert_mask, bit(idx)))
 800836c:	f010 0f04 	tst.w	r0, #4
      step_port_invert_mask |= step_pin_mask[idx];
 8008370:	bf18      	it	ne
 8008372:	f042 0204 	orrne.w	r2, r2, #4
    if (bit_istrue(settings.dir_invert_mask, bit(idx)))
 8008376:	f011 0f04 	tst.w	r1, #4
      dir_port_invert_mask |= direction_pin_mask[idx];
 800837a:	bf18      	it	ne
 800837c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    if (bit_istrue(settings.step_invert_mask, bit(idx)))
 8008380:	f010 0f08 	tst.w	r0, #8
      step_port_invert_mask |= step_pin_mask[idx];
 8008384:	bf18      	it	ne
 8008386:	f042 0208 	orrne.w	r2, r2, #8
    if (bit_istrue(settings.dir_invert_mask, bit(idx)))
 800838a:	f011 0f08 	tst.w	r1, #8
      dir_port_invert_mask |= direction_pin_mask[idx];
 800838e:	bf18      	it	ne
 8008390:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    if (bit_istrue(settings.step_invert_mask, bit(idx)))
 8008394:	06c0      	lsls	r0, r0, #27
      step_port_invert_mask |= step_pin_mask[idx];
 8008396:	bf48      	it	mi
 8008398:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800839c:	4805      	ldr	r0, [pc, #20]	; (80083b4 <st_generate_step_dir_invert_masks+0x74>)
    if (bit_istrue(settings.dir_invert_mask, bit(idx)))
 800839e:	06c9      	lsls	r1, r1, #27
 80083a0:	4905      	ldr	r1, [pc, #20]	; (80083b8 <st_generate_step_dir_invert_masks+0x78>)
      dir_port_invert_mask |= direction_pin_mask[idx];
 80083a2:	bf48      	it	mi
 80083a4:	f443 6380 	orrmi.w	r3, r3, #1024	; 0x400
 80083a8:	8002      	strh	r2, [r0, #0]
 80083aa:	800b      	strh	r3, [r1, #0]
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	20001d30 	.word	0x20001d30
 80083b4:	200016ac 	.word	0x200016ac
 80083b8:	20001376 	.word	0x20001376

080083bc <st_reset>:
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80083bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM2->CNT = 0;
 80083c0:	2100      	movs	r1, #0
  }
}

// Reset and clear stepper subsystem variables
void st_reset()
{
 80083c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80083c4:	8813      	ldrh	r3, [r2, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING)
 80083c6:	4c47      	ldr	r4, [pc, #284]	; (80084e4 <st_reset+0x128>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80083c8:	f023 0301 	bic.w	r3, r3, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING)
 80083cc:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80083d0:	041b      	lsls	r3, r3, #16
  busy = false;
 80083d2:	4d45      	ldr	r5, [pc, #276]	; (80084e8 <st_reset+0x12c>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80083d4:	0c1b      	lsrs	r3, r3, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING)
 80083d6:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80083d8:	8013      	strh	r3, [r2, #0]
  TIM2->CNT = 0;
 80083da:	8491      	strh	r1, [r2, #36]	; 0x24
  busy = false;
 80083dc:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING)
 80083de:	d06d      	beq.n	80084bc <st_reset+0x100>
 80083e0:	4b42      	ldr	r3, [pc, #264]	; (80084ec <st_reset+0x130>)
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	d171      	bne.n	80084cc <st_reset+0x110>
  if (bit_istrue(settings.flags, BITFLAG_INVERT_ST_ENABLE))
 80083e8:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 80083ec:	075b      	lsls	r3, r3, #29
 80083ee:	d473      	bmi.n	80084d8 <st_reset+0x11c>
    ResetStepperDisableBit();
 80083f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80083f4:	483e      	ldr	r0, [pc, #248]	; (80084f0 <st_reset+0x134>)
 80083f6:	f7f9 f9c3 	bl	8001780 <GPIO_ResetBits>
  // Initialize stepper driver idle state.
  st_go_idle();
  // Initialize stepper algorithm variables.
  memset(&prep, 0, sizeof(st_prep_t));
 80083fa:	2238      	movs	r2, #56	; 0x38
 80083fc:	2100      	movs	r1, #0
 80083fe:	483d      	ldr	r0, [pc, #244]	; (80084f4 <st_reset+0x138>)
 8008400:	f002 fc99 	bl	800ad36 <memset>
  memset(&st, 0, sizeof(stepper_t));
 8008404:	223c      	movs	r2, #60	; 0x3c
 8008406:	2100      	movs	r1, #0
 8008408:	483b      	ldr	r0, [pc, #236]	; (80084f8 <st_reset+0x13c>)
 800840a:	f002 fc94 	bl	800ad36 <memset>
  st.exec_segment = NULL;
  pl_block = NULL; // Planner block pointer used by segment buffer
 800840e:	2100      	movs	r1, #0
 8008410:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
  segment_buffer_tail = 0;
  segment_buffer_head = 0; // empty = tail
  segment_next_head = 1;
 8008414:	2601      	movs	r6, #1
  pl_block = NULL; // Planner block pointer used by segment buffer
 8008416:	4f39      	ldr	r7, [pc, #228]	; (80084fc <st_reset+0x140>)
  segment_buffer_head = 0; // empty = tail
 8008418:	4839      	ldr	r0, [pc, #228]	; (8008500 <st_reset+0x144>)
  segment_buffer_tail = 0;
 800841a:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 8008518 <st_reset+0x15c>
    if (bit_istrue(settings.dir_invert_mask, bit(idx)))
 800841e:	f013 0f01 	tst.w	r3, #1
  pl_block = NULL; // Planner block pointer used by segment buffer
 8008422:	6039      	str	r1, [r7, #0]
  segment_buffer_tail = 0;
 8008424:	f88e 1000 	strb.w	r1, [lr]
  segment_buffer_head = 0; // empty = tail
 8008428:	7001      	strb	r1, [r0, #0]
  busy = false;
 800842a:	7029      	strb	r1, [r5, #0]
    if (bit_istrue(settings.dir_invert_mask, bit(idx)))
 800842c:	bf18      	it	ne
 800842e:	2110      	movne	r1, #16
 8008430:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
  segment_next_head = 1;
 8008434:	4c33      	ldr	r4, [pc, #204]	; (8008504 <st_reset+0x148>)
      step_port_invert_mask |= step_pin_mask[idx];
 8008436:	ea02 0006 	and.w	r0, r2, r6
  segment_next_head = 1;
 800843a:	7026      	strb	r6, [r4, #0]
    if (bit_istrue(settings.step_invert_mask, bit(idx)))
 800843c:	0794      	lsls	r4, r2, #30
      step_port_invert_mask |= step_pin_mask[idx];
 800843e:	bf48      	it	mi
 8008440:	f040 0002 	orrmi.w	r0, r0, #2
    if (bit_istrue(settings.dir_invert_mask, bit(idx)))
 8008444:	079f      	lsls	r7, r3, #30
      dir_port_invert_mask |= direction_pin_mask[idx];
 8008446:	bf48      	it	mi
 8008448:	f041 0120 	orrmi.w	r1, r1, #32
    if (bit_istrue(settings.step_invert_mask, bit(idx)))
 800844c:	0756      	lsls	r6, r2, #29
      step_port_invert_mask |= step_pin_mask[idx];
 800844e:	bf48      	it	mi
 8008450:	f040 0004 	orrmi.w	r0, r0, #4
    if (bit_istrue(settings.dir_invert_mask, bit(idx)))
 8008454:	075d      	lsls	r5, r3, #29
      dir_port_invert_mask |= direction_pin_mask[idx];
 8008456:	bf48      	it	mi
 8008458:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
    if (bit_istrue(settings.step_invert_mask, bit(idx)))
 800845c:	0714      	lsls	r4, r2, #28
      step_port_invert_mask |= step_pin_mask[idx];
 800845e:	bf48      	it	mi
 8008460:	f040 0008 	orrmi.w	r0, r0, #8
    if (bit_istrue(settings.dir_invert_mask, bit(idx)))
 8008464:	071f      	lsls	r7, r3, #28
      dir_port_invert_mask |= direction_pin_mask[idx];
 8008466:	bf48      	it	mi
 8008468:	f041 0180 	orrmi.w	r1, r1, #128	; 0x80
    if (bit_istrue(settings.step_invert_mask, bit(idx)))
 800846c:	06d6      	lsls	r6, r2, #27
      step_port_invert_mask |= step_pin_mask[idx];
 800846e:	bf48      	it	mi
 8008470:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200
 8008474:	4c24      	ldr	r4, [pc, #144]	; (8008508 <st_reset+0x14c>)
    if (bit_istrue(settings.dir_invert_mask, bit(idx)))
 8008476:	06dd      	lsls	r5, r3, #27
 8008478:	4d24      	ldr	r5, [pc, #144]	; (800850c <st_reset+0x150>)

  st_generate_step_dir_invert_masks();
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 800847a:	4b1f      	ldr	r3, [pc, #124]	; (80084f8 <st_reset+0x13c>)
      dir_port_invert_mask |= direction_pin_mask[idx];
 800847c:	bf48      	it	mi
 800847e:	f441 6180 	orrmi.w	r1, r1, #1024	; 0x400
#ifdef AVRTARGET
  STEP_PORT = (STEP_PORT & ~STEP_MASK) | step_port_invert_mask;
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | dir_port_invert_mask;
#endif
#ifdef STM32F103C8
  while (TIM3->CR1 & TIM_CR1_CEN)
 8008482:	4a23      	ldr	r2, [pc, #140]	; (8008510 <st_reset+0x154>)
 8008484:	8029      	strh	r1, [r5, #0]
 8008486:	8020      	strh	r0, [r4, #0]
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 8008488:	8359      	strh	r1, [r3, #26]
  while (TIM3->CR1 & TIM_CR1_CEN)
 800848a:	8813      	ldrh	r3, [r2, #0]
 800848c:	07dc      	lsls	r4, r3, #31
 800848e:	d4fc      	bmi.n	800848a <st_reset+0xce>
    ; // wait for end of tim3 work to prevent cutoff last step pulse
      // #ifdef STEP_PULSE_DELAY
  //	TIM3->DIER &= ~TIM_DIER_CC1IE; //compare interrupt disable
  // #endif
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 8008490:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008494:	f240 250f 	movw	r5, #527	; 0x20f
 8008498:	4c15      	ldr	r4, [pc, #84]	; (80084f0 <st_reset+0x134>)
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 800849a:	8213      	strh	r3, [r2, #16]
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 800849c:	68e3      	ldr	r3, [r4, #12]
 800849e:	4028      	ands	r0, r5
 80084a0:	f423 7303 	bic.w	r3, r3, #524	; 0x20c
 80084a4:	f023 0303 	bic.w	r3, r3, #3
 80084a8:	4318      	orrs	r0, r3
 80084aa:	60e0      	str	r0, [r4, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 80084ac:	68e3      	ldr	r3, [r4, #12]
 80084ae:	f401 619e 	and.w	r1, r1, #1264	; 0x4f0
 80084b2:	f423 639e 	bic.w	r3, r3, #1264	; 0x4f0
 80084b6:	4319      	orrs	r1, r3
 80084b8:	60e1      	str	r1, [r4, #12]
  // GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
// #ifdef STEP_PULSE_DELAY
//	TIM3->DIER |= TIM_DIER_CC1IE; //compare interrupt enable
// #endif
#endif
}
 80084ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING)
 80084bc:	4b15      	ldr	r3, [pc, #84]	; (8008514 <st_reset+0x158>)
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d18d      	bne.n	80083e0 <st_reset+0x24>
 80084c4:	4b09      	ldr	r3, [pc, #36]	; (80084ec <st_reset+0x130>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	2b80      	cmp	r3, #128	; 0x80
 80084ca:	d18d      	bne.n	80083e8 <st_reset+0x2c>
    delay_ms(settings.stepper_idle_lock_time);
 80084cc:	f7fb fd82 	bl	8003fd4 <delay_ms>
  if (bit_istrue(settings.flags, BITFLAG_INVERT_ST_ENABLE))
 80084d0:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 80084d4:	075e      	lsls	r6, r3, #29
 80084d6:	d48b      	bmi.n	80083f0 <st_reset+0x34>
    SetStepperDisableBit();
 80084d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084dc:	4804      	ldr	r0, [pc, #16]	; (80084f0 <st_reset+0x134>)
 80084de:	f7f9 f94d 	bl	800177c <GPIO_SetBits>
 80084e2:	e78a      	b.n	80083fa <st_reset+0x3e>
 80084e4:	20001d30 	.word	0x20001d30
 80084e8:	20001374 	.word	0x20001374
 80084ec:	20001b6c 	.word	0x20001b6c
 80084f0:	40010800 	.word	0x40010800
 80084f4:	2000137c 	.word	0x2000137c
 80084f8:	20001458 	.word	0x20001458
 80084fc:	20001378 	.word	0x20001378
 8008500:	20001454 	.word	0x20001454
 8008504:	20001456 	.word	0x20001456
 8008508:	200016ac 	.word	0x200016ac
 800850c:	20001376 	.word	0x20001376
 8008510:	40000400 	.word	0x40000400
 8008514:	20001bac 	.word	0x20001bac
 8008518:	20001455 	.word	0x20001455

0800851c <stepper_init>:

#endif

// Initialize and start the stepper motor subsystem
void stepper_init()
{
 800851c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // Configure step and direction interface pins
#ifdef STM32F103C8
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 8008520:	2101      	movs	r1, #1
{
 8008522:	b087      	sub	sp, #28
  RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 8008524:	2004      	movs	r0, #4
 8008526:	f7f9 f987 	bl	8001838 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 800852a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800852e:	2610      	movs	r6, #16
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008530:	2303      	movs	r3, #3
  GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 8008532:	ac06      	add	r4, sp, #24
  GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 8008534:	4d54      	ldr	r5, [pc, #336]	; (8008688 <stepper_init+0x16c>)
  GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 8008536:	f824 2d14 	strh.w	r2, [r4, #-20]!
  GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 800853a:	4621      	mov	r1, r4
 800853c:	4628      	mov	r0, r5
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800853e:	f88d 3006 	strb.w	r3, [sp, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8008542:	f88d 6007 	strb.w	r6, [sp, #7]
  GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 8008546:	f7f8 ff5b 	bl	8001400 <GPIO_Init>

  RCC_APB2PeriphClockCmd(RCC_STEP_PORT, ENABLE);
 800854a:	2101      	movs	r1, #1
 800854c:	2004      	movs	r0, #4
 800854e:	f7f9 f973 	bl	8001838 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 8008552:	f240 230f 	movw	r3, #527	; 0x20f
  GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 8008556:	4621      	mov	r1, r4
 8008558:	4628      	mov	r0, r5
  GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 800855a:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 800855e:	f7f8 ff4f 	bl	8001400 <GPIO_Init>

  RCC_APB2PeriphClockCmd(RCC_DIRECTION_PORT, ENABLE);
 8008562:	2101      	movs	r1, #1
 8008564:	2004      	movs	r0, #4
 8008566:	f7f9 f967 	bl	8001838 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 800856a:	f44f 639e 	mov.w	r3, #1264	; 0x4f0
  GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 800856e:	4621      	mov	r1, r4
 8008570:	4628      	mov	r0, r5
  GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 8008572:	f8ad 3004 	strh.w	r3, [sp, #4]
  NVIC_InitTypeDef NVIC_InitStructure;
  TIM_OCInitTypeDef sConfigOC;

  TIM_TimeBaseStructure.TIM_Period = Period - 1;
  TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8008576:	2500      	movs	r5, #0
  GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 8008578:	f7f8 ff42 	bl	8001400 <GPIO_Init>
  TIM_TimeBaseStructure.TIM_Period = Period - 1;
 800857c:	f04f 0963 	mov.w	r9, #99	; 0x63
  TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 8008580:	2204      	movs	r2, #4
  RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 8008582:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800869c <stepper_init+0x180>
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  sConfigOC.TIM_Pulse = (int)(Period / 2);
  TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008586:	a903      	add	r1, sp, #12
  RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 8008588:	f8d8 301c 	ldr.w	r3, [r8, #28]
  TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 800858c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 8008590:	f043 0301 	orr.w	r3, r3, #1
 8008594:	f8c8 301c 	str.w	r3, [r8, #28]
  TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 8008598:	f8ad 200c 	strh.w	r2, [sp, #12]
  TIM_TimeBaseStructure.TIM_Period = Period - 1;
 800859c:	f8ad 9010 	strh.w	r9, [sp, #16]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80085a0:	f8ad 5012 	strh.w	r5, [sp, #18]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80085a4:	f8ad 500e 	strh.w	r5, [sp, #14]
  TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80085a8:	f7f9 f95e 	bl	8001868 <TIM_TimeBaseInit>

  TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 80085ac:	2101      	movs	r1, #1
 80085ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80085b2:	f7f9 fa2f 	bl	8001a14 <TIM_ClearITPendingBit>
  TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 80085b6:	2201      	movs	r2, #1
 80085b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80085bc:	4611      	mov	r1, r2
 80085be:	f7f9 fa17 	bl	80019f0 <TIM_ITConfig>
  TIM_Cmd(TIMER, ENABLE);
 80085c2:	2101      	movs	r1, #1
 80085c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80085c8:	f7f9 f9f4 	bl	80019b4 <TIM_Cmd>

  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80085cc:	f44f 7040 	mov.w	r0, #768	; 0x300
 80085d0:	f7f8 fd90 	bl	80010f4 <NVIC_PriorityGroupConfig>
  if (TIMER == TIM2)
  {
    NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80085d4:	4b2d      	ldr	r3, [pc, #180]	; (800868c <stepper_init+0x170>)
 80085d6:	af06      	add	r7, sp, #24
 80085d8:	f847 3d10 	str.w	r3, [r7, #-16]!
  }

  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PP;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 80085dc:	4638      	mov	r0, r7
 80085de:	f7f8 fd93 	bl	8001108 <NVIC_Init>
  RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 80085e2:	f8d8 301c 	ldr.w	r3, [r8, #28]
  TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80085e6:	4c2a      	ldr	r4, [pc, #168]	; (8008690 <stepper_init+0x174>)
  RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 80085e8:	f043 0302 	orr.w	r3, r3, #2
 80085ec:	f8c8 301c 	str.w	r3, [r8, #28]
  TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80085f0:	a903      	add	r1, sp, #12
 80085f2:	4620      	mov	r0, r4
  TIM_TimeBaseStructure.TIM_Period = Period - 1;
 80085f4:	f8ad 9010 	strh.w	r9, [sp, #16]
  TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 80085f8:	f8ad 500c 	strh.w	r5, [sp, #12]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80085fc:	f8ad 5012 	strh.w	r5, [sp, #18]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8008600:	f8ad 500e 	strh.w	r5, [sp, #14]
  TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008604:	f7f9 f930 	bl	8001868 <TIM_TimeBaseInit>
  TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 8008608:	4620      	mov	r0, r4
 800860a:	2101      	movs	r1, #1
 800860c:	f7f9 fa02 	bl	8001a14 <TIM_ClearITPendingBit>
  TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 8008610:	2201      	movs	r2, #1
 8008612:	4620      	mov	r0, r4
 8008614:	4611      	mov	r1, r2
 8008616:	f7f9 f9eb 	bl	80019f0 <TIM_ITConfig>
  TIM_Cmd(TIMER, ENABLE);
 800861a:	2101      	movs	r1, #1
 800861c:	4620      	mov	r0, r4
 800861e:	f7f9 f9c9 	bl	80019b4 <TIM_Cmd>
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8008622:	f44f 7040 	mov.w	r0, #768	; 0x300
 8008626:	f7f8 fd65 	bl	80010f4 <NVIC_PriorityGroupConfig>
  NVIC_Init(&NVIC_InitStructure);
 800862a:	4638      	mov	r0, r7
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800862c:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8008630:	4b18      	ldr	r3, [pc, #96]	; (8008694 <stepper_init+0x178>)
 8008632:	9302      	str	r3, [sp, #8]
  NVIC_Init(&NVIC_InitStructure);
 8008634:	f7f8 fd68 	bl	8001108 <NVIC_Init>
 8008638:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800863c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008640:	883b      	ldrh	r3, [r7, #0]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8008642:	4a15      	ldr	r2, [pc, #84]	; (8008698 <stepper_init+0x17c>)
 8008644:	f023 0301 	bic.w	r3, r3, #1
 8008648:	40b3      	lsls	r3, r6
 800864a:	40f3      	lsrs	r3, r6
 800864c:	803b      	strh	r3, [r7, #0]
  TIM2->SR &= ~TIM_SR_UIF;
 800864e:	8a3b      	ldrh	r3, [r7, #16]
 8008650:	f023 0301 	bic.w	r3, r3, #1
 8008654:	40b3      	lsls	r3, r6
 8008656:	40f3      	lsrs	r3, r6
 8008658:	823b      	strh	r3, [r7, #16]
  TIM2->CNT = 0;
 800865a:	84bd      	strh	r5, [r7, #36]	; 0x24
  TIM3->CR1 &= ~TIM_CR1_CEN;
 800865c:	8823      	ldrh	r3, [r4, #0]
 800865e:	f023 0301 	bic.w	r3, r3, #1
 8008662:	40b3      	lsls	r3, r6
 8008664:	40f3      	lsrs	r3, r6
 8008666:	8023      	strh	r3, [r4, #0]
  TIM3->SR &= ~(TIM_SR_UIF | TIM_SR_CC1IF);
 8008668:	8a23      	ldrh	r3, [r4, #16]
 800866a:	f023 0303 	bic.w	r3, r3, #3
 800866e:	40b3      	lsls	r3, r6
 8008670:	40f3      	lsrs	r3, r6
 8008672:	8223      	strh	r3, [r4, #16]
  TIM3->CNT = 0;
 8008674:	84a5      	strh	r5, [r4, #36]	; 0x24
 8008676:	f882 531d 	strb.w	r5, [r2, #797]	; 0x31d
 800867a:	f882 631c 	strb.w	r6, [r2, #796]	; 0x31c
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800867e:	6010      	str	r0, [r2, #0]
 8008680:	6011      	str	r1, [r2, #0]
}
 8008682:	b007      	add	sp, #28
 8008684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008688:	40010800 	.word	0x40010800
 800868c:	0101011c 	.word	0x0101011c
 8008690:	40000400 	.word	0x40000400
 8008694:	0101011d 	.word	0x0101011d
 8008698:	e000e100 	.word	0xe000e100
 800869c:	40021000 	.word	0x40021000

080086a0 <st_update_plan_block_parameters>:
{
 80086a0:	b538      	push	{r3, r4, r5, lr}
  if (pl_block != NULL)
 80086a2:	4c08      	ldr	r4, [pc, #32]	; (80086c4 <st_update_plan_block_parameters+0x24>)
 80086a4:	6825      	ldr	r5, [r4, #0]
 80086a6:	b15d      	cbz	r5, 80086c0 <st_update_plan_block_parameters+0x20>
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 80086a8:	4b07      	ldr	r3, [pc, #28]	; (80086c8 <st_update_plan_block_parameters+0x28>)
 80086aa:	785a      	ldrb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed * prep.current_speed; // Update entry speed.
 80086ac:	69d9      	ldr	r1, [r3, #28]
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 80086ae:	f042 0201 	orr.w	r2, r2, #1
 80086b2:	705a      	strb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed * prep.current_speed; // Update entry speed.
 80086b4:	4608      	mov	r0, r1
 80086b6:	f7f8 fafb 	bl	8000cb0 <__aeabi_fmul>
    pl_block = NULL;                                                     // Flag st_prep_segment() to load and check active velocity profile.
 80086ba:	2300      	movs	r3, #0
    pl_block->entry_speed_sqr = prep.current_speed * prep.current_speed; // Update entry speed.
 80086bc:	61e8      	str	r0, [r5, #28]
    pl_block = NULL;                                                     // Flag st_prep_segment() to load and check active velocity profile.
 80086be:	6023      	str	r3, [r4, #0]
 80086c0:	bd38      	pop	{r3, r4, r5, pc}
 80086c2:	bf00      	nop
 80086c4:	20001378 	.word	0x20001378
 80086c8:	2000137c 	.word	0x2000137c

080086cc <st_prep_buffer>:
  if (bit_istrue(sys.step_control, STEP_CONTROL_END_MOTION))
 80086cc:	4b35      	ldr	r3, [pc, #212]	; (80087a4 <st_prep_buffer+0xd8>)
 80086ce:	791b      	ldrb	r3, [r3, #4]
 80086d0:	07da      	lsls	r2, r3, #31
 80086d2:	f100 84cd 	bmi.w	8009070 <st_prep_buffer+0x9a4>
{
 80086d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086da:	b091      	sub	sp, #68	; 0x44
 80086dc:	4b32      	ldr	r3, [pc, #200]	; (80087a8 <st_prep_buffer+0xdc>)
 80086de:	781f      	ldrb	r7, [r3, #0]
  while (segment_buffer_tail != segment_next_head)
 80086e0:	4b32      	ldr	r3, [pc, #200]	; (80087ac <st_prep_buffer+0xe0>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	42bb      	cmp	r3, r7
 80086e6:	f000 831a 	beq.w	8008d1e <st_prep_buffer+0x652>
    if (pl_block == NULL)
 80086ea:	4b31      	ldr	r3, [pc, #196]	; (80087b0 <st_prep_buffer+0xe4>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 833c 	beq.w	8008d6e <st_prep_buffer+0x6a2>
 80086f6:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80087c4 <st_prep_buffer+0xf8>
 80086fa:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
 80086fe:	f89a 3014 	ldrb.w	r3, [sl, #20]
 8008702:	9301      	str	r3, [sp, #4]
 8008704:	4b2b      	ldr	r3, [pc, #172]	; (80087b4 <st_prep_buffer+0xe8>)
 8008706:	930e      	str	r3, [sp, #56]	; 0x38
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8008708:	4b2b      	ldr	r3, [pc, #172]	; (80087b8 <st_prep_buffer+0xec>)
    prep_segment->st_block_index = prep.st_block_index;
 800870a:	492c      	ldr	r1, [pc, #176]	; (80087bc <st_prep_buffer+0xf0>)
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 800870c:	781b      	ldrb	r3, [r3, #0]
    prep_segment->st_block_index = prep.st_block_index;
 800870e:	f89a 2000 	ldrb.w	r2, [sl]
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8008712:	930c      	str	r3, [sp, #48]	; 0x30
    prep_segment->st_block_index = prep.st_block_index;
 8008714:	00db      	lsls	r3, r3, #3
 8008716:	9307      	str	r3, [sp, #28]
 8008718:	18cb      	adds	r3, r1, r3
 800871a:	711a      	strb	r2, [r3, #4]
    float minimum_mm = mm_remaining - prep.req_mm_increment; // Guarantee at least one step.
 800871c:	f8da 1010 	ldr.w	r1, [sl, #16]
 8008720:	4658      	mov	r0, fp
 8008722:	f7f8 f9bb 	bl	8000a9c <__aeabi_fsub>
 8008726:	2100      	movs	r1, #0
 8008728:	9004      	str	r0, [sp, #16]
 800872a:	f7f8 fc73 	bl	8001014 <__aeabi_fcmpge>
 800872e:	b908      	cbnz	r0, 8008734 <st_prep_buffer+0x68>
 8008730:	2300      	movs	r3, #0
 8008732:	9304      	str	r3, [sp, #16]
          mm_remaining = prep.accelerate_until;
 8008734:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
          time_var = 2.0f * (pl_block->millimeters - mm_remaining) / (prep.current_speed + prep.maximum_speed);
 8008738:	4658      	mov	r0, fp
 800873a:	4619      	mov	r1, r3
          mm_remaining = prep.accelerate_until;
 800873c:	461c      	mov	r4, r3
 800873e:	9302      	str	r3, [sp, #8]
          time_var = 2.0f * (pl_block->millimeters - mm_remaining) / (prep.current_speed + prep.maximum_speed);
 8008740:	f7f8 f9ac 	bl	8000a9c <__aeabi_fsub>
        if (prep.current_speed - prep.maximum_speed <= speed_var)
 8008744:	f8da 3020 	ldr.w	r3, [sl, #32]
          time_var = 2.0f * (pl_block->millimeters - mm_remaining) / (prep.current_speed + prep.maximum_speed);
 8008748:	4601      	mov	r1, r0
        if (prep.current_speed - prep.maximum_speed <= speed_var)
 800874a:	461d      	mov	r5, r3
 800874c:	930d      	str	r3, [sp, #52]	; 0x34
          time_var = 2.0f * (pl_block->millimeters - mm_remaining) / (prep.current_speed + prep.maximum_speed);
 800874e:	f7f8 f9a7 	bl	8000aa0 <__addsf3>
        if (mm_var < prep.decelerate_after)
 8008752:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
          time_var = 2.0f * (pl_block->millimeters - mm_remaining) / (prep.current_speed + prep.maximum_speed);
 8008756:	9006      	str	r0, [sp, #24]
 8008758:	4629      	mov	r1, r5
 800875a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
        if (mm_var < prep.decelerate_after)
 800875e:	461e      	mov	r6, r3
 8008760:	9305      	str	r3, [sp, #20]
 8008762:	f7f8 fb59 	bl	8000e18 <__aeabi_fdiv>
 8008766:	f89a 3014 	ldrb.w	r3, [sl, #20]
 800876a:	900a      	str	r0, [sp, #40]	; 0x28
 800876c:	9303      	str	r3, [sp, #12]
        time_var = 2.0f * (mm_remaining - prep.mm_complete) / (prep.current_speed + prep.exit_speed);
 800876e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8008772:	4631      	mov	r1, r6
 8008774:	4620      	mov	r0, r4
 8008776:	f8da 701c 	ldr.w	r7, [sl, #28]
 800877a:	f8da 8018 	ldr.w	r8, [sl, #24]
 800877e:	9308      	str	r3, [sp, #32]
 8008780:	f7f8 fc2a 	bl	8000fd8 <__aeabi_fcmpeq>
 8008784:	2800      	cmp	r0, #0
 8008786:	f000 8281 	beq.w	8008c8c <st_prep_buffer+0x5c0>
 800878a:	f04f 0302 	mov.w	r3, #2
 800878e:	4d0c      	ldr	r5, [pc, #48]	; (80087c0 <st_prep_buffer+0xf4>)
 8008790:	b2db      	uxtb	r3, r3
 8008792:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8008796:	2400      	movs	r4, #0
 8008798:	462e      	mov	r6, r5
 800879a:	9309      	str	r3, [sp, #36]	; 0x24
 800879c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80087a0:	e01e      	b.n	80087e0 <st_prep_buffer+0x114>
 80087a2:	bf00      	nop
 80087a4:	20001b6c 	.word	0x20001b6c
 80087a8:	20001456 	.word	0x20001456
 80087ac:	20001455 	.word	0x20001455
 80087b0:	20001378 	.word	0x20001378
 80087b4:	200016a8 	.word	0x200016a8
 80087b8:	20001454 	.word	0x20001454
 80087bc:	200013b4 	.word	0x200013b4
 80087c0:	392ec33e 	.word	0x392ec33e
 80087c4:	2000137c 	.word	0x2000137c
        time_var = dt_max - dt;
 80087c8:	4621      	mov	r1, r4
 80087ca:	4630      	mov	r0, r6
 80087cc:	f7f8 f966 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80087d0:	4641      	mov	r1, r8
        time_var = dt_max - dt;
 80087d2:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80087d4:	4658      	mov	r0, fp
 80087d6:	f7f8 fc27 	bl	8001028 <__aeabi_fcmpgt>
 80087da:	2800      	cmp	r0, #0
 80087dc:	f000 80cf 	beq.w	800897e <st_prep_buffer+0x2b2>
      switch (prep.ramp_type)
 80087e0:	9b01      	ldr	r3, [sp, #4]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d044      	beq.n	8008870 <st_prep_buffer+0x1a4>
 80087e6:	f0c0 81a6 	bcc.w	8008b36 <st_prep_buffer+0x46a>
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d17f      	bne.n	80088ee <st_prep_buffer+0x222>
        speed_var = pl_block->acceleration * time_var;
 80087ee:	9b00      	ldr	r3, [sp, #0]
 80087f0:	4628      	mov	r0, r5
 80087f2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80087f4:	f7f8 fa5c 	bl	8000cb0 <__aeabi_fmul>
        if (prep.current_speed - prep.maximum_speed <= speed_var)
 80087f8:	4651      	mov	r1, sl
        speed_var = pl_block->acceleration * time_var;
 80087fa:	4681      	mov	r9, r0
        if (prep.current_speed - prep.maximum_speed <= speed_var)
 80087fc:	4638      	mov	r0, r7
 80087fe:	f7f8 f94d 	bl	8000a9c <__aeabi_fsub>
 8008802:	4601      	mov	r1, r0
 8008804:	4648      	mov	r0, r9
 8008806:	f7f8 fc05 	bl	8001014 <__aeabi_fcmpge>
 800880a:	2800      	cmp	r0, #0
 800880c:	f000 81d2 	beq.w	8008bb4 <st_prep_buffer+0x4e8>
          time_var = 2.0f * (pl_block->millimeters - mm_remaining) / (prep.current_speed + prep.maximum_speed);
 8008810:	4639      	mov	r1, r7
 8008812:	4650      	mov	r0, sl
 8008814:	f7f8 f944 	bl	8000aa0 <__addsf3>
 8008818:	4601      	mov	r1, r0
 800881a:	9806      	ldr	r0, [sp, #24]
 800881c:	f7f8 fafc 	bl	8000e18 <__aeabi_fdiv>
      dt += time_var; // Add computed ramp time to total segment time.
 8008820:	4601      	mov	r1, r0
 8008822:	4620      	mov	r0, r4
 8008824:	f7f8 f93c 	bl	8000aa0 <__addsf3>
 8008828:	4604      	mov	r4, r0
      if (dt < dt_max)
 800882a:	4601      	mov	r1, r0
 800882c:	4630      	mov	r0, r6
 800882e:	f7f8 fbfb 	bl	8001028 <__aeabi_fcmpgt>
 8008832:	2800      	cmp	r0, #0
 8008834:	f040 8209 	bne.w	8008c4a <st_prep_buffer+0x57e>
        if (mm_remaining > minimum_mm)
 8008838:	9f02      	ldr	r7, [sp, #8]
 800883a:	9904      	ldr	r1, [sp, #16]
 800883c:	4638      	mov	r0, r7
 800883e:	f7f8 fbf3 	bl	8001028 <__aeabi_fcmpgt>
 8008842:	2800      	cmp	r0, #0
 8008844:	f000 83d5 	beq.w	8008ff2 <st_prep_buffer+0x926>
          dt_max += DT_SEGMENT;
 8008848:	4630      	mov	r0, r6
 800884a:	49a1      	ldr	r1, [pc, #644]	; (8008ad0 <st_prep_buffer+0x404>)
 800884c:	f7f8 f928 	bl	8000aa0 <__addsf3>
          time_var = dt_max - dt;
 8008850:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 8008852:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 8008854:	f7f8 f922 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008858:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 800885a:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 800885c:	4638      	mov	r0, r7
 800885e:	f7f8 fbe3 	bl	8001028 <__aeabi_fcmpgt>
 8008862:	46bb      	mov	fp, r7
 8008864:	2800      	cmp	r0, #0
 8008866:	f000 81fe 	beq.w	8008c66 <st_prep_buffer+0x59a>
          prep.ramp_type = RAMP_CRUISE;
 800886a:	2301      	movs	r3, #1
          prep.current_speed = prep.maximum_speed;
 800886c:	4657      	mov	r7, sl
          prep.ramp_type = RAMP_CRUISE;
 800886e:	9303      	str	r3, [sp, #12]
        mm_var = mm_remaining - prep.maximum_speed * time_var;
 8008870:	4629      	mov	r1, r5
 8008872:	4650      	mov	r0, sl
 8008874:	f7f8 fa1c 	bl	8000cb0 <__aeabi_fmul>
 8008878:	4601      	mov	r1, r0
 800887a:	4658      	mov	r0, fp
 800887c:	f7f8 f90e 	bl	8000a9c <__aeabi_fsub>
        if (mm_var < prep.decelerate_after)
 8008880:	9905      	ldr	r1, [sp, #20]
          mm_remaining = mm_var;
 8008882:	46d9      	mov	r9, fp
        mm_var = mm_remaining - prep.maximum_speed * time_var;
 8008884:	4683      	mov	fp, r0
        if (mm_var < prep.decelerate_after)
 8008886:	f7f8 fbb1 	bl	8000fec <__aeabi_fcmplt>
 800888a:	2800      	cmp	r0, #0
 800888c:	f000 81bf 	beq.w	8008c0e <st_prep_buffer+0x542>
          time_var = (mm_remaining - prep.decelerate_after) / prep.maximum_speed;
 8008890:	f8dd b014 	ldr.w	fp, [sp, #20]
 8008894:	4648      	mov	r0, r9
 8008896:	4659      	mov	r1, fp
 8008898:	f7f8 f900 	bl	8000a9c <__aeabi_fsub>
 800889c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800889e:	f7f8 fa07 	bl	8000cb0 <__aeabi_fmul>
      dt += time_var; // Add computed ramp time to total segment time.
 80088a2:	4601      	mov	r1, r0
 80088a4:	4620      	mov	r0, r4
 80088a6:	f7f8 f8fb 	bl	8000aa0 <__addsf3>
 80088aa:	4604      	mov	r4, r0
      if (dt < dt_max)
 80088ac:	4601      	mov	r1, r0
 80088ae:	4630      	mov	r0, r6
 80088b0:	f7f8 fbba 	bl	8001028 <__aeabi_fcmpgt>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	f040 81b7 	bne.w	8008c28 <st_prep_buffer+0x55c>
        if (mm_remaining > minimum_mm)
 80088ba:	9904      	ldr	r1, [sp, #16]
 80088bc:	4658      	mov	r0, fp
 80088be:	f7f8 fbb3 	bl	8001028 <__aeabi_fcmpgt>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	f000 81bc 	beq.w	8008c40 <st_prep_buffer+0x574>
          dt_max += DT_SEGMENT;
 80088c8:	4630      	mov	r0, r6
 80088ca:	4981      	ldr	r1, [pc, #516]	; (8008ad0 <st_prep_buffer+0x404>)
 80088cc:	f7f8 f8e8 	bl	8000aa0 <__addsf3>
          time_var = dt_max - dt;
 80088d0:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 80088d2:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 80088d4:	f7f8 f8e2 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80088d8:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 80088da:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80088dc:	4658      	mov	r0, fp
 80088de:	f7f8 fba3 	bl	8001028 <__aeabi_fcmpgt>
 80088e2:	2800      	cmp	r0, #0
 80088e4:	f000 81ac 	beq.w	8008c40 <st_prep_buffer+0x574>
 80088e8:	2302      	movs	r3, #2
 80088ea:	9303      	str	r3, [sp, #12]
          prep.ramp_type = RAMP_DECEL;
 80088ec:	9301      	str	r3, [sp, #4]
        speed_var = pl_block->acceleration * time_var; // Used as delta speed (mm/min)
 80088ee:	9b00      	ldr	r3, [sp, #0]
 80088f0:	4628      	mov	r0, r5
 80088f2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80088f4:	f7f8 f9dc 	bl	8000cb0 <__aeabi_fmul>
        if (prep.current_speed > speed_var)
 80088f8:	4639      	mov	r1, r7
        speed_var = pl_block->acceleration * time_var; // Used as delta speed (mm/min)
 80088fa:	4681      	mov	r9, r0
        if (prep.current_speed > speed_var)
 80088fc:	f7f8 fb76 	bl	8000fec <__aeabi_fcmplt>
 8008900:	2800      	cmp	r0, #0
 8008902:	f000 8143 	beq.w	8008b8c <st_prep_buffer+0x4c0>
          mm_var = mm_remaining - time_var * (prep.current_speed - 0.5f * speed_var); // (mm)
 8008906:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800890a:	4648      	mov	r0, r9
 800890c:	f7f8 f9d0 	bl	8000cb0 <__aeabi_fmul>
 8008910:	4639      	mov	r1, r7
 8008912:	f7f8 f8c3 	bl	8000a9c <__aeabi_fsub>
 8008916:	4629      	mov	r1, r5
 8008918:	f7f8 f9ca 	bl	8000cb0 <__aeabi_fmul>
 800891c:	4659      	mov	r1, fp
 800891e:	f7f8 f8bf 	bl	8000aa0 <__addsf3>
          if (mm_var > prep.mm_complete)
 8008922:	4641      	mov	r1, r8
          mm_var = mm_remaining - time_var * (prep.current_speed - 0.5f * speed_var); // (mm)
 8008924:	900b      	str	r0, [sp, #44]	; 0x2c
          if (mm_var > prep.mm_complete)
 8008926:	f7f8 fb7f 	bl	8001028 <__aeabi_fcmpgt>
 800892a:	2800      	cmp	r0, #0
 800892c:	f000 812e 	beq.w	8008b8c <st_prep_buffer+0x4c0>
            prep.current_speed -= speed_var;
 8008930:	4638      	mov	r0, r7
 8008932:	4649      	mov	r1, r9
 8008934:	f7f8 f8b2 	bl	8000a9c <__aeabi_fsub>
 8008938:	4607      	mov	r7, r0
            mm_remaining = mm_var;
 800893a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
      dt += time_var; // Add computed ramp time to total segment time.
 800893e:	4629      	mov	r1, r5
 8008940:	4620      	mov	r0, r4
 8008942:	f7f8 f8ad 	bl	8000aa0 <__addsf3>
      if (dt < dt_max)
 8008946:	4631      	mov	r1, r6
      dt += time_var; // Add computed ramp time to total segment time.
 8008948:	4604      	mov	r4, r0
      if (dt < dt_max)
 800894a:	f7f8 fb4f 	bl	8000fec <__aeabi_fcmplt>
 800894e:	2800      	cmp	r0, #0
 8008950:	f47f af3a 	bne.w	80087c8 <st_prep_buffer+0xfc>
        if (mm_remaining > minimum_mm)
 8008954:	4659      	mov	r1, fp
 8008956:	9804      	ldr	r0, [sp, #16]
 8008958:	f7f8 fb48 	bl	8000fec <__aeabi_fcmplt>
 800895c:	b178      	cbz	r0, 800897e <st_prep_buffer+0x2b2>
          dt_max += DT_SEGMENT;
 800895e:	4630      	mov	r0, r6
 8008960:	495b      	ldr	r1, [pc, #364]	; (8008ad0 <st_prep_buffer+0x404>)
 8008962:	f7f8 f89d 	bl	8000aa0 <__addsf3>
          time_var = dt_max - dt;
 8008966:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 8008968:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 800896a:	f7f8 f897 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 800896e:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 8008970:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008972:	4658      	mov	r0, fp
 8008974:	f7f8 fb58 	bl	8001028 <__aeabi_fcmpgt>
 8008978:	2800      	cmp	r0, #0
 800897a:	f47f af31 	bne.w	80087e0 <st_prep_buffer+0x114>
 800897e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8008982:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008986:	f8ca 701c 	str.w	r7, [sl, #28]
 800898a:	f88a 3014 	strb.w	r3, [sl, #20]
    if (st_prep_block->is_pwm_rate_adjusted || (sys.step_control & STEP_CONTROL_UPDATE_SPINDLE_PWM))
 800898e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	7e9b      	ldrb	r3, [r3, #26]
 8008994:	2b00      	cmp	r3, #0
 8008996:	f040 817c 	bne.w	8008c92 <st_prep_buffer+0x5c6>
 800899a:	4b4e      	ldr	r3, [pc, #312]	; (8008ad4 <st_prep_buffer+0x408>)
 800899c:	f893 8004 	ldrb.w	r8, [r3, #4]
 80089a0:	f018 0f08 	tst.w	r8, #8
 80089a4:	f040 81be 	bne.w	8008d24 <st_prep_buffer+0x658>
 80089a8:	f89a 0034 	ldrb.w	r0, [sl, #52]	; 0x34
    prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 80089ac:	9a07      	ldr	r2, [sp, #28]
 80089ae:	4b4a      	ldr	r3, [pc, #296]	; (8008ad8 <st_prep_buffer+0x40c>)
    float step_dist_remaining = prep.step_per_mm * mm_remaining;                   // Convert mm_remaining to steps
 80089b0:	f8da 100c 	ldr.w	r1, [sl, #12]
    prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 80089b4:	4413      	add	r3, r2
 80089b6:	7198      	strb	r0, [r3, #6]
    float step_dist_remaining = prep.step_per_mm * mm_remaining;                   // Convert mm_remaining to steps
 80089b8:	4658      	mov	r0, fp
 80089ba:	f7f8 f979 	bl	8000cb0 <__aeabi_fmul>
 80089be:	4606      	mov	r6, r0
    float n_steps_remaining = ceilf(step_dist_remaining);                          // Round-up current steps remaining
 80089c0:	f002 f9c2 	bl	800ad48 <ceilf>
 80089c4:	4605      	mov	r5, r0
    float last_n_steps_remaining = ceilf(prep.steps_remaining);                    // Round-up last steps remaining
 80089c6:	f8da 0008 	ldr.w	r0, [sl, #8]
 80089ca:	f002 f9bd 	bl	800ad48 <ceilf>
    prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 80089ce:	4629      	mov	r1, r5
    float last_n_steps_remaining = ceilf(prep.steps_remaining);                    // Round-up last steps remaining
 80089d0:	4607      	mov	r7, r0
    prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 80089d2:	f7f8 f863 	bl	8000a9c <__aeabi_fsub>
 80089d6:	f7f8 fb6d 	bl	80010b4 <__aeabi_f2uiz>
 80089da:	4b3f      	ldr	r3, [pc, #252]	; (8008ad8 <st_prep_buffer+0x40c>)
 80089dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089de:	fa1f f980 	uxth.w	r9, r0
 80089e2:	f823 9032 	strh.w	r9, [r3, r2, lsl #3]
    if (prep_segment->n_step == 0)
 80089e6:	f1b9 0f00 	cmp.w	r9, #0
 80089ea:	d103      	bne.n	80089f4 <st_prep_buffer+0x328>
      if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD)
 80089ec:	f018 0f02 	tst.w	r8, #2
 80089f0:	f040 83aa 	bne.w	8009148 <st_prep_buffer+0xa7c>
    dt += prep.dt_remainder;                                              // Apply previous segment partial step execute time
 80089f4:	4620      	mov	r0, r4
 80089f6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80089fa:	f7f8 f851 	bl	8000aa0 <__addsf3>
    float inv_rate = dt / (last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 80089fe:	4631      	mov	r1, r6
    dt += prep.dt_remainder;                                              // Apply previous segment partial step execute time
 8008a00:	4604      	mov	r4, r0
    float inv_rate = dt / (last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8008a02:	4638      	mov	r0, r7
 8008a04:	f7f8 f84a 	bl	8000a9c <__aeabi_fsub>
 8008a08:	4601      	mov	r1, r0
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f7f8 fa04 	bl	8000e18 <__aeabi_fdiv>
 8008a10:	4604      	mov	r4, r0
    uint32_t cycles = (uint32_t)ceilf((TICKS_PER_MICROSECOND * 1000000) * inv_rate * 60); // (cycles/step)
 8008a12:	4a32      	ldr	r2, [pc, #200]	; (8008adc <st_prep_buffer+0x410>)
 8008a14:	4b32      	ldr	r3, [pc, #200]	; (8008ae0 <st_prep_buffer+0x414>)
 8008a16:	6817      	ldr	r7, [r2, #0]
 8008a18:	4832      	ldr	r0, [pc, #200]	; (8008ae4 <st_prep_buffer+0x418>)
 8008a1a:	fba3 2307 	umull	r2, r3, r3, r7
 8008a1e:	0c9b      	lsrs	r3, r3, #18
 8008a20:	fb00 f003 	mul.w	r0, r0, r3
 8008a24:	f7f8 f8ec 	bl	8000c00 <__aeabi_ui2f>
 8008a28:	492f      	ldr	r1, [pc, #188]	; (8008ae8 <st_prep_buffer+0x41c>)
 8008a2a:	f7f8 f941 	bl	8000cb0 <__aeabi_fmul>
 8008a2e:	4621      	mov	r1, r4
 8008a30:	f7f8 f93e 	bl	8000cb0 <__aeabi_fmul>
 8008a34:	f002 f988 	bl	800ad48 <ceilf>
 8008a38:	f7f8 fb3c 	bl	80010b4 <__aeabi_f2uiz>
    if (cycles < AMASS_LEVEL1)
 8008a3c:	4b2b      	ldr	r3, [pc, #172]	; (8008aec <st_prep_buffer+0x420>)
 8008a3e:	fba3 3707 	umull	r3, r7, r3, r7
 8008a42:	ebb0 2f57 	cmp.w	r0, r7, lsr #9
 8008a46:	f080 8139 	bcs.w	8008cbc <st_prep_buffer+0x5f0>
      prep_segment->amass_level = 0;
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	9907      	ldr	r1, [sp, #28]
 8008a4e:	4b22      	ldr	r3, [pc, #136]	; (8008ad8 <st_prep_buffer+0x40c>)
 8008a50:	440b      	add	r3, r1
 8008a52:	715a      	strb	r2, [r3, #5]
 8008a54:	460a      	mov	r2, r1
 8008a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a5a:	4298      	cmp	r0, r3
 8008a5c:	bf28      	it	cs
 8008a5e:	4618      	movcs	r0, r3
    segment_buffer_head = segment_next_head;
 8008a60:	4b23      	ldr	r3, [pc, #140]	; (8008af0 <st_prep_buffer+0x424>)
 8008a62:	491d      	ldr	r1, [pc, #116]	; (8008ad8 <st_prep_buffer+0x40c>)
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	440a      	add	r2, r1
    if (++segment_next_head == SEGMENT_BUFFER_SIZE)
 8008a68:	1c5f      	adds	r7, r3, #1
 8008a6a:	b2ff      	uxtb	r7, r7
 8008a6c:	8050      	strh	r0, [r2, #2]
    segment_buffer_head = segment_next_head;
 8008a6e:	4a21      	ldr	r2, [pc, #132]	; (8008af4 <st_prep_buffer+0x428>)
    if (++segment_next_head == SEGMENT_BUFFER_SIZE)
 8008a70:	2f14      	cmp	r7, #20
    segment_buffer_head = segment_next_head;
 8008a72:	7013      	strb	r3, [r2, #0]
    if (++segment_next_head == SEGMENT_BUFFER_SIZE)
 8008a74:	f000 8133 	beq.w	8008cde <st_prep_buffer+0x612>
    pl_block->millimeters = mm_remaining;
 8008a78:	4b1f      	ldr	r3, [pc, #124]	; (8008af8 <st_prep_buffer+0x42c>)
    if (++segment_next_head == SEGMENT_BUFFER_SIZE)
 8008a7a:	4a1d      	ldr	r2, [pc, #116]	; (8008af0 <st_prep_buffer+0x424>)
    pl_block->millimeters = mm_remaining;
 8008a7c:	681b      	ldr	r3, [r3, #0]
    if (++segment_next_head == SEGMENT_BUFFER_SIZE)
 8008a7e:	7017      	strb	r7, [r2, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining) * inv_rate;
 8008a80:	4631      	mov	r1, r6
    pl_block->millimeters = mm_remaining;
 8008a82:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
    prep.steps_remaining = n_steps_remaining;
 8008a86:	f8ca 5008 	str.w	r5, [sl, #8]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining) * inv_rate;
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f7f8 f806 	bl	8000a9c <__aeabi_fsub>
 8008a90:	4621      	mov	r1, r4
 8008a92:	f7f8 f90d 	bl	8000cb0 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete)
 8008a96:	f8da 1018 	ldr.w	r1, [sl, #24]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining) * inv_rate;
 8008a9a:	f8ca 0004 	str.w	r0, [sl, #4]
    if (mm_remaining == prep.mm_complete)
 8008a9e:	4658      	mov	r0, fp
 8008aa0:	f7f8 fa9a 	bl	8000fd8 <__aeabi_fcmpeq>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	f43f ae1b 	beq.w	80086e0 <st_prep_buffer+0x14>
      if (mm_remaining > 0.0f)
 8008aaa:	4658      	mov	r0, fp
 8008aac:	2100      	movs	r1, #0
 8008aae:	f7f8 fabb 	bl	8001028 <__aeabi_fcmpgt>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	f040 8348 	bne.w	8009148 <st_prep_buffer+0xa7c>
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION)
 8008ab8:	f018 0304 	ands.w	r3, r8, #4
 8008abc:	f040 8344 	bne.w	8009148 <st_prep_buffer+0xa7c>
        pl_block = NULL; // Set pointer to indicate check and load next planner block.
 8008ac0:	4a0d      	ldr	r2, [pc, #52]	; (8008af8 <st_prep_buffer+0x42c>)
 8008ac2:	6013      	str	r3, [r2, #0]
        plan_discard_current_block();
 8008ac4:	f7fb fcae 	bl	8004424 <plan_discard_current_block>
        report_status_message(STATUS_AXIS_DONE); // Report idle status.
 8008ac8:	2012      	movs	r0, #18
 8008aca:	f7fd fd2d 	bl	8006528 <report_status_message>
 8008ace:	e605      	b.n	80086dc <st_prep_buffer+0x10>
 8008ad0:	392ec33e 	.word	0x392ec33e
 8008ad4:	20001b6c 	.word	0x20001b6c
 8008ad8:	200013b4 	.word	0x200013b4
 8008adc:	20000004 	.word	0x20000004
 8008ae0:	431bde83 	.word	0x431bde83
 8008ae4:	000f4240 	.word	0x000f4240
 8008ae8:	42700000 	.word	0x42700000
 8008aec:	10624dd3 	.word	0x10624dd3
 8008af0:	20001456 	.word	0x20001456
 8008af4:	20001454 	.word	0x20001454
 8008af8:	20001378 	.word	0x20001378
          prep.current_speed += speed_var;
 8008afc:	4649      	mov	r1, r9
 8008afe:	4638      	mov	r0, r7
 8008b00:	f7f7 ffce 	bl	8000aa0 <__addsf3>
      dt += time_var; // Add computed ramp time to total segment time.
 8008b04:	4629      	mov	r1, r5
          prep.current_speed += speed_var;
 8008b06:	4607      	mov	r7, r0
      dt += time_var; // Add computed ramp time to total segment time.
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f7f7 ffc9 	bl	8000aa0 <__addsf3>
 8008b0e:	4604      	mov	r4, r0
      if (dt < dt_max)
 8008b10:	4601      	mov	r1, r0
 8008b12:	4630      	mov	r0, r6
 8008b14:	f7f8 fa88 	bl	8001028 <__aeabi_fcmpgt>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	f43f af1b 	beq.w	8008954 <st_prep_buffer+0x288>
        time_var = dt_max - dt;
 8008b1e:	4621      	mov	r1, r4
 8008b20:	4630      	mov	r0, r6
 8008b22:	f7f7 ffbb 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008b26:	4641      	mov	r1, r8
        time_var = dt_max - dt;
 8008b28:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008b2a:	4658      	mov	r0, fp
 8008b2c:	f7f8 fa7c 	bl	8001028 <__aeabi_fcmpgt>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	f43f af24 	beq.w	800897e <st_prep_buffer+0x2b2>
        speed_var = pl_block->acceleration * time_var;
 8008b36:	9b00      	ldr	r3, [sp, #0]
 8008b38:	4628      	mov	r0, r5
 8008b3a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008b3c:	f7f8 f8b8 	bl	8000cb0 <__aeabi_fmul>
        mm_remaining -= time_var * (prep.current_speed + 0.5f * speed_var);
 8008b40:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
        speed_var = pl_block->acceleration * time_var;
 8008b44:	4681      	mov	r9, r0
        mm_remaining -= time_var * (prep.current_speed + 0.5f * speed_var);
 8008b46:	f7f8 f8b3 	bl	8000cb0 <__aeabi_fmul>
 8008b4a:	4639      	mov	r1, r7
 8008b4c:	f7f7 ffa8 	bl	8000aa0 <__addsf3>
 8008b50:	4629      	mov	r1, r5
 8008b52:	f7f8 f8ad 	bl	8000cb0 <__aeabi_fmul>
 8008b56:	4601      	mov	r1, r0
 8008b58:	4658      	mov	r0, fp
 8008b5a:	f7f7 ff9f 	bl	8000a9c <__aeabi_fsub>
 8008b5e:	4683      	mov	fp, r0
        if (mm_remaining < prep.accelerate_until)
 8008b60:	4601      	mov	r1, r0
 8008b62:	9802      	ldr	r0, [sp, #8]
 8008b64:	f7f8 fa60 	bl	8001028 <__aeabi_fcmpgt>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d0c7      	beq.n	8008afc <st_prep_buffer+0x430>
          time_var = 2.0f * (pl_block->millimeters - mm_remaining) / (prep.current_speed + prep.maximum_speed);
 8008b6c:	4639      	mov	r1, r7
 8008b6e:	4650      	mov	r0, sl
 8008b70:	f7f7 ff96 	bl	8000aa0 <__addsf3>
 8008b74:	4601      	mov	r1, r0
 8008b76:	9806      	ldr	r0, [sp, #24]
 8008b78:	f7f8 f94e 	bl	8000e18 <__aeabi_fdiv>
 8008b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b7e:	4605      	mov	r5, r0
          prep.current_speed = prep.maximum_speed;
 8008b80:	4657      	mov	r7, sl
 8008b82:	9303      	str	r3, [sp, #12]
 8008b84:	9301      	str	r3, [sp, #4]
          mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 8008b86:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008b8a:	e6d8      	b.n	800893e <st_prep_buffer+0x272>
        time_var = 2.0f * (mm_remaining - prep.mm_complete) / (prep.current_speed + prep.exit_speed);
 8008b8c:	4658      	mov	r0, fp
 8008b8e:	4641      	mov	r1, r8
 8008b90:	f7f7 ff84 	bl	8000a9c <__aeabi_fsub>
 8008b94:	4601      	mov	r1, r0
 8008b96:	f7f7 ff83 	bl	8000aa0 <__addsf3>
 8008b9a:	4639      	mov	r1, r7
 8008b9c:	9f08      	ldr	r7, [sp, #32]
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	4638      	mov	r0, r7
 8008ba2:	f7f7 ff7d 	bl	8000aa0 <__addsf3>
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	4628      	mov	r0, r5
 8008baa:	f7f8 f935 	bl	8000e18 <__aeabi_fdiv>
        mm_remaining = prep.mm_complete;
 8008bae:	46c3      	mov	fp, r8
        time_var = 2.0f * (mm_remaining - prep.mm_complete) / (prep.current_speed + prep.exit_speed);
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	e6c4      	b.n	800893e <st_prep_buffer+0x272>
          mm_remaining -= time_var * (prep.current_speed - 0.5f * speed_var);
 8008bb4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008bb8:	4648      	mov	r0, r9
 8008bba:	f7f8 f879 	bl	8000cb0 <__aeabi_fmul>
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	f7f7 ff6c 	bl	8000a9c <__aeabi_fsub>
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	f7f8 f873 	bl	8000cb0 <__aeabi_fmul>
 8008bca:	4601      	mov	r1, r0
 8008bcc:	4658      	mov	r0, fp
 8008bce:	f7f7 ff67 	bl	8000aa0 <__addsf3>
          prep.current_speed -= speed_var;
 8008bd2:	4649      	mov	r1, r9
          mm_remaining -= time_var * (prep.current_speed - 0.5f * speed_var);
 8008bd4:	4683      	mov	fp, r0
          prep.current_speed -= speed_var;
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	f7f7 ff60 	bl	8000a9c <__aeabi_fsub>
      dt += time_var; // Add computed ramp time to total segment time.
 8008bdc:	4629      	mov	r1, r5
          prep.current_speed -= speed_var;
 8008bde:	4607      	mov	r7, r0
      dt += time_var; // Add computed ramp time to total segment time.
 8008be0:	4620      	mov	r0, r4
 8008be2:	f7f7 ff5d 	bl	8000aa0 <__addsf3>
      if (dt < dt_max)
 8008be6:	4631      	mov	r1, r6
      dt += time_var; // Add computed ramp time to total segment time.
 8008be8:	4604      	mov	r4, r0
      if (dt < dt_max)
 8008bea:	f7f8 f9ff 	bl	8000fec <__aeabi_fcmplt>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	f43f aeb0 	beq.w	8008954 <st_prep_buffer+0x288>
        time_var = dt_max - dt;
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f7f7 ff50 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008bfc:	4641      	mov	r1, r8
        time_var = dt_max - dt;
 8008bfe:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c00:	4658      	mov	r0, fp
 8008c02:	f7f8 fa11 	bl	8001028 <__aeabi_fcmpgt>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	f47f adf1 	bne.w	80087ee <st_prep_buffer+0x122>
 8008c0c:	e6b7      	b.n	800897e <st_prep_buffer+0x2b2>
      dt += time_var; // Add computed ramp time to total segment time.
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4620      	mov	r0, r4
 8008c12:	f7f7 ff45 	bl	8000aa0 <__addsf3>
 8008c16:	4604      	mov	r4, r0
      if (dt < dt_max)
 8008c18:	4601      	mov	r1, r0
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f7f8 fa04 	bl	8001028 <__aeabi_fcmpgt>
 8008c20:	bb38      	cbnz	r0, 8008c72 <st_prep_buffer+0x5a6>
 8008c22:	2301      	movs	r3, #1
 8008c24:	9301      	str	r3, [sp, #4]
 8008c26:	e695      	b.n	8008954 <st_prep_buffer+0x288>
        time_var = dt_max - dt;
 8008c28:	4621      	mov	r1, r4
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f7f7 ff36 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c30:	4641      	mov	r1, r8
        time_var = dt_max - dt;
 8008c32:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c34:	4658      	mov	r0, fp
 8008c36:	f7f8 f9f7 	bl	8001028 <__aeabi_fcmpgt>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	f47f ae54 	bne.w	80088e8 <st_prep_buffer+0x21c>
          prep.ramp_type = RAMP_DECEL;
 8008c40:	2302      	movs	r3, #2
 8008c42:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8008c46:	9303      	str	r3, [sp, #12]
 8008c48:	e69b      	b.n	8008982 <st_prep_buffer+0x2b6>
        time_var = dt_max - dt;
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f7f7 ff25 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c52:	f8dd b008 	ldr.w	fp, [sp, #8]
        time_var = dt_max - dt;
 8008c56:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c58:	4641      	mov	r1, r8
 8008c5a:	4658      	mov	r0, fp
 8008c5c:	f7f8 f9e4 	bl	8001028 <__aeabi_fcmpgt>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	f47f ae02 	bne.w	800886a <st_prep_buffer+0x19e>
          prep.ramp_type = RAMP_CRUISE;
 8008c66:	2301      	movs	r3, #1
 8008c68:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
          prep.current_speed = prep.maximum_speed;
 8008c6c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
          prep.ramp_type = RAMP_CRUISE;
 8008c6e:	9303      	str	r3, [sp, #12]
 8008c70:	e687      	b.n	8008982 <st_prep_buffer+0x2b6>
        time_var = dt_max - dt;
 8008c72:	4621      	mov	r1, r4
 8008c74:	4630      	mov	r0, r6
 8008c76:	f7f7 ff11 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c7a:	4641      	mov	r1, r8
        time_var = dt_max - dt;
 8008c7c:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c7e:	4658      	mov	r0, fp
 8008c80:	f7f8 f9d2 	bl	8001028 <__aeabi_fcmpgt>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	f47f adf3 	bne.w	8008870 <st_prep_buffer+0x1a4>
 8008c8a:	e678      	b.n	800897e <st_prep_buffer+0x2b2>
 8008c8c:	f04f 0301 	mov.w	r3, #1
 8008c90:	e57d      	b.n	800878e <st_prep_buffer+0xc2>
      if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW))
 8008c92:	9b00      	ldr	r3, [sp, #0]
 8008c94:	7e9b      	ldrb	r3, [r3, #26]
 8008c96:	f013 0f30 	tst.w	r3, #48	; 0x30
 8008c9a:	d15c      	bne.n	8008d56 <st_prep_buffer+0x68a>
 8008c9c:	4bb5      	ldr	r3, [pc, #724]	; (8008f74 <st_prep_buffer+0x8a8>)
 8008c9e:	f893 8004 	ldrb.w	r8, [r3, #4]
        prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8008ca2:	2300      	movs	r3, #0
        sys.spindle_speed = 0.0;
 8008ca4:	2100      	movs	r1, #0
        prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8008ca6:	4618      	mov	r0, r3
        sys.spindle_speed = 0.0;
 8008ca8:	4ab2      	ldr	r2, [pc, #712]	; (8008f74 <st_prep_buffer+0x8a8>)
        prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8008caa:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
        sys.spindle_speed = 0.0;
 8008cae:	6111      	str	r1, [r2, #16]
      bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8008cb0:	4bb0      	ldr	r3, [pc, #704]	; (8008f74 <st_prep_buffer+0x8a8>)
 8008cb2:	f008 08f7 	and.w	r8, r8, #247	; 0xf7
 8008cb6:	f883 8004 	strb.w	r8, [r3, #4]
 8008cba:	e677      	b.n	80089ac <st_prep_buffer+0x2e0>
      if (cycles < AMASS_LEVEL2)
 8008cbc:	ebb0 2f17 	cmp.w	r0, r7, lsr #8
 8008cc0:	d240      	bcs.n	8008d44 <st_prep_buffer+0x678>
        prep_segment->amass_level = 1;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	4aac      	ldr	r2, [pc, #688]	; (8008f78 <st_prep_buffer+0x8ac>)
 8008cc6:	9907      	ldr	r1, [sp, #28]
 8008cc8:	440a      	add	r2, r1
 8008cca:	7153      	strb	r3, [r2, #5]
      prep_segment->n_step <<= prep_segment->amass_level;
 8008ccc:	4aaa      	ldr	r2, [pc, #680]	; (8008f78 <st_prep_buffer+0x8ac>)
 8008cce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cd0:	fa09 f903 	lsl.w	r9, r9, r3
 8008cd4:	f822 9031 	strh.w	r9, [r2, r1, lsl #3]
      cycles >>= prep_segment->amass_level;
 8008cd8:	40d8      	lsrs	r0, r3
 8008cda:	9a07      	ldr	r2, [sp, #28]
 8008cdc:	e6bb      	b.n	8008a56 <st_prep_buffer+0x38a>
      segment_next_head = 0;
 8008cde:	2200      	movs	r2, #0
    pl_block->millimeters = mm_remaining;
 8008ce0:	4ba6      	ldr	r3, [pc, #664]	; (8008f7c <st_prep_buffer+0x8b0>)
    prep.steps_remaining = n_steps_remaining;
 8008ce2:	f8ca 5008 	str.w	r5, [sl, #8]
    pl_block->millimeters = mm_remaining;
 8008ce6:	681b      	ldr	r3, [r3, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining) * inv_rate;
 8008ce8:	4628      	mov	r0, r5
      segment_next_head = 0;
 8008cea:	4da5      	ldr	r5, [pc, #660]	; (8008f80 <st_prep_buffer+0x8b4>)
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining) * inv_rate;
 8008cec:	4631      	mov	r1, r6
      segment_next_head = 0;
 8008cee:	702a      	strb	r2, [r5, #0]
    pl_block->millimeters = mm_remaining;
 8008cf0:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining) * inv_rate;
 8008cf4:	f7f7 fed2 	bl	8000a9c <__aeabi_fsub>
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	f7f7 ffd9 	bl	8000cb0 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete)
 8008cfe:	4659      	mov	r1, fp
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining) * inv_rate;
 8008d00:	f8ca 0004 	str.w	r0, [sl, #4]
    if (mm_remaining == prep.mm_complete)
 8008d04:	f8da 0018 	ldr.w	r0, [sl, #24]
 8008d08:	f7f8 f966 	bl	8000fd8 <__aeabi_fcmpeq>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	f47f aecc 	bne.w	8008aaa <st_prep_buffer+0x3de>
 8008d12:	4607      	mov	r7, r0
  while (segment_buffer_tail != segment_next_head)
 8008d14:	4b9b      	ldr	r3, [pc, #620]	; (8008f84 <st_prep_buffer+0x8b8>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	42bb      	cmp	r3, r7
 8008d1a:	f47f ace6 	bne.w	80086ea <st_prep_buffer+0x1e>
}
 8008d1e:	b011      	add	sp, #68	; 0x44
 8008d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW))
 8008d24:	9b00      	ldr	r3, [sp, #0]
 8008d26:	7e9b      	ldrb	r3, [r3, #26]
 8008d28:	f013 0f30 	tst.w	r3, #48	; 0x30
 8008d2c:	d0b9      	beq.n	8008ca2 <st_prep_buffer+0x5d6>
        float rpm = pl_block->spindle_speed;
 8008d2e:	9b00      	ldr	r3, [sp, #0]
 8008d30:	6b98      	ldr	r0, [r3, #56]	; 0x38
        prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 8008d32:	f7fe ff63 	bl	8007bfc <spindle_compute_pwm_value>
 8008d36:	4b8f      	ldr	r3, [pc, #572]	; (8008f74 <st_prep_buffer+0x8a8>)
 8008d38:	b2c0      	uxtb	r0, r0
 8008d3a:	f88a 0034 	strb.w	r0, [sl, #52]	; 0x34
 8008d3e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8008d42:	e7b5      	b.n	8008cb0 <st_prep_buffer+0x5e4>
      else if (cycles < AMASS_LEVEL3)
 8008d44:	ebb0 1fd7 	cmp.w	r0, r7, lsr #7
 8008d48:	d25d      	bcs.n	8008e06 <st_prep_buffer+0x73a>
        prep_segment->amass_level = 2;
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	4a8a      	ldr	r2, [pc, #552]	; (8008f78 <st_prep_buffer+0x8ac>)
 8008d4e:	9907      	ldr	r1, [sp, #28]
 8008d50:	440a      	add	r2, r1
 8008d52:	7153      	strb	r3, [r2, #5]
 8008d54:	e7ba      	b.n	8008ccc <st_prep_buffer+0x600>
        float rpm = pl_block->spindle_speed;
 8008d56:	9b00      	ldr	r3, [sp, #0]
          rpm *= (prep.current_speed * prep.inv_rate);
 8008d58:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
        float rpm = pl_block->spindle_speed;
 8008d5c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
          rpm *= (prep.current_speed * prep.inv_rate);
 8008d5e:	f8da 001c 	ldr.w	r0, [sl, #28]
 8008d62:	f7f7 ffa5 	bl	8000cb0 <__aeabi_fmul>
 8008d66:	4629      	mov	r1, r5
 8008d68:	f7f7 ffa2 	bl	8000cb0 <__aeabi_fmul>
 8008d6c:	e7e1      	b.n	8008d32 <st_prep_buffer+0x666>
      if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION)
 8008d6e:	4b81      	ldr	r3, [pc, #516]	; (8008f74 <st_prep_buffer+0x8a8>)
 8008d70:	791b      	ldrb	r3, [r3, #4]
 8008d72:	075b      	lsls	r3, r3, #29
 8008d74:	d54e      	bpl.n	8008e14 <st_prep_buffer+0x748>
        pl_block = plan_get_system_motion_block();
 8008d76:	f7fb fb6f 	bl	8004458 <plan_get_system_motion_block>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	4b7f      	ldr	r3, [pc, #508]	; (8008f7c <st_prep_buffer+0x8b0>)
 8008d7e:	9000      	str	r0, [sp, #0]
 8008d80:	6018      	str	r0, [r3, #0]
      if (pl_block == NULL)
 8008d82:	2a00      	cmp	r2, #0
 8008d84:	d0cb      	beq.n	8008d1e <st_prep_buffer+0x652>
      if (prep.recalculate_flag & PREP_FLAG_RECALCULATE)
 8008d86:	f8df a210 	ldr.w	sl, [pc, #528]	; 8008f98 <st_prep_buffer+0x8cc>
 8008d8a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8008d8e:	f017 0301 	ands.w	r3, r7, #1
 8008d92:	d046      	beq.n	8008e22 <st_prep_buffer+0x756>
        prep.recalculate_flag = false;
 8008d94:	2300      	movs	r3, #0
 8008d96:	4977      	ldr	r1, [pc, #476]	; (8008f74 <st_prep_buffer+0x8a8>)
 8008d98:	f88a 3001 	strb.w	r3, [sl, #1]
 8008d9c:	790d      	ldrb	r5, [r1, #4]
 8008d9e:	4b7a      	ldr	r3, [pc, #488]	; (8008f88 <st_prep_buffer+0x8bc>)
 8008da0:	f8d2 b028 	ldr.w	fp, [r2, #40]	; 0x28
 8008da4:	f005 0602 	and.w	r6, r5, #2
 8008da8:	930e      	str	r3, [sp, #56]	; 0x38
      prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8008daa:	2200      	movs	r2, #0
      float inv_2_accel = 0.5f / pl_block->acceleration;
 8008dac:	9b00      	ldr	r3, [sp, #0]
      prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8008dae:	f8ca 2018 	str.w	r2, [sl, #24]
      float inv_2_accel = 0.5f / pl_block->acceleration;
 8008db2:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8008db4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008db8:	4639      	mov	r1, r7
 8008dba:	f7f8 f82d 	bl	8000e18 <__aeabi_fdiv>
 8008dbe:	4604      	mov	r4, r0
      if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD)
 8008dc0:	2e00      	cmp	r6, #0
 8008dc2:	f000 8093 	beq.w	8008eec <st_prep_buffer+0x820>
        prep.ramp_type = RAMP_DECEL;
 8008dc6:	f04f 0802 	mov.w	r8, #2
        float decel_dist = pl_block->millimeters - inv_2_accel * pl_block->entry_speed_sqr;
 8008dca:	9b00      	ldr	r3, [sp, #0]
        prep.ramp_type = RAMP_DECEL;
 8008dcc:	f88a 8014 	strb.w	r8, [sl, #20]
        float decel_dist = pl_block->millimeters - inv_2_accel * pl_block->entry_speed_sqr;
 8008dd0:	69dc      	ldr	r4, [r3, #28]
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	f7f7 ff6c 	bl	8000cb0 <__aeabi_fmul>
 8008dd8:	4601      	mov	r1, r0
 8008dda:	4658      	mov	r0, fp
 8008ddc:	f7f7 fe5e 	bl	8000a9c <__aeabi_fsub>
        if (decel_dist < 0.0f)
 8008de0:	2100      	movs	r1, #0
        float decel_dist = pl_block->millimeters - inv_2_accel * pl_block->entry_speed_sqr;
 8008de2:	4606      	mov	r6, r0
        if (decel_dist < 0.0f)
 8008de4:	f7f8 f902 	bl	8000fec <__aeabi_fcmplt>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	f040 8151 	bne.w	8009090 <st_prep_buffer+0x9c4>
          prep.exit_speed = 0.0f;
 8008dee:	2300      	movs	r3, #0
          prep.mm_complete = decel_dist; // End of feed hold.
 8008df0:	f8ca 6018 	str.w	r6, [sl, #24]
          prep.exit_speed = 0.0f;
 8008df4:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
 8008df8:	f8cd 8004 	str.w	r8, [sp, #4]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8008dfc:	4b5d      	ldr	r3, [pc, #372]	; (8008f74 <st_prep_buffer+0x8a8>)
 8008dfe:	f045 0508 	orr.w	r5, r5, #8
 8008e02:	711d      	strb	r5, [r3, #4]
 8008e04:	e480      	b.n	8008708 <st_prep_buffer+0x3c>
        prep_segment->amass_level = 3;
 8008e06:	2203      	movs	r2, #3
 8008e08:	495b      	ldr	r1, [pc, #364]	; (8008f78 <st_prep_buffer+0x8ac>)
 8008e0a:	9f07      	ldr	r7, [sp, #28]
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	4439      	add	r1, r7
 8008e10:	714a      	strb	r2, [r1, #5]
 8008e12:	e75b      	b.n	8008ccc <st_prep_buffer+0x600>
        pl_block = plan_get_current_block();
 8008e14:	f7fb fb2c 	bl	8004470 <plan_get_current_block>
 8008e18:	4b58      	ldr	r3, [pc, #352]	; (8008f7c <st_prep_buffer+0x8b0>)
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	9000      	str	r0, [sp, #0]
 8008e1e:	6018      	str	r0, [r3, #0]
 8008e20:	e7af      	b.n	8008d82 <st_prep_buffer+0x6b6>
  block_index++;
 8008e22:	f89a 2000 	ldrb.w	r2, [sl]
  if (block_index == (SEGMENT_BUFFER_SIZE - 1))
 8008e26:	4e59      	ldr	r6, [pc, #356]	; (8008f8c <st_prep_buffer+0x8c0>)
  block_index++;
 8008e28:	3201      	adds	r2, #1
 8008e2a:	b2d2      	uxtb	r2, r2
  if (block_index == (SEGMENT_BUFFER_SIZE - 1))
 8008e2c:	2a13      	cmp	r2, #19
 8008e2e:	f000 8120 	beq.w	8009072 <st_prep_buffer+0x9a6>
 8008e32:	4613      	mov	r3, r2
 8008e34:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 8008e38:	eb06 0484 	add.w	r4, r6, r4, lsl #2
          st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL;
 8008e3c:	9d00      	ldr	r5, [sp, #0]
        prep.st_block_index = st_next_block_index(prep.st_block_index);
 8008e3e:	f88a 2000 	strb.w	r2, [sl]
          st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL;
 8008e42:	4628      	mov	r0, r5
 8008e44:	6829      	ldr	r1, [r5, #0]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008e46:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL;
 8008e4a:	00c9      	lsls	r1, r1, #3
 8008e4c:	686a      	ldr	r2, [r5, #4]
 8008e4e:	6880      	ldr	r0, [r0, #8]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008e50:	8b2d      	ldrh	r5, [r5, #24]
          st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL;
 8008e52:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008e56:	eb06 0383 	add.w	r3, r6, r3, lsl #2
          st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL;
 8008e5a:	9e00      	ldr	r6, [sp, #0]
 8008e5c:	ea4f 0ec2 	mov.w	lr, r2, lsl #3
 8008e60:	68f1      	ldr	r1, [r6, #12]
 8008e62:	6932      	ldr	r2, [r6, #16]
 8008e64:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
        st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8008e68:	6970      	ldr	r0, [r6, #20]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008e6a:	831d      	strh	r5, [r3, #24]
          st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL;
 8008e6c:	00c9      	lsls	r1, r1, #3
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8008e6e:	4d46      	ldr	r5, [pc, #280]	; (8008f88 <st_prep_buffer+0x8bc>)
          st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL;
 8008e70:	60d9      	str	r1, [r3, #12]
 8008e72:	00d2      	lsls	r2, r2, #3
        st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8008e74:	00c1      	lsls	r1, r0, #3
 8008e76:	6159      	str	r1, [r3, #20]
          st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL;
 8008e78:	f8c3 e004 	str.w	lr, [r3, #4]
 8008e7c:	f8c3 c008 	str.w	ip, [r3, #8]
 8008e80:	611a      	str	r2, [r3, #16]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8008e82:	602c      	str	r4, [r5, #0]
 8008e84:	950e      	str	r5, [sp, #56]	; 0x38
        prep.steps_remaining = (float)pl_block->step_event_count;
 8008e86:	f7f7 febb 	bl	8000c00 <__aeabi_ui2f>
        prep.step_per_mm = prep.steps_remaining / pl_block->millimeters;
 8008e8a:	f8d6 b028 	ldr.w	fp, [r6, #40]	; 0x28
        prep.steps_remaining = (float)pl_block->step_event_count;
 8008e8e:	f8ca 0008 	str.w	r0, [sl, #8]
        prep.step_per_mm = prep.steps_remaining / pl_block->millimeters;
 8008e92:	4659      	mov	r1, fp
 8008e94:	f7f7 ffc0 	bl	8000e18 <__aeabi_fdiv>
 8008e98:	4601      	mov	r1, r0
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR / prep.step_per_mm;
 8008e9a:	483d      	ldr	r0, [pc, #244]	; (8008f90 <st_prep_buffer+0x8c4>)
        prep.step_per_mm = prep.steps_remaining / pl_block->millimeters;
 8008e9c:	f8ca 100c 	str.w	r1, [sl, #12]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR / prep.step_per_mm;
 8008ea0:	f7f7 ffba 	bl	8000e18 <__aeabi_fdiv>
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE))
 8008ea4:	4b33      	ldr	r3, [pc, #204]	; (8008f74 <st_prep_buffer+0x8a8>)
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR / prep.step_per_mm;
 8008ea6:	f8ca 0010 	str.w	r0, [sl, #16]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE))
 8008eaa:	791d      	ldrb	r5, [r3, #4]
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8008eac:	2300      	movs	r3, #0
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE))
 8008eae:	f015 0602 	ands.w	r6, r5, #2
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8008eb2:	f8ca 3004 	str.w	r3, [sl, #4]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE))
 8008eb6:	d171      	bne.n	8008f9c <st_prep_buffer+0x8d0>
 8008eb8:	f017 0808 	ands.w	r8, r7, #8
 8008ebc:	d16e      	bne.n	8008f9c <st_prep_buffer+0x8d0>
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8008ebe:	9b00      	ldr	r3, [sp, #0]
 8008ec0:	69d8      	ldr	r0, [r3, #28]
 8008ec2:	f002 f859 	bl	800af78 <sqrtf>
        if (settings.flags & BITFLAG_LASER_MODE)
 8008ec6:	4b33      	ldr	r3, [pc, #204]	; (8008f94 <st_prep_buffer+0x8c8>)
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8008ec8:	f8ca 001c 	str.w	r0, [sl, #28]
        if (settings.flags & BITFLAG_LASER_MODE)
 8008ecc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
        st_prep_block->is_pwm_rate_adjusted = false;
 8008ed0:	f884 801a 	strb.w	r8, [r4, #26]
        if (settings.flags & BITFLAG_LASER_MODE)
 8008ed4:	0798      	lsls	r0, r3, #30
 8008ed6:	d476      	bmi.n	8008fc6 <st_prep_buffer+0x8fa>
      prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f8ca 3018 	str.w	r3, [sl, #24]
      float inv_2_accel = 0.5f / pl_block->acceleration;
 8008ede:	9b00      	ldr	r3, [sp, #0]
 8008ee0:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008ee4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008ee6:	f7f7 ff97 	bl	8000e18 <__aeabi_fdiv>
 8008eea:	4604      	mov	r4, r0
        prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 8008eec:	2300      	movs	r3, #0
 8008eee:	f88a 3014 	strb.w	r3, [sl, #20]
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION)
 8008ef2:	076b      	lsls	r3, r5, #29
        prep.accelerate_until = pl_block->millimeters;
 8008ef4:	f8ca b028 	str.w	fp, [sl, #40]	; 0x28
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION)
 8008ef8:	f140 80be 	bpl.w	8009078 <st_prep_buffer+0x9ac>
          prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 8008efc:	2300      	movs	r3, #0
 8008efe:	4698      	mov	r8, r3
 8008f00:	9800      	ldr	r0, [sp, #0]
 8008f02:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8008f06:	f7fb faef 	bl	80044e8 <plan_compute_profile_nominal_speed>
        float nominal_speed_sqr = nominal_speed * nominal_speed;
 8008f0a:	4601      	mov	r1, r0
        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8008f0c:	4681      	mov	r9, r0
        float nominal_speed_sqr = nominal_speed * nominal_speed;
 8008f0e:	f7f7 fecf 	bl	8000cb0 <__aeabi_fmul>
            0.5f * (pl_block->millimeters + inv_2_accel * (pl_block->entry_speed_sqr - exit_speed_sqr));
 8008f12:	4b1a      	ldr	r3, [pc, #104]	; (8008f7c <st_prep_buffer+0x8b0>)
        float nominal_speed_sqr = nominal_speed * nominal_speed;
 8008f14:	4606      	mov	r6, r0
            0.5f * (pl_block->millimeters + inv_2_accel * (pl_block->entry_speed_sqr - exit_speed_sqr));
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	69dd      	ldr	r5, [r3, #28]
 8008f1a:	9300      	str	r3, [sp, #0]
        if (pl_block->entry_speed_sqr > nominal_speed_sqr)
 8008f1c:	4629      	mov	r1, r5
            0.5f * (pl_block->millimeters + inv_2_accel * (pl_block->entry_speed_sqr - exit_speed_sqr));
 8008f1e:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
        if (pl_block->entry_speed_sqr > nominal_speed_sqr)
 8008f22:	f7f8 f863 	bl	8000fec <__aeabi_fcmplt>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d06a      	beq.n	8009000 <st_prep_buffer+0x934>
          prep.accelerate_until = pl_block->millimeters - inv_2_accel * (pl_block->entry_speed_sqr - nominal_speed_sqr);
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	f7f7 fdb5 	bl	8000a9c <__aeabi_fsub>
 8008f32:	4621      	mov	r1, r4
 8008f34:	f7f7 febc 	bl	8000cb0 <__aeabi_fmul>
 8008f38:	4659      	mov	r1, fp
 8008f3a:	f7f7 fdb1 	bl	8000aa0 <__addsf3>
          if (prep.accelerate_until <= 0.0f)
 8008f3e:	2100      	movs	r1, #0
          prep.accelerate_until = pl_block->millimeters - inv_2_accel * (pl_block->entry_speed_sqr - nominal_speed_sqr);
 8008f40:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
          if (prep.accelerate_until <= 0.0f)
 8008f44:	f7f8 f85c 	bl	8001000 <__aeabi_fcmple>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	f040 80c7 	bne.w	80090dc <st_prep_buffer+0xa10>
            prep.decelerate_after = inv_2_accel * (nominal_speed_sqr - exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8008f4e:	4641      	mov	r1, r8
 8008f50:	4630      	mov	r0, r6
 8008f52:	f7f7 fda3 	bl	8000a9c <__aeabi_fsub>
 8008f56:	4621      	mov	r1, r4
 8008f58:	f7f7 feaa 	bl	8000cb0 <__aeabi_fmul>
            prep.ramp_type = RAMP_DECEL_OVERRIDE;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	f88a 3014 	strb.w	r3, [sl, #20]
 8008f62:	9301      	str	r3, [sp, #4]
 8008f64:	4b03      	ldr	r3, [pc, #12]	; (8008f74 <st_prep_buffer+0x8a8>)
            prep.decelerate_after = inv_2_accel * (nominal_speed_sqr - exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8008f66:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
            prep.maximum_speed = nominal_speed;
 8008f6a:	f8ca 9020 	str.w	r9, [sl, #32]
 8008f6e:	791d      	ldrb	r5, [r3, #4]
 8008f70:	e744      	b.n	8008dfc <st_prep_buffer+0x730>
 8008f72:	bf00      	nop
 8008f74:	20001b6c 	.word	0x20001b6c
 8008f78:	200013b4 	.word	0x200013b4
 8008f7c:	20001378 	.word	0x20001378
 8008f80:	20001456 	.word	0x20001456
 8008f84:	20001455 	.word	0x20001455
 8008f88:	200016a8 	.word	0x200016a8
 8008f8c:	20001494 	.word	0x20001494
 8008f90:	3fa00000 	.word	0x3fa00000
 8008f94:	20001d30 	.word	0x20001d30
 8008f98:	2000137c 	.word	0x2000137c
          prep.current_speed = prep.exit_speed;
 8008f9c:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8008fa0:	f027 0708 	bic.w	r7, r7, #8
          prep.current_speed = prep.exit_speed;
 8008fa4:	f8ca 101c 	str.w	r1, [sl, #28]
          pl_block->entry_speed_sqr = prep.exit_speed * prep.exit_speed;
 8008fa8:	4608      	mov	r0, r1
 8008faa:	f7f7 fe81 	bl	8000cb0 <__aeabi_fmul>
        st_prep_block->is_pwm_rate_adjusted = false;
 8008fae:	2200      	movs	r2, #0
          pl_block->entry_speed_sqr = prep.exit_speed * prep.exit_speed;
 8008fb0:	9900      	ldr	r1, [sp, #0]
        if (settings.flags & BITFLAG_LASER_MODE)
 8008fb2:	4b73      	ldr	r3, [pc, #460]	; (8009180 <st_prep_buffer+0xab4>)
          pl_block->entry_speed_sqr = prep.exit_speed * prep.exit_speed;
 8008fb4:	61c8      	str	r0, [r1, #28]
        if (settings.flags & BITFLAG_LASER_MODE)
 8008fb6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8008fba:	f88a 7001 	strb.w	r7, [sl, #1]
        if (settings.flags & BITFLAG_LASER_MODE)
 8008fbe:	079f      	lsls	r7, r3, #30
        st_prep_block->is_pwm_rate_adjusted = false;
 8008fc0:	76a2      	strb	r2, [r4, #26]
        if (settings.flags & BITFLAG_LASER_MODE)
 8008fc2:	f57f aef2 	bpl.w	8008daa <st_prep_buffer+0x6de>
          if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW)
 8008fc6:	9a00      	ldr	r2, [sp, #0]
 8008fc8:	7e93      	ldrb	r3, [r2, #26]
 8008fca:	0699      	lsls	r1, r3, #26
 8008fcc:	f57f aeed 	bpl.w	8008daa <st_prep_buffer+0x6de>
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 8008fd0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8008fd2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008fd6:	4616      	mov	r6, r2
 8008fd8:	f7f7 ff1e 	bl	8000e18 <__aeabi_fdiv>
            st_prep_block->is_pwm_rate_adjusted = true;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	76a3      	strb	r3, [r4, #26]
 8008fe0:	4b68      	ldr	r3, [pc, #416]	; (8009184 <st_prep_buffer+0xab8>)
 8008fe2:	f8d6 b028 	ldr.w	fp, [r6, #40]	; 0x28
 8008fe6:	791d      	ldrb	r5, [r3, #4]
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 8008fe8:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
 8008fec:	f005 0602 	and.w	r6, r5, #2
 8008ff0:	e6db      	b.n	8008daa <st_prep_buffer+0x6de>
          prep.ramp_type = RAMP_CRUISE;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	46bb      	mov	fp, r7
 8008ff6:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
          prep.current_speed = prep.maximum_speed;
 8008ffa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
          prep.ramp_type = RAMP_CRUISE;
 8008ffc:	9303      	str	r3, [sp, #12]
 8008ffe:	e4c0      	b.n	8008982 <st_prep_buffer+0x2b6>
            0.5f * (pl_block->millimeters + inv_2_accel * (pl_block->entry_speed_sqr - exit_speed_sqr));
 8009000:	4641      	mov	r1, r8
 8009002:	4628      	mov	r0, r5
 8009004:	f7f7 fd4a 	bl	8000a9c <__aeabi_fsub>
 8009008:	4621      	mov	r1, r4
 800900a:	f7f7 fe51 	bl	8000cb0 <__aeabi_fmul>
 800900e:	4659      	mov	r1, fp
 8009010:	f7f7 fd46 	bl	8000aa0 <__addsf3>
        float intersect_distance =
 8009014:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009018:	f7f7 fe4a 	bl	8000cb0 <__aeabi_fmul>
        else if (intersect_distance > 0.0f)
 800901c:	2100      	movs	r1, #0
        float intersect_distance =
 800901e:	4607      	mov	r7, r0
        else if (intersect_distance > 0.0f)
 8009020:	f7f8 f802 	bl	8001028 <__aeabi_fcmpgt>
 8009024:	2800      	cmp	r0, #0
 8009026:	d04c      	beq.n	80090c2 <st_prep_buffer+0x9f6>
          if (intersect_distance < pl_block->millimeters)
 8009028:	4639      	mov	r1, r7
 800902a:	4658      	mov	r0, fp
 800902c:	f7f7 fffc 	bl	8001028 <__aeabi_fcmpgt>
 8009030:	2800      	cmp	r0, #0
 8009032:	d03f      	beq.n	80090b4 <st_prep_buffer+0x9e8>
            prep.decelerate_after = inv_2_accel * (nominal_speed_sqr - exit_speed_sqr);
 8009034:	4641      	mov	r1, r8
 8009036:	4630      	mov	r0, r6
 8009038:	f7f7 fd30 	bl	8000a9c <__aeabi_fsub>
 800903c:	4621      	mov	r1, r4
 800903e:	f7f7 fe37 	bl	8000cb0 <__aeabi_fmul>
 8009042:	4601      	mov	r1, r0
            if (prep.decelerate_after < intersect_distance)
 8009044:	4638      	mov	r0, r7
            prep.decelerate_after = inv_2_accel * (nominal_speed_sqr - exit_speed_sqr);
 8009046:	f8ca 102c 	str.w	r1, [sl, #44]	; 0x2c
            if (prep.decelerate_after < intersect_distance)
 800904a:	f7f7 ffed 	bl	8001028 <__aeabi_fcmpgt>
 800904e:	2800      	cmp	r0, #0
 8009050:	d061      	beq.n	8009116 <st_prep_buffer+0xa4a>
              prep.maximum_speed = nominal_speed;
 8009052:	f8ca 9020 	str.w	r9, [sl, #32]
              if (pl_block->entry_speed_sqr == nominal_speed_sqr)
 8009056:	4629      	mov	r1, r5
 8009058:	4630      	mov	r0, r6
 800905a:	f7f7 ffbd 	bl	8000fd8 <__aeabi_fcmpeq>
 800905e:	2800      	cmp	r0, #0
 8009060:	d07a      	beq.n	8009158 <st_prep_buffer+0xa8c>
                prep.ramp_type = RAMP_CRUISE;
 8009062:	2301      	movs	r3, #1
 8009064:	4a47      	ldr	r2, [pc, #284]	; (8009184 <st_prep_buffer+0xab8>)
 8009066:	f88a 3014 	strb.w	r3, [sl, #20]
 800906a:	7915      	ldrb	r5, [r2, #4]
 800906c:	9301      	str	r3, [sp, #4]
 800906e:	e6c5      	b.n	8008dfc <st_prep_buffer+0x730>
 8009070:	4770      	bx	lr
    return (0);
 8009072:	461a      	mov	r2, r3
  if (block_index == (SEGMENT_BUFFER_SIZE - 1))
 8009074:	4634      	mov	r4, r6
 8009076:	e6e1      	b.n	8008e3c <st_prep_buffer+0x770>
          exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 8009078:	f7fb fa0e 	bl	8004498 <plan_get_exec_block_exit_speed_sqr>
 800907c:	4680      	mov	r8, r0
          prep.exit_speed = sqrtf(exit_speed_sqr);
 800907e:	f001 ff7b 	bl	800af78 <sqrtf>
 8009082:	4b41      	ldr	r3, [pc, #260]	; (8009188 <st_prep_buffer+0xabc>)
 8009084:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	4618      	mov	r0, r3
 800908e:	e73a      	b.n	8008f06 <st_prep_buffer+0x83a>
          prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2 * pl_block->acceleration * pl_block->millimeters);
 8009090:	4639      	mov	r1, r7
 8009092:	4638      	mov	r0, r7
 8009094:	f7f7 fd04 	bl	8000aa0 <__addsf3>
 8009098:	4659      	mov	r1, fp
 800909a:	f7f7 fe09 	bl	8000cb0 <__aeabi_fmul>
 800909e:	4601      	mov	r1, r0
 80090a0:	4620      	mov	r0, r4
 80090a2:	f7f7 fcfb 	bl	8000a9c <__aeabi_fsub>
 80090a6:	f001 ff67 	bl	800af78 <sqrtf>
 80090aa:	f8cd 8004 	str.w	r8, [sp, #4]
 80090ae:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80090b2:	e6a3      	b.n	8008dfc <st_prep_buffer+0x730>
            prep.ramp_type = RAMP_DECEL;
 80090b4:	2302      	movs	r3, #2
 80090b6:	4a33      	ldr	r2, [pc, #204]	; (8009184 <st_prep_buffer+0xab8>)
 80090b8:	f88a 3014 	strb.w	r3, [sl, #20]
 80090bc:	7915      	ldrb	r5, [r2, #4]
 80090be:	9301      	str	r3, [sp, #4]
 80090c0:	e69c      	b.n	8008dfc <st_prep_buffer+0x730>
 80090c2:	4a30      	ldr	r2, [pc, #192]	; (8009184 <st_prep_buffer+0xab8>)
          prep.maximum_speed = prep.exit_speed;
 80090c4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80090c8:	7915      	ldrb	r5, [r2, #4]
 80090ca:	f89a 2014 	ldrb.w	r2, [sl, #20]
 80090ce:	f8ca 3020 	str.w	r3, [sl, #32]
 80090d2:	9201      	str	r2, [sp, #4]
          prep.accelerate_until = 0.0f;
 80090d4:	2200      	movs	r2, #0
 80090d6:	f8ca 2028 	str.w	r2, [sl, #40]	; 0x28
 80090da:	e68f      	b.n	8008dfc <st_prep_buffer+0x730>
            prep.ramp_type = RAMP_DECEL;
 80090dc:	2402      	movs	r4, #2
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2 * pl_block->acceleration * pl_block->millimeters);
 80090de:	9b00      	ldr	r3, [sp, #0]
            prep.ramp_type = RAMP_DECEL;
 80090e0:	f88a 4014 	strb.w	r4, [sl, #20]
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2 * pl_block->acceleration * pl_block->millimeters);
 80090e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80090e6:	4658      	mov	r0, fp
 80090e8:	f7f7 fde2 	bl	8000cb0 <__aeabi_fmul>
 80090ec:	4601      	mov	r1, r0
 80090ee:	f7f7 fcd7 	bl	8000aa0 <__addsf3>
 80090f2:	4601      	mov	r1, r0
 80090f4:	4628      	mov	r0, r5
 80090f6:	f7f7 fcd1 	bl	8000a9c <__aeabi_fsub>
 80090fa:	f001 ff3d 	bl	800af78 <sqrtf>
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 80090fe:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8009102:	9401      	str	r4, [sp, #4]
 8009104:	f043 0308 	orr.w	r3, r3, #8
 8009108:	f88a 3001 	strb.w	r3, [sl, #1]
 800910c:	4b1d      	ldr	r3, [pc, #116]	; (8009184 <st_prep_buffer+0xab8>)
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2 * pl_block->acceleration * pl_block->millimeters);
 800910e:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8009112:	791d      	ldrb	r5, [r3, #4]
 8009114:	e672      	b.n	8008dfc <st_prep_buffer+0x730>
              prep.maximum_speed = sqrtf(2.0f * pl_block->acceleration * intersect_distance + exit_speed_sqr);
 8009116:	9b00      	ldr	r3, [sp, #0]
 8009118:	6a59      	ldr	r1, [r3, #36]	; 0x24
              prep.accelerate_until = intersect_distance;
 800911a:	f8ca 7028 	str.w	r7, [sl, #40]	; 0x28
              prep.maximum_speed = sqrtf(2.0f * pl_block->acceleration * intersect_distance + exit_speed_sqr);
 800911e:	4608      	mov	r0, r1
              prep.decelerate_after = intersect_distance;
 8009120:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
              prep.maximum_speed = sqrtf(2.0f * pl_block->acceleration * intersect_distance + exit_speed_sqr);
 8009124:	f7f7 fcbc 	bl	8000aa0 <__addsf3>
 8009128:	4639      	mov	r1, r7
 800912a:	f7f7 fdc1 	bl	8000cb0 <__aeabi_fmul>
 800912e:	4641      	mov	r1, r8
 8009130:	f7f7 fcb6 	bl	8000aa0 <__addsf3>
 8009134:	f001 ff20 	bl	800af78 <sqrtf>
 8009138:	4b12      	ldr	r3, [pc, #72]	; (8009184 <st_prep_buffer+0xab8>)
 800913a:	f8ca 0020 	str.w	r0, [sl, #32]
 800913e:	791d      	ldrb	r5, [r3, #4]
 8009140:	f89a 3014 	ldrb.w	r3, [sl, #20]
 8009144:	9301      	str	r3, [sp, #4]
 8009146:	e659      	b.n	8008dfc <st_prep_buffer+0x730>
          bit_true(sys.step_control, STEP_CONTROL_END_MOTION);
 8009148:	4b0e      	ldr	r3, [pc, #56]	; (8009184 <st_prep_buffer+0xab8>)
 800914a:	f048 0901 	orr.w	r9, r8, #1
 800914e:	f883 9004 	strb.w	r9, [r3, #4]
}
 8009152:	b011      	add	sp, #68	; 0x44
 8009154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                prep.accelerate_until -= inv_2_accel * (nominal_speed_sqr - pl_block->entry_speed_sqr);
 8009158:	4631      	mov	r1, r6
 800915a:	4628      	mov	r0, r5
 800915c:	f7f7 fc9e 	bl	8000a9c <__aeabi_fsub>
 8009160:	4621      	mov	r1, r4
 8009162:	f7f7 fda5 	bl	8000cb0 <__aeabi_fmul>
 8009166:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 800916a:	f7f7 fc99 	bl	8000aa0 <__addsf3>
 800916e:	4b05      	ldr	r3, [pc, #20]	; (8009184 <st_prep_buffer+0xab8>)
 8009170:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
 8009174:	791d      	ldrb	r5, [r3, #4]
 8009176:	f89a 3014 	ldrb.w	r3, [sl, #20]
 800917a:	9301      	str	r3, [sp, #4]
 800917c:	e63e      	b.n	8008dfc <st_prep_buffer+0x730>
 800917e:	bf00      	nop
 8009180:	20001d30 	.word	0x20001d30
 8009184:	20001b6c 	.word	0x20001b6c
 8009188:	20001378 	.word	0x20001378

0800918c <st_get_realtime_rate>:
  if (sys.state & (STATE_CYCLE | STATE_HOMING | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR))
 800918c:	4b04      	ldr	r3, [pc, #16]	; (80091a0 <st_get_realtime_rate+0x14>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	f013 0f7c 	tst.w	r3, #124	; 0x7c
    return prep.current_speed;
 8009194:	bf1a      	itte	ne
 8009196:	4b03      	ldrne	r3, [pc, #12]	; (80091a4 <st_get_realtime_rate+0x18>)
 8009198:	69d8      	ldrne	r0, [r3, #28]
  return 0.0f;
 800919a:	2000      	moveq	r0, #0
}
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	20001b6c 	.word	0x20001b6c
 80091a4:	2000137c 	.word	0x2000137c

080091a8 <system_init>:

#include "grbl.h"


void system_init()
{
 80091a8:	b510      	push	{r4, lr}
  CONTROL_PCMSK |= CONTROL_MASK;  // Enable specific pins of the Pin Change Interrupt
  PCICR |= (1 << CONTROL_INT);   // Enable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 80091aa:	2101      	movs	r1, #1
{
 80091ac:	b084      	sub	sp, #16
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 80091ae:	2009      	movs	r0, #9
 80091b0:	f7f8 fb42 	bl	8001838 <RCC_APB2PeriphClockCmd>
#ifdef DISABLE_CONTROL_PIN_PULL_UP
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 80091b4:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE); // to enable PA15, PB3, PB4 pins
 80091b8:	2101      	movs	r1, #1
 80091ba:	481a      	ldr	r0, [pc, #104]	; (8009224 <system_init+0x7c>)
 80091bc:	f7f8 fae8 	bl	8001790 <GPIO_PinRemapConfig>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80091c0:	2203      	movs	r2, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 80091c2:	2348      	movs	r3, #72	; 0x48
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 80091c4:	a904      	add	r1, sp, #16
 80091c6:	f821 4d10 	strh.w	r4, [r1, #-16]!
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 80091ca:	4817      	ldr	r0, [pc, #92]	; (8009228 <system_init+0x80>)
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80091cc:	f88d 2002 	strb.w	r2, [sp, #2]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 80091d0:	f88d 3003 	strb.w	r3, [sp, #3]
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 80091d4:	f7f8 f914 	bl	8001400 <GPIO_Init>

  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_RESET_BIT);
 80091d8:	2105      	movs	r1, #5
 80091da:	2001      	movs	r0, #1
 80091dc:	f7f8 fb0e 	bl	80017fc <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_FEED_HOLD_BIT);
 80091e0:	2106      	movs	r1, #6
 80091e2:	2001      	movs	r0, #1
 80091e4:	f7f8 fb0a 	bl	80017fc <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_CYCLE_START_BIT);
 80091e8:	2107      	movs	r1, #7
 80091ea:	2001      	movs	r0, #1
 80091ec:	f7f8 fb06 	bl	80017fc <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_SAFETY_DOOR_BIT);
 80091f0:	2108      	movs	r1, #8
 80091f2:	2001      	movs	r0, #1
 80091f4:	f7f8 fb02 	bl	80017fc <GPIO_EXTILineConfig>

  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 80091f8:	2100      	movs	r1, #0
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 80091fa:	2210      	movs	r2, #16
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80091fc:	2301      	movs	r3, #1
  EXTI_Init(&EXTI_InitStructure);
 80091fe:	a802      	add	r0, sp, #8
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8009200:	f88d 100c 	strb.w	r1, [sp, #12]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8009204:	f88d 200d 	strb.w	r2, [sp, #13]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8009208:	f88d 300e 	strb.w	r3, [sp, #14]
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
 800920c:	9402      	str	r4, [sp, #8]
  EXTI_Init(&EXTI_InitStructure);
 800920e:	f7f7 ffad 	bl	800116c <EXTI_Init>

  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; //Enable keypad external interrupt channel
 8009212:	4b06      	ldr	r3, [pc, #24]	; (800922c <system_init+0x84>)
 8009214:	a804      	add	r0, sp, #16
 8009216:	f840 3d0c 	str.w	r3, [r0, #-12]!
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02; //Priority 2,
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02; //Sub priority 2
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //Enable external interrupt channel
  NVIC_Init(&NVIC_InitStructure);
 800921a:	f7f7 ff75 	bl	8001108 <NVIC_Init>
#endif
}
 800921e:	b004      	add	sp, #16
 8009220:	bd10      	pop	{r4, pc}
 8009222:	bf00      	nop
 8009224:	00300200 	.word	0x00300200
 8009228:	40010c00 	.word	0x40010c00
 800922c:	01020217 	.word	0x01020217

08009230 <system_control_get_state>:

// Returns control pin state as a uint8 bitfield. Each bit indicates the input pin state, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Bitfield organization is
// defined by the CONTROL_PIN_INDEX in the header file.
uint8_t system_control_get_state()
{
 8009230:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
  uint8_t pin = 0;
#endif
#ifdef STM32F103C8
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 8009232:	480a      	ldr	r0, [pc, #40]	; (800925c <system_control_get_state+0x2c>)
 8009234:	f7f8 fa9a 	bl	800176c <GPIO_ReadInputData>
#endif
  #ifdef INVERT_CONTROL_PIN_MASK
    pin ^= INVERT_CONTROL_PIN_MASK;
  #endif
  if (pin) {
 8009238:	b168      	cbz	r0, 8009256 <system_control_get_state+0x26>
    #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_isfalse(pin,(1<<CONTROL_SAFETY_DOOR_BIT))) { control_state |= CONTROL_PIN_INDEX_SAFETY_DOOR; }
    #endif
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 800923a:	f080 0320 	eor.w	r3, r0, #32
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 800923e:	0641      	lsls	r1, r0, #25
  uint8_t control_state = 0;
 8009240:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 8009244:	bf58      	it	pl
 8009246:	f043 0302 	orrpl.w	r3, r3, #2
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 800924a:	0602      	lsls	r2, r0, #24
 800924c:	d401      	bmi.n	8009252 <system_control_get_state+0x22>
 800924e:	f043 0304 	orr.w	r3, r3, #4
  }
  return(control_state);
}
 8009252:	4618      	mov	r0, r3
 8009254:	bd08      	pop	{r3, pc}
  uint8_t control_state = 0;
 8009256:	4603      	mov	r3, r0
}
 8009258:	4618      	mov	r0, r3
 800925a:	bd08      	pop	{r3, pc}
 800925c:	40010c00 	.word	0x40010c00

08009260 <EXTI9_5_IRQHandler>:
  }
}
#endif
#if defined (STM32F103C8)
void EXTI9_5_IRQHandler(void)
{
 8009260:	b508      	push	{r3, lr}
    EXTI_ClearITPendingBit((1 << CONTROL_RESET_BIT) | (1 << CONTROL_FEED_HOLD_BIT) | (1 << CONTROL_CYCLE_START_BIT) | (1 << CONTROL_SAFETY_DOOR_BIT));
 8009262:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8009266:	f7f7 ffcd 	bl	8001204 <EXTI_ClearITPendingBit>
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 800926a:	481b      	ldr	r0, [pc, #108]	; (80092d8 <EXTI9_5_IRQHandler+0x78>)
 800926c:	f7f8 fa7e 	bl	800176c <GPIO_ReadInputData>
  if (pin) {
 8009270:	b1b8      	cbz	r0, 80092a2 <EXTI9_5_IRQHandler+0x42>
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 8009272:	f010 0220 	ands.w	r2, r0, #32
  uint8_t control_state = 0;
 8009276:	bf0c      	ite	eq
 8009278:	2301      	moveq	r3, #1
 800927a:	2300      	movne	r3, #0
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 800927c:	0641      	lsls	r1, r0, #25
 800927e:	d411      	bmi.n	80092a4 <EXTI9_5_IRQHandler+0x44>
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8009280:	0600      	lsls	r0, r0, #24
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 8009282:	f043 0302 	orr.w	r3, r3, #2
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8009286:	d419      	bmi.n	80092bc <EXTI9_5_IRQHandler+0x5c>
	uint8_t pin = system_control_get_state();
	if (pin)
	{
		if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET))
 8009288:	07db      	lsls	r3, r3, #31
 800928a:	d40f      	bmi.n	80092ac <EXTI9_5_IRQHandler+0x4c>
		{
			mc_reset();
		}
		else if (bit_istrue(pin, CONTROL_PIN_INDEX_CYCLE_START))
		{
			bit_true(sys_rt_exec_state, EXEC_CYCLE_START);
 800928c:	4a13      	ldr	r2, [pc, #76]	; (80092dc <EXTI9_5_IRQHandler+0x7c>)
 800928e:	7813      	ldrb	r3, [r2, #0]
 8009290:	f043 0302 	orr.w	r3, r3, #2
 8009294:	7013      	strb	r3, [r2, #0]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8009296:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800929a:	4b11      	ldr	r3, [pc, #68]	; (80092e0 <EXTI9_5_IRQHandler+0x80>)
 800929c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
		}
#endif
		NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
}
}
 80092a0:	bd08      	pop	{r3, pc}
 80092a2:	bd08      	pop	{r3, pc}
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 80092a4:	0601      	lsls	r1, r0, #24
 80092a6:	d5ef      	bpl.n	8009288 <EXTI9_5_IRQHandler+0x28>
	if (pin)
 80092a8:	2a00      	cmp	r2, #0
 80092aa:	d1fa      	bne.n	80092a2 <EXTI9_5_IRQHandler+0x42>
			mc_reset();
 80092ac:	f7fa fda2 	bl	8003df4 <mc_reset>
 80092b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80092b4:	4b0a      	ldr	r3, [pc, #40]	; (80092e0 <EXTI9_5_IRQHandler+0x80>)
 80092b6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 80092ba:	bd08      	pop	{r3, pc}
		if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET))
 80092bc:	2a00      	cmp	r2, #0
 80092be:	d0f5      	beq.n	80092ac <EXTI9_5_IRQHandler+0x4c>
			bit_true(sys_rt_exec_state, EXEC_FEED_HOLD);
 80092c0:	4a06      	ldr	r2, [pc, #24]	; (80092dc <EXTI9_5_IRQHandler+0x7c>)
 80092c2:	7813      	ldrb	r3, [r2, #0]
 80092c4:	f043 0308 	orr.w	r3, r3, #8
 80092c8:	7013      	strb	r3, [r2, #0]
 80092ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80092ce:	4b04      	ldr	r3, [pc, #16]	; (80092e0 <EXTI9_5_IRQHandler+0x80>)
 80092d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 80092d4:	bd08      	pop	{r3, pc}
 80092d6:	bf00      	nop
 80092d8:	40010c00 	.word	0x40010c00
 80092dc:	20001b81 	.word	0x20001b81
 80092e0:	e000e100 	.word	0xe000e100

080092e4 <system_check_safety_door_ajar>:
  #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
    return(system_control_get_state() & CONTROL_PIN_INDEX_SAFETY_DOOR);
  #else
    return(false); // Input pin not enabled, so just return that it's closed.
  #endif
}
 80092e4:	2000      	movs	r0, #0
 80092e6:	4770      	bx	lr

080092e8 <system_execute_startup>:


// Executes user startup script, if stored.
void system_execute_startup(char *line)
{
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	4605      	mov	r5, r0
 80092ec:	2400      	movs	r4, #0
  uint8_t n;
  for (n=0; n < N_STARTUP_LINE; n++) {
    if (!(settings_read_startup_line(n, line))) {
 80092ee:	4629      	mov	r1, r5
 80092f0:	b2e0      	uxtb	r0, r4
 80092f2:	f7fe f977 	bl	80075e4 <settings_read_startup_line>
 80092f6:	b128      	cbz	r0, 8009304 <system_execute_startup+0x1c>
      line[0] = 0;
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
    } else {
      if (line[0] != 0) {
 80092f8:	782b      	ldrb	r3, [r5, #0]
 80092fa:	b94b      	cbnz	r3, 8009310 <system_execute_startup+0x28>
 80092fc:	3401      	adds	r4, #1
  for (n=0; n < N_STARTUP_LINE; n++) {
 80092fe:	2c02      	cmp	r4, #2
 8009300:	d1f5      	bne.n	80092ee <system_execute_startup+0x6>
        uint8_t status_code = gc_execute_line(line);
        report_execute_startup_message(line,status_code);
      }
    }
  }
}
 8009302:	bd38      	pop	{r3, r4, r5, pc}
      line[0] = 0;
 8009304:	7028      	strb	r0, [r5, #0]
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 8009306:	2107      	movs	r1, #7
 8009308:	4628      	mov	r0, r5
 800930a:	f7fd fd25 	bl	8006d58 <report_execute_startup_message>
 800930e:	e7f5      	b.n	80092fc <system_execute_startup+0x14>
        uint8_t status_code = gc_execute_line(line);
 8009310:	4628      	mov	r0, r5
 8009312:	f7f8 fcb3 	bl	8001c7c <gc_execute_line>
        report_execute_startup_message(line,status_code);
 8009316:	4601      	mov	r1, r0
 8009318:	4628      	mov	r0, r5
 800931a:	f7fd fd1d 	bl	8006d58 <report_execute_startup_message>
 800931e:	e7ed      	b.n	80092fc <system_execute_startup+0x14>

08009320 <system_execute_line>:
// the lines that are processed afterward, not necessarily real-time during a cycle,
// since there are motions already stored in the buffer. However, this 'lag' should not
// be an issue, since these commands are not typically used during a cycle.
uint8_t system_execute_line(char *line)
{
  uint8_t char_counter = 1;
 8009320:	2301      	movs	r3, #1
{
 8009322:	b570      	push	{r4, r5, r6, lr}
  uint8_t helper_var = 0; // Helper variable
  float parameter, value;
  switch( line[char_counter] ) {
 8009324:	7844      	ldrb	r4, [r0, #1]
{
 8009326:	b084      	sub	sp, #16
  switch( line[char_counter] ) {
 8009328:	2c43      	cmp	r4, #67	; 0x43
{
 800932a:	4605      	mov	r5, r0
  uint8_t char_counter = 1;
 800932c:	f88d 3007 	strb.w	r3, [sp, #7]
  switch( line[char_counter] ) {
 8009330:	d034      	beq.n	800939c <system_execute_line+0x7c>
 8009332:	d939      	bls.n	80093a8 <system_execute_line+0x88>
 8009334:	2c4a      	cmp	r4, #74	; 0x4a
 8009336:	d108      	bne.n	800934a <system_execute_line+0x2a>
    case 0 : report_grbl_help(); break;
    case 'J' : // Jogging
      // Execute only if in IDLE or JOG states.
      if (sys.state != STATE_IDLE && sys.state != STATE_JOG) { return(STATUS_IDLE_ERROR); }
 8009338:	4b93      	ldr	r3, [pc, #588]	; (8009588 <system_execute_line+0x268>)
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8009340:	d039      	beq.n	80093b6 <system_execute_line+0x96>
                report_startup_line(helper_var,line);
              }
            }
            break;
          } else { // Store startup line [IDLE Only] Prevents motion during ALARM.
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 8009342:	2408      	movs	r4, #8
            return(settings_store_global_setting((uint8_t)parameter, value));
          }
      }
  }
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
}
 8009344:	4620      	mov	r0, r4
 8009346:	b004      	add	sp, #16
 8009348:	bd70      	pop	{r4, r5, r6, pc}
  switch( line[char_counter] ) {
 800934a:	2c58      	cmp	r4, #88	; 0x58
 800934c:	d026      	beq.n	800939c <system_execute_line+0x7c>
 800934e:	2c47      	cmp	r4, #71	; 0x47
 8009350:	d024      	beq.n	800939c <system_execute_line+0x7c>
      if ( !(sys.state == STATE_IDLE || sys.state == STATE_ALARM) ) { return(STATUS_IDLE_ERROR); }
 8009352:	4e8d      	ldr	r6, [pc, #564]	; (8009588 <system_execute_line+0x268>)
 8009354:	7833      	ldrb	r3, [r6, #0]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d8f3      	bhi.n	8009342 <system_execute_line+0x22>
      switch( line[1] ) {
 800935a:	3c23      	subs	r4, #35	; 0x23
 800935c:	2c30      	cmp	r4, #48	; 0x30
 800935e:	f200 80b6 	bhi.w	80094ce <system_execute_line+0x1ae>
 8009362:	e8df f004 	tbb	[pc, r4]
 8009366:	b4ad      	.short	0xb4ad
 8009368:	b4b4b4b4 	.word	0xb4b4b4b4
 800936c:	b4b4b4b4 	.word	0xb4b4b4b4
 8009370:	b4b4b4b4 	.word	0xb4b4b4b4
 8009374:	b4b4b4b4 	.word	0xb4b4b4b4
 8009378:	b4b4b4b4 	.word	0xb4b4b4b4
 800937c:	b4b4b4b4 	.word	0xb4b4b4b4
 8009380:	b4b4b4b4 	.word	0xb4b4b4b4
 8009384:	b4b4b4b4 	.word	0xb4b4b4b4
 8009388:	a6b4b4b4 	.word	0xa6b4b4b4
 800938c:	b4b4b48d 	.word	0xb4b4b48d
 8009390:	b4b468b4 	.word	0xb4b468b4
 8009394:	49b4      	.short	0x49b4
 8009396:	7c          	.byte	0x7c
 8009397:	00          	.byte	0x00
  switch( line[char_counter] ) {
 8009398:	2c24      	cmp	r4, #36	; 0x24
 800939a:	d1da      	bne.n	8009352 <system_execute_line+0x32>
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 800939c:	78ad      	ldrb	r5, [r5, #2]
 800939e:	b18d      	cbz	r5, 80093c4 <system_execute_line+0xa4>
            default: return(STATUS_INVALID_STATEMENT);
 80093a0:	2403      	movs	r4, #3
}
 80093a2:	4620      	mov	r0, r4
 80093a4:	b004      	add	sp, #16
 80093a6:	bd70      	pop	{r4, r5, r6, pc}
  switch( line[char_counter] ) {
 80093a8:	2c00      	cmp	r4, #0
 80093aa:	d1f5      	bne.n	8009398 <system_execute_line+0x78>
    case 0 : report_grbl_help(); break;
 80093ac:	f7fd f954 	bl	8006658 <report_grbl_help>
}
 80093b0:	4620      	mov	r0, r4
 80093b2:	b004      	add	sp, #16
 80093b4:	bd70      	pop	{r4, r5, r6, pc}
      if(line[2] != '=') { return(STATUS_INVALID_STATEMENT); }
 80093b6:	7883      	ldrb	r3, [r0, #2]
 80093b8:	2b3d      	cmp	r3, #61	; 0x3d
 80093ba:	d1f1      	bne.n	80093a0 <system_execute_line+0x80>
      return(gc_execute_line(line)); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 80093bc:	f7f8 fc5e 	bl	8001c7c <gc_execute_line>
 80093c0:	4604      	mov	r4, r0
 80093c2:	e7bf      	b.n	8009344 <system_execute_line+0x24>
      switch( line[1] ) {
 80093c4:	2c43      	cmp	r4, #67	; 0x43
 80093c6:	f000 80a0 	beq.w	800950a <system_execute_line+0x1ea>
 80093ca:	d90b      	bls.n	80093e4 <system_execute_line+0xc4>
 80093cc:	2c47      	cmp	r4, #71	; 0x47
 80093ce:	f000 80a9 	beq.w	8009524 <system_execute_line+0x204>
 80093d2:	2c58      	cmp	r4, #88	; 0x58
 80093d4:	d104      	bne.n	80093e0 <system_execute_line+0xc0>
          if (sys.state == STATE_ALARM) {
 80093d6:	4e6c      	ldr	r6, [pc, #432]	; (8009588 <system_execute_line+0x268>)
 80093d8:	7833      	ldrb	r3, [r6, #0]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	f000 80a6 	beq.w	800952c <system_execute_line+0x20c>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 80093e0:	2400      	movs	r4, #0
 80093e2:	e7af      	b.n	8009344 <system_execute_line+0x24>
      switch( line[1] ) {
 80093e4:	2c24      	cmp	r4, #36	; 0x24
 80093e6:	d1fb      	bne.n	80093e0 <system_execute_line+0xc0>
          if ( sys.state & (STATE_CYCLE | STATE_HOLD) ) { return(STATUS_IDLE_ERROR); } // Block during cycle. Takes too long to print.
 80093e8:	4b67      	ldr	r3, [pc, #412]	; (8009588 <system_execute_line+0x268>)
 80093ea:	781c      	ldrb	r4, [r3, #0]
 80093ec:	f014 0418 	ands.w	r4, r4, #24
 80093f0:	d1a7      	bne.n	8009342 <system_execute_line+0x22>
          else { report_grbl_settings(); }
 80093f2:	f7fd f937 	bl	8006664 <report_grbl_settings>
          break;
 80093f6:	e7a5      	b.n	8009344 <system_execute_line+0x24>
          if ((line[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0)) { return(STATUS_INVALID_STATEMENT); }
 80093f8:	78ab      	ldrb	r3, [r5, #2]
 80093fa:	2b53      	cmp	r3, #83	; 0x53
 80093fc:	d1d0      	bne.n	80093a0 <system_execute_line+0x80>
 80093fe:	78eb      	ldrb	r3, [r5, #3]
 8009400:	2b54      	cmp	r3, #84	; 0x54
 8009402:	d1cd      	bne.n	80093a0 <system_execute_line+0x80>
 8009404:	792b      	ldrb	r3, [r5, #4]
 8009406:	2b3d      	cmp	r3, #61	; 0x3d
 8009408:	d1ca      	bne.n	80093a0 <system_execute_line+0x80>
 800940a:	79ab      	ldrb	r3, [r5, #6]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1c7      	bne.n	80093a0 <system_execute_line+0x80>
          switch (line[5]) {
 8009410:	796b      	ldrb	r3, [r5, #5]
 8009412:	2b24      	cmp	r3, #36	; 0x24
 8009414:	f000 8128 	beq.w	8009668 <system_execute_line+0x348>
 8009418:	2b2a      	cmp	r3, #42	; 0x2a
 800941a:	f000 8121 	beq.w	8009660 <system_execute_line+0x340>
 800941e:	2b23      	cmp	r3, #35	; 0x23
 8009420:	d1be      	bne.n	80093a0 <system_execute_line+0x80>
              case '#': settings_restore(SETTINGS_RESTORE_PARAMETERS); break;
 8009422:	2002      	movs	r0, #2
 8009424:	f7fe f840 	bl	80074a8 <settings_restore>
          report_feedback_message(MESSAGE_RESTORE_DEFAULTS);
 8009428:	2009      	movs	r0, #9
 800942a:	f7fd f8b1 	bl	8006590 <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800942e:	2400      	movs	r4, #0
          mc_reset(); // Force reset to ensure settings are initialized correctly.
 8009430:	f7fa fce0 	bl	8003df4 <mc_reset>
          break;
 8009434:	e786      	b.n	8009344 <system_execute_line+0x24>
          if ( line[++char_counter] == 0 ) { // Print startup lines
 8009436:	2202      	movs	r2, #2
 8009438:	78ac      	ldrb	r4, [r5, #2]
 800943a:	f88d 2007 	strb.w	r2, [sp, #7]
 800943e:	2c00      	cmp	r4, #0
 8009440:	d047      	beq.n	80094d2 <system_execute_line+0x1b2>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 8009442:	2b00      	cmp	r3, #0
 8009444:	f47f af7d 	bne.w	8009342 <system_execute_line+0x22>
            helper_var = true;  // Set helper_var to flag storing method.
 8009448:	2401      	movs	r4, #1
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 800944a:	f10d 0107 	add.w	r1, sp, #7
 800944e:	aa02      	add	r2, sp, #8
 8009450:	4628      	mov	r0, r5
 8009452:	f7fa fcff 	bl	8003e54 <read_float>
 8009456:	2800      	cmp	r0, #0
 8009458:	d16e      	bne.n	8009538 <system_execute_line+0x218>
 800945a:	2402      	movs	r4, #2
 800945c:	e772      	b.n	8009344 <system_execute_line+0x24>
          if ((line[2] != 'L') || (line[3] != 'P') || (line[4] != 0)) { return(STATUS_INVALID_STATEMENT); }
 800945e:	78ab      	ldrb	r3, [r5, #2]
 8009460:	2b4c      	cmp	r3, #76	; 0x4c
 8009462:	d19d      	bne.n	80093a0 <system_execute_line+0x80>
 8009464:	78eb      	ldrb	r3, [r5, #3]
 8009466:	2b50      	cmp	r3, #80	; 0x50
 8009468:	d19a      	bne.n	80093a0 <system_execute_line+0x80>
 800946a:	792c      	ldrb	r4, [r5, #4]
 800946c:	2c00      	cmp	r4, #0
 800946e:	d197      	bne.n	80093a0 <system_execute_line+0x80>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8009470:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state |= (mask);
 8009472:	4a46      	ldr	r2, [pc, #280]	; (800958c <system_execute_line+0x26c>)
 8009474:	7813      	ldrb	r3, [r2, #0]
 8009476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800947a:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i");
 800947c:	b662      	cpsie	i
 800947e:	e761      	b.n	8009344 <system_execute_line+0x24>
          if ( line[++char_counter] == 0 ) {
 8009480:	2302      	movs	r3, #2
 8009482:	78ac      	ldrb	r4, [r5, #2]
 8009484:	f88d 3007 	strb.w	r3, [sp, #7]
 8009488:	2c00      	cmp	r4, #0
 800948a:	f000 80ab 	beq.w	80095e4 <system_execute_line+0x2c4>
              if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 800948e:	2c3d      	cmp	r4, #61	; 0x3d
 8009490:	f04f 0303 	mov.w	r3, #3
 8009494:	d184      	bne.n	80093a0 <system_execute_line+0x80>
                line[char_counter-helper_var] = line[char_counter];
 8009496:	5cec      	ldrb	r4, [r5, r3]
 8009498:	18ea      	adds	r2, r5, r3
              } while (line[char_counter++] != 0);
 800949a:	3301      	adds	r3, #1
                line[char_counter-helper_var] = line[char_counter];
 800949c:	f802 4c03 	strb.w	r4, [r2, #-3]
              } while (line[char_counter++] != 0);
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2c00      	cmp	r4, #0
 80094a4:	d1f7      	bne.n	8009496 <system_execute_line+0x176>
              settings_store_build_info(line);
 80094a6:	4628      	mov	r0, r5
 80094a8:	f88d 3007 	strb.w	r3, [sp, #7]
 80094ac:	f7fd ffe4 	bl	8007478 <settings_store_build_info>
 80094b0:	e748      	b.n	8009344 <system_execute_line+0x24>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 80094b2:	4b37      	ldr	r3, [pc, #220]	; (8009590 <system_execute_line+0x270>)
 80094b4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80094b8:	06db      	lsls	r3, r3, #27
 80094ba:	d46b      	bmi.n	8009594 <system_execute_line+0x274>
 80094bc:	2405      	movs	r4, #5
 80094be:	e741      	b.n	8009344 <system_execute_line+0x24>
          if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 80094c0:	78ac      	ldrb	r4, [r5, #2]
 80094c2:	2c00      	cmp	r4, #0
 80094c4:	f47f af6c 	bne.w	80093a0 <system_execute_line+0x80>
          else { report_ngc_parameters(); }
 80094c8:	f7fd fae0 	bl	8006a8c <report_ngc_parameters>
          break;
 80094cc:	e73a      	b.n	8009344 <system_execute_line+0x24>
  uint8_t helper_var = 0; // Helper variable
 80094ce:	2400      	movs	r4, #0
 80094d0:	e7bb      	b.n	800944a <system_execute_line+0x12a>
 80094d2:	b2e6      	uxtb	r6, r4
              if (!(settings_read_startup_line(helper_var, line))) {
 80094d4:	4630      	mov	r0, r6
 80094d6:	4629      	mov	r1, r5
 80094d8:	f7fe f884 	bl	80075e4 <settings_read_startup_line>
 80094dc:	b968      	cbnz	r0, 80094fa <system_execute_line+0x1da>
                report_status_message(STATUS_SETTING_READ_FAIL);
 80094de:	2007      	movs	r0, #7
 80094e0:	f7fd f822 	bl	8006528 <report_status_message>
            for (helper_var=0; helper_var < N_STARTUP_LINE; helper_var++) {
 80094e4:	2c00      	cmp	r4, #0
 80094e6:	f47f af7b 	bne.w	80093e0 <system_execute_line+0xc0>
 80094ea:	2401      	movs	r4, #1
 80094ec:	b2e6      	uxtb	r6, r4
              if (!(settings_read_startup_line(helper_var, line))) {
 80094ee:	4630      	mov	r0, r6
 80094f0:	4629      	mov	r1, r5
 80094f2:	f7fe f877 	bl	80075e4 <settings_read_startup_line>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d0f1      	beq.n	80094de <system_execute_line+0x1be>
                report_startup_line(helper_var,line);
 80094fa:	4630      	mov	r0, r6
 80094fc:	4629      	mov	r1, r5
 80094fe:	f7fd fc13 	bl	8006d28 <report_startup_line>
            for (helper_var=0; helper_var < N_STARTUP_LINE; helper_var++) {
 8009502:	2c00      	cmp	r4, #0
 8009504:	f47f af6c 	bne.w	80093e0 <system_execute_line+0xc0>
 8009508:	e7ef      	b.n	80094ea <system_execute_line+0x1ca>
          if ( sys.state == STATE_CHECK_MODE ) {
 800950a:	4b1f      	ldr	r3, [pc, #124]	; (8009588 <system_execute_line+0x268>)
 800950c:	781c      	ldrb	r4, [r3, #0]
 800950e:	2c02      	cmp	r4, #2
 8009510:	d061      	beq.n	80095d6 <system_execute_line+0x2b6>
            if (sys.state) { return(STATUS_IDLE_ERROR); } // Requires no alarm mode.
 8009512:	2c00      	cmp	r4, #0
 8009514:	f47f af15 	bne.w	8009342 <system_execute_line+0x22>
            sys.state = STATE_CHECK_MODE;
 8009518:	2202      	movs	r2, #2
            report_feedback_message(MESSAGE_ENABLED);
 800951a:	2004      	movs	r0, #4
            sys.state = STATE_CHECK_MODE;
 800951c:	701a      	strb	r2, [r3, #0]
            report_feedback_message(MESSAGE_ENABLED);
 800951e:	f7fd f837 	bl	8006590 <report_feedback_message>
 8009522:	e70f      	b.n	8009344 <system_execute_line+0x24>
          report_gcode_modes();
 8009524:	f7fd fb5e 	bl	8006be4 <report_gcode_modes>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8009528:	462c      	mov	r4, r5
          break;
 800952a:	e70b      	b.n	8009344 <system_execute_line+0x24>
            report_feedback_message(MESSAGE_ALARM_UNLOCK);
 800952c:	2003      	movs	r0, #3
 800952e:	f7fd f82f 	bl	8006590 <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8009532:	462c      	mov	r4, r5
            sys.state = STATE_IDLE;
 8009534:	7035      	strb	r5, [r6, #0]
 8009536:	e705      	b.n	8009344 <system_execute_line+0x24>
          if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 8009538:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800953c:	1c53      	adds	r3, r2, #1
 800953e:	5caa      	ldrb	r2, [r5, r2]
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2a3d      	cmp	r2, #61	; 0x3d
 8009544:	f88d 3007 	strb.w	r3, [sp, #7]
 8009548:	f47f af2a 	bne.w	80093a0 <system_execute_line+0x80>
          if (helper_var) { // Store startup line
 800954c:	2c00      	cmp	r4, #0
 800954e:	d063      	beq.n	8009618 <system_execute_line+0x2f8>
 8009550:	4618      	mov	r0, r3
              line[char_counter-helper_var] = line[char_counter];
 8009552:	5ce9      	ldrb	r1, [r5, r3]
 8009554:	1a1a      	subs	r2, r3, r0
 8009556:	54a9      	strb	r1, [r5, r2]
 8009558:	18ea      	adds	r2, r5, r3
            } while (line[char_counter++] != 0);
 800955a:	7812      	ldrb	r2, [r2, #0]
 800955c:	3301      	adds	r3, #1
 800955e:	b2db      	uxtb	r3, r3
 8009560:	2a00      	cmp	r2, #0
 8009562:	d1f6      	bne.n	8009552 <system_execute_line+0x232>
            helper_var = gc_execute_line(line); // Set helper_var to returned status code.
 8009564:	4628      	mov	r0, r5
 8009566:	f88d 3007 	strb.w	r3, [sp, #7]
 800956a:	f7f8 fb87 	bl	8001c7c <gc_execute_line>
            if (helper_var) { return(helper_var); }
 800956e:	4604      	mov	r4, r0
 8009570:	2800      	cmp	r0, #0
 8009572:	f47f aee7 	bne.w	8009344 <system_execute_line+0x24>
              helper_var = truncf(parameter); // Set helper_var to int value of parameter
 8009576:	9802      	ldr	r0, [sp, #8]
 8009578:	f7f7 fd9c 	bl	80010b4 <__aeabi_f2uiz>
              settings_store_startup_line(helper_var,line);
 800957c:	4629      	mov	r1, r5
 800957e:	b2c0      	uxtb	r0, r0
 8009580:	f7fd ff6a 	bl	8007458 <settings_store_startup_line>
 8009584:	e6de      	b.n	8009344 <system_execute_line+0x24>
 8009586:	bf00      	nop
 8009588:	20001b6c 	.word	0x20001b6c
 800958c:	20001b81 	.word	0x20001b81
 8009590:	20001d30 	.word	0x20001d30
          sys.state = STATE_HOMING; // Set system state variable
 8009594:	2004      	movs	r0, #4
          if (line[2] == 0) {
 8009596:	78ab      	ldrb	r3, [r5, #2]
          sys.state = STATE_HOMING; // Set system state variable
 8009598:	7030      	strb	r0, [r6, #0]
          if (line[2] == 0) {
 800959a:	b353      	cbz	r3, 80095f2 <system_execute_line+0x2d2>
            } else if (line[3] == 0) {
 800959c:	78ea      	ldrb	r2, [r5, #3]
 800959e:	2a00      	cmp	r2, #0
 80095a0:	f47f aefe 	bne.w	80093a0 <system_execute_line+0x80>
              switch (line[2]) {
 80095a4:	2b58      	cmp	r3, #88	; 0x58
 80095a6:	d057      	beq.n	8009658 <system_execute_line+0x338>
 80095a8:	d927      	bls.n	80095fa <system_execute_line+0x2da>
 80095aa:	2b59      	cmp	r3, #89	; 0x59
 80095ac:	d02c      	beq.n	8009608 <system_execute_line+0x2e8>
 80095ae:	2b5a      	cmp	r3, #90	; 0x5a
 80095b0:	f47f aef6 	bne.w	80093a0 <system_execute_line+0x80>
				case 'B': mc_homing_cycle(HOMING_CYCLE_B); break;
 80095b4:	f7fa fb60 	bl	8003c78 <mc_homing_cycle>
          if (!sys.abort) {  // Execute startup scripts after successful homing.
 80095b8:	7874      	ldrb	r4, [r6, #1]
 80095ba:	2c00      	cmp	r4, #0
 80095bc:	f47f af10 	bne.w	80093e0 <system_execute_line+0xc0>
            sys.state = STATE_IDLE; // Set to IDLE when complete.
 80095c0:	7034      	strb	r4, [r6, #0]
            st_go_idle(); // Set steppers to the settings idle state before returning.
 80095c2:	f7fe fce3 	bl	8007f8c <st_go_idle>
            if (line[2] == 0) { system_execute_startup(line); }
 80095c6:	78ab      	ldrb	r3, [r5, #2]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f47f af09 	bne.w	80093e0 <system_execute_line+0xc0>
 80095ce:	4628      	mov	r0, r5
 80095d0:	f7ff fe8a 	bl	80092e8 <system_execute_startup>
 80095d4:	e6b6      	b.n	8009344 <system_execute_line+0x24>
            mc_reset();
 80095d6:	f7fa fc0d 	bl	8003df4 <mc_reset>
            report_feedback_message(MESSAGE_DISABLED);
 80095da:	2005      	movs	r0, #5
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 80095dc:	462c      	mov	r4, r5
            report_feedback_message(MESSAGE_DISABLED);
 80095de:	f7fc ffd7 	bl	8006590 <report_feedback_message>
 80095e2:	e6af      	b.n	8009344 <system_execute_line+0x24>
            settings_read_build_info(line);
 80095e4:	4628      	mov	r0, r5
 80095e6:	f7fe f817 	bl	8007618 <settings_read_build_info>
            report_build_info(line);
 80095ea:	4628      	mov	r0, r5
 80095ec:	f7fd fbe0 	bl	8006db0 <report_build_info>
 80095f0:	e6a8      	b.n	8009344 <system_execute_line+0x24>
            mc_homing_cycle(HOMING_CYCLE_ALL);
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fa fb40 	bl	8003c78 <mc_homing_cycle>
 80095f8:	e7de      	b.n	80095b8 <system_execute_line+0x298>
              switch (line[2]) {
 80095fa:	2b41      	cmp	r3, #65	; 0x41
 80095fc:	d008      	beq.n	8009610 <system_execute_line+0x2f0>
 80095fe:	2b42      	cmp	r3, #66	; 0x42
 8009600:	f47f aece 	bne.w	80093a0 <system_execute_line+0x80>
				case 'B': mc_homing_cycle(HOMING_CYCLE_B); break;
 8009604:	2010      	movs	r0, #16
 8009606:	e7d5      	b.n	80095b4 <system_execute_line+0x294>
                case 'Y': mc_homing_cycle(HOMING_CYCLE_Y); break;
 8009608:	2002      	movs	r0, #2
 800960a:	f7fa fb35 	bl	8003c78 <mc_homing_cycle>
 800960e:	e7d3      	b.n	80095b8 <system_execute_line+0x298>
				case 'A': mc_homing_cycle(HOMING_CYCLE_A); break;
 8009610:	2008      	movs	r0, #8
 8009612:	f7fa fb31 	bl	8003c78 <mc_homing_cycle>
 8009616:	e7cf      	b.n	80095b8 <system_execute_line+0x298>
            if(!read_float(line, &char_counter, &value)) { return(STATUS_BAD_NUMBER_FORMAT); }
 8009618:	f10d 0107 	add.w	r1, sp, #7
 800961c:	aa03      	add	r2, sp, #12
 800961e:	4628      	mov	r0, r5
 8009620:	f7fa fc18 	bl	8003e54 <read_float>
 8009624:	2800      	cmp	r0, #0
 8009626:	f43f af18 	beq.w	800945a <system_execute_line+0x13a>
            if((line[char_counter] != 0) || (parameter > 255)) { return(STATUS_INVALID_STATEMENT); }
 800962a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800962e:	5ceb      	ldrb	r3, [r5, r3]
 8009630:	2b00      	cmp	r3, #0
 8009632:	f47f aeb5 	bne.w	80093a0 <system_execute_line+0x80>
 8009636:	9c02      	ldr	r4, [sp, #8]
 8009638:	490d      	ldr	r1, [pc, #52]	; (8009670 <system_execute_line+0x350>)
 800963a:	4620      	mov	r0, r4
 800963c:	f7f7 fcf4 	bl	8001028 <__aeabi_fcmpgt>
 8009640:	2800      	cmp	r0, #0
 8009642:	f47f aead 	bne.w	80093a0 <system_execute_line+0x80>
            return(settings_store_global_setting((uint8_t)parameter, value));
 8009646:	4620      	mov	r0, r4
 8009648:	f7f7 fd34 	bl	80010b4 <__aeabi_f2uiz>
 800964c:	9903      	ldr	r1, [sp, #12]
 800964e:	b2c0      	uxtb	r0, r0
 8009650:	f7fe f816 	bl	8007680 <settings_store_global_setting>
 8009654:	4604      	mov	r4, r0
 8009656:	e675      	b.n	8009344 <system_execute_line+0x24>
                case 'X': mc_homing_cycle(HOMING_CYCLE_X); break;
 8009658:	2001      	movs	r0, #1
 800965a:	f7fa fb0d 	bl	8003c78 <mc_homing_cycle>
 800965e:	e7ab      	b.n	80095b8 <system_execute_line+0x298>
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 8009660:	200f      	movs	r0, #15
 8009662:	f7fd ff21 	bl	80074a8 <settings_restore>
 8009666:	e6df      	b.n	8009428 <system_execute_line+0x108>
              case '$': settings_restore(SETTINGS_RESTORE_DEFAULTS); break;
 8009668:	2001      	movs	r0, #1
 800966a:	f7fd ff1d 	bl	80074a8 <settings_restore>
 800966e:	e6db      	b.n	8009428 <system_execute_line+0x108>
 8009670:	437f0000 	.word	0x437f0000

08009674 <system_flag_wco_change>:
{
 8009674:	b508      	push	{r3, lr}
    protocol_buffer_synchronize();
 8009676:	f7fc fc6d 	bl	8005f54 <protocol_buffer_synchronize>
  sys.report_wco_counter = 0;
 800967a:	2200      	movs	r2, #0
 800967c:	4b01      	ldr	r3, [pc, #4]	; (8009684 <system_flag_wco_change+0x10>)
 800967e:	735a      	strb	r2, [r3, #13]
 8009680:	bd08      	pop	{r3, pc}
 8009682:	bf00      	nop
 8009684:	20001b6c 	.word	0x20001b6c

08009688 <system_convert_array_steps_to_mpos>:
{
 8009688:	b570      	push	{r4, r5, r6, lr}
    pos = steps[idx]/settings.steps_per_mm[idx];
 800968a:	4d13      	ldr	r5, [pc, #76]	; (80096d8 <system_convert_array_steps_to_mpos+0x50>)
{
 800968c:	4604      	mov	r4, r0
    pos = steps[idx]/settings.steps_per_mm[idx];
 800968e:	6808      	ldr	r0, [r1, #0]
{
 8009690:	460e      	mov	r6, r1
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009692:	f7f7 fab9 	bl	8000c08 <__aeabi_i2f>
 8009696:	6829      	ldr	r1, [r5, #0]
 8009698:	f7f7 fbbe 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 800969c:	6020      	str	r0, [r4, #0]
    pos = steps[idx]/settings.steps_per_mm[idx];
 800969e:	6870      	ldr	r0, [r6, #4]
 80096a0:	f7f7 fab2 	bl	8000c08 <__aeabi_i2f>
 80096a4:	6869      	ldr	r1, [r5, #4]
 80096a6:	f7f7 fbb7 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80096aa:	6060      	str	r0, [r4, #4]
    pos = steps[idx]/settings.steps_per_mm[idx];
 80096ac:	68b0      	ldr	r0, [r6, #8]
 80096ae:	f7f7 faab 	bl	8000c08 <__aeabi_i2f>
 80096b2:	68a9      	ldr	r1, [r5, #8]
 80096b4:	f7f7 fbb0 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80096b8:	60a0      	str	r0, [r4, #8]
    pos = steps[idx]/settings.steps_per_mm[idx];
 80096ba:	68f0      	ldr	r0, [r6, #12]
 80096bc:	f7f7 faa4 	bl	8000c08 <__aeabi_i2f>
 80096c0:	68e9      	ldr	r1, [r5, #12]
 80096c2:	f7f7 fba9 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80096c6:	60e0      	str	r0, [r4, #12]
    pos = steps[idx]/settings.steps_per_mm[idx];
 80096c8:	6930      	ldr	r0, [r6, #16]
 80096ca:	f7f7 fa9d 	bl	8000c08 <__aeabi_i2f>
 80096ce:	6929      	ldr	r1, [r5, #16]
 80096d0:	f7f7 fba2 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80096d4:	6120      	str	r0, [r4, #16]
 80096d6:	bd70      	pop	{r4, r5, r6, pc}
 80096d8:	20001d30 	.word	0x20001d30

080096dc <system_check_travel_limits>:
{
 80096dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096de:	4c4c      	ldr	r4, [pc, #304]	; (8009810 <system_check_travel_limits+0x134>)
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 80096e0:	6807      	ldr	r7, [r0, #0]
 80096e2:	f8b4 506a 	ldrh.w	r5, [r4, #106]	; 0x6a
{
 80096e6:	4606      	mov	r6, r0
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80096e8:	07ea      	lsls	r2, r5, #31
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 80096ea:	f04f 0100 	mov.w	r1, #0
 80096ee:	4638      	mov	r0, r7
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80096f0:	d409      	bmi.n	8009706 <system_check_travel_limits+0x2a>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 80096f2:	f7f7 fc99 	bl	8001028 <__aeabi_fcmpgt>
 80096f6:	b920      	cbnz	r0, 8009702 <system_check_travel_limits+0x26>
 80096f8:	4639      	mov	r1, r7
 80096fa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80096fc:	f7f7 fc94 	bl	8001028 <__aeabi_fcmpgt>
 8009700:	b168      	cbz	r0, 800971e <system_check_travel_limits+0x42>
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009702:	2001      	movs	r0, #1
}
 8009704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009706:	f7f7 fc71 	bl	8000fec <__aeabi_fcmplt>
 800970a:	2800      	cmp	r0, #0
 800970c:	d1f9      	bne.n	8009702 <system_check_travel_limits+0x26>
 800970e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009710:	4639      	mov	r1, r7
 8009712:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009716:	f7f7 fc69 	bl	8000fec <__aeabi_fcmplt>
 800971a:	2800      	cmp	r0, #0
 800971c:	d1f1      	bne.n	8009702 <system_check_travel_limits+0x26>
 800971e:	6877      	ldr	r7, [r6, #4]
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009720:	07ab      	lsls	r3, r5, #30
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009722:	f04f 0100 	mov.w	r1, #0
 8009726:	4638      	mov	r0, r7
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009728:	d43e      	bmi.n	80097a8 <system_check_travel_limits+0xcc>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 800972a:	f7f7 fc7d 	bl	8001028 <__aeabi_fcmpgt>
 800972e:	2800      	cmp	r0, #0
 8009730:	d1e7      	bne.n	8009702 <system_check_travel_limits+0x26>
 8009732:	4638      	mov	r0, r7
 8009734:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009736:	f7f7 fc59 	bl	8000fec <__aeabi_fcmplt>
 800973a:	2800      	cmp	r0, #0
 800973c:	d1e1      	bne.n	8009702 <system_check_travel_limits+0x26>
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 800973e:	68b7      	ldr	r7, [r6, #8]
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009740:	076a      	lsls	r2, r5, #29
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009742:	f04f 0100 	mov.w	r1, #0
 8009746:	4638      	mov	r0, r7
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009748:	d43b      	bmi.n	80097c2 <system_check_travel_limits+0xe6>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 800974a:	f7f7 fc6d 	bl	8001028 <__aeabi_fcmpgt>
 800974e:	2800      	cmp	r0, #0
 8009750:	d1d7      	bne.n	8009702 <system_check_travel_limits+0x26>
 8009752:	4638      	mov	r0, r7
 8009754:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009756:	f7f7 fc49 	bl	8000fec <__aeabi_fcmplt>
 800975a:	2800      	cmp	r0, #0
 800975c:	d1d1      	bne.n	8009702 <system_check_travel_limits+0x26>
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 800975e:	68f7      	ldr	r7, [r6, #12]
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009760:	072b      	lsls	r3, r5, #28
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009762:	f04f 0100 	mov.w	r1, #0
 8009766:	4638      	mov	r0, r7
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009768:	d438      	bmi.n	80097dc <system_check_travel_limits+0x100>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 800976a:	f7f7 fc5d 	bl	8001028 <__aeabi_fcmpgt>
 800976e:	2800      	cmp	r0, #0
 8009770:	d1c7      	bne.n	8009702 <system_check_travel_limits+0x26>
 8009772:	4638      	mov	r0, r7
 8009774:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009776:	f7f7 fc39 	bl	8000fec <__aeabi_fcmplt>
 800977a:	2800      	cmp	r0, #0
 800977c:	d1c1      	bne.n	8009702 <system_check_travel_limits+0x26>
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800977e:	f015 0f10 	tst.w	r5, #16
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009782:	6935      	ldr	r5, [r6, #16]
 8009784:	f04f 0100 	mov.w	r1, #0
 8009788:	4628      	mov	r0, r5
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800978a:	d034      	beq.n	80097f6 <system_check_travel_limits+0x11a>
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 800978c:	f7f7 fc2e 	bl	8000fec <__aeabi_fcmplt>
 8009790:	2800      	cmp	r0, #0
 8009792:	d1b6      	bne.n	8009702 <system_check_travel_limits+0x26>
 8009794:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009796:	4628      	mov	r0, r5
 8009798:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800979c:	f7f7 fc44 	bl	8001028 <__aeabi_fcmpgt>
  return(false);
 80097a0:	3000      	adds	r0, #0
 80097a2:	bf18      	it	ne
 80097a4:	2001      	movne	r0, #1
 80097a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 80097a8:	f7f7 fc20 	bl	8000fec <__aeabi_fcmplt>
 80097ac:	2800      	cmp	r0, #0
 80097ae:	d1a8      	bne.n	8009702 <system_check_travel_limits+0x26>
 80097b0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80097b2:	4638      	mov	r0, r7
 80097b4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80097b8:	f7f7 fc36 	bl	8001028 <__aeabi_fcmpgt>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d0be      	beq.n	800973e <system_check_travel_limits+0x62>
 80097c0:	e79f      	b.n	8009702 <system_check_travel_limits+0x26>
 80097c2:	f7f7 fc13 	bl	8000fec <__aeabi_fcmplt>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d19b      	bne.n	8009702 <system_check_travel_limits+0x26>
 80097ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80097cc:	4638      	mov	r0, r7
 80097ce:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80097d2:	f7f7 fc29 	bl	8001028 <__aeabi_fcmpgt>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d0c1      	beq.n	800975e <system_check_travel_limits+0x82>
 80097da:	e792      	b.n	8009702 <system_check_travel_limits+0x26>
 80097dc:	f7f7 fc06 	bl	8000fec <__aeabi_fcmplt>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d18e      	bne.n	8009702 <system_check_travel_limits+0x26>
 80097e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80097e6:	4638      	mov	r0, r7
 80097e8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80097ec:	f7f7 fc1c 	bl	8001028 <__aeabi_fcmpgt>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d0c4      	beq.n	800977e <system_check_travel_limits+0xa2>
 80097f4:	e785      	b.n	8009702 <system_check_travel_limits+0x26>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 80097f6:	f7f7 fc17 	bl	8001028 <__aeabi_fcmpgt>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	d181      	bne.n	8009702 <system_check_travel_limits+0x26>
 80097fe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009800:	4628      	mov	r0, r5
 8009802:	f7f7 fbf3 	bl	8000fec <__aeabi_fcmplt>
  return(false);
 8009806:	3000      	adds	r0, #0
 8009808:	bf18      	it	ne
 800980a:	2001      	movne	r0, #1
 800980c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800980e:	bf00      	nop
 8009810:	20001d30 	.word	0x20001d30

08009814 <system_set_exec_state_flag>:
  __ASM volatile ("cpsid i");
 8009814:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
 8009816:	4a03      	ldr	r2, [pc, #12]	; (8009824 <system_set_exec_state_flag+0x10>)
 8009818:	7813      	ldrb	r3, [r2, #0]
 800981a:	4318      	orrs	r0, r3
 800981c:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 800981e:	b662      	cpsie	i
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	20001b81 	.word	0x20001b81

08009828 <system_clear_exec_state_flag>:
  __ASM volatile ("cpsid i");
 8009828:	b672      	cpsid	i
  sys_rt_exec_state &= ~(mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state &= ~(mask);
 800982a:	4a03      	ldr	r2, [pc, #12]	; (8009838 <system_clear_exec_state_flag+0x10>)
 800982c:	7813      	ldrb	r3, [r2, #0]
 800982e:	ea23 0000 	bic.w	r0, r3, r0
 8009832:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009834:	b662      	cpsie	i
 8009836:	4770      	bx	lr
 8009838:	20001b81 	.word	0x20001b81

0800983c <system_set_exec_alarm>:
  __ASM volatile ("cpsid i");
 800983c:	b672      	cpsid	i
  sys_rt_exec_alarm = (code);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = (code);
 800983e:	4b02      	ldr	r3, [pc, #8]	; (8009848 <system_set_exec_alarm+0xc>)
 8009840:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("cpsie i");
 8009842:	b662      	cpsie	i
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	20001bac 	.word	0x20001bac

0800984c <system_clear_exec_alarm>:
  __ASM volatile ("cpsid i");
 800984c:	b672      	cpsid	i
  sys_rt_exec_alarm = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = 0;
 800984e:	2200      	movs	r2, #0
 8009850:	4b01      	ldr	r3, [pc, #4]	; (8009858 <system_clear_exec_alarm+0xc>)
 8009852:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8009854:	b662      	cpsie	i
 8009856:	4770      	bx	lr
 8009858:	20001bac 	.word	0x20001bac

0800985c <system_set_exec_motion_override_flag>:
  __ASM volatile ("cpsid i");
 800985c:	b672      	cpsid	i
  sys_rt_exec_motion_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override |= (mask);
 800985e:	4a03      	ldr	r2, [pc, #12]	; (800986c <system_set_exec_motion_override_flag+0x10>)
 8009860:	7813      	ldrb	r3, [r2, #0]
 8009862:	4318      	orrs	r0, r3
 8009864:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009866:	b662      	cpsie	i
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	20001b68 	.word	0x20001b68

08009870 <system_set_exec_accessory_override_flag>:
  __ASM volatile ("cpsid i");
 8009870:	b672      	cpsid	i
  sys_rt_exec_accessory_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override |= (mask);
 8009872:	4a03      	ldr	r2, [pc, #12]	; (8009880 <system_set_exec_accessory_override_flag+0x10>)
 8009874:	7813      	ldrb	r3, [r2, #0]
 8009876:	4318      	orrs	r0, r3
 8009878:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 800987a:	b662      	cpsie	i
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	20001b80 	.word	0x20001b80

08009884 <system_clear_exec_motion_overrides>:
  __ASM volatile ("cpsid i");
 8009884:	b672      	cpsid	i
  sys_rt_exec_motion_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override = 0;
 8009886:	2200      	movs	r2, #0
 8009888:	4b01      	ldr	r3, [pc, #4]	; (8009890 <system_clear_exec_motion_overrides+0xc>)
 800988a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 800988c:	b662      	cpsie	i
 800988e:	4770      	bx	lr
 8009890:	20001b68 	.word	0x20001b68

08009894 <system_clear_exec_accessory_overrides>:
  __ASM volatile ("cpsid i");
 8009894:	b672      	cpsid	i
  sys_rt_exec_accessory_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override = 0;
 8009896:	2200      	movs	r2, #0
 8009898:	4b01      	ldr	r3, [pc, #4]	; (80098a0 <system_clear_exec_accessory_overrides+0xc>)
 800989a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 800989c:	b662      	cpsie	i
 800989e:	4770      	bx	lr
 80098a0:	20001b80 	.word	0x20001b80

080098a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80098a4:	b430      	push	{r4, r5}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80098a6:	2400      	movs	r4, #0
  RCC->CIR = 0x009F0000;
 80098a8:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 80098ac:	4b3a      	ldr	r3, [pc, #232]	; (8009998 <SystemInit+0xf4>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80098ae:	493b      	ldr	r1, [pc, #236]	; (800999c <SystemInit+0xf8>)
  RCC->CR |= (uint32_t)0x00000001;
 80098b0:	6818      	ldr	r0, [r3, #0]
{
 80098b2:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 80098b4:	f040 0001 	orr.w	r0, r0, #1
 80098b8:	6018      	str	r0, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80098ba:	6858      	ldr	r0, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80098bc:	461a      	mov	r2, r3
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80098be:	4001      	ands	r1, r0
 80098c0:	6059      	str	r1, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80098c2:	6819      	ldr	r1, [r3, #0]
 80098c4:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80098c8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80098cc:	6019      	str	r1, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80098ce:	6819      	ldr	r1, [r3, #0]
 80098d0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80098d4:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80098d6:	6859      	ldr	r1, [r3, #4]
 80098d8:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 80098dc:	6059      	str	r1, [r3, #4]
  RCC->CIR = 0x009F0000;
 80098de:	609d      	str	r5, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80098e0:	9400      	str	r4, [sp, #0]
 80098e2:	9401      	str	r4, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80098e4:	6819      	ldr	r1, [r3, #0]
 80098e6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80098ea:	6019      	str	r1, [r3, #0]
 80098ec:	e003      	b.n	80098f6 <SystemInit+0x52>
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80098ee:	9b00      	ldr	r3, [sp, #0]
 80098f0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80098f4:	d009      	beq.n	800990a <SystemInit+0x66>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80098f6:	6813      	ldr	r3, [r2, #0]
 80098f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098fc:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 80098fe:	9b00      	ldr	r3, [sp, #0]
 8009900:	3301      	adds	r3, #1
 8009902:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8009904:	9b01      	ldr	r3, [sp, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d0f1      	beq.n	80098ee <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800990a:	4b23      	ldr	r3, [pc, #140]	; (8009998 <SystemInit+0xf4>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8009912:	bf18      	it	ne
 8009914:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8009916:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8009918:	9b01      	ldr	r3, [sp, #4]
 800991a:	2b01      	cmp	r3, #1
 800991c:	d006      	beq.n	800992c <SystemInit+0x88>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800991e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009922:	4b1f      	ldr	r3, [pc, #124]	; (80099a0 <SystemInit+0xfc>)
 8009924:	609a      	str	r2, [r3, #8]
}
 8009926:	b002      	add	sp, #8
 8009928:	bc30      	pop	{r4, r5}
 800992a:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800992c:	491d      	ldr	r1, [pc, #116]	; (80099a4 <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800992e:	4b1a      	ldr	r3, [pc, #104]	; (8009998 <SystemInit+0xf4>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009930:	6808      	ldr	r0, [r1, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8009932:	461a      	mov	r2, r3
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009934:	f040 0010 	orr.w	r0, r0, #16
 8009938:	6008      	str	r0, [r1, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800993a:	6808      	ldr	r0, [r1, #0]
 800993c:	f020 0003 	bic.w	r0, r0, #3
 8009940:	6008      	str	r0, [r1, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8009942:	6808      	ldr	r0, [r1, #0]
 8009944:	f040 0002 	orr.w	r0, r0, #2
 8009948:	6008      	str	r0, [r1, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800994a:	6859      	ldr	r1, [r3, #4]
 800994c:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800994e:	6859      	ldr	r1, [r3, #4]
 8009950:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8009952:	6859      	ldr	r1, [r3, #4]
 8009954:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8009958:	6059      	str	r1, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800995a:	6859      	ldr	r1, [r3, #4]
 800995c:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8009960:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8009962:	6859      	ldr	r1, [r3, #4]
 8009964:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 8009968:	6059      	str	r1, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 800996a:	6819      	ldr	r1, [r3, #0]
 800996c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8009970:	6019      	str	r1, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8009972:	6813      	ldr	r3, [r2, #0]
 8009974:	019b      	lsls	r3, r3, #6
 8009976:	d5fc      	bpl.n	8009972 <SystemInit+0xce>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8009978:	6853      	ldr	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800997a:	4907      	ldr	r1, [pc, #28]	; (8009998 <SystemInit+0xf4>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800997c:	f023 0303 	bic.w	r3, r3, #3
 8009980:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8009982:	6853      	ldr	r3, [r2, #4]
 8009984:	f043 0302 	orr.w	r3, r3, #2
 8009988:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800998a:	684b      	ldr	r3, [r1, #4]
 800998c:	f003 030c 	and.w	r3, r3, #12
 8009990:	2b08      	cmp	r3, #8
 8009992:	d1fa      	bne.n	800998a <SystemInit+0xe6>
 8009994:	e7c3      	b.n	800991e <SystemInit+0x7a>
 8009996:	bf00      	nop
 8009998:	40021000 	.word	0x40021000
 800999c:	f8ff0000 	.word	0xf8ff0000
 80099a0:	e000ed00 	.word	0xe000ed00
 80099a4:	40022000 	.word	0x40022000

080099a8 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 80099a8:	b508      	push	{r3, lr}
  if (Length == 0)
 80099aa:	b138      	cbz	r0, 80099bc <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 80099ac:	4b06      	ldr	r3, [pc, #24]	; (80099c8 <Standard_GetConfiguration+0x20>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 80099b4:	4b05      	ldr	r3, [pc, #20]	; (80099cc <Standard_GetConfiguration+0x24>)
 80099b6:	6818      	ldr	r0, [r3, #0]
 80099b8:	300a      	adds	r0, #10
}
 80099ba:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 80099bc:	2201      	movs	r2, #1
 80099be:	4b03      	ldr	r3, [pc, #12]	; (80099cc <Standard_GetConfiguration+0x24>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	821a      	strh	r2, [r3, #16]
    return 0;
 80099c4:	bd08      	pop	{r3, pc}
 80099c6:	bf00      	nop
 80099c8:	20001dd8 	.word	0x20001dd8
 80099cc:	20001ddc 	.word	0x20001ddc

080099d0 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 80099d0:	b508      	push	{r3, lr}
  if (Length == 0)
 80099d2:	b138      	cbz	r0, 80099e4 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 80099d4:	4b06      	ldr	r3, [pc, #24]	; (80099f0 <Standard_GetInterface+0x20>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 80099dc:	4b05      	ldr	r3, [pc, #20]	; (80099f4 <Standard_GetInterface+0x24>)
 80099de:	6818      	ldr	r0, [r3, #0]
 80099e0:	300c      	adds	r0, #12
}
 80099e2:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 80099e4:	2201      	movs	r2, #1
 80099e6:	4b03      	ldr	r3, [pc, #12]	; (80099f4 <Standard_GetInterface+0x24>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	821a      	strh	r2, [r3, #16]
    return 0;
 80099ec:	bd08      	pop	{r3, pc}
 80099ee:	bf00      	nop
 80099f0:	20001dd8 	.word	0x20001dd8
 80099f4:	20001ddc 	.word	0x20001ddc

080099f8 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 80099f8:	b508      	push	{r3, lr}
  if (Length == 0)
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d033      	beq.n	8009a66 <Standard_GetStatus+0x6e>
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 80099fe:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009a00:	4b1e      	ldr	r3, [pc, #120]	; (8009a7c <Standard_GetStatus+0x84>)
  StatusInfo.w = 0;
 8009a02:	481f      	ldr	r0, [pc, #124]	; (8009a80 <Standard_GetStatus+0x88>)
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009a04:	681a      	ldr	r2, [r3, #0]
  StatusInfo.w = 0;
 8009a06:	8001      	strh	r1, [r0, #0]
 8009a08:	7813      	ldrb	r3, [r2, #0]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009a0a:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8009a0e:	d016      	beq.n	8009a3e <Standard_GetStatus+0x46>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d027      	beq.n	8009a64 <Standard_GetStatus+0x6c>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d124      	bne.n	8009a62 <Standard_GetStatus+0x6a>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8009a18:	7952      	ldrb	r2, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 8009a1a:	f002 030f 	and.w	r3, r2, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a24:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    if (ValBit(wIndex0, 7))
 8009a28:	0612      	lsls	r2, r2, #24
      if (_GetTxStallStatus(Related_Endpoint))
 8009a2a:	681b      	ldr	r3, [r3, #0]
    if (ValBit(wIndex0, 7))
 8009a2c:	d420      	bmi.n	8009a70 <Standard_GetStatus+0x78>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8009a2e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a36:	d10e      	bne.n	8009a56 <Standard_GetStatus+0x5e>
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8009a38:	2301      	movs	r3, #1
 8009a3a:	7003      	strb	r3, [r0, #0]
 8009a3c:	e00b      	b.n	8009a56 <Standard_GetStatus+0x5e>
    uint8_t Feature = pInformation->Current_Feature;
 8009a3e:	7a52      	ldrb	r2, [r2, #9]
    if (ValBit(Feature, 5))
 8009a40:	0693      	lsls	r3, r2, #26
 8009a42:	bf4c      	ite	mi
 8009a44:	2302      	movmi	r3, #2
 8009a46:	7803      	ldrbpl	r3, [r0, #0]
    if (ValBit(Feature, 6))
 8009a48:	0651      	lsls	r1, r2, #25
      SetBit(StatusInfo0, 0);
 8009a4a:	bf4c      	ite	mi
 8009a4c:	f043 0301 	orrmi.w	r3, r3, #1
      ClrBit(StatusInfo0, 0);
 8009a50:	f023 0301 	bicpl.w	r3, r3, #1
 8009a54:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8009a56:	4b0b      	ldr	r3, [pc, #44]	; (8009a84 <Standard_GetStatus+0x8c>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 8009a5e:	4808      	ldr	r0, [pc, #32]	; (8009a80 <Standard_GetStatus+0x88>)
 8009a60:	bd08      	pop	{r3, pc}
    return NULL;
 8009a62:	4608      	mov	r0, r1
}
 8009a64:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8009a66:	2202      	movs	r2, #2
 8009a68:	4b04      	ldr	r3, [pc, #16]	; (8009a7c <Standard_GetStatus+0x84>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	821a      	strh	r2, [r3, #16]
    return 0;
 8009a6e:	bd08      	pop	{r3, pc}
      if (_GetTxStallStatus(Related_Endpoint))
 8009a70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009a74:	2b10      	cmp	r3, #16
 8009a76:	d1ee      	bne.n	8009a56 <Standard_GetStatus+0x5e>
 8009a78:	e7de      	b.n	8009a38 <Standard_GetStatus+0x40>
 8009a7a:	bf00      	nop
 8009a7c:	20001ddc 	.word	0x20001ddc
 8009a80:	20001dac 	.word	0x20001dac
 8009a84:	20001dd8 	.word	0x20001dd8

08009a88 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8009a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8009a8c:	4f24      	ldr	r7, [pc, #144]	; (8009b20 <DataStageIn+0x98>)
 8009a8e:	683d      	ldr	r5, [r7, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8009a90:	8a2c      	ldrh	r4, [r5, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8009a92:	b92c      	cbnz	r4, 8009aa0 <DataStageIn+0x18>
  uint32_t ControlState = pInformation->ControlState;
 8009a94:	7a2e      	ldrb	r6, [r5, #8]
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8009a96:	2e04      	cmp	r6, #4
 8009a98:	d02b      	beq.n	8009af2 <DataStageIn+0x6a>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8009a9a:	8aab      	ldrh	r3, [r5, #20]
 8009a9c:	2604      	movs	r6, #4
 8009a9e:	e004      	b.n	8009aaa <DataStageIn+0x22>
 8009aa0:	8aab      	ldrh	r3, [r5, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8009aa2:	429c      	cmp	r4, r3
 8009aa4:	bf8c      	ite	hi
 8009aa6:	2602      	movhi	r6, #2
 8009aa8:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8009aaa:	429c      	cmp	r4, r3
 8009aac:	bf28      	it	cs
 8009aae:	461c      	movcs	r4, r3
 8009ab0:	69ab      	ldr	r3, [r5, #24]
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	4798      	blx	r3
 8009ab6:	4680      	mov	r8, r0

#ifdef STM32F10X_CL
  PCD_EP_Write (ENDP0, DataBuffer, Length);
#else   
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8009ab8:	2000      	movs	r0, #0
 8009aba:	f000 fdd3 	bl	800a664 <GetEPTxAddr>
 8009abe:	4622      	mov	r2, r4
 8009ac0:	4601      	mov	r1, r0
 8009ac2:	4640      	mov	r0, r8
 8009ac4:	f000 fce4 	bl	800a490 <UserToPMABufferCopy>
#endif /* STM32F10X_CL */ 

  SetEPTxCount(ENDP0, Length);
 8009ac8:	4621      	mov	r1, r4
 8009aca:	2000      	movs	r0, #0
 8009acc:	f000 fde6 	bl	800a69c <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8009ad0:	2030      	movs	r0, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8009ad2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  pEPinfo->Usb_wLength -= Length;
 8009ad6:	8a2b      	ldrh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 8009ad8:	8a69      	ldrh	r1, [r5, #18]
  pEPinfo->Usb_wLength -= Length;
 8009ada:	1b1b      	subs	r3, r3, r4
 8009adc:	822b      	strh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 8009ade:	440c      	add	r4, r1
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8009ae0:	4b10      	ldr	r3, [pc, #64]	; (8009b24 <DataStageIn+0x9c>)
  vSetEPTxStatus(EP_TX_VALID);
 8009ae2:	4911      	ldr	r1, [pc, #68]	; (8009b28 <DataStageIn+0xa0>)
  pEPinfo->Usb_wOffset += Length;
 8009ae4:	826c      	strh	r4, [r5, #18]
  vSetEPTxStatus(EP_TX_VALID);
 8009ae6:	8008      	strh	r0, [r1, #0]
 8009ae8:	683d      	ldr	r5, [r7, #0]
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8009aea:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8009aec:	722e      	strb	r6, [r5, #8]
}
 8009aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Data_Mul_MaxPacketSize == TRUE)
 8009af2:	4b0e      	ldr	r3, [pc, #56]	; (8009b2c <DataStageIn+0xa4>)
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	2a01      	cmp	r2, #1
 8009af8:	d006      	beq.n	8009b08 <DataStageIn+0x80>
      vSetEPTxStatus(EP_TX_STALL);
 8009afa:	2210      	movs	r2, #16
 8009afc:	2607      	movs	r6, #7
 8009afe:	4b0a      	ldr	r3, [pc, #40]	; (8009b28 <DataStageIn+0xa0>)
 8009b00:	801a      	strh	r2, [r3, #0]
  pInformation->ControlState = ControlState;
 8009b02:	722e      	strb	r6, [r5, #8]
}
 8009b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Send0LengthData();
 8009b08:	2730      	movs	r7, #48	; 0x30
 8009b0a:	4909      	ldr	r1, [pc, #36]	; (8009b30 <DataStageIn+0xa8>)
 8009b0c:	4a09      	ldr	r2, [pc, #36]	; (8009b34 <DataStageIn+0xac>)
 8009b0e:	6809      	ldr	r1, [r1, #0]
 8009b10:	4805      	ldr	r0, [pc, #20]	; (8009b28 <DataStageIn+0xa0>)
 8009b12:	b289      	uxth	r1, r1
 8009b14:	440a      	add	r2, r1
 8009b16:	0052      	lsls	r2, r2, #1
 8009b18:	6014      	str	r4, [r2, #0]
      Data_Mul_MaxPacketSize = FALSE;
 8009b1a:	601c      	str	r4, [r3, #0]
      Send0LengthData();
 8009b1c:	8007      	strh	r7, [r0, #0]
 8009b1e:	e7e5      	b.n	8009aec <DataStageIn+0x64>
 8009b20:	20001ddc 	.word	0x20001ddc
 8009b24:	20001de2 	.word	0x20001de2
 8009b28:	20001de4 	.word	0x20001de4
 8009b2c:	200016b0 	.word	0x200016b0
 8009b30:	40005c50 	.word	0x40005c50
 8009b34:	20003002 	.word	0x20003002

08009b38 <Standard_ClearFeature>:
{
 8009b38:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8009b3a:	4b30      	ldr	r3, [pc, #192]	; (8009bfc <Standard_ClearFeature+0xc4>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	7818      	ldrb	r0, [r3, #0]
  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009b40:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8009b44:	d003      	beq.n	8009b4e <Standard_ClearFeature+0x16>
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8009b46:	2802      	cmp	r0, #2
 8009b48:	d006      	beq.n	8009b58 <Standard_ClearFeature+0x20>
  return USB_UNSUPPORT;
 8009b4a:	2002      	movs	r0, #2
}
 8009b4c:	bd38      	pop	{r3, r4, r5, pc}
    ClrBit(pInformation->Current_Feature, 5);
 8009b4e:	7a5a      	ldrb	r2, [r3, #9]
 8009b50:	f022 0220 	bic.w	r2, r2, #32
 8009b54:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8009b56:	bd38      	pop	{r3, r4, r5, pc}
    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8009b58:	885a      	ldrh	r2, [r3, #2]
 8009b5a:	2a00      	cmp	r2, #0
 8009b5c:	d1f6      	bne.n	8009b4c <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 8009b5e:	791a      	ldrb	r2, [r3, #4]
 8009b60:	2a00      	cmp	r2, #0
 8009b62:	d1f3      	bne.n	8009b4c <Standard_ClearFeature+0x14>
    wIndex0 = pInformation->USBwIndex0;
 8009b64:	7958      	ldrb	r0, [r3, #5]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8009b66:	4d26      	ldr	r5, [pc, #152]	; (8009c00 <Standard_ClearFeature+0xc8>)
    if (ValBit(pInformation->USBwIndex0, 7))
 8009b68:	b241      	sxtb	r1, r0
    rEP = wIndex0 & ~0x80;
 8009b6a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
      Status = _GetEPTxStatus(Related_Endpoint);
 8009b6e:	0084      	lsls	r4, r0, #2
 8009b70:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8009b74:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8009b78:	6822      	ldr	r2, [r4, #0]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8009b7a:	782d      	ldrb	r5, [r5, #0]
    if (ValBit(pInformation->USBwIndex0, 7))
 8009b7c:	2900      	cmp	r1, #0
      Status = _GetEPTxStatus(Related_Endpoint);
 8009b7e:	bfb4      	ite	lt
 8009b80:	f002 0230 	andlt.w	r2, r2, #48	; 0x30
      Status = _GetEPRxStatus(Related_Endpoint);
 8009b84:	f402 5240 	andge.w	r2, r2, #12288	; 0x3000
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8009b88:	42a8      	cmp	r0, r5
 8009b8a:	d2de      	bcs.n	8009b4a <Standard_ClearFeature+0x12>
 8009b8c:	2a00      	cmp	r2, #0
 8009b8e:	d0dc      	beq.n	8009b4a <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 8009b90:	7a9b      	ldrb	r3, [r3, #10]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d0d9      	beq.n	8009b4a <Standard_ClearFeature+0x12>
    if (wIndex0 & 0x80)
 8009b96:	2900      	cmp	r1, #0
      if (_GetTxStallStatus(Related_Endpoint ))
 8009b98:	6823      	ldr	r3, [r4, #0]
    if (wIndex0 & 0x80)
 8009b9a:	db0a      	blt.n	8009bb2 <Standard_ClearFeature+0x7a>
      if (_GetRxStallStatus(Related_Endpoint))
 8009b9c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ba4:	d012      	beq.n	8009bcc <Standard_ClearFeature+0x94>
    pUser_Standard_Requests->User_ClearFeature();
 8009ba6:	4b17      	ldr	r3, [pc, #92]	; (8009c04 <Standard_ClearFeature+0xcc>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	4798      	blx	r3
    return USB_SUCCESS;
 8009bae:	2000      	movs	r0, #0
 8009bb0:	bd38      	pop	{r3, r4, r5, pc}
      if (_GetTxStallStatus(Related_Endpoint ))
 8009bb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009bb6:	2b10      	cmp	r3, #16
 8009bb8:	d1f5      	bne.n	8009ba6 <Standard_ClearFeature+0x6e>
        ClearDTOG_TX(Related_Endpoint);
 8009bba:	b2c4      	uxtb	r4, r0
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	f000 fd1f 	bl	800a600 <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	2130      	movs	r1, #48	; 0x30
 8009bc6:	f000 fc9d 	bl	800a504 <SetEPTxStatus>
 8009bca:	e7ec      	b.n	8009ba6 <Standard_ClearFeature+0x6e>
        if (Related_Endpoint == ENDP0)
 8009bcc:	b990      	cbnz	r0, 8009bf4 <Standard_ClearFeature+0xbc>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8009bce:	4b0e      	ldr	r3, [pc, #56]	; (8009c08 <Standard_ClearFeature+0xd0>)
 8009bd0:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8009bd4:	f000 fd70 	bl	800a6b8 <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8009bd8:	6823      	ldr	r3, [r4, #0]
 8009bda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	e7d8      	b.n	8009ba6 <Standard_ClearFeature+0x6e>
          ClearDTOG_RX(Related_Endpoint);
 8009bf4:	f000 fcf2 	bl	800a5dc <ClearDTOG_RX>
 8009bf8:	e7ee      	b.n	8009bd8 <Standard_ClearFeature+0xa0>
 8009bfa:	bf00      	nop
 8009bfc:	20001ddc 	.word	0x20001ddc
 8009c00:	2000009c 	.word	0x2000009c
 8009c04:	20001dd8 	.word	0x20001dd8
 8009c08:	2000006c 	.word	0x2000006c

08009c0c <Standard_SetEndPointFeature>:
{
 8009c0c:	b538      	push	{r3, r4, r5, lr}
  wIndex0 = pInformation->USBwIndex0;
 8009c0e:	4b21      	ldr	r3, [pc, #132]	; (8009c94 <Standard_SetEndPointFeature+0x88>)
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8009c10:	4d21      	ldr	r5, [pc, #132]	; (8009c98 <Standard_SetEndPointFeature+0x8c>)
  wIndex0 = pInformation->USBwIndex0;
 8009c12:	6818      	ldr	r0, [r3, #0]
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8009c14:	782d      	ldrb	r5, [r5, #0]
  wIndex0 = pInformation->USBwIndex0;
 8009c16:	7942      	ldrb	r2, [r0, #5]
  if (ValBit(pInformation->USBwIndex0, 7))
 8009c18:	b254      	sxtb	r4, r2
  rEP = wIndex0 & ~0x80;
 8009c1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    Status = _GetEPTxStatus(Related_Endpoint);
 8009c1e:	0093      	lsls	r3, r2, #2
 8009c20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c24:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8009c28:	6819      	ldr	r1, [r3, #0]
  if (ValBit(pInformation->USBwIndex0, 7))
 8009c2a:	2c00      	cmp	r4, #0
    Status = _GetEPTxStatus(Related_Endpoint);
 8009c2c:	bfb4      	ite	lt
 8009c2e:	f001 0130 	andlt.w	r1, r1, #48	; 0x30
    Status = _GetEPRxStatus(Related_Endpoint);
 8009c32:	f401 5140 	andge.w	r1, r1, #12288	; 0x3000
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8009c36:	42aa      	cmp	r2, r5
 8009c38:	d301      	bcc.n	8009c3e <Standard_SetEndPointFeature+0x32>
    return USB_UNSUPPORT;
 8009c3a:	2002      	movs	r0, #2
}
 8009c3c:	bd38      	pop	{r3, r4, r5, pc}
      || pInformation->USBwValue != 0 || Status == 0
 8009c3e:	8842      	ldrh	r2, [r0, #2]
 8009c40:	2a00      	cmp	r2, #0
 8009c42:	d1fa      	bne.n	8009c3a <Standard_SetEndPointFeature+0x2e>
 8009c44:	2900      	cmp	r1, #0
 8009c46:	d0f8      	beq.n	8009c3a <Standard_SetEndPointFeature+0x2e>
      || pInformation->Current_Configuration == 0)
 8009c48:	7a82      	ldrb	r2, [r0, #10]
 8009c4a:	2a00      	cmp	r2, #0
 8009c4c:	d0f5      	beq.n	8009c3a <Standard_SetEndPointFeature+0x2e>
    if (wIndex0 & 0x80)
 8009c4e:	2c00      	cmp	r4, #0
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8009c50:	681a      	ldr	r2, [r3, #0]
    if (wIndex0 & 0x80)
 8009c52:	db11      	blt.n	8009c78 <Standard_SetEndPointFeature+0x6c>
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8009c54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009c58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009c5c:	b292      	uxth	r2, r2
 8009c5e:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8009c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c6a:	601a      	str	r2, [r3, #0]
  pUser_Standard_Requests->User_SetEndPointFeature();
 8009c6c:	4b0b      	ldr	r3, [pc, #44]	; (8009c9c <Standard_SetEndPointFeature+0x90>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	699b      	ldr	r3, [r3, #24]
 8009c72:	4798      	blx	r3
  return USB_SUCCESS;
 8009c74:	2000      	movs	r0, #0
 8009c76:	bd38      	pop	{r3, r4, r5, pc}
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8009c78:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c80:	b292      	uxth	r2, r2
 8009c82:	f082 0210 	eor.w	r2, r2, #16
 8009c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	e7ec      	b.n	8009c6c <Standard_SetEndPointFeature+0x60>
 8009c92:	bf00      	nop
 8009c94:	20001ddc 	.word	0x20001ddc
 8009c98:	2000009c 	.word	0x2000009c
 8009c9c:	20001dd8 	.word	0x20001dd8

08009ca0 <Standard_GetDescriptorData>:
  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8009ca0:	4b05      	ldr	r3, [pc, #20]	; (8009cb8 <Standard_GetDescriptorData+0x18>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8009ca6:	b110      	cbz	r0, 8009cae <Standard_GetDescriptorData+0xe>
  return pDesc->Descriptor + wOffset;
 8009ca8:	6808      	ldr	r0, [r1, #0]
 8009caa:	4410      	add	r0, r2
}
 8009cac:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8009cae:	8889      	ldrh	r1, [r1, #4]
 8009cb0:	1a8a      	subs	r2, r1, r2
 8009cb2:	821a      	strh	r2, [r3, #16]
    return 0;
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	20001ddc 	.word	0x20001ddc

08009cbc <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8009cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
#endif /* STM32F10X_CL */

  if (pInformation->ControlState != PAUSE)
 8009cbe:	4ea7      	ldr	r6, [pc, #668]	; (8009f5c <Setup0_Process+0x2a0>)
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8009cc0:	4ba7      	ldr	r3, [pc, #668]	; (8009f60 <Setup0_Process+0x2a4>)
  if (pInformation->ControlState != PAUSE)
 8009cc2:	6834      	ldr	r4, [r6, #0]
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8009cc4:	681a      	ldr	r2, [r3, #0]
  if (pInformation->ControlState != PAUSE)
 8009cc6:	7a23      	ldrb	r3, [r4, #8]
{
 8009cc8:	b083      	sub	sp, #12
  if (pInformation->ControlState != PAUSE)
 8009cca:	2b09      	cmp	r3, #9
 8009ccc:	d039      	beq.n	8009d42 <Setup0_Process+0x86>
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8009cce:	4ba5      	ldr	r3, [pc, #660]	; (8009f64 <Setup0_Process+0x2a8>)
 8009cd0:	b292      	uxth	r2, r2
 8009cd2:	4413      	add	r3, r2
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	881d      	ldrh	r5, [r3, #0]
 8009cd8:	006d      	lsls	r5, r5, #1
 8009cda:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8009cde:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8009ce2:	782b      	ldrb	r3, [r5, #0]
 8009ce4:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8009ce6:	786b      	ldrb	r3, [r5, #1]
 8009ce8:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8009cea:	88a8      	ldrh	r0, [r5, #4]
 8009cec:	f000 fd16 	bl	800a71c <ByteSwap>
 8009cf0:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8009cf2:	8928      	ldrh	r0, [r5, #8]
 8009cf4:	6834      	ldr	r4, [r6, #0]
 8009cf6:	f000 fd11 	bl	800a71c <ByteSwap>
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8009cfa:	2201      	movs	r2, #1
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8009cfc:	80a0      	strh	r0, [r4, #4]
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8009cfe:	89ab      	ldrh	r3, [r5, #12]
 8009d00:	6834      	ldr	r4, [r6, #0]
 8009d02:	80e3      	strh	r3, [r4, #6]
  pInformation->ControlState = SETTING_UP;
 8009d04:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8009d06:	b30b      	cbz	r3, 8009d4c <Setup0_Process+0x90>
  uint32_t Request_No = pInformation->USBbRequest;
 8009d08:	7860      	ldrb	r0, [r4, #1]
  if (Request_No == GET_DESCRIPTOR)
 8009d0a:	2806      	cmp	r0, #6
 8009d0c:	f000 8091 	beq.w	8009e32 <Setup0_Process+0x176>
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8009d10:	2800      	cmp	r0, #0
 8009d12:	d14b      	bne.n	8009dac <Setup0_Process+0xf0>
 8009d14:	8861      	ldrh	r1, [r4, #2]
 8009d16:	2900      	cmp	r1, #0
 8009d18:	f000 80a3 	beq.w	8009e62 <Setup0_Process+0x1a6>
 8009d1c:	4d92      	ldr	r5, [pc, #584]	; (8009f68 <Setup0_Process+0x2ac>)
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8009d1e:	682b      	ldr	r3, [r5, #0]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8009d24:	2803      	cmp	r0, #3
 8009d26:	f000 8112 	beq.w	8009f4e <Setup0_Process+0x292>
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8009d2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009d2e:	6833      	ldr	r3, [r6, #0]
 8009d30:	8a1a      	ldrh	r2, [r3, #16]
 8009d32:	428a      	cmp	r2, r1
 8009d34:	f000 8092 	beq.w	8009e5c <Setup0_Process+0x1a0>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8009d38:	2802      	cmp	r0, #2
 8009d3a:	d147      	bne.n	8009dcc <Setup0_Process+0x110>
    pInformation->ControlState = STALLED;
 8009d3c:	2208      	movs	r2, #8
 8009d3e:	721a      	strb	r2, [r3, #8]
 8009d40:	e01c      	b.n	8009d7c <Setup0_Process+0xc0>
  pInformation->ControlState = SETTING_UP;
 8009d42:	2201      	movs	r2, #1
 8009d44:	88e3      	ldrh	r3, [r4, #6]
 8009d46:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1dd      	bne.n	8009d08 <Setup0_Process+0x4c>
 8009d4c:	7823      	ldrb	r3, [r4, #0]
  uint32_t RequestNo = pInformation->USBbRequest;
 8009d4e:	7867      	ldrb	r7, [r4, #1]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009d50:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8009d54:	d047      	beq.n	8009de6 <Setup0_Process+0x12a>
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	f000 80cf 	beq.w	8009efa <Setup0_Process+0x23e>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	f000 8129 	beq.w	8009fb4 <Setup0_Process+0x2f8>
 8009d62:	4d81      	ldr	r5, [pc, #516]	; (8009f68 <Setup0_Process+0x2ac>)
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	4638      	mov	r0, r7
 8009d68:	695b      	ldr	r3, [r3, #20]
 8009d6a:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8009d6c:	2803      	cmp	r0, #3
 8009d6e:	f000 8157 	beq.w	800a020 <Setup0_Process+0x364>
 8009d72:	6834      	ldr	r4, [r6, #0]
  if (Result != USB_SUCCESS)
 8009d74:	2800      	cmp	r0, #0
 8009d76:	d04f      	beq.n	8009e18 <Setup0_Process+0x15c>
          || (pInformation->Current_Configuration != 0))
 8009d78:	2308      	movs	r3, #8
  pInformation->ControlState = ControlState;
 8009d7a:	7223      	strb	r3, [r4, #8]
{
#ifdef STM32F10X_CL  
  USB_OTG_EP *ep;
#endif /* STM32F10X_CL */
      
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8009d7c:	4b7b      	ldr	r3, [pc, #492]	; (8009f6c <Setup0_Process+0x2b0>)
 8009d7e:	2000      	movs	r0, #0
 8009d80:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8009d84:	f000 fc98 	bl	800a6b8 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 8009d88:	6833      	ldr	r3, [r6, #0]
 8009d8a:	7a18      	ldrb	r0, [r3, #8]
 8009d8c:	2808      	cmp	r0, #8
 8009d8e:	d106      	bne.n	8009d9e <Setup0_Process+0xe2>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8009d90:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 8009d94:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 8009d96:	4976      	ldr	r1, [pc, #472]	; (8009f70 <Setup0_Process+0x2b4>)
    vSetEPTxStatus(EP_TX_STALL);
 8009d98:	4b76      	ldr	r3, [pc, #472]	; (8009f74 <Setup0_Process+0x2b8>)
    vSetEPRxStatus(EP_RX_STALL);
 8009d9a:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8009d9c:	801a      	strh	r2, [r3, #0]
}
 8009d9e:	f1a0 0009 	sub.w	r0, r0, #9
 8009da2:	fab0 f080 	clz	r0, r0
 8009da6:	0940      	lsrs	r0, r0, #5
 8009da8:	b003      	add	sp, #12
 8009daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (Request_No == GET_CONFIGURATION)
 8009dac:	2808      	cmp	r0, #8
 8009dae:	d16a      	bne.n	8009e86 <Setup0_Process+0x1ca>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009db0:	7823      	ldrb	r3, [r4, #0]
 8009db2:	065b      	lsls	r3, r3, #25
 8009db4:	d1b2      	bne.n	8009d1c <Setup0_Process+0x60>
      CopyRoutine = Standard_GetConfiguration;
 8009db6:	4b70      	ldr	r3, [pc, #448]	; (8009f78 <Setup0_Process+0x2bc>)
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8009db8:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8009dba:	61a3      	str	r3, [r4, #24]
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8009dbc:	8260      	strh	r0, [r4, #18]
    (*CopyRoutine)(0);
 8009dbe:	4798      	blx	r3
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8009dc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009dc4:	6833      	ldr	r3, [r6, #0]
 8009dc6:	8a1a      	ldrh	r2, [r3, #16]
 8009dc8:	428a      	cmp	r2, r1
 8009dca:	d047      	beq.n	8009e5c <Setup0_Process+0x1a0>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8009dcc:	2a00      	cmp	r2, #0
 8009dce:	d0b5      	beq.n	8009d3c <Setup0_Process+0x80>
  if (ValBit(pInformation->USBbmRequestType, 7))
 8009dd0:	f993 1000 	ldrsb.w	r1, [r3]
 8009dd4:	2900      	cmp	r1, #0
 8009dd6:	db79      	blt.n	8009ecc <Setup0_Process+0x210>
    pInformation->ControlState = OUT_DATA;
 8009dd8:	2003      	movs	r0, #3
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8009dda:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8009dde:	4a64      	ldr	r2, [pc, #400]	; (8009f70 <Setup0_Process+0x2b4>)
    pInformation->ControlState = OUT_DATA;
 8009de0:	7218      	strb	r0, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8009de2:	8011      	strh	r1, [r2, #0]
 8009de4:	e7ca      	b.n	8009d7c <Setup0_Process+0xc0>
    if (RequestNo == SET_CONFIGURATION)
 8009de6:	2f09      	cmp	r7, #9
 8009de8:	f000 8102 	beq.w	8009ff0 <Setup0_Process+0x334>
    else if (RequestNo == SET_ADDRESS)
 8009dec:	2f05      	cmp	r7, #5
 8009dee:	f000 80cf 	beq.w	8009f90 <Setup0_Process+0x2d4>
    else if (RequestNo == SET_FEATURE)
 8009df2:	2f03      	cmp	r7, #3
 8009df4:	f000 80e7 	beq.w	8009fc6 <Setup0_Process+0x30a>
    else if (RequestNo == CLEAR_FEATURE)
 8009df8:	2f01      	cmp	r7, #1
 8009dfa:	d1b2      	bne.n	8009d62 <Setup0_Process+0xa6>
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8009dfc:	78e3      	ldrb	r3, [r4, #3]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d1af      	bne.n	8009d62 <Setup0_Process+0xa6>
          && pInformation->USBwIndex == 0
 8009e02:	88a3      	ldrh	r3, [r4, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1ac      	bne.n	8009d62 <Setup0_Process+0xa6>
          && ValBit(pInformation->Current_Feature, 5))
 8009e08:	7a63      	ldrb	r3, [r4, #9]
 8009e0a:	069b      	lsls	r3, r3, #26
 8009e0c:	d5a9      	bpl.n	8009d62 <Setup0_Process+0xa6>
        Result = Standard_ClearFeature();
 8009e0e:	f7ff fe93 	bl	8009b38 <Standard_ClearFeature>
  if (Result != USB_SUCCESS)
 8009e12:	2800      	cmp	r0, #0
 8009e14:	d1a5      	bne.n	8009d62 <Setup0_Process+0xa6>
 8009e16:	6834      	ldr	r4, [r6, #0]
  USB_StatusIn();
 8009e18:	2500      	movs	r5, #0
 8009e1a:	2030      	movs	r0, #48	; 0x30
 8009e1c:	4a50      	ldr	r2, [pc, #320]	; (8009f60 <Setup0_Process+0x2a4>)
 8009e1e:	4b57      	ldr	r3, [pc, #348]	; (8009f7c <Setup0_Process+0x2c0>)
 8009e20:	6812      	ldr	r2, [r2, #0]
 8009e22:	4954      	ldr	r1, [pc, #336]	; (8009f74 <Setup0_Process+0x2b8>)
 8009e24:	b292      	uxth	r2, r2
 8009e26:	4413      	add	r3, r2
 8009e28:	005b      	lsls	r3, r3, #1
 8009e2a:	601d      	str	r5, [r3, #0]
 8009e2c:	2306      	movs	r3, #6
 8009e2e:	8008      	strh	r0, [r1, #0]
 8009e30:	e7a3      	b.n	8009d7a <Setup0_Process+0xbe>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009e32:	7823      	ldrb	r3, [r4, #0]
 8009e34:	065d      	lsls	r5, r3, #25
 8009e36:	f47f af71 	bne.w	8009d1c <Setup0_Process+0x60>
      uint8_t wValue1 = pInformation->USBwValue1;
 8009e3a:	78a3      	ldrb	r3, [r4, #2]
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8009e3c:	4d4a      	ldr	r5, [pc, #296]	; (8009f68 <Setup0_Process+0x2ac>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	f000 80eb 	beq.w	800a01a <Setup0_Process+0x35e>
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	f000 8086 	beq.w	8009f56 <Setup0_Process+0x29a>
      else if (wValue1 == STRING_DESCRIPTOR)
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	f47f af67 	bne.w	8009d1e <Setup0_Process+0x62>
        CopyRoutine = pProperty->GetStringDescriptor;
 8009e50:	682b      	ldr	r3, [r5, #0]
 8009e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (CopyRoutine)
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1af      	bne.n	8009db8 <Setup0_Process+0xfc>
 8009e58:	2006      	movs	r0, #6
 8009e5a:	e760      	b.n	8009d1e <Setup0_Process+0x62>
    pInformation->ControlState = PAUSE;
 8009e5c:	2209      	movs	r2, #9
 8009e5e:	721a      	strb	r2, [r3, #8]
 8009e60:	e78c      	b.n	8009d7c <Setup0_Process+0xc0>
           && (pInformation->USBwIndex1 == 0))
 8009e62:	6863      	ldr	r3, [r4, #4]
 8009e64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e6c:	f47f af56 	bne.w	8009d1c <Setup0_Process+0x60>
 8009e70:	7820      	ldrb	r0, [r4, #0]
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009e72:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8009e76:	f040 80d6 	bne.w	800a026 <Setup0_Process+0x36a>
        && (pInformation->USBwIndex == 0))
 8009e7a:	88a3      	ldrh	r3, [r4, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f47f af4d 	bne.w	8009d1c <Setup0_Process+0x60>
        CopyRoutine = Standard_GetStatus;
 8009e82:	4b3f      	ldr	r3, [pc, #252]	; (8009f80 <Setup0_Process+0x2c4>)
 8009e84:	e798      	b.n	8009db8 <Setup0_Process+0xfc>
  else if (Request_No == GET_INTERFACE)
 8009e86:	280a      	cmp	r0, #10
 8009e88:	f47f af48 	bne.w	8009d1c <Setup0_Process+0x60>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8009e8c:	7823      	ldrb	r3, [r4, #0]
 8009e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	f47f af42 	bne.w	8009d1c <Setup0_Process+0x60>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8009e98:	7aa3      	ldrb	r3, [r4, #10]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f43f af3e 	beq.w	8009d1c <Setup0_Process+0x60>
 8009ea0:	8861      	ldrh	r1, [r4, #2]
 8009ea2:	2900      	cmp	r1, #0
 8009ea4:	f47f af3a 	bne.w	8009d1c <Setup0_Process+0x60>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8009ea8:	6863      	ldr	r3, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8009eaa:	4d2f      	ldr	r5, [pc, #188]	; (8009f68 <Setup0_Process+0x2ac>)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8009eac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eb4:	f47f af33 	bne.w	8009d1e <Setup0_Process+0x62>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8009eb8:	682b      	ldr	r3, [r5, #0]
 8009eba:	7960      	ldrb	r0, [r4, #5]
 8009ebc:	699b      	ldr	r3, [r3, #24]
 8009ebe:	4798      	blx	r3
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	f040 80ed 	bne.w	800a0a0 <Setup0_Process+0x3e4>
 8009ec6:	6834      	ldr	r4, [r6, #0]
      CopyRoutine = Standard_GetInterface;
 8009ec8:	4b2e      	ldr	r3, [pc, #184]	; (8009f84 <Setup0_Process+0x2c8>)
 8009eca:	e775      	b.n	8009db8 <Setup0_Process+0xfc>
    __IO uint32_t wLength = pInformation->USBwLength;
 8009ecc:	88d9      	ldrh	r1, [r3, #6]
 8009ece:	9101      	str	r1, [sp, #4]
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8009ed0:	9801      	ldr	r0, [sp, #4]
 8009ed2:	4282      	cmp	r2, r0
 8009ed4:	d834      	bhi.n	8009f40 <Setup0_Process+0x284>
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8009ed6:	4291      	cmp	r1, r2
 8009ed8:	f240 80ab 	bls.w	800a032 <Setup0_Process+0x376>
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8009edc:	4922      	ldr	r1, [pc, #136]	; (8009f68 <Setup0_Process+0x2ac>)
 8009ede:	6809      	ldr	r1, [r1, #0]
 8009ee0:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
 8009ee4:	b281      	uxth	r1, r0
 8009ee6:	4291      	cmp	r1, r2
 8009ee8:	f240 80a8 	bls.w	800a03c <Setup0_Process+0x380>
        Data_Mul_MaxPacketSize = FALSE;
 8009eec:	2000      	movs	r0, #0
 8009eee:	4a26      	ldr	r2, [pc, #152]	; (8009f88 <Setup0_Process+0x2cc>)
 8009ef0:	6010      	str	r0, [r2, #0]
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8009ef2:	8299      	strh	r1, [r3, #20]
    DataStageIn();
 8009ef4:	f7ff fdc8 	bl	8009a88 <DataStageIn>
 8009ef8:	e740      	b.n	8009d7c <Setup0_Process+0xc0>
    if (RequestNo == SET_INTERFACE)
 8009efa:	2f0b      	cmp	r7, #11
 8009efc:	f47f af31 	bne.w	8009d62 <Setup0_Process+0xa6>
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8009f00:	4d19      	ldr	r5, [pc, #100]	; (8009f68 <Setup0_Process+0x2ac>)
 8009f02:	78e1      	ldrb	r1, [r4, #3]
 8009f04:	682b      	ldr	r3, [r5, #0]
 8009f06:	7960      	ldrb	r0, [r4, #5]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	4798      	blx	r3
  if (pInformation->Current_Configuration != 0)
 8009f0c:	6833      	ldr	r3, [r6, #0]
 8009f0e:	7a9a      	ldrb	r2, [r3, #10]
 8009f10:	2a00      	cmp	r2, #0
 8009f12:	f43f af27 	beq.w	8009d64 <Setup0_Process+0xa8>
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8009f16:	2800      	cmp	r0, #0
 8009f18:	f47f af24 	bne.w	8009d64 <Setup0_Process+0xa8>
 8009f1c:	791a      	ldrb	r2, [r3, #4]
 8009f1e:	2a00      	cmp	r2, #0
 8009f20:	f47f af20 	bne.w	8009d64 <Setup0_Process+0xa8>
        || (pInformation->USBwValue1 != 0))
 8009f24:	789b      	ldrb	r3, [r3, #2]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f47f af1c 	bne.w	8009d64 <Setup0_Process+0xa8>
      pUser_Standard_Requests->User_SetInterface();
 8009f2c:	4b17      	ldr	r3, [pc, #92]	; (8009f8c <Setup0_Process+0x2d0>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8009f34:	6834      	ldr	r4, [r6, #0]
 8009f36:	7962      	ldrb	r2, [r4, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8009f38:	78e3      	ldrb	r3, [r4, #3]
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8009f3a:	72e2      	strb	r2, [r4, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8009f3c:	7323      	strb	r3, [r4, #12]
 8009f3e:	e76b      	b.n	8009e18 <Setup0_Process+0x15c>
 8009f40:	4a09      	ldr	r2, [pc, #36]	; (8009f68 <Setup0_Process+0x2ac>)
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8009f42:	9901      	ldr	r1, [sp, #4]
 8009f44:	6812      	ldr	r2, [r2, #0]
 8009f46:	8219      	strh	r1, [r3, #16]
 8009f48:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8009f4c:	e7d1      	b.n	8009ef2 <Setup0_Process+0x236>
      pInformation->ControlState = PAUSE;
 8009f4e:	2209      	movs	r2, #9
 8009f50:	6833      	ldr	r3, [r6, #0]
 8009f52:	721a      	strb	r2, [r3, #8]
 8009f54:	e712      	b.n	8009d7c <Setup0_Process+0xc0>
        CopyRoutine = pProperty->GetConfigDescriptor;
 8009f56:	682b      	ldr	r3, [r5, #0]
 8009f58:	6a1b      	ldr	r3, [r3, #32]
 8009f5a:	e77b      	b.n	8009e54 <Setup0_Process+0x198>
 8009f5c:	20001ddc 	.word	0x20001ddc
 8009f60:	40005c50 	.word	0x40005c50
 8009f64:	20003004 	.word	0x20003004
 8009f68:	20001db4 	.word	0x20001db4
 8009f6c:	2000006c 	.word	0x2000006c
 8009f70:	20001de2 	.word	0x20001de2
 8009f74:	20001de4 	.word	0x20001de4
 8009f78:	080099a9 	.word	0x080099a9
 8009f7c:	20003002 	.word	0x20003002
 8009f80:	080099f9 	.word	0x080099f9
 8009f84:	080099d1 	.word	0x080099d1
 8009f88:	200016b0 	.word	0x200016b0
 8009f8c:	20001dd8 	.word	0x20001dd8
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8009f90:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f6ff aeef 	blt.w	8009d78 <Setup0_Process+0xbc>
 8009f9a:	78a3      	ldrb	r3, [r4, #2]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f47f aeeb 	bne.w	8009d78 <Setup0_Process+0xbc>
          || (pInformation->USBwIndex != 0)
 8009fa2:	88a3      	ldrh	r3, [r4, #4]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f47f aee7 	bne.w	8009d78 <Setup0_Process+0xbc>
          || (pInformation->Current_Configuration != 0))
 8009faa:	7aa3      	ldrb	r3, [r4, #10]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f43f af33 	beq.w	8009e18 <Setup0_Process+0x15c>
 8009fb2:	e6e1      	b.n	8009d78 <Setup0_Process+0xbc>
    if (RequestNo == CLEAR_FEATURE)
 8009fb4:	2f01      	cmp	r7, #1
 8009fb6:	f43f af2a 	beq.w	8009e0e <Setup0_Process+0x152>
    else if (RequestNo == SET_FEATURE)
 8009fba:	2f03      	cmp	r7, #3
 8009fbc:	f47f aed1 	bne.w	8009d62 <Setup0_Process+0xa6>
      Result = Standard_SetEndPointFeature();
 8009fc0:	f7ff fe24 	bl	8009c0c <Standard_SetEndPointFeature>
 8009fc4:	e725      	b.n	8009e12 <Setup0_Process+0x156>
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 8009fc6:	78e3      	ldrb	r3, [r4, #3]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	f47f aeca 	bne.w	8009d62 <Setup0_Process+0xa6>
          && (pInformation->USBwIndex == 0)
 8009fce:	88a3      	ldrh	r3, [r4, #4]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f47f aec6 	bne.w	8009d62 <Setup0_Process+0xa6>
          && (ValBit(pInformation->Current_Feature, 5)))
 8009fd6:	7a63      	ldrb	r3, [r4, #9]
 8009fd8:	069a      	lsls	r2, r3, #26
 8009fda:	f57f aec2 	bpl.w	8009d62 <Setup0_Process+0xa6>
  pUser_Standard_Requests->User_SetDeviceFeature();
 8009fde:	4a32      	ldr	r2, [pc, #200]	; (800a0a8 <Setup0_Process+0x3ec>)
  SetBit(pInformation->Current_Feature, 5);
 8009fe0:	f043 0320 	orr.w	r3, r3, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 8009fe4:	6812      	ldr	r2, [r2, #0]
  SetBit(pInformation->Current_Feature, 5);
 8009fe6:	7263      	strb	r3, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8009fe8:	69d3      	ldr	r3, [r2, #28]
 8009fea:	4798      	blx	r3
 8009fec:	6834      	ldr	r4, [r6, #0]
 8009fee:	e713      	b.n	8009e18 <Setup0_Process+0x15c>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8009ff0:	4a2e      	ldr	r2, [pc, #184]	; (800a0ac <Setup0_Process+0x3f0>)
  if ((pInformation->USBwValue0 <=
 8009ff2:	78e3      	ldrb	r3, [r4, #3]
 8009ff4:	7852      	ldrb	r2, [r2, #1]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	f4ff aeb3 	bcc.w	8009d62 <Setup0_Process+0xa6>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8009ffc:	78a2      	ldrb	r2, [r4, #2]
 8009ffe:	2a00      	cmp	r2, #0
 800a000:	f47f aeaf 	bne.w	8009d62 <Setup0_Process+0xa6>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 800a004:	88a2      	ldrh	r2, [r4, #4]
 800a006:	2a00      	cmp	r2, #0
 800a008:	f47f aeab 	bne.w	8009d62 <Setup0_Process+0xa6>
    pUser_Standard_Requests->User_SetConfiguration();
 800a00c:	4a26      	ldr	r2, [pc, #152]	; (800a0a8 <Setup0_Process+0x3ec>)
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800a00e:	72a3      	strb	r3, [r4, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800a010:	6813      	ldr	r3, [r2, #0]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	4798      	blx	r3
 800a016:	6834      	ldr	r4, [r6, #0]
 800a018:	e6fe      	b.n	8009e18 <Setup0_Process+0x15c>
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800a01a:	682b      	ldr	r3, [r5, #0]
 800a01c:	69db      	ldr	r3, [r3, #28]
 800a01e:	e719      	b.n	8009e54 <Setup0_Process+0x198>
 800a020:	6834      	ldr	r4, [r6, #0]
    if (Result == USB_NOT_READY)
 800a022:	2309      	movs	r3, #9
 800a024:	e6a9      	b.n	8009d7a <Setup0_Process+0xbe>
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800a026:	2801      	cmp	r0, #1
 800a028:	d02d      	beq.n	800a086 <Setup0_Process+0x3ca>
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800a02a:	2802      	cmp	r0, #2
 800a02c:	d011      	beq.n	800a052 <Setup0_Process+0x396>
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a02e:	2000      	movs	r0, #0
 800a030:	e674      	b.n	8009d1c <Setup0_Process+0x60>
 800a032:	4a1f      	ldr	r2, [pc, #124]	; (800a0b0 <Setup0_Process+0x3f4>)
 800a034:	6812      	ldr	r2, [r2, #0]
 800a036:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a03a:	e75a      	b.n	8009ef2 <Setup0_Process+0x236>
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800a03c:	fb92 f4f0 	sdiv	r4, r2, r0
 800a040:	fb00 2214 	mls	r2, r0, r4, r2
 800a044:	2a00      	cmp	r2, #0
 800a046:	f47f af54 	bne.w	8009ef2 <Setup0_Process+0x236>
        Data_Mul_MaxPacketSize = TRUE;
 800a04a:	2001      	movs	r0, #1
 800a04c:	4a19      	ldr	r2, [pc, #100]	; (800a0b4 <Setup0_Process+0x3f8>)
 800a04e:	6010      	str	r0, [r2, #0]
 800a050:	e74f      	b.n	8009ef2 <Setup0_Process+0x236>
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800a052:	7960      	ldrb	r0, [r4, #5]
 800a054:	f000 020f 	and.w	r2, r0, #15
        Status = _GetEPTxStatus(Related_Endpoint);
 800a058:	0093      	lsls	r3, r2, #2
      if (ValBit(pInformation->USBwIndex0, 7))
 800a05a:	0601      	lsls	r1, r0, #24
        Status = _GetEPTxStatus(Related_Endpoint);
 800a05c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a060:	4912      	ldr	r1, [pc, #72]	; (800a0ac <Setup0_Process+0x3f0>)
        Status = _GetEPTxStatus(Related_Endpoint);
 800a062:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800a066:	681b      	ldr	r3, [r3, #0]
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a068:	7809      	ldrb	r1, [r1, #0]
        Status = _GetEPTxStatus(Related_Endpoint);
 800a06a:	bf4c      	ite	mi
 800a06c:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
        Status = _GetEPRxStatus(Related_Endpoint);
 800a070:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a074:	428a      	cmp	r2, r1
 800a076:	d2da      	bcs.n	800a02e <Setup0_Process+0x372>
 800a078:	f010 0070 	ands.w	r0, r0, #112	; 0x70
 800a07c:	d1d7      	bne.n	800a02e <Setup0_Process+0x372>
          && (Status != 0))
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f47f aeff 	bne.w	8009e82 <Setup0_Process+0x1c6>
 800a084:	e64a      	b.n	8009d1c <Setup0_Process+0x60>
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 800a086:	4d0a      	ldr	r5, [pc, #40]	; (800a0b0 <Setup0_Process+0x3f4>)
 800a088:	7960      	ldrb	r0, [r4, #5]
 800a08a:	682b      	ldr	r3, [r5, #0]
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	4798      	blx	r3
 800a090:	b930      	cbnz	r0, 800a0a0 <Setup0_Process+0x3e4>
          && (pInformation->Current_Configuration != 0))
 800a092:	6834      	ldr	r4, [r6, #0]
 800a094:	7aa3      	ldrb	r3, [r4, #10]
 800a096:	2b00      	cmp	r3, #0
 800a098:	f47f aef3 	bne.w	8009e82 <Setup0_Process+0x1c6>
 800a09c:	7860      	ldrb	r0, [r4, #1]
 800a09e:	e63e      	b.n	8009d1e <Setup0_Process+0x62>
 800a0a0:	6833      	ldr	r3, [r6, #0]
 800a0a2:	7858      	ldrb	r0, [r3, #1]
 800a0a4:	e63b      	b.n	8009d1e <Setup0_Process+0x62>
 800a0a6:	bf00      	nop
 800a0a8:	20001dd8 	.word	0x20001dd8
 800a0ac:	2000009c 	.word	0x2000009c
 800a0b0:	20001db4 	.word	0x20001db4
 800a0b4:	200016b0 	.word	0x200016b0

0800a0b8 <In0_Process>:
{
 800a0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800a0ba:	4c29      	ldr	r4, [pc, #164]	; (800a160 <In0_Process+0xa8>)
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	7a1a      	ldrb	r2, [r3, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800a0c0:	2a02      	cmp	r2, #2
 800a0c2:	d026      	beq.n	800a112 <In0_Process+0x5a>
 800a0c4:	2a04      	cmp	r2, #4
 800a0c6:	d024      	beq.n	800a112 <In0_Process+0x5a>
  else if (ControlState == WAIT_STATUS_IN)
 800a0c8:	2a06      	cmp	r2, #6
 800a0ca:	d018      	beq.n	800a0fe <In0_Process+0x46>
 800a0cc:	2108      	movs	r1, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a0ce:	4a25      	ldr	r2, [pc, #148]	; (800a164 <In0_Process+0xac>)
  pInformation->ControlState = ControlState;
 800a0d0:	7219      	strb	r1, [r3, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a0d8:	f000 faee 	bl	800a6b8 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	7a18      	ldrb	r0, [r3, #8]
 800a0e0:	2808      	cmp	r0, #8
 800a0e2:	d106      	bne.n	800a0f2 <In0_Process+0x3a>
    vSetEPRxStatus(EP_RX_STALL);
 800a0e4:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 800a0e8:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 800a0ea:	491f      	ldr	r1, [pc, #124]	; (800a168 <In0_Process+0xb0>)
    vSetEPTxStatus(EP_TX_STALL);
 800a0ec:	4b1f      	ldr	r3, [pc, #124]	; (800a16c <In0_Process+0xb4>)
    vSetEPRxStatus(EP_RX_STALL);
 800a0ee:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800a0f0:	801a      	strh	r2, [r3, #0]
}
 800a0f2:	f1a0 0009 	sub.w	r0, r0, #9
 800a0f6:	fab0 f080 	clz	r0, r0
 800a0fa:	0940      	lsrs	r0, r0, #5
 800a0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800a0fe:	785a      	ldrb	r2, [r3, #1]
 800a100:	2a05      	cmp	r2, #5
 800a102:	d00b      	beq.n	800a11c <In0_Process+0x64>
    (*pProperty->Process_Status_IN)();
 800a104:	4b1a      	ldr	r3, [pc, #104]	; (800a170 <In0_Process+0xb8>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	4798      	blx	r3
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	2108      	movs	r1, #8
 800a110:	e7dd      	b.n	800a0ce <In0_Process+0x16>
    DataStageIn();
 800a112:	f7ff fcb9 	bl	8009a88 <DataStageIn>
    ControlState = pInformation->ControlState;
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	7a19      	ldrb	r1, [r3, #8]
 800a11a:	e7d8      	b.n	800a0ce <In0_Process+0x16>
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800a11c:	781a      	ldrb	r2, [r3, #0]
 800a11e:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 800a122:	d1ef      	bne.n	800a104 <In0_Process+0x4c>
{
#ifdef STM32F10X_CL 
  PCD_EP_SetAddress ((uint8_t)Val);
#else 
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a124:	4913      	ldr	r1, [pc, #76]	; (800a174 <In0_Process+0xbc>)
      SetDeviceAddress(pInformation->USBwValue0);
 800a126:	f893 e003 	ldrb.w	lr, [r3, #3]
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a12a:	780d      	ldrb	r5, [r1, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800a12c:	b175      	cbz	r5, 800a14c <In0_Process+0x94>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a12e:	f640 770f 	movw	r7, #3855	; 0xf0f
 800a132:	f248 0680 	movw	r6, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 800a136:	4910      	ldr	r1, [pc, #64]	; (800a178 <In0_Process+0xc0>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a138:	680b      	ldr	r3, [r1, #0]
 800a13a:	ea42 0006 	orr.w	r0, r2, r6
 800a13e:	403b      	ands	r3, r7
  for (i = 0; i < nEP; i++)
 800a140:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a142:	4303      	orrs	r3, r0
  for (i = 0; i < nEP; i++)
 800a144:	4295      	cmp	r5, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a146:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 800a14a:	d1f5      	bne.n	800a138 <In0_Process+0x80>
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a14c:	490b      	ldr	r1, [pc, #44]	; (800a17c <In0_Process+0xc4>)
      pUser_Standard_Requests->User_SetDeviceAddress();
 800a14e:	4a0c      	ldr	r2, [pc, #48]	; (800a180 <In0_Process+0xc8>)
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a150:	f04e 0380 	orr.w	r3, lr, #128	; 0x80
 800a154:	600b      	str	r3, [r1, #0]
      pUser_Standard_Requests->User_SetDeviceAddress();
 800a156:	6813      	ldr	r3, [r2, #0]
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	4798      	blx	r3
 800a15c:	e7d2      	b.n	800a104 <In0_Process+0x4c>
 800a15e:	bf00      	nop
 800a160:	20001ddc 	.word	0x20001ddc
 800a164:	2000006c 	.word	0x2000006c
 800a168:	20001de2 	.word	0x20001de2
 800a16c:	20001de4 	.word	0x20001de4
 800a170:	20001db4 	.word	0x20001db4
 800a174:	2000009c 	.word	0x2000009c
 800a178:	40005c00 	.word	0x40005c00
 800a17c:	40005c4c 	.word	0x40005c4c
 800a180:	20001dd8 	.word	0x20001dd8

0800a184 <Out0_Process>:
{
 800a184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800a186:	4d3c      	ldr	r5, [pc, #240]	; (800a278 <Out0_Process+0xf4>)
 800a188:	682c      	ldr	r4, [r5, #0]
 800a18a:	7a23      	ldrb	r3, [r4, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d007      	beq.n	800a1a0 <Out0_Process+0x1c>
 800a190:	2b04      	cmp	r3, #4
 800a192:	d005      	beq.n	800a1a0 <Out0_Process+0x1c>
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800a194:	2b03      	cmp	r3, #3
 800a196:	d01c      	beq.n	800a1d2 <Out0_Process+0x4e>
 800a198:	2b05      	cmp	r3, #5
 800a19a:	d01a      	beq.n	800a1d2 <Out0_Process+0x4e>
  else if (ControlState == WAIT_STATUS_OUT)
 800a19c:	2b07      	cmp	r3, #7
 800a19e:	d049      	beq.n	800a234 <Out0_Process+0xb0>
 800a1a0:	2308      	movs	r3, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a1a2:	4a36      	ldr	r2, [pc, #216]	; (800a27c <Out0_Process+0xf8>)
  pInformation->ControlState = ControlState;
 800a1a4:	7223      	strb	r3, [r4, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a1ac:	f000 fa84 	bl	800a6b8 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 800a1b0:	682b      	ldr	r3, [r5, #0]
 800a1b2:	7a18      	ldrb	r0, [r3, #8]
 800a1b4:	2808      	cmp	r0, #8
 800a1b6:	d106      	bne.n	800a1c6 <Out0_Process+0x42>
    vSetEPRxStatus(EP_RX_STALL);
 800a1b8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 800a1bc:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 800a1be:	4930      	ldr	r1, [pc, #192]	; (800a280 <Out0_Process+0xfc>)
    vSetEPTxStatus(EP_TX_STALL);
 800a1c0:	4b30      	ldr	r3, [pc, #192]	; (800a284 <Out0_Process+0x100>)
    vSetEPRxStatus(EP_RX_STALL);
 800a1c2:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800a1c4:	801a      	strh	r2, [r3, #0]
  return Post0_Process();
 800a1c6:	f1a0 0009 	sub.w	r0, r0, #9
 800a1ca:	fab0 f080 	clz	r0, r0
 800a1ce:	0940      	lsrs	r0, r0, #5
}
 800a1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (pEPinfo->CopyData && save_rLength)
 800a1d2:	69a3      	ldr	r3, [r4, #24]
  save_rLength = pEPinfo->Usb_rLength;
 800a1d4:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->CopyData && save_rLength)
 800a1d6:	b1bb      	cbz	r3, 800a208 <Out0_Process+0x84>
 800a1d8:	2a00      	cmp	r2, #0
 800a1da:	d032      	beq.n	800a242 <Out0_Process+0xbe>
    Length = pEPinfo->PacketSize;
 800a1dc:	8aa6      	ldrh	r6, [r4, #20]
    Buffer = (*pEPinfo->CopyData)(Length);
 800a1de:	4296      	cmp	r6, r2
 800a1e0:	bf28      	it	cs
 800a1e2:	4616      	movcs	r6, r2
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 800a1e8:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800a1ea:	8a63      	ldrh	r3, [r4, #18]
    pEPinfo->Usb_rLength -= Length;
 800a1ec:	1b92      	subs	r2, r2, r6
    pEPinfo->Usb_rOffset += Length;
 800a1ee:	4433      	add	r3, r6
    Buffer = (*pEPinfo->CopyData)(Length);
 800a1f0:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 800a1f2:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800a1f4:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	f000 fa42 	bl	800a680 <GetEPRxAddr>
 800a1fc:	4632      	mov	r2, r6
 800a1fe:	4601      	mov	r1, r0
 800a200:	4638      	mov	r0, r7
 800a202:	f000 f959 	bl	800a4b8 <PMAToUserBufferCopy>
 800a206:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->Usb_rLength != 0)
 800a208:	b302      	cbz	r2, 800a24c <Out0_Process+0xc8>
    SetEPTxCount(ENDP0, 0);
 800a20a:	2100      	movs	r1, #0
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800a20c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a210:	4b1b      	ldr	r3, [pc, #108]	; (800a280 <Out0_Process+0xfc>)
    SetEPTxCount(ENDP0, 0);
 800a212:	4608      	mov	r0, r1
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800a214:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800a216:	f000 fa41 	bl	800a69c <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a21a:	2230      	movs	r2, #48	; 0x30
 800a21c:	8a23      	ldrh	r3, [r4, #16]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a21e:	8aa1      	ldrh	r1, [r4, #20]
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a220:	4818      	ldr	r0, [pc, #96]	; (800a284 <Out0_Process+0x100>)
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a222:	4299      	cmp	r1, r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a224:	8002      	strh	r2, [r0, #0]
 800a226:	682a      	ldr	r2, [r5, #0]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a228:	d922      	bls.n	800a270 <Out0_Process+0xec>
    if (pEPinfo->Usb_rLength > 0)
 800a22a:	b31b      	cbz	r3, 800a274 <Out0_Process+0xf0>
      pInformation->ControlState = LAST_OUT_DATA;
 800a22c:	2305      	movs	r3, #5
 800a22e:	4614      	mov	r4, r2
 800a230:	7213      	strb	r3, [r2, #8]
 800a232:	e7b6      	b.n	800a1a2 <Out0_Process+0x1e>
    (*pProperty->Process_Status_OUT)();
 800a234:	4b14      	ldr	r3, [pc, #80]	; (800a288 <Out0_Process+0x104>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	4798      	blx	r3
 800a23c:	682c      	ldr	r4, [r5, #0]
 800a23e:	2308      	movs	r3, #8
 800a240:	e7af      	b.n	800a1a2 <Out0_Process+0x1e>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a242:	8aa3      	ldrh	r3, [r4, #20]
 800a244:	b933      	cbnz	r3, 800a254 <Out0_Process+0xd0>
    pInformation->ControlState = OUT_DATA;
 800a246:	2303      	movs	r3, #3
 800a248:	7223      	strb	r3, [r4, #8]
 800a24a:	e7aa      	b.n	800a1a2 <Out0_Process+0x1e>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a24c:	8aa3      	ldrh	r3, [r4, #20]
 800a24e:	682c      	ldr	r4, [r5, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d0f8      	beq.n	800a246 <Out0_Process+0xc2>
 800a254:	480b      	ldr	r0, [pc, #44]	; (800a284 <Out0_Process+0x100>)
      pInformation->ControlState = WAIT_STATUS_IN;
 800a256:	2306      	movs	r3, #6
      USB_StatusIn();
 800a258:	2700      	movs	r7, #0
 800a25a:	2630      	movs	r6, #48	; 0x30
 800a25c:	4a0b      	ldr	r2, [pc, #44]	; (800a28c <Out0_Process+0x108>)
      pInformation->ControlState = WAIT_STATUS_IN;
 800a25e:	7223      	strb	r3, [r4, #8]
      USB_StatusIn();
 800a260:	6811      	ldr	r1, [r2, #0]
 800a262:	4a0b      	ldr	r2, [pc, #44]	; (800a290 <Out0_Process+0x10c>)
 800a264:	b289      	uxth	r1, r1
 800a266:	440a      	add	r2, r1
 800a268:	0052      	lsls	r2, r2, #1
 800a26a:	6017      	str	r7, [r2, #0]
 800a26c:	8006      	strh	r6, [r0, #0]
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800a26e:	e798      	b.n	800a1a2 <Out0_Process+0x1e>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a270:	4614      	mov	r4, r2
 800a272:	e7e8      	b.n	800a246 <Out0_Process+0xc2>
    if (pEPinfo->Usb_rLength > 0)
 800a274:	4614      	mov	r4, r2
 800a276:	e7ee      	b.n	800a256 <Out0_Process+0xd2>
 800a278:	20001ddc 	.word	0x20001ddc
 800a27c:	2000006c 	.word	0x2000006c
 800a280:	20001de2 	.word	0x20001de2
 800a284:	20001de4 	.word	0x20001de4
 800a288:	20001db4 	.word	0x20001db4
 800a28c:	40005c50 	.word	0x40005c50
 800a290:	20003002 	.word	0x20003002

0800a294 <SetDeviceAddress>:
{
 800a294:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a296:	4b0c      	ldr	r3, [pc, #48]	; (800a2c8 <SetDeviceAddress+0x34>)
 800a298:	781d      	ldrb	r5, [r3, #0]
  for (i = 0; i < nEP; i++)
 800a29a:	b17d      	cbz	r5, 800a2bc <SetDeviceAddress+0x28>
 800a29c:	2200      	movs	r2, #0
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a29e:	f640 770f 	movw	r7, #3855	; 0xf0f
 800a2a2:	f248 0680 	movw	r6, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 800a2a6:	4909      	ldr	r1, [pc, #36]	; (800a2cc <SetDeviceAddress+0x38>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a2a8:	680b      	ldr	r3, [r1, #0]
 800a2aa:	ea42 0406 	orr.w	r4, r2, r6
 800a2ae:	403b      	ands	r3, r7
  for (i = 0; i < nEP; i++)
 800a2b0:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a2b2:	4323      	orrs	r3, r4
  for (i = 0; i < nEP; i++)
 800a2b4:	4295      	cmp	r5, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a2b6:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 800a2ba:	d1f5      	bne.n	800a2a8 <SetDeviceAddress+0x14>
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a2bc:	4b04      	ldr	r3, [pc, #16]	; (800a2d0 <SetDeviceAddress+0x3c>)
 800a2be:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800a2c2:	6018      	str	r0, [r3, #0]
#endif  /* STM32F10X_CL */  
}
 800a2c4:	bcf0      	pop	{r4, r5, r6, r7}
 800a2c6:	4770      	bx	lr
 800a2c8:	2000009c 	.word	0x2000009c
 800a2cc:	40005c00 	.word	0x40005c00
 800a2d0:	40005c4c 	.word	0x40005c4c

0800a2d4 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop

0800a2d8 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 800a2d8:	b470      	push	{r4, r5, r6}
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
 800a2da:	2602      	movs	r6, #2
  pInformation = &Device_Info;
 800a2dc:	4a06      	ldr	r2, [pc, #24]	; (800a2f8 <USB_Init+0x20>)
 800a2de:	4d07      	ldr	r5, [pc, #28]	; (800a2fc <USB_Init+0x24>)
  pProperty = &Device_Property;
 800a2e0:	4c07      	ldr	r4, [pc, #28]	; (800a300 <USB_Init+0x28>)
 800a2e2:	4b08      	ldr	r3, [pc, #32]	; (800a304 <USB_Init+0x2c>)
  pUser_Standard_Requests = &User_Standard_Requests;
 800a2e4:	4908      	ldr	r1, [pc, #32]	; (800a308 <USB_Init+0x30>)
 800a2e6:	4809      	ldr	r0, [pc, #36]	; (800a30c <USB_Init+0x34>)
  pInformation->ControlState = 2;
 800a2e8:	7216      	strb	r6, [r2, #8]
  pProperty = &Device_Property;
 800a2ea:	6023      	str	r3, [r4, #0]
  pInformation = &Device_Info;
 800a2ec:	602a      	str	r2, [r5, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 800a2ee:	681b      	ldr	r3, [r3, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 800a2f0:	6008      	str	r0, [r1, #0]
}
 800a2f2:	bc70      	pop	{r4, r5, r6}
  pProperty->Init();
 800a2f4:	4718      	bx	r3
 800a2f6:	bf00      	nop
 800a2f8:	20001dbc 	.word	0x20001dbc
 800a2fc:	20001ddc 	.word	0x20001ddc
 800a300:	20001db4 	.word	0x20001db4
 800a304:	2000006c 	.word	0x2000006c
 800a308:	20001dd8 	.word	0x20001dd8
 800a30c:	200000c0 	.word	0x200000c0

0800a310 <CTR_LP>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800a310:	2300      	movs	r3, #0
{
 800a312:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a316:	4e56      	ldr	r6, [pc, #344]	; (800a470 <CTR_LP+0x160>)
 800a318:	b084      	sub	sp, #16
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a31a:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800a488 <CTR_LP+0x178>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800a31e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800a48c <CTR_LP+0x17c>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800a322:	4f54      	ldr	r7, [pc, #336]	; (800a474 <CTR_LP+0x164>)
  __IO uint16_t wEPVal = 0;
 800a324:	f8ad 300e 	strh.w	r3, [sp, #14]
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a328:	f8d9 3000 	ldr.w	r3, [r9]
	    SaveRState = _GetENDPOINT(ENDP0);
 800a32c:	4c52      	ldr	r4, [pc, #328]	; (800a478 <CTR_LP+0x168>)
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a32e:	b299      	uxth	r1, r3
 800a330:	041b      	lsls	r3, r3, #16
	    SaveRState = _GetENDPOINT(ENDP0);
 800a332:	4d52      	ldr	r5, [pc, #328]	; (800a47c <CTR_LP+0x16c>)
	    SaveTState = SaveRState & EPTX_STAT;
 800a334:	4a52      	ldr	r2, [pc, #328]	; (800a480 <CTR_LP+0x170>)
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a336:	8031      	strh	r1, [r6, #0]
 800a338:	f140 808e 	bpl.w	800a458 <CTR_LP+0x148>
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800a33c:	8833      	ldrh	r3, [r6, #0]
 800a33e:	f003 030f 	and.w	r3, r3, #15
      wEPVal = _GetENDPOINT(EPindex);
 800a342:	0099      	lsls	r1, r3, #2
 800a344:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800a348:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800a34c:	f888 3000 	strb.w	r3, [r8]
    if (EPindex == 0)
 800a350:	2b00      	cmp	r3, #0
 800a352:	d130      	bne.n	800a3b6 <CTR_LP+0xa6>
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800a354:	f64b 7abf 	movw	sl, #49087	; 0xbfbf
	    SaveRState = _GetENDPOINT(ENDP0);
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	802b      	strh	r3, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 800a35e:	882b      	ldrh	r3, [r5, #0]
 800a360:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a364:	8013      	strh	r3, [r2, #0]
	    SaveRState &=  EPRX_STAT;	
 800a366:	882b      	ldrh	r3, [r5, #0]
 800a368:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a36c:	802b      	strh	r3, [r5, #0]
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	ea03 030a 	and.w	r3, r3, sl
 800a374:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a378:	f083 0320 	eor.w	r3, r3, #32
 800a37c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a384:	6023      	str	r3, [r4, #0]
      if ((wIstr & ISTR_DIR) == 0)
 800a386:	8833      	ldrh	r3, [r6, #0]
 800a388:	06d8      	lsls	r0, r3, #27
 800a38a:	d53c      	bpl.n	800a406 <CTR_LP+0xf6>
        wEPVal = _GetENDPOINT(ENDP0);
 800a38c:	6823      	ldr	r3, [r4, #0]
 800a38e:	b29b      	uxth	r3, r3
 800a390:	f8ad 300e 	strh.w	r3, [sp, #14]
        if ((wEPVal &EP_SETUP) != 0)
 800a394:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a398:	0519      	lsls	r1, r3, #20
 800a39a:	d460      	bmi.n	800a45e <CTR_LP+0x14e>
        else if ((wEPVal & EP_CTR_RX) != 0)
 800a39c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a3a0:	041b      	lsls	r3, r3, #16
 800a3a2:	d5c1      	bpl.n	800a328 <CTR_LP+0x18>
          _ClearEP_CTR_RX(ENDP0);
 800a3a4:	f640 718f 	movw	r1, #3983	; 0xf8f
 800a3a8:	6823      	ldr	r3, [r4, #0]
 800a3aa:	9201      	str	r2, [sp, #4]
 800a3ac:	400b      	ands	r3, r1
 800a3ae:	6023      	str	r3, [r4, #0]
          Out0_Process();
 800a3b0:	f7ff fee8 	bl	800a184 <Out0_Process>
 800a3b4:	e02f      	b.n	800a416 <CTR_LP+0x106>
      wEPVal = _GetENDPOINT(EPindex);
 800a3b6:	680a      	ldr	r2, [r1, #0]
 800a3b8:	b292      	uxth	r2, r2
 800a3ba:	f8ad 200e 	strh.w	r2, [sp, #14]
      if ((wEPVal & EP_CTR_RX) != 0)
 800a3be:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800a3c2:	0410      	lsls	r0, r2, #16
 800a3c4:	d414      	bmi.n	800a3f0 <CTR_LP+0xe0>
      if ((wEPVal & EP_CTR_TX) != 0)
 800a3c6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a3ca:	061a      	lsls	r2, r3, #24
 800a3cc:	d5ac      	bpl.n	800a328 <CTR_LP+0x18>
        _ClearEP_CTR_TX(EPindex);
 800a3ce:	f648 700f 	movw	r0, #36623	; 0x8f0f
 800a3d2:	f898 2000 	ldrb.w	r2, [r8]
 800a3d6:	0093      	lsls	r3, r2, #2
 800a3d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a3dc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800a3e0:	6819      	ldr	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 800a3e2:	3a01      	subs	r2, #1
        _ClearEP_CTR_TX(EPindex);
 800a3e4:	4001      	ands	r1, r0
        (*pEpInt_IN[EPindex-1])();
 800a3e6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
        _ClearEP_CTR_TX(EPindex);
 800a3ea:	6019      	str	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 800a3ec:	4790      	blx	r2
 800a3ee:	e79b      	b.n	800a328 <CTR_LP+0x18>
        _ClearEP_CTR_RX(EPindex);
 800a3f0:	f640 748f 	movw	r4, #3983	; 0xf8f
 800a3f4:	680a      	ldr	r2, [r1, #0]
        (*pEpInt_OUT[EPindex-1])();
 800a3f6:	4823      	ldr	r0, [pc, #140]	; (800a484 <CTR_LP+0x174>)
        _ClearEP_CTR_RX(EPindex);
 800a3f8:	4022      	ands	r2, r4
        (*pEpInt_OUT[EPindex-1])();
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        _ClearEP_CTR_RX(EPindex);
 800a400:	600a      	str	r2, [r1, #0]
        (*pEpInt_OUT[EPindex-1])();
 800a402:	4798      	blx	r3
 800a404:	e7df      	b.n	800a3c6 <CTR_LP+0xb6>
        _ClearEP_CTR_TX(ENDP0);
 800a406:	f648 710f 	movw	r1, #36623	; 0x8f0f
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	9201      	str	r2, [sp, #4]
 800a40e:	400b      	ands	r3, r1
 800a410:	6023      	str	r3, [r4, #0]
        In0_Process();
 800a412:	f7ff fe51 	bl	800a0b8 <In0_Process>
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	8829      	ldrh	r1, [r5, #0]
 800a41a:	ea03 0a0a 	and.w	sl, r3, sl
 800a41e:	9a01      	ldr	r2, [sp, #4]
 800a420:	882b      	ldrh	r3, [r5, #0]
 800a422:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 800a426:	bf18      	it	ne
 800a428:	f48a 5a80 	eorne.w	sl, sl, #4096	; 0x1000
 800a42c:	049e      	lsls	r6, r3, #18
 800a42e:	8813      	ldrh	r3, [r2, #0]
 800a430:	bf48      	it	mi
 800a432:	f48a 5a00 	eormi.w	sl, sl, #8192	; 0x2000
 800a436:	06dd      	lsls	r5, r3, #27
 800a438:	8813      	ldrh	r3, [r2, #0]
 800a43a:	bf48      	it	mi
 800a43c:	f08a 0a10 	eormi.w	sl, sl, #16
 800a440:	069c      	lsls	r4, r3, #26
 800a442:	bf48      	it	mi
 800a444:	f08a 0a20 	eormi.w	sl, sl, #32
 800a448:	f44a 4a00 	orr.w	sl, sl, #32768	; 0x8000
 800a44c:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800a450:	4a09      	ldr	r2, [pc, #36]	; (800a478 <CTR_LP+0x168>)
 800a452:	fa1f f38a 	uxth.w	r3, sl
 800a456:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800a458:	b004      	add	sp, #16
 800a45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800a45e:	f640 718f 	movw	r1, #3983	; 0xf8f
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	9201      	str	r2, [sp, #4]
 800a466:	400b      	ands	r3, r1
 800a468:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 800a46a:	f7ff fc27 	bl	8009cbc <Setup0_Process>
 800a46e:	e7d2      	b.n	800a416 <CTR_LP+0x106>
 800a470:	20001e28 	.word	0x20001e28
 800a474:	20000024 	.word	0x20000024
 800a478:	40005c00 	.word	0x40005c00
 800a47c:	20001de2 	.word	0x20001de2
 800a480:	20001de4 	.word	0x20001de4
 800a484:	20000040 	.word	0x20000040
 800a488:	40005c44 	.word	0x40005c44
 800a48c:	20001db8 	.word	0x20001db8

0800a490 <UserToPMABufferCopy>:
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800a490:	3201      	adds	r2, #1
  uint32_t i, temp1;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800a492:	1052      	asrs	r2, r2, #1
 800a494:	d00e      	beq.n	800a4b4 <UserToPMABufferCopy+0x24>
 800a496:	2300      	movs	r3, #0
{
 800a498:	b410      	push	{r4}
 800a49a:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800a49e:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
 800a4a2:	0049      	lsls	r1, r1, #1
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    *pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a4a4:	f830 4b02 	ldrh.w	r4, [r0], #2
 800a4a8:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 800a4ac:	3301      	adds	r3, #1
  for (i = n; i != 0; i--)
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d1f8      	bne.n	800a4a4 <UserToPMABufferCopy+0x14>
    pdwVal++;
    pbUsrBuf++;
  }
}
 800a4b2:	bc10      	pop	{r4}
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop

0800a4b8 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800a4b8:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800a4bc:	3201      	adds	r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800a4be:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 800a4c2:	1052      	asrs	r2, r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800a4c4:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 800a4c8:	d005      	beq.n	800a4d6 <PMAToUserBufferCopy+0x1e>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800a4ca:	f851 3b04 	ldr.w	r3, [r1], #4
  for (i = n; i != 0; i--)
 800a4ce:	3a01      	subs	r2, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800a4d0:	f820 3b02 	strh.w	r3, [r0], #2
  for (i = n; i != 0; i--)
 800a4d4:	d1f9      	bne.n	800a4ca <PMAToUserBufferCopy+0x12>
 800a4d6:	4770      	bx	lr

0800a4d8 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 800a4d8:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800a4dc:	4a01      	ldr	r2, [pc, #4]	; (800a4e4 <SetBTABLE+0xc>)
 800a4de:	4003      	ands	r3, r0
 800a4e0:	6013      	str	r3, [r2, #0]
 800a4e2:	4770      	bx	lr
 800a4e4:	40005c50 	.word	0x40005c50

0800a4e8 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 800a4e8:	0080      	lsls	r0, r0, #2
 800a4ea:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a4ee:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a4f2:	6803      	ldr	r3, [r0, #0]
 800a4f4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a4f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4fc:	4319      	orrs	r1, r3
 800a4fe:	b289      	uxth	r1, r1
 800a500:	6001      	str	r1, [r0, #0]
 800a502:	4770      	bx	lr

0800a504 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800a504:	0080      	lsls	r0, r0, #2
 800a506:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a50a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a50e:	6803      	ldr	r3, [r0, #0]
 800a510:	06ca      	lsls	r2, r1, #27
 800a512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	bf48      	it	mi
 800a51e:	f083 0310 	eormi.w	r3, r3, #16
 800a522:	068a      	lsls	r2, r1, #26
 800a524:	bf48      	it	mi
 800a526:	f083 0320 	eormi.w	r3, r3, #32
 800a52a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a52e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a532:	6003      	str	r3, [r0, #0]
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop

0800a538 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800a538:	0080      	lsls	r0, r0, #2
 800a53a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a53e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a542:	6803      	ldr	r3, [r0, #0]
 800a544:	04ca      	lsls	r2, r1, #19
 800a546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a54a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a54e:	b29b      	uxth	r3, r3
 800a550:	bf48      	it	mi
 800a552:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 800a556:	048a      	lsls	r2, r1, #18
 800a558:	bf48      	it	mi
 800a55a:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 800a55e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a566:	6003      	str	r3, [r0, #0]
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop

0800a56c <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 800a56c:	0080      	lsls	r0, r0, #2
 800a56e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a572:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a576:	6803      	ldr	r3, [r0, #0]
 800a578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a57c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a580:	b29b      	uxth	r3, r3
 800a582:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800a586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a58a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a58e:	6003      	str	r3, [r0, #0]
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop

0800a594 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 800a594:	0080      	lsls	r0, r0, #2
 800a596:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a59a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a59e:	6803      	ldr	r3, [r0, #0]
 800a5a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a5ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5b6:	6003      	str	r3, [r0, #0]
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop

0800a5bc <Clear_Status_Out>:
 800a5bc:	f640 630f 	movw	r3, #3599	; 0xe0f
 800a5c0:	0080      	lsls	r0, r0, #2
 800a5c2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a5c6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a5ca:	6802      	ldr	r2, [r0, #0]
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5d6:	6003      	str	r3, [r0, #0]
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop

0800a5dc <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 800a5dc:	0080      	lsls	r0, r0, #2
 800a5de:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a5e2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a5e6:	6803      	ldr	r3, [r0, #0]
 800a5e8:	045b      	lsls	r3, r3, #17
 800a5ea:	d508      	bpl.n	800a5fe <ClearDTOG_RX+0x22>
 800a5ec:	f640 720f 	movw	r2, #3855	; 0xf0f
 800a5f0:	6803      	ldr	r3, [r0, #0]
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5fc:	6003      	str	r3, [r0, #0]
 800a5fe:	4770      	bx	lr

0800a600 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 800a600:	0080      	lsls	r0, r0, #2
 800a602:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a606:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a60a:	6803      	ldr	r3, [r0, #0]
 800a60c:	065b      	lsls	r3, r3, #25
 800a60e:	d508      	bpl.n	800a622 <ClearDTOG_TX+0x22>
 800a610:	f640 720f 	movw	r2, #3855	; 0xf0f
 800a614:	6803      	ldr	r3, [r0, #0]
 800a616:	4013      	ands	r3, r2
 800a618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a61c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a620:	6003      	str	r3, [r0, #0]
 800a622:	4770      	bx	lr

0800a624 <SetEPTxAddr>:
 800a624:	4b06      	ldr	r3, [pc, #24]	; (800a640 <SetEPTxAddr+0x1c>)
 800a626:	0849      	lsrs	r1, r1, #1
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	0049      	lsls	r1, r1, #1
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800a632:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800a636:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800a63a:	0040      	lsls	r0, r0, #1
 800a63c:	6001      	str	r1, [r0, #0]
 800a63e:	4770      	bx	lr
 800a640:	40005c50 	.word	0x40005c50

0800a644 <SetEPRxAddr>:
 800a644:	4a05      	ldr	r2, [pc, #20]	; (800a65c <SetEPRxAddr+0x18>)
 800a646:	4b06      	ldr	r3, [pc, #24]	; (800a660 <SetEPRxAddr+0x1c>)
 800a648:	6812      	ldr	r2, [r2, #0]
 800a64a:	0849      	lsrs	r1, r1, #1
 800a64c:	b292      	uxth	r2, r2
 800a64e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a652:	4413      	add	r3, r2
 800a654:	0049      	lsls	r1, r1, #1
 800a656:	005b      	lsls	r3, r3, #1
 800a658:	6019      	str	r1, [r3, #0]
 800a65a:	4770      	bx	lr
 800a65c:	40005c50 	.word	0x40005c50
 800a660:	20003004 	.word	0x20003004

0800a664 <GetEPTxAddr>:
 800a664:	4b05      	ldr	r3, [pc, #20]	; (800a67c <GetEPTxAddr+0x18>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	b29b      	uxth	r3, r3
 800a66a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800a66e:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800a672:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800a676:	0040      	lsls	r0, r0, #1
 800a678:	8800      	ldrh	r0, [r0, #0]
 800a67a:	4770      	bx	lr
 800a67c:	40005c50 	.word	0x40005c50

0800a680 <GetEPRxAddr>:
 800a680:	4a04      	ldr	r2, [pc, #16]	; (800a694 <GetEPRxAddr+0x14>)
 800a682:	4b05      	ldr	r3, [pc, #20]	; (800a698 <GetEPRxAddr+0x18>)
 800a684:	6812      	ldr	r2, [r2, #0]
 800a686:	b292      	uxth	r2, r2
 800a688:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a68c:	4403      	add	r3, r0
 800a68e:	005b      	lsls	r3, r3, #1
 800a690:	8818      	ldrh	r0, [r3, #0]
 800a692:	4770      	bx	lr
 800a694:	40005c50 	.word	0x40005c50
 800a698:	20003004 	.word	0x20003004

0800a69c <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 800a69c:	4a04      	ldr	r2, [pc, #16]	; (800a6b0 <SetEPTxCount+0x14>)
 800a69e:	4b05      	ldr	r3, [pc, #20]	; (800a6b4 <SetEPTxCount+0x18>)
 800a6a0:	6812      	ldr	r2, [r2, #0]
 800a6a2:	b292      	uxth	r2, r2
 800a6a4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a6a8:	4403      	add	r3, r0
 800a6aa:	005b      	lsls	r3, r3, #1
 800a6ac:	6019      	str	r1, [r3, #0]
 800a6ae:	4770      	bx	lr
 800a6b0:	40005c50 	.word	0x40005c50
 800a6b4:	20003002 	.word	0x20003002

0800a6b8 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 800a6b8:	4a0e      	ldr	r2, [pc, #56]	; (800a6f4 <SetEPRxCount+0x3c>)
 800a6ba:	4b0f      	ldr	r3, [pc, #60]	; (800a6f8 <SetEPRxCount+0x40>)
 800a6bc:	6812      	ldr	r2, [r2, #0]
 800a6be:	293e      	cmp	r1, #62	; 0x3e
 800a6c0:	b292      	uxth	r2, r2
 800a6c2:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a6c6:	4403      	add	r3, r0
 800a6c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a6cc:	d90a      	bls.n	800a6e4 <SetEPRxCount+0x2c>
 800a6ce:	094a      	lsrs	r2, r1, #5
 800a6d0:	06c8      	lsls	r0, r1, #27
 800a6d2:	bf04      	itt	eq
 800a6d4:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a6d8:	b292      	uxtheq	r2, r2
 800a6da:	0292      	lsls	r2, r2, #10
 800a6dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6e0:	601a      	str	r2, [r3, #0]
 800a6e2:	4770      	bx	lr
 800a6e4:	084a      	lsrs	r2, r1, #1
 800a6e6:	07c9      	lsls	r1, r1, #31
 800a6e8:	bf48      	it	mi
 800a6ea:	3201      	addmi	r2, #1
 800a6ec:	0292      	lsls	r2, r2, #10
 800a6ee:	601a      	str	r2, [r3, #0]
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	40005c50 	.word	0x40005c50
 800a6f8:	20003006 	.word	0x20003006

0800a6fc <GetEPRxCount>:
 800a6fc:	4a05      	ldr	r2, [pc, #20]	; (800a714 <GetEPRxCount+0x18>)
 800a6fe:	4b06      	ldr	r3, [pc, #24]	; (800a718 <GetEPRxCount+0x1c>)
 800a700:	6812      	ldr	r2, [r2, #0]
 800a702:	b292      	uxth	r2, r2
 800a704:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a708:	4403      	add	r3, r0
 800a70a:	005b      	lsls	r3, r3, #1
 800a70c:	6818      	ldr	r0, [r3, #0]
 800a70e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a712:	4770      	bx	lr
 800a714:	40005c50 	.word	0x40005c50
 800a718:	20003006 	.word	0x20003006

0800a71c <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 800a71c:	b2c3      	uxtb	r3, r0
 800a71e:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 800a720:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop

0800a728 <USB_SIL_Init>:
{
#ifndef STM32F10X_CL
  
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800a728:	2000      	movs	r0, #0
  wInterrupt_Mask = IMR_MSK;
 800a72a:	f44f 4306 	mov.w	r3, #34304	; 0x8600
{
 800a72e:	b410      	push	{r4}
  wInterrupt_Mask = IMR_MSK;
 800a730:	4903      	ldr	r1, [pc, #12]	; (800a740 <USB_SIL_Init+0x18>)
  _SetISTR(0);
 800a732:	4c04      	ldr	r4, [pc, #16]	; (800a744 <USB_SIL_Init+0x1c>)
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800a734:	4a04      	ldr	r2, [pc, #16]	; (800a748 <USB_SIL_Init+0x20>)
  _SetISTR(0);
 800a736:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 800a738:	800b      	strh	r3, [r1, #0]
  OTG_DEV_Init();
  
#endif /* STM32F10X_CL */

  return 0;
}
 800a73a:	bc10      	pop	{r4}
  _SetCNTR(wInterrupt_Mask);
 800a73c:	6013      	str	r3, [r2, #0]
}
 800a73e:	4770      	bx	lr
 800a740:	20001de0 	.word	0x20001de0
 800a744:	40005c44 	.word	0x40005c44
 800a748:	40005c40 	.word	0x40005c40

0800a74c <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 800a74c:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

#ifndef STM32F10X_CL

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800a74e:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800a752:	4628      	mov	r0, r5
{
 800a754:	460e      	mov	r6, r1
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800a756:	f7ff ffd1 	bl	800a6fc <GetEPRxCount>
 800a75a:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800a75c:	4628      	mov	r0, r5
 800a75e:	f7ff ff8f 	bl	800a680 <GetEPRxAddr>
 800a762:	4622      	mov	r2, r4
 800a764:	4601      	mov	r1, r0
 800a766:	4630      	mov	r0, r6
 800a768:	f7ff fea6 	bl	800a4b8 <PMAToUserBufferCopy>
  
#endif /* STM32F10X_CL */

  /* Return the number of received data */
  return DataLength;
}
 800a76c:	4620      	mov	r0, r4
 800a76e:	bd70      	pop	{r4, r5, r6, pc}

0800a770 <Set_USBClock>:

/*******************************************************************************
 * Description    : Configures USB Clock input (48MHz)
 *******************************************************************************/
void Set_USBClock(void)
{
 800a770:	b508      	push	{r3, lr}
	/* Select USBCLK source */
	RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 800a772:	2000      	movs	r0, #0
 800a774:	f7f7 f85a 	bl	800182c <RCC_USBCLKConfig>

	/* Enable the USB clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
}
 800a778:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 800a77c:	2101      	movs	r1, #1
 800a77e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a782:	f7f7 b865 	b.w	8001850 <RCC_APB1PeriphClockCmd>
 800a786:	bf00      	nop

0800a788 <USB_Interrupts_Config>:

/*******************************************************************************
 * Description    : Configures the USB interrupts
 *******************************************************************************/
void USB_Interrupts_Config(void)
{
 800a788:	b500      	push	{lr}
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800a78a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
{
 800a78e:	b083      	sub	sp, #12
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800a790:	f7f6 fcb0 	bl	80010f4 <NVIC_PriorityGroupConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 800a794:	4b04      	ldr	r3, [pc, #16]	; (800a7a8 <USB_Interrupts_Config+0x20>)
 800a796:	a802      	add	r0, sp, #8
 800a798:	f840 3d04 	str.w	r3, [r0, #-4]!
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800a79c:	f7f6 fcb4 	bl	8001108 <NVIC_Init>
}
 800a7a0:	b003      	add	sp, #12
 800a7a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7a6:	bf00      	nop
 800a7a8:	01000114 	.word	0x01000114

0800a7ac <USB_Cable_Config>:

/*******************************************************************************
 * Description    : Software Connection/Disconnection of USB Cable
 *******************************************************************************/
void USB_Cable_Config(FunctionalState NewState)
{
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop

0800a7b0 <Get_SerialNum>:
 *******************************************************************************/
void Get_SerialNum(void)
{
	uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 800a7b0:	4a3a      	ldr	r2, [pc, #232]	; (800a89c <Get_SerialNum+0xec>)
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 800a7b2:	493b      	ldr	r1, [pc, #236]	; (800a8a0 <Get_SerialNum+0xf0>)
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 800a7b4:	4b3b      	ldr	r3, [pc, #236]	; (800a8a4 <Get_SerialNum+0xf4>)
	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 800a7b6:	6812      	ldr	r2, [r2, #0]
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 800a7b8:	6809      	ldr	r1, [r1, #0]
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 800a7ba:	681b      	ldr	r3, [r3, #0]

	Device_Serial0 += Device_Serial2;

	if (Device_Serial0 != 0)
 800a7bc:	18d2      	adds	r2, r2, r3
 800a7be:	d06c      	beq.n	800a89a <Get_SerialNum+0xea>
{
 800a7c0:	b410      	push	{r4}
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
		}

		value = value << 4;

		pbuf[2 * idx + 1] = 0;
 800a7c2:	2400      	movs	r4, #0
		if (((value >> 28)) < 0xA)
 800a7c4:	0f10      	lsrs	r0, r2, #28
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7c6:	4b38      	ldr	r3, [pc, #224]	; (800a8a8 <Get_SerialNum+0xf8>)
		if (((value >> 28)) < 0xA)
 800a7c8:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7ca:	bf94      	ite	ls
 800a7cc:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7ce:	3037      	addhi	r0, #55	; 0x37
 800a7d0:	7098      	strb	r0, [r3, #2]
		if (((value >> 28)) < 0xA)
 800a7d2:	f3c2 6003 	ubfx	r0, r2, #24, #4
 800a7d6:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7d8:	bf94      	ite	ls
 800a7da:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7dc:	3037      	addhi	r0, #55	; 0x37
 800a7de:	7118      	strb	r0, [r3, #4]
		if (((value >> 28)) < 0xA)
 800a7e0:	f3c2 5003 	ubfx	r0, r2, #20, #4
 800a7e4:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7e6:	bf94      	ite	ls
 800a7e8:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7ea:	3037      	addhi	r0, #55	; 0x37
 800a7ec:	7198      	strb	r0, [r3, #6]
		if (((value >> 28)) < 0xA)
 800a7ee:	f3c2 4003 	ubfx	r0, r2, #16, #4
 800a7f2:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a7f4:	bf94      	ite	ls
 800a7f6:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7f8:	3037      	addhi	r0, #55	; 0x37
 800a7fa:	7218      	strb	r0, [r3, #8]
		if (((value >> 28)) < 0xA)
 800a7fc:	f3c2 3003 	ubfx	r0, r2, #12, #4
 800a800:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a802:	bf94      	ite	ls
 800a804:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a806:	3037      	addhi	r0, #55	; 0x37
 800a808:	7298      	strb	r0, [r3, #10]
		if (((value >> 28)) < 0xA)
 800a80a:	f3c2 2003 	ubfx	r0, r2, #8, #4
 800a80e:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a810:	bf94      	ite	ls
 800a812:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a814:	3037      	addhi	r0, #55	; 0x37
 800a816:	7318      	strb	r0, [r3, #12]
		if (((value >> 28)) < 0xA)
 800a818:	f3c2 1003 	ubfx	r0, r2, #4, #4
 800a81c:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a81e:	bf94      	ite	ls
 800a820:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a822:	3037      	addhi	r0, #55	; 0x37
		pbuf[2 * idx + 1] = 0;
 800a824:	70dc      	strb	r4, [r3, #3]
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a826:	7398      	strb	r0, [r3, #14]
		pbuf[2 * idx + 1] = 0;
 800a828:	2400      	movs	r4, #0
 800a82a:	2000      	movs	r0, #0
 800a82c:	715c      	strb	r4, [r3, #5]
 800a82e:	73d8      	strb	r0, [r3, #15]
 800a830:	2400      	movs	r4, #0
 800a832:	2000      	movs	r0, #0
 800a834:	71dc      	strb	r4, [r3, #7]
 800a836:	7458      	strb	r0, [r3, #17]
 800a838:	2400      	movs	r4, #0
 800a83a:	2000      	movs	r0, #0
 800a83c:	725c      	strb	r4, [r3, #9]
 800a83e:	74d8      	strb	r0, [r3, #19]
 800a840:	2400      	movs	r4, #0
 800a842:	2000      	movs	r0, #0
		if (((value >> 28)) < 0xA)
 800a844:	f002 020f 	and.w	r2, r2, #15
 800a848:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a84a:	bf94      	ite	ls
 800a84c:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a84e:	3237      	addhi	r2, #55	; 0x37
 800a850:	741a      	strb	r2, [r3, #16]
		if (((value >> 28)) < 0xA)
 800a852:	0f0a      	lsrs	r2, r1, #28
 800a854:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a856:	bf94      	ite	ls
 800a858:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a85a:	3237      	addhi	r2, #55	; 0x37
 800a85c:	749a      	strb	r2, [r3, #18]
		if (((value >> 28)) < 0xA)
 800a85e:	f3c1 6203 	ubfx	r2, r1, #24, #4
 800a862:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a864:	bf94      	ite	ls
 800a866:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a868:	3237      	addhi	r2, #55	; 0x37
 800a86a:	751a      	strb	r2, [r3, #20]
		if (((value >> 28)) < 0xA)
 800a86c:	f3c1 5203 	ubfx	r2, r1, #20, #4
 800a870:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a872:	bf94      	ite	ls
 800a874:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a876:	3237      	addhi	r2, #55	; 0x37
 800a878:	759a      	strb	r2, [r3, #22]
		if (((value >> 28)) < 0xA)
 800a87a:	f3c1 4203 	ubfx	r2, r1, #16, #4
 800a87e:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800a880:	bf94      	ite	ls
 800a882:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a884:	3237      	addhi	r2, #55	; 0x37
		pbuf[2 * idx + 1] = 0;
 800a886:	72dc      	strb	r4, [r3, #11]
 800a888:	7558      	strb	r0, [r3, #21]
 800a88a:	2400      	movs	r4, #0
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a88c:	761a      	strb	r2, [r3, #24]
		pbuf[2 * idx + 1] = 0;
 800a88e:	2000      	movs	r0, #0
 800a890:	2200      	movs	r2, #0
 800a892:	735c      	strb	r4, [r3, #13]
 800a894:	75d8      	strb	r0, [r3, #23]
 800a896:	765a      	strb	r2, [r3, #25]
}
 800a898:	bc10      	pop	{r4}
 800a89a:	4770      	bx	lr
 800a89c:	1ffff7e8 	.word	0x1ffff7e8
 800a8a0:	1ffff7ec 	.word	0x1ffff7ec
 800a8a4:	1ffff7f0 	.word	0x1ffff7f0
 800a8a8:	20000008 	.word	0x20000008

0800a8ac <EP1_IN_Callback.part.0>:
	uint8_t head;

	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
	head = serial_tx_buffer_head;
	txUsbLock = 0; // this may be removed
 800a8ac:	2100      	movs	r1, #0
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800a8ae:	2001      	movs	r0, #1
void EP1_IN_Callback(void)
 800a8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800a8b2:	4b2a      	ldr	r3, [pc, #168]	; (800a95c <EP1_IN_Callback.part.0+0xb0>)

	if ((head != serial_tx_buffer_tail)) {
 800a8b4:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800a96c <EP1_IN_Callback.part.0+0xc0>
	head = serial_tx_buffer_head;
 800a8b8:	4a29      	ldr	r2, [pc, #164]	; (800a960 <EP1_IN_Callback.part.0+0xb4>)
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800a8ba:	7018      	strb	r0, [r3, #0]
	txUsbLock = 0; // this may be removed
 800a8bc:	7019      	strb	r1, [r3, #0]
	if ((head != serial_tx_buffer_tail)) {
 800a8be:	f89c 3000 	ldrb.w	r3, [ip]
	head = serial_tx_buffer_head;
 800a8c2:	7811      	ldrb	r1, [r2, #0]
	if ((head != serial_tx_buffer_tail)) {
 800a8c4:	4299      	cmp	r1, r3
 800a8c6:	d040      	beq.n	800a94a <EP1_IN_Callback.part.0+0x9e>
		if (head > serial_tx_buffer_tail)
 800a8c8:	f89c 3000 	ldrb.w	r3, [ip]
 800a8cc:	4299      	cmp	r1, r3
			USB_Tx_length = head - serial_tx_buffer_tail;
 800a8ce:	f89c 3000 	ldrb.w	r3, [ip]
		else
			USB_Tx_length = TX_BUFFER_SIZE - serial_tx_buffer_tail + head;
 800a8d2:	bf98      	it	ls
 800a8d4:	3180      	addls	r1, #128	; 0x80
 800a8d6:	1ac9      	subs	r1, r1, r3
 800a8d8:	b289      	uxth	r1, r1

		if (USB_Tx_length != 0) {
 800a8da:	2900      	cmp	r1, #0
 800a8dc:	d035      	beq.n	800a94a <EP1_IN_Callback.part.0+0x9e>
 800a8de:	2940      	cmp	r1, #64	; 0x40
				USB_Tx_length = 64;

			// UserToPMABufferCopy(&serial_tx_buffer[serial_tx_buffer_tail], ENDP1_TXADDR, USB_Tx_length);

			{
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800a8e0:	4e20      	ldr	r6, [pc, #128]	; (800a964 <EP1_IN_Callback.part.0+0xb8>)
 800a8e2:	bf28      	it	cs
 800a8e4:	2140      	movcs	r1, #64	; 0x40
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
				uint32_t i;
				uint16_t temp1;
				uint16_t *pdwVal= (uint16_t *)(ENDP1_TXADDR * 2 + PMAAddr);

				for (i = 0; i<n; i++) {
 800a8e6:	2500      	movs	r5, #0
 800a8e8:	4637      	mov	r7, r6
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800a8ea:	f89c 2000 	ldrb.w	r2, [ip]
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 800a8ee:	f101 0e01 	add.w	lr, r1, #1
 800a8f2:	4c1d      	ldr	r4, [pc, #116]	; (800a968 <EP1_IN_Callback.part.0+0xbc>)
 800a8f4:	ea4f 0e6e 	mov.w	lr, lr, asr #1
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800a8f8:	4432      	add	r2, r6
					temp1 = (uint16_t) *pbUsrBuf;
					pbUsrBuf++;
 800a8fa:	1c53      	adds	r3, r2, #1
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800a8fc:	1b98      	subs	r0, r3, r6
						pbUsrBuf = serial_tx_buffer;

					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a8fe:	2880      	cmp	r0, #128	; 0x80
 800a900:	bf08      	it	eq
 800a902:	463b      	moveq	r3, r7
 800a904:	7810      	ldrb	r0, [r2, #0]
 800a906:	f813 2b01 	ldrb.w	r2, [r3], #1
				for (i = 0; i<n; i++) {
 800a90a:	3501      	adds	r5, #1
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a90c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
					pdwVal++;
					pbUsrBuf++;
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800a910:	1b9a      	subs	r2, r3, r6
 800a912:	2a80      	cmp	r2, #128	; 0x80
 800a914:	bf14      	ite	ne
 800a916:	461a      	movne	r2, r3
 800a918:	463a      	moveq	r2, r7
				for (i = 0; i<n; i++) {
 800a91a:	45ae      	cmp	lr, r5
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a91c:	f824 0c04 	strh.w	r0, [r4, #-4]
 800a920:	f104 0404 	add.w	r4, r4, #4
				for (i = 0; i<n; i++) {
 800a924:	d8e9      	bhi.n	800a8fa <EP1_IN_Callback.part.0+0x4e>
						pbUsrBuf = serial_tx_buffer;
					}
			}

		serial_tx_buffer_tail += USB_Tx_length;
 800a926:	f89c 3000 	ldrb.w	r3, [ip]
 800a92a:	440b      	add	r3, r1
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	f88c 3000 	strb.w	r3, [ip]
		if (serial_tx_buffer_tail >= TX_BUFFER_SIZE)
 800a932:	f89c 3000 	ldrb.w	r3, [ip]
 800a936:	061b      	lsls	r3, r3, #24
 800a938:	d408      	bmi.n	800a94c <EP1_IN_Callback.part.0+0xa0>
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
		SetEPTxCount(ENDP1, USB_Tx_length);
 800a93a:	2001      	movs	r0, #1
 800a93c:	f7ff feae 	bl	800a69c <SetEPTxCount>
		SetEPTxValid(ENDP1);
		}
	}
}
 800a940:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		SetEPTxValid(ENDP1);
 800a944:	2001      	movs	r0, #1
 800a946:	f7ff be11 	b.w	800a56c <SetEPTxValid>
 800a94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
 800a94c:	f89c 3000 	ldrb.w	r3, [ip]
 800a950:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800a954:	f88c 3000 	strb.w	r3, [ip]
 800a958:	e7ef      	b.n	800a93a <EP1_IN_Callback.part.0+0x8e>
 800a95a:	bf00      	nop
 800a95c:	200016b4 	.word	0x200016b4
 800a960:	2000136c 	.word	0x2000136c
 800a964:	20001bb0 	.word	0x20001bb0
 800a968:	40006184 	.word	0x40006184
 800a96c:	2000136d 	.word	0x2000136d

0800a970 <EP3_OUT_Callback>:
{
 800a970:	b510      	push	{r4, lr}
	USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 800a972:	4c07      	ldr	r4, [pc, #28]	; (800a990 <EP3_OUT_Callback+0x20>)
 800a974:	2003      	movs	r0, #3
 800a976:	4621      	mov	r1, r4
 800a978:	f7ff fee8 	bl	800a74c <USB_SIL_Read>
	OnUsbDataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 800a97c:	b2c1      	uxtb	r1, r0
 800a97e:	4620      	mov	r0, r4
 800a980:	f7fc fc94 	bl	80072ac <OnUsbDataRx>
}
 800a984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SetEPRxValid(ENDP3);
 800a988:	2003      	movs	r0, #3
 800a98a:	f7ff be03 	b.w	800a594 <SetEPRxValid>
 800a98e:	bf00      	nop
 800a990:	20001de8 	.word	0x20001de8

0800a994 <EP1_IN_Callback>:
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 800a994:	4b04      	ldr	r3, [pc, #16]	; (800a9a8 <EP1_IN_Callback+0x14>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a99c:	2b20      	cmp	r3, #32
 800a99e:	d000      	beq.n	800a9a2 <EP1_IN_Callback+0xe>
 800a9a0:	4770      	bx	lr
 800a9a2:	f7ff bf83 	b.w	800a8ac <EP1_IN_Callback.part.0>
 800a9a6:	bf00      	nop
 800a9a8:	40005c04 	.word	0x40005c04

0800a9ac <SOF_Callback>:

/*	\brief Start Of Frame (SOF) callback
 */
void SOF_Callback(void)
{
	if(bDeviceState == CONFIGURED)
 800a9ac:	4b06      	ldr	r3, [pc, #24]	; (800a9c8 <SOF_Callback+0x1c>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2b05      	cmp	r3, #5
 800a9b2:	d000      	beq.n	800a9b6 <SOF_Callback+0xa>
 800a9b4:	4770      	bx	lr
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 800a9b6:	4b05      	ldr	r3, [pc, #20]	; (800a9cc <SOF_Callback+0x20>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a9be:	2b20      	cmp	r3, #32
 800a9c0:	d1f8      	bne.n	800a9b4 <SOF_Callback+0x8>
 800a9c2:	f7ff bf73 	b.w	800a8ac <EP1_IN_Callback.part.0>
 800a9c6:	bf00      	nop
 800a9c8:	200016b8 	.word	0x200016b8
 800a9cc:	40005c04 	.word	0x40005c04

0800a9d0 <USB_Istr>:
* Return         :
*******************************************************************************/
void USB_Istr(void)
{

  wIstr = _GetISTR();
 800a9d0:	4917      	ldr	r1, [pc, #92]	; (800aa30 <USB_Istr+0x60>)
{
 800a9d2:	b570      	push	{r4, r5, r6, lr}
  wIstr = _GetISTR();
 800a9d4:	680b      	ldr	r3, [r1, #0]
 800a9d6:	4c17      	ldr	r4, [pc, #92]	; (800aa34 <USB_Istr+0x64>)
 800a9d8:	b29b      	uxth	r3, r3

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800a9da:	4d17      	ldr	r5, [pc, #92]	; (800aa38 <USB_Istr+0x68>)
  wIstr = _GetISTR();
 800a9dc:	8023      	strh	r3, [r4, #0]
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800a9de:	8822      	ldrh	r2, [r4, #0]
 800a9e0:	882b      	ldrh	r3, [r5, #0]
 800a9e2:	401a      	ands	r2, r3
 800a9e4:	0590      	lsls	r0, r2, #22
 800a9e6:	d416      	bmi.n	800aa16 <USB_Istr+0x46>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800a9e8:	8822      	ldrh	r2, [r4, #0]
 800a9ea:	401a      	ands	r2, r3
 800a9ec:	0412      	lsls	r2, r2, #16
 800a9ee:	d40e      	bmi.n	800aa0e <USB_Istr+0x3e>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 800a9f0:	8822      	ldrh	r2, [r4, #0]
 800a9f2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800a9f6:	4213      	tst	r3, r2
 800a9f8:	d100      	bne.n	800a9fc <USB_Istr+0x2c>
 800a9fa:	bd70      	pop	{r4, r5, r6, pc}
  {
    _SetISTR((uint16_t)CLR_RESET);
 800a9fc:	f64f 31ff 	movw	r1, #64511	; 0xfbff
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 800aa00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _SetISTR((uint16_t)CLR_RESET);
 800aa04:	4a0a      	ldr	r2, [pc, #40]	; (800aa30 <USB_Istr+0x60>)
    Device_Property.Reset();
 800aa06:	4b0d      	ldr	r3, [pc, #52]	; (800aa3c <USB_Istr+0x6c>)
    _SetISTR((uint16_t)CLR_RESET);
 800aa08:	6011      	str	r1, [r2, #0]
    Device_Property.Reset();
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	4718      	bx	r3
    CTR_LP();
 800aa0e:	f7ff fc7f 	bl	800a310 <CTR_LP>
 800aa12:	882b      	ldrh	r3, [r5, #0]
 800aa14:	e7ec      	b.n	800a9f0 <USB_Istr+0x20>
    _SetISTR((uint16_t)CLR_SOF);
 800aa16:	f64f 53ff 	movw	r3, #65023	; 0xfdff
    bIntPackSOF++;
 800aa1a:	4a09      	ldr	r2, [pc, #36]	; (800aa40 <USB_Istr+0x70>)
    _SetISTR((uint16_t)CLR_SOF);
 800aa1c:	600b      	str	r3, [r1, #0]
    bIntPackSOF++;
 800aa1e:	7813      	ldrb	r3, [r2, #0]
 800aa20:	3301      	adds	r3, #1
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	7013      	strb	r3, [r2, #0]
    SOF_Callback();
 800aa26:	f7ff ffc1 	bl	800a9ac <SOF_Callback>
 800aa2a:	882b      	ldrh	r3, [r5, #0]
 800aa2c:	e7dc      	b.n	800a9e8 <USB_Istr+0x18>
 800aa2e:	bf00      	nop
 800aa30:	40005c44 	.word	0x40005c44
 800aa34:	20001e28 	.word	0x20001e28
 800aa38:	20001de0 	.word	0x20001de0
 800aa3c:	2000006c 	.word	0x2000006c
 800aa40:	200016b5 	.word	0x200016b5

0800aa44 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 800aa44:	4b03      	ldr	r3, [pc, #12]	; (800aa54 <Virtual_Com_Port_SetConfiguration+0x10>)
 800aa46:	7a9b      	ldrb	r3, [r3, #10]
 800aa48:	b113      	cbz	r3, 800aa50 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800aa4a:	2205      	movs	r2, #5
 800aa4c:	4b02      	ldr	r3, [pc, #8]	; (800aa58 <Virtual_Com_Port_SetConfiguration+0x14>)
 800aa4e:	601a      	str	r2, [r3, #0]
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	20001dbc 	.word	0x20001dbc
 800aa58:	200016b8 	.word	0x200016b8

0800aa5c <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 800aa5c:	2204      	movs	r2, #4
 800aa5e:	4b01      	ldr	r3, [pc, #4]	; (800aa64 <Virtual_Com_Port_SetDeviceAddress+0x8>)
 800aa60:	601a      	str	r2, [r3, #0]
 800aa62:	4770      	bx	lr
 800aa64:	200016b8 	.word	0x200016b8

0800aa68 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 800aa68:	4b03      	ldr	r3, [pc, #12]	; (800aa78 <Virtual_Com_Port_Status_In+0x10>)
 800aa6a:	781a      	ldrb	r2, [r3, #0]
 800aa6c:	2a20      	cmp	r2, #32
  {
    Request = 0;
 800aa6e:	bf04      	itt	eq
 800aa70:	2200      	moveq	r2, #0
 800aa72:	701a      	strbeq	r2, [r3, #0]
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	200016b6 	.word	0x200016b6

0800aa7c <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop

0800aa80 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 800aa80:	2821      	cmp	r0, #33	; 0x21
 800aa82:	d004      	beq.n	800aa8e <Virtual_Com_Port_Data_Setup+0xe>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 800aa84:	2820      	cmp	r0, #32
 800aa86:	4603      	mov	r3, r0
 800aa88:	d011      	beq.n	800aaae <Virtual_Com_Port_Data_Setup+0x2e>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 800aa8a:	2002      	movs	r0, #2
 800aa8c:	4770      	bx	lr
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800aa8e:	4b0f      	ldr	r3, [pc, #60]	; (800aacc <Virtual_Com_Port_Data_Setup+0x4c>)
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	7813      	ldrb	r3, [r2, #0]
 800aa94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa98:	2b21      	cmp	r3, #33	; 0x21
 800aa9a:	d1f6      	bne.n	800aa8a <Virtual_Com_Port_Data_Setup+0xa>
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 800aa9c:	490c      	ldr	r1, [pc, #48]	; (800aad0 <Virtual_Com_Port_Data_Setup+0x50>)
{
 800aa9e:	b510      	push	{r4, lr}
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800aaa0:	2400      	movs	r4, #0
  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800aaa2:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800aaa4:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	4788      	blx	r1
  return USB_SUCCESS;
 800aaaa:	4620      	mov	r0, r4
 800aaac:	bd10      	pop	{r4, pc}
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800aaae:	4a07      	ldr	r2, [pc, #28]	; (800aacc <Virtual_Com_Port_Data_Setup+0x4c>)
 800aab0:	6812      	ldr	r2, [r2, #0]
 800aab2:	7811      	ldrb	r1, [r2, #0]
 800aab4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800aab8:	2921      	cmp	r1, #33	; 0x21
 800aaba:	d003      	beq.n	800aac4 <Virtual_Com_Port_Data_Setup+0x44>
    Request = SET_LINE_CODING;
 800aabc:	4a05      	ldr	r2, [pc, #20]	; (800aad4 <Virtual_Com_Port_Data_Setup+0x54>)
    return USB_UNSUPPORT;
 800aabe:	2002      	movs	r0, #2
    Request = SET_LINE_CODING;
 800aac0:	7013      	strb	r3, [r2, #0]
 800aac2:	4770      	bx	lr
 800aac4:	4803      	ldr	r0, [pc, #12]	; (800aad4 <Virtual_Com_Port_Data_Setup+0x54>)
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 800aac6:	4904      	ldr	r1, [pc, #16]	; (800aad8 <Virtual_Com_Port_Data_Setup+0x58>)
    Request = SET_LINE_CODING;
 800aac8:	7003      	strb	r3, [r0, #0]
 800aaca:	e7e8      	b.n	800aa9e <Virtual_Com_Port_Data_Setup+0x1e>
 800aacc:	20001ddc 	.word	0x20001ddc
 800aad0:	0800ac65 	.word	0x0800ac65
 800aad4:	200016b6 	.word	0x200016b6
 800aad8:	0800ab11 	.word	0x0800ab11

0800aadc <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800aadc:	4b07      	ldr	r3, [pc, #28]	; (800aafc <Virtual_Com_Port_NoData_Setup+0x20>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aae6:	2b21      	cmp	r3, #33	; 0x21
 800aae8:	d001      	beq.n	800aaee <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 800aaea:	2002      	movs	r0, #2
}
 800aaec:	4770      	bx	lr
    if (RequestNo == SET_COMM_FEATURE)
 800aaee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800aaf2:	2802      	cmp	r0, #2
      return USB_SUCCESS;
 800aaf4:	bf14      	ite	ne
 800aaf6:	2002      	movne	r0, #2
 800aaf8:	2000      	moveq	r0, #0
 800aafa:	4770      	bx	lr
 800aafc:	20001ddc 	.word	0x20001ddc

0800ab00 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 800ab00:	b109      	cbz	r1, 800ab06 <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 800ab02:	2002      	movs	r0, #2
  else if (Interface > 1)
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
}
 800ab04:	4770      	bx	lr
  else if (Interface > 1)
 800ab06:	2801      	cmp	r0, #1
  return USB_SUCCESS;
 800ab08:	bf8c      	ite	hi
 800ab0a:	2002      	movhi	r0, #2
 800ab0c:	2000      	movls	r0, #0
 800ab0e:	4770      	bx	lr

0800ab10 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 800ab10:	b108      	cbz	r0, 800ab16 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 800ab12:	4803      	ldr	r0, [pc, #12]	; (800ab20 <Virtual_Com_Port_SetLineCoding+0x10>)
}
 800ab14:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800ab16:	2208      	movs	r2, #8
 800ab18:	4b02      	ldr	r3, [pc, #8]	; (800ab24 <Virtual_Com_Port_SetLineCoding+0x14>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	821a      	strh	r2, [r3, #16]
    return NULL;
 800ab1e:	4770      	bx	lr
 800ab20:	200000e4 	.word	0x200000e4
 800ab24:	20001ddc 	.word	0x20001ddc

0800ab28 <Virtual_Com_Port_init>:
{
 800ab28:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 800ab2a:	2400      	movs	r4, #0
  Get_SerialNum();
 800ab2c:	f7ff fe40 	bl	800a7b0 <Get_SerialNum>
  pInformation->Current_Configuration = 0;
 800ab30:	4b04      	ldr	r3, [pc, #16]	; (800ab44 <Virtual_Com_Port_init+0x1c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	729c      	strb	r4, [r3, #10]
  PowerOn();
 800ab36:	f000 f8a1 	bl	800ac7c <PowerOn>
  USB_SIL_Init();
 800ab3a:	f7ff fdf5 	bl	800a728 <USB_SIL_Init>
  bDeviceState = UNCONNECTED;
 800ab3e:	4b02      	ldr	r3, [pc, #8]	; (800ab48 <Virtual_Com_Port_init+0x20>)
 800ab40:	601c      	str	r4, [r3, #0]
 800ab42:	bd10      	pop	{r4, pc}
 800ab44:	20001ddc 	.word	0x20001ddc
 800ab48:	200016b8 	.word	0x200016b8

0800ab4c <Virtual_Com_Port_Reset>:
{
 800ab4c:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 800ab4e:	2400      	movs	r4, #0
 800ab50:	4b32      	ldr	r3, [pc, #200]	; (800ac1c <Virtual_Com_Port_Reset+0xd0>)
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800ab52:	4a33      	ldr	r2, [pc, #204]	; (800ac20 <Virtual_Com_Port_Reset+0xd4>)
  pInformation->Current_Configuration = 0;
 800ab54:	681b      	ldr	r3, [r3, #0]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800ab56:	79d2      	ldrb	r2, [r2, #7]
  pInformation->Current_Configuration = 0;
 800ab58:	729c      	strb	r4, [r3, #10]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800ab5a:	725a      	strb	r2, [r3, #9]
  pInformation->Current_Interface = 0;
 800ab5c:	72dc      	strb	r4, [r3, #11]
  SetBTABLE(BTABLE_ADDRESS);
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f7ff fcba 	bl	800a4d8 <SetBTABLE>
  SetEPType(ENDP0, EP_CONTROL);
 800ab64:	4620      	mov	r0, r4
 800ab66:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab6a:	f7ff fcbd 	bl	800a4e8 <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800ab6e:	4620      	mov	r0, r4
 800ab70:	2110      	movs	r1, #16
 800ab72:	f7ff fcc7 	bl	800a504 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800ab76:	4620      	mov	r0, r4
 800ab78:	2140      	movs	r1, #64	; 0x40
 800ab7a:	f7ff fd63 	bl	800a644 <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800ab7e:	2180      	movs	r1, #128	; 0x80
 800ab80:	4620      	mov	r0, r4
 800ab82:	f7ff fd4f 	bl	800a624 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 800ab86:	4620      	mov	r0, r4
 800ab88:	f7ff fd18 	bl	800a5bc <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800ab8c:	4b25      	ldr	r3, [pc, #148]	; (800ac24 <Virtual_Com_Port_Reset+0xd8>)
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800ab94:	f7ff fd90 	bl	800a6b8 <SetEPRxCount>
  SetEPRxValid(ENDP0);
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f7ff fcfb 	bl	800a594 <SetEPRxValid>
  SetEPType(ENDP1, EP_BULK);
 800ab9e:	4621      	mov	r1, r4
 800aba0:	2001      	movs	r0, #1
 800aba2:	f7ff fca1 	bl	800a4e8 <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 800aba6:	21c0      	movs	r1, #192	; 0xc0
 800aba8:	2001      	movs	r0, #1
 800abaa:	f7ff fd3b 	bl	800a624 <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800abae:	2120      	movs	r1, #32
 800abb0:	2001      	movs	r0, #1
 800abb2:	f7ff fca7 	bl	800a504 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800abb6:	4621      	mov	r1, r4
 800abb8:	2001      	movs	r0, #1
 800abba:	f7ff fcbd 	bl	800a538 <SetEPRxStatus>
  SetEPType(ENDP2, EP_INTERRUPT);
 800abbe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800abc2:	2002      	movs	r0, #2
 800abc4:	f7ff fc90 	bl	800a4e8 <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 800abc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800abcc:	2002      	movs	r0, #2
 800abce:	f7ff fd29 	bl	800a624 <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 800abd2:	4621      	mov	r1, r4
 800abd4:	2002      	movs	r0, #2
 800abd6:	f7ff fcaf 	bl	800a538 <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 800abda:	2120      	movs	r1, #32
 800abdc:	2002      	movs	r0, #2
 800abde:	f7ff fc91 	bl	800a504 <SetEPTxStatus>
  SetEPType(ENDP3, EP_BULK);
 800abe2:	4621      	mov	r1, r4
 800abe4:	2003      	movs	r0, #3
 800abe6:	f7ff fc7f 	bl	800a4e8 <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 800abea:	f44f 7188 	mov.w	r1, #272	; 0x110
 800abee:	2003      	movs	r0, #3
 800abf0:	f7ff fd28 	bl	800a644 <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 800abf4:	2140      	movs	r1, #64	; 0x40
 800abf6:	2003      	movs	r0, #3
 800abf8:	f7ff fd5e 	bl	800a6b8 <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 800abfc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800ac00:	2003      	movs	r0, #3
 800ac02:	f7ff fc99 	bl	800a538 <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 800ac06:	4621      	mov	r1, r4
 800ac08:	2003      	movs	r0, #3
 800ac0a:	f7ff fc7b 	bl	800a504 <SetEPTxStatus>
  SetDeviceAddress(0);
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f7ff fb40 	bl	800a294 <SetDeviceAddress>
  bDeviceState = ATTACHED;
 800ac14:	2201      	movs	r2, #1
 800ac16:	4b04      	ldr	r3, [pc, #16]	; (800ac28 <Virtual_Com_Port_Reset+0xdc>)
 800ac18:	601a      	str	r2, [r3, #0]
 800ac1a:	bd10      	pop	{r4, pc}
 800ac1c:	20001ddc 	.word	0x20001ddc
 800ac20:	0800c0e4 	.word	0x0800c0e4
 800ac24:	2000006c 	.word	0x2000006c
 800ac28:	200016b8 	.word	0x200016b8

0800ac2c <Virtual_Com_Port_GetDeviceDescriptor>:
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800ac2c:	4901      	ldr	r1, [pc, #4]	; (800ac34 <Virtual_Com_Port_GetDeviceDescriptor+0x8>)
 800ac2e:	f7ff b837 	b.w	8009ca0 <Standard_GetDescriptorData>
 800ac32:	bf00      	nop
 800ac34:	20000064 	.word	0x20000064

0800ac38 <Virtual_Com_Port_GetConfigDescriptor>:
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 800ac38:	4901      	ldr	r1, [pc, #4]	; (800ac40 <Virtual_Com_Port_GetConfigDescriptor+0x8>)
 800ac3a:	f7ff b831 	b.w	8009ca0 <Standard_GetDescriptorData>
 800ac3e:	bf00      	nop
 800ac40:	2000005c 	.word	0x2000005c

0800ac44 <Virtual_Com_Port_GetStringDescriptor>:
  uint8_t wValue0 = pInformation->USBwValue0;
 800ac44:	4b05      	ldr	r3, [pc, #20]	; (800ac5c <Virtual_Com_Port_GetStringDescriptor+0x18>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 800ac4a:	2b04      	cmp	r3, #4
 800ac4c:	d804      	bhi.n	800ac58 <Virtual_Com_Port_GetStringDescriptor+0x14>
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 800ac4e:	4904      	ldr	r1, [pc, #16]	; (800ac60 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 800ac50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac54:	f7ff b824 	b.w	8009ca0 <Standard_GetDescriptorData>
}
 800ac58:	2000      	movs	r0, #0
 800ac5a:	4770      	bx	lr
 800ac5c:	20001ddc 	.word	0x20001ddc
 800ac60:	200000a0 	.word	0x200000a0

0800ac64 <Virtual_Com_Port_GetLineCoding>:
 800ac64:	b108      	cbz	r0, 800ac6a <Virtual_Com_Port_GetLineCoding+0x6>
 800ac66:	4803      	ldr	r0, [pc, #12]	; (800ac74 <Virtual_Com_Port_GetLineCoding+0x10>)
 800ac68:	4770      	bx	lr
 800ac6a:	2208      	movs	r2, #8
 800ac6c:	4b02      	ldr	r3, [pc, #8]	; (800ac78 <Virtual_Com_Port_GetLineCoding+0x14>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	821a      	strh	r2, [r3, #16]
 800ac72:	4770      	bx	lr
 800ac74:	200000e4 	.word	0x200000e4
 800ac78:	20001ddc 	.word	0x20001ddc

0800ac7c <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 800ac7c:	b538      	push	{r3, r4, r5, lr}
#ifndef STM32F10X_CL
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800ac7e:	2001      	movs	r0, #1
 800ac80:	f7ff fd94 	bl	800a7ac <USB_Cable_Config>
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800ac84:	2200      	movs	r2, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800ac86:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
  _SetCNTR(wRegVal);
 800ac8a:	2001      	movs	r0, #1
 800ac8c:	4b04      	ldr	r3, [pc, #16]	; (800aca0 <PowerOn+0x24>)
  _SetISTR(0);
 800ac8e:	4d05      	ldr	r5, [pc, #20]	; (800aca4 <PowerOn+0x28>)
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800ac90:	4c05      	ldr	r4, [pc, #20]	; (800aca8 <PowerOn+0x2c>)
  _SetCNTR(wRegVal);
 800ac92:	6018      	str	r0, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
 800ac94:	601a      	str	r2, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
#endif /* STM32F10X_CL */

  return USB_SUCCESS;
}
 800ac96:	4610      	mov	r0, r2
  _SetISTR(0);
 800ac98:	602a      	str	r2, [r5, #0]
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800ac9a:	8021      	strh	r1, [r4, #0]
  _SetCNTR(wInterrupt_Mask);
 800ac9c:	6019      	str	r1, [r3, #0]
}
 800ac9e:	bd38      	pop	{r3, r4, r5, pc}
 800aca0:	40005c40 	.word	0x40005c40
 800aca4:	40005c44 	.word	0x40005c44
 800aca8:	20001de0 	.word	0x20001de0

0800acac <NMI_Handler>:
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop

0800acb0 <HardFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFault_Handler(void)
{
 800acb0:	e7fe      	b.n	800acb0 <HardFault_Handler>
 800acb2:	bf00      	nop

0800acb4 <MemManage_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManage_Handler(void)
{
 800acb4:	e7fe      	b.n	800acb4 <MemManage_Handler>
 800acb6:	bf00      	nop

0800acb8 <BusFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFault_Handler(void)
{
 800acb8:	e7fe      	b.n	800acb8 <BusFault_Handler>
 800acba:	bf00      	nop

0800acbc <UsageFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFault_Handler(void)
{
 800acbc:	e7fe      	b.n	800acbc <UsageFault_Handler>
 800acbe:	bf00      	nop

0800acc0 <SVC_Handler>:
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop

0800acc4 <DebugMon_Handler>:
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop

0800acc8 <PendSV_Handler>:
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop

0800accc <USB_LP_CAN1_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  USB_Istr();
 800accc:	f7ff be80 	b.w	800a9d0 <USB_Istr>

0800acd0 <__libc_init_array>:
 800acd0:	b570      	push	{r4, r5, r6, lr}
 800acd2:	2500      	movs	r5, #0
 800acd4:	4e0c      	ldr	r6, [pc, #48]	; (800ad08 <__libc_init_array+0x38>)
 800acd6:	4c0d      	ldr	r4, [pc, #52]	; (800ad0c <__libc_init_array+0x3c>)
 800acd8:	1ba4      	subs	r4, r4, r6
 800acda:	10a4      	asrs	r4, r4, #2
 800acdc:	42a5      	cmp	r5, r4
 800acde:	d109      	bne.n	800acf4 <__libc_init_array+0x24>
 800ace0:	f001 f8d4 	bl	800be8c <_init>
 800ace4:	2500      	movs	r5, #0
 800ace6:	4e0a      	ldr	r6, [pc, #40]	; (800ad10 <__libc_init_array+0x40>)
 800ace8:	4c0a      	ldr	r4, [pc, #40]	; (800ad14 <__libc_init_array+0x44>)
 800acea:	1ba4      	subs	r4, r4, r6
 800acec:	10a4      	asrs	r4, r4, #2
 800acee:	42a5      	cmp	r5, r4
 800acf0:	d105      	bne.n	800acfe <__libc_init_array+0x2e>
 800acf2:	bd70      	pop	{r4, r5, r6, pc}
 800acf4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800acf8:	4798      	blx	r3
 800acfa:	3501      	adds	r5, #1
 800acfc:	e7ee      	b.n	800acdc <__libc_init_array+0xc>
 800acfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad02:	4798      	blx	r3
 800ad04:	3501      	adds	r5, #1
 800ad06:	e7f2      	b.n	800acee <__libc_init_array+0x1e>
 800ad08:	0800c568 	.word	0x0800c568
 800ad0c:	0800c568 	.word	0x0800c568
 800ad10:	0800c568 	.word	0x0800c568
 800ad14:	0800c56c 	.word	0x0800c56c

0800ad18 <memcmp>:
 800ad18:	b510      	push	{r4, lr}
 800ad1a:	3901      	subs	r1, #1
 800ad1c:	4402      	add	r2, r0
 800ad1e:	4290      	cmp	r0, r2
 800ad20:	d101      	bne.n	800ad26 <memcmp+0xe>
 800ad22:	2000      	movs	r0, #0
 800ad24:	bd10      	pop	{r4, pc}
 800ad26:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ad2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad2e:	42a3      	cmp	r3, r4
 800ad30:	d0f5      	beq.n	800ad1e <memcmp+0x6>
 800ad32:	1b18      	subs	r0, r3, r4
 800ad34:	bd10      	pop	{r4, pc}

0800ad36 <memset>:
 800ad36:	4603      	mov	r3, r0
 800ad38:	4402      	add	r2, r0
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d100      	bne.n	800ad40 <memset+0xa>
 800ad3e:	4770      	bx	lr
 800ad40:	f803 1b01 	strb.w	r1, [r3], #1
 800ad44:	e7f9      	b.n	800ad3a <memset+0x4>
	...

0800ad48 <ceilf>:
 800ad48:	b570      	push	{r4, r5, r6, lr}
 800ad4a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800ad4e:	0df5      	lsrs	r5, r6, #23
 800ad50:	3d7f      	subs	r5, #127	; 0x7f
 800ad52:	2d16      	cmp	r5, #22
 800ad54:	4601      	mov	r1, r0
 800ad56:	4604      	mov	r4, r0
 800ad58:	dc26      	bgt.n	800ada8 <ceilf+0x60>
 800ad5a:	2d00      	cmp	r5, #0
 800ad5c:	da0e      	bge.n	800ad7c <ceilf+0x34>
 800ad5e:	4918      	ldr	r1, [pc, #96]	; (800adc0 <ceilf+0x78>)
 800ad60:	f7f5 fe9e 	bl	8000aa0 <__addsf3>
 800ad64:	2100      	movs	r1, #0
 800ad66:	f7f6 f95f 	bl	8001028 <__aeabi_fcmpgt>
 800ad6a:	b128      	cbz	r0, 800ad78 <ceilf+0x30>
 800ad6c:	2c00      	cmp	r4, #0
 800ad6e:	db23      	blt.n	800adb8 <ceilf+0x70>
 800ad70:	2e00      	cmp	r6, #0
 800ad72:	bf18      	it	ne
 800ad74:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 800ad78:	4621      	mov	r1, r4
 800ad7a:	e01b      	b.n	800adb4 <ceilf+0x6c>
 800ad7c:	4e11      	ldr	r6, [pc, #68]	; (800adc4 <ceilf+0x7c>)
 800ad7e:	412e      	asrs	r6, r5
 800ad80:	4230      	tst	r0, r6
 800ad82:	d017      	beq.n	800adb4 <ceilf+0x6c>
 800ad84:	490e      	ldr	r1, [pc, #56]	; (800adc0 <ceilf+0x78>)
 800ad86:	f7f5 fe8b 	bl	8000aa0 <__addsf3>
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	f7f6 f94c 	bl	8001028 <__aeabi_fcmpgt>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	d0f1      	beq.n	800ad78 <ceilf+0x30>
 800ad94:	2c00      	cmp	r4, #0
 800ad96:	bfc2      	ittt	gt
 800ad98:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 800ad9c:	fa43 f505 	asrgt.w	r5, r3, r5
 800ada0:	1964      	addgt	r4, r4, r5
 800ada2:	ea24 0406 	bic.w	r4, r4, r6
 800ada6:	e7e7      	b.n	800ad78 <ceilf+0x30>
 800ada8:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800adac:	d302      	bcc.n	800adb4 <ceilf+0x6c>
 800adae:	f7f5 fe77 	bl	8000aa0 <__addsf3>
 800adb2:	4601      	mov	r1, r0
 800adb4:	4608      	mov	r0, r1
 800adb6:	bd70      	pop	{r4, r5, r6, pc}
 800adb8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800adbc:	e7dc      	b.n	800ad78 <ceilf+0x30>
 800adbe:	bf00      	nop
 800adc0:	7149f2ca 	.word	0x7149f2ca
 800adc4:	007fffff 	.word	0x007fffff

0800adc8 <cosf>:
 800adc8:	b507      	push	{r0, r1, r2, lr}
 800adca:	4a18      	ldr	r2, [pc, #96]	; (800ae2c <cosf+0x64>)
 800adcc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800add0:	4293      	cmp	r3, r2
 800add2:	4601      	mov	r1, r0
 800add4:	dc03      	bgt.n	800adde <cosf+0x16>
 800add6:	2100      	movs	r1, #0
 800add8:	f000 fb52 	bl	800b480 <__kernel_cosf>
 800addc:	e004      	b.n	800ade8 <cosf+0x20>
 800adde:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ade2:	db04      	blt.n	800adee <cosf+0x26>
 800ade4:	f7f5 fe5a 	bl	8000a9c <__aeabi_fsub>
 800ade8:	b003      	add	sp, #12
 800adea:	f85d fb04 	ldr.w	pc, [sp], #4
 800adee:	4669      	mov	r1, sp
 800adf0:	f000 f99c 	bl	800b12c <__ieee754_rem_pio2f>
 800adf4:	f000 0203 	and.w	r2, r0, #3
 800adf8:	2a01      	cmp	r2, #1
 800adfa:	d005      	beq.n	800ae08 <cosf+0x40>
 800adfc:	2a02      	cmp	r2, #2
 800adfe:	d00a      	beq.n	800ae16 <cosf+0x4e>
 800ae00:	b972      	cbnz	r2, 800ae20 <cosf+0x58>
 800ae02:	9901      	ldr	r1, [sp, #4]
 800ae04:	9800      	ldr	r0, [sp, #0]
 800ae06:	e7e7      	b.n	800add8 <cosf+0x10>
 800ae08:	9901      	ldr	r1, [sp, #4]
 800ae0a:	9800      	ldr	r0, [sp, #0]
 800ae0c:	f000 fe5a 	bl	800bac4 <__kernel_sinf>
 800ae10:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ae14:	e7e8      	b.n	800ade8 <cosf+0x20>
 800ae16:	9901      	ldr	r1, [sp, #4]
 800ae18:	9800      	ldr	r0, [sp, #0]
 800ae1a:	f000 fb31 	bl	800b480 <__kernel_cosf>
 800ae1e:	e7f7      	b.n	800ae10 <cosf+0x48>
 800ae20:	2201      	movs	r2, #1
 800ae22:	9901      	ldr	r1, [sp, #4]
 800ae24:	9800      	ldr	r0, [sp, #0]
 800ae26:	f000 fe4d 	bl	800bac4 <__kernel_sinf>
 800ae2a:	e7dd      	b.n	800ade8 <cosf+0x20>
 800ae2c:	3f490fd8 	.word	0x3f490fd8

0800ae30 <floorf>:
 800ae30:	b570      	push	{r4, r5, r6, lr}
 800ae32:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800ae36:	0df5      	lsrs	r5, r6, #23
 800ae38:	3d7f      	subs	r5, #127	; 0x7f
 800ae3a:	2d16      	cmp	r5, #22
 800ae3c:	4601      	mov	r1, r0
 800ae3e:	4604      	mov	r4, r0
 800ae40:	dc26      	bgt.n	800ae90 <floorf+0x60>
 800ae42:	2d00      	cmp	r5, #0
 800ae44:	da0e      	bge.n	800ae64 <floorf+0x34>
 800ae46:	4917      	ldr	r1, [pc, #92]	; (800aea4 <floorf+0x74>)
 800ae48:	f7f5 fe2a 	bl	8000aa0 <__addsf3>
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	f7f6 f8eb 	bl	8001028 <__aeabi_fcmpgt>
 800ae52:	b128      	cbz	r0, 800ae60 <floorf+0x30>
 800ae54:	2c00      	cmp	r4, #0
 800ae56:	da23      	bge.n	800aea0 <floorf+0x70>
 800ae58:	4b13      	ldr	r3, [pc, #76]	; (800aea8 <floorf+0x78>)
 800ae5a:	2e00      	cmp	r6, #0
 800ae5c:	bf18      	it	ne
 800ae5e:	461c      	movne	r4, r3
 800ae60:	4621      	mov	r1, r4
 800ae62:	e01b      	b.n	800ae9c <floorf+0x6c>
 800ae64:	4e11      	ldr	r6, [pc, #68]	; (800aeac <floorf+0x7c>)
 800ae66:	412e      	asrs	r6, r5
 800ae68:	4230      	tst	r0, r6
 800ae6a:	d017      	beq.n	800ae9c <floorf+0x6c>
 800ae6c:	490d      	ldr	r1, [pc, #52]	; (800aea4 <floorf+0x74>)
 800ae6e:	f7f5 fe17 	bl	8000aa0 <__addsf3>
 800ae72:	2100      	movs	r1, #0
 800ae74:	f7f6 f8d8 	bl	8001028 <__aeabi_fcmpgt>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d0f1      	beq.n	800ae60 <floorf+0x30>
 800ae7c:	2c00      	cmp	r4, #0
 800ae7e:	bfbe      	ittt	lt
 800ae80:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800ae84:	fa43 f505 	asrlt.w	r5, r3, r5
 800ae88:	1964      	addlt	r4, r4, r5
 800ae8a:	ea24 0406 	bic.w	r4, r4, r6
 800ae8e:	e7e7      	b.n	800ae60 <floorf+0x30>
 800ae90:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ae94:	d302      	bcc.n	800ae9c <floorf+0x6c>
 800ae96:	f7f5 fe03 	bl	8000aa0 <__addsf3>
 800ae9a:	4601      	mov	r1, r0
 800ae9c:	4608      	mov	r0, r1
 800ae9e:	bd70      	pop	{r4, r5, r6, pc}
 800aea0:	2400      	movs	r4, #0
 800aea2:	e7dd      	b.n	800ae60 <floorf+0x30>
 800aea4:	7149f2ca 	.word	0x7149f2ca
 800aea8:	bf800000 	.word	0xbf800000
 800aeac:	007fffff 	.word	0x007fffff

0800aeb0 <lroundf>:
 800aeb0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800aeba:	b510      	push	{r4, lr}
 800aebc:	bfb4      	ite	lt
 800aebe:	f04f 34ff 	movlt.w	r4, #4294967295
 800aec2:	2401      	movge	r4, #1
 800aec4:	2a1e      	cmp	r2, #30
 800aec6:	dc1b      	bgt.n	800af00 <lroundf+0x50>
 800aec8:	2a00      	cmp	r2, #0
 800aeca:	da04      	bge.n	800aed6 <lroundf+0x26>
 800aecc:	3201      	adds	r2, #1
 800aece:	bf18      	it	ne
 800aed0:	2400      	movne	r4, #0
 800aed2:	4620      	mov	r0, r4
 800aed4:	bd10      	pop	{r4, pc}
 800aed6:	2a16      	cmp	r2, #22
 800aed8:	bfd8      	it	le
 800aeda:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 800aede:	f3c0 0116 	ubfx	r1, r0, #0, #23
 800aee2:	bfd8      	it	le
 800aee4:	4113      	asrle	r3, r2
 800aee6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800aeea:	bfcd      	iteet	gt
 800aeec:	3b96      	subgt	r3, #150	; 0x96
 800aeee:	185b      	addle	r3, r3, r1
 800aef0:	f1c2 0217 	rsble	r2, r2, #23
 800aef4:	fa01 f303 	lslgt.w	r3, r1, r3
 800aef8:	bfd8      	it	le
 800aefa:	40d3      	lsrle	r3, r2
 800aefc:	435c      	muls	r4, r3
 800aefe:	e7e8      	b.n	800aed2 <lroundf+0x22>
 800af00:	f7f6 f8b2 	bl	8001068 <__aeabi_f2iz>
 800af04:	4604      	mov	r4, r0
 800af06:	e7e4      	b.n	800aed2 <lroundf+0x22>

0800af08 <sinf>:
 800af08:	b507      	push	{r0, r1, r2, lr}
 800af0a:	4a19      	ldr	r2, [pc, #100]	; (800af70 <sinf+0x68>)
 800af0c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800af10:	4293      	cmp	r3, r2
 800af12:	4601      	mov	r1, r0
 800af14:	dc04      	bgt.n	800af20 <sinf+0x18>
 800af16:	2200      	movs	r2, #0
 800af18:	2100      	movs	r1, #0
 800af1a:	f000 fdd3 	bl	800bac4 <__kernel_sinf>
 800af1e:	e004      	b.n	800af2a <sinf+0x22>
 800af20:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800af24:	db04      	blt.n	800af30 <sinf+0x28>
 800af26:	f7f5 fdb9 	bl	8000a9c <__aeabi_fsub>
 800af2a:	b003      	add	sp, #12
 800af2c:	f85d fb04 	ldr.w	pc, [sp], #4
 800af30:	4669      	mov	r1, sp
 800af32:	f000 f8fb 	bl	800b12c <__ieee754_rem_pio2f>
 800af36:	f000 0003 	and.w	r0, r0, #3
 800af3a:	2801      	cmp	r0, #1
 800af3c:	d006      	beq.n	800af4c <sinf+0x44>
 800af3e:	2802      	cmp	r0, #2
 800af40:	d009      	beq.n	800af56 <sinf+0x4e>
 800af42:	b980      	cbnz	r0, 800af66 <sinf+0x5e>
 800af44:	2201      	movs	r2, #1
 800af46:	9901      	ldr	r1, [sp, #4]
 800af48:	9800      	ldr	r0, [sp, #0]
 800af4a:	e7e6      	b.n	800af1a <sinf+0x12>
 800af4c:	9901      	ldr	r1, [sp, #4]
 800af4e:	9800      	ldr	r0, [sp, #0]
 800af50:	f000 fa96 	bl	800b480 <__kernel_cosf>
 800af54:	e7e9      	b.n	800af2a <sinf+0x22>
 800af56:	2201      	movs	r2, #1
 800af58:	9901      	ldr	r1, [sp, #4]
 800af5a:	9800      	ldr	r0, [sp, #0]
 800af5c:	f000 fdb2 	bl	800bac4 <__kernel_sinf>
 800af60:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800af64:	e7e1      	b.n	800af2a <sinf+0x22>
 800af66:	9901      	ldr	r1, [sp, #4]
 800af68:	9800      	ldr	r0, [sp, #0]
 800af6a:	f000 fa89 	bl	800b480 <__kernel_cosf>
 800af6e:	e7f7      	b.n	800af60 <sinf+0x58>
 800af70:	3f490fd8 	.word	0x3f490fd8

0800af74 <atan2f>:
 800af74:	f000 b84a 	b.w	800b00c <__ieee754_atan2f>

0800af78 <sqrtf>:
 800af78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af7a:	b08b      	sub	sp, #44	; 0x2c
 800af7c:	4604      	mov	r4, r0
 800af7e:	f000 fa2d 	bl	800b3dc <__ieee754_sqrtf>
 800af82:	4b20      	ldr	r3, [pc, #128]	; (800b004 <sqrtf+0x8c>)
 800af84:	4606      	mov	r6, r0
 800af86:	f993 5000 	ldrsb.w	r5, [r3]
 800af8a:	1c6b      	adds	r3, r5, #1
 800af8c:	d02a      	beq.n	800afe4 <sqrtf+0x6c>
 800af8e:	4621      	mov	r1, r4
 800af90:	4620      	mov	r0, r4
 800af92:	f7f6 f853 	bl	800103c <__aeabi_fcmpun>
 800af96:	4607      	mov	r7, r0
 800af98:	bb20      	cbnz	r0, 800afe4 <sqrtf+0x6c>
 800af9a:	2100      	movs	r1, #0
 800af9c:	4620      	mov	r0, r4
 800af9e:	f7f6 f825 	bl	8000fec <__aeabi_fcmplt>
 800afa2:	b1f8      	cbz	r0, 800afe4 <sqrtf+0x6c>
 800afa4:	2301      	movs	r3, #1
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	4b17      	ldr	r3, [pc, #92]	; (800b008 <sqrtf+0x90>)
 800afaa:	4620      	mov	r0, r4
 800afac:	9301      	str	r3, [sp, #4]
 800afae:	9708      	str	r7, [sp, #32]
 800afb0:	f7f5 fa32 	bl	8000418 <__aeabi_f2d>
 800afb4:	2200      	movs	r2, #0
 800afb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afbe:	2300      	movs	r3, #0
 800afc0:	b99d      	cbnz	r5, 800afea <sqrtf+0x72>
 800afc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800afc6:	4668      	mov	r0, sp
 800afc8:	f000 fdf2 	bl	800bbb0 <matherr>
 800afcc:	b1a8      	cbz	r0, 800affa <sqrtf+0x82>
 800afce:	9b08      	ldr	r3, [sp, #32]
 800afd0:	b11b      	cbz	r3, 800afda <sqrtf+0x62>
 800afd2:	f000 ff55 	bl	800be80 <__errno>
 800afd6:	9b08      	ldr	r3, [sp, #32]
 800afd8:	6003      	str	r3, [r0, #0]
 800afda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afde:	f7f5 fd09 	bl	80009f4 <__aeabi_d2f>
 800afe2:	4606      	mov	r6, r0
 800afe4:	4630      	mov	r0, r6
 800afe6:	b00b      	add	sp, #44	; 0x2c
 800afe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afea:	4610      	mov	r0, r2
 800afec:	4619      	mov	r1, r3
 800afee:	f7f5 fb91 	bl	8000714 <__aeabi_ddiv>
 800aff2:	2d02      	cmp	r5, #2
 800aff4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aff8:	d1e5      	bne.n	800afc6 <sqrtf+0x4e>
 800affa:	f000 ff41 	bl	800be80 <__errno>
 800affe:	2321      	movs	r3, #33	; 0x21
 800b000:	6003      	str	r3, [r0, #0]
 800b002:	e7e4      	b.n	800afce <sqrtf+0x56>
 800b004:	200000ec 	.word	0x200000ec
 800b008:	0800c172 	.word	0x0800c172

0800b00c <__ieee754_atan2f>:
 800b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b012:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b016:	4603      	mov	r3, r0
 800b018:	dc05      	bgt.n	800b026 <__ieee754_atan2f+0x1a>
 800b01a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b01e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b022:	4607      	mov	r7, r0
 800b024:	dd04      	ble.n	800b030 <__ieee754_atan2f+0x24>
 800b026:	4618      	mov	r0, r3
 800b028:	f7f5 fd3a 	bl	8000aa0 <__addsf3>
 800b02c:	4603      	mov	r3, r0
 800b02e:	e010      	b.n	800b052 <__ieee754_atan2f+0x46>
 800b030:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800b034:	d103      	bne.n	800b03e <__ieee754_atan2f+0x32>
 800b036:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b03a:	f000 bdbb 	b.w	800bbb4 <atanf>
 800b03e:	178c      	asrs	r4, r1, #30
 800b040:	f004 0402 	and.w	r4, r4, #2
 800b044:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b048:	b92a      	cbnz	r2, 800b056 <__ieee754_atan2f+0x4a>
 800b04a:	2c02      	cmp	r4, #2
 800b04c:	d023      	beq.n	800b096 <__ieee754_atan2f+0x8a>
 800b04e:	2c03      	cmp	r4, #3
 800b050:	d023      	beq.n	800b09a <__ieee754_atan2f+0x8e>
 800b052:	4618      	mov	r0, r3
 800b054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b056:	b91e      	cbnz	r6, 800b060 <__ieee754_atan2f+0x54>
 800b058:	2f00      	cmp	r7, #0
 800b05a:	da53      	bge.n	800b104 <__ieee754_atan2f+0xf8>
 800b05c:	4b2a      	ldr	r3, [pc, #168]	; (800b108 <__ieee754_atan2f+0xfc>)
 800b05e:	e7f8      	b.n	800b052 <__ieee754_atan2f+0x46>
 800b060:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b064:	d11b      	bne.n	800b09e <__ieee754_atan2f+0x92>
 800b066:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b06a:	d10b      	bne.n	800b084 <__ieee754_atan2f+0x78>
 800b06c:	2c02      	cmp	r4, #2
 800b06e:	d005      	beq.n	800b07c <__ieee754_atan2f+0x70>
 800b070:	2c03      	cmp	r4, #3
 800b072:	d005      	beq.n	800b080 <__ieee754_atan2f+0x74>
 800b074:	2c01      	cmp	r4, #1
 800b076:	d141      	bne.n	800b0fc <__ieee754_atan2f+0xf0>
 800b078:	4b24      	ldr	r3, [pc, #144]	; (800b10c <__ieee754_atan2f+0x100>)
 800b07a:	e7ea      	b.n	800b052 <__ieee754_atan2f+0x46>
 800b07c:	4b24      	ldr	r3, [pc, #144]	; (800b110 <__ieee754_atan2f+0x104>)
 800b07e:	e7e8      	b.n	800b052 <__ieee754_atan2f+0x46>
 800b080:	4b24      	ldr	r3, [pc, #144]	; (800b114 <__ieee754_atan2f+0x108>)
 800b082:	e7e6      	b.n	800b052 <__ieee754_atan2f+0x46>
 800b084:	2c02      	cmp	r4, #2
 800b086:	d006      	beq.n	800b096 <__ieee754_atan2f+0x8a>
 800b088:	2c03      	cmp	r4, #3
 800b08a:	d006      	beq.n	800b09a <__ieee754_atan2f+0x8e>
 800b08c:	2c01      	cmp	r4, #1
 800b08e:	d137      	bne.n	800b100 <__ieee754_atan2f+0xf4>
 800b090:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b094:	e7dd      	b.n	800b052 <__ieee754_atan2f+0x46>
 800b096:	4b20      	ldr	r3, [pc, #128]	; (800b118 <__ieee754_atan2f+0x10c>)
 800b098:	e7db      	b.n	800b052 <__ieee754_atan2f+0x46>
 800b09a:	4b20      	ldr	r3, [pc, #128]	; (800b11c <__ieee754_atan2f+0x110>)
 800b09c:	e7d9      	b.n	800b052 <__ieee754_atan2f+0x46>
 800b09e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b0a2:	d0d9      	beq.n	800b058 <__ieee754_atan2f+0x4c>
 800b0a4:	1b92      	subs	r2, r2, r6
 800b0a6:	15d2      	asrs	r2, r2, #23
 800b0a8:	2a3c      	cmp	r2, #60	; 0x3c
 800b0aa:	dc17      	bgt.n	800b0dc <__ieee754_atan2f+0xd0>
 800b0ac:	2900      	cmp	r1, #0
 800b0ae:	da01      	bge.n	800b0b4 <__ieee754_atan2f+0xa8>
 800b0b0:	323c      	adds	r2, #60	; 0x3c
 800b0b2:	db15      	blt.n	800b0e0 <__ieee754_atan2f+0xd4>
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7f5 feaf 	bl	8000e18 <__aeabi_fdiv>
 800b0ba:	f000 fe8b 	bl	800bdd4 <fabsf>
 800b0be:	f000 fd79 	bl	800bbb4 <atanf>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2c01      	cmp	r4, #1
 800b0c6:	d00d      	beq.n	800b0e4 <__ieee754_atan2f+0xd8>
 800b0c8:	2c02      	cmp	r4, #2
 800b0ca:	d00e      	beq.n	800b0ea <__ieee754_atan2f+0xde>
 800b0cc:	2c00      	cmp	r4, #0
 800b0ce:	d0c0      	beq.n	800b052 <__ieee754_atan2f+0x46>
 800b0d0:	4913      	ldr	r1, [pc, #76]	; (800b120 <__ieee754_atan2f+0x114>)
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7f5 fce4 	bl	8000aa0 <__addsf3>
 800b0d8:	490f      	ldr	r1, [pc, #60]	; (800b118 <__ieee754_atan2f+0x10c>)
 800b0da:	e00c      	b.n	800b0f6 <__ieee754_atan2f+0xea>
 800b0dc:	4b11      	ldr	r3, [pc, #68]	; (800b124 <__ieee754_atan2f+0x118>)
 800b0de:	e7f1      	b.n	800b0c4 <__ieee754_atan2f+0xb8>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	e7ef      	b.n	800b0c4 <__ieee754_atan2f+0xb8>
 800b0e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b0e8:	e7b3      	b.n	800b052 <__ieee754_atan2f+0x46>
 800b0ea:	490d      	ldr	r1, [pc, #52]	; (800b120 <__ieee754_atan2f+0x114>)
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7f5 fcd7 	bl	8000aa0 <__addsf3>
 800b0f2:	4601      	mov	r1, r0
 800b0f4:	4808      	ldr	r0, [pc, #32]	; (800b118 <__ieee754_atan2f+0x10c>)
 800b0f6:	f7f5 fcd1 	bl	8000a9c <__aeabi_fsub>
 800b0fa:	e797      	b.n	800b02c <__ieee754_atan2f+0x20>
 800b0fc:	4b0a      	ldr	r3, [pc, #40]	; (800b128 <__ieee754_atan2f+0x11c>)
 800b0fe:	e7a8      	b.n	800b052 <__ieee754_atan2f+0x46>
 800b100:	2300      	movs	r3, #0
 800b102:	e7a6      	b.n	800b052 <__ieee754_atan2f+0x46>
 800b104:	4b07      	ldr	r3, [pc, #28]	; (800b124 <__ieee754_atan2f+0x118>)
 800b106:	e7a4      	b.n	800b052 <__ieee754_atan2f+0x46>
 800b108:	bfc90fdb 	.word	0xbfc90fdb
 800b10c:	bf490fdb 	.word	0xbf490fdb
 800b110:	4016cbe4 	.word	0x4016cbe4
 800b114:	c016cbe4 	.word	0xc016cbe4
 800b118:	40490fdb 	.word	0x40490fdb
 800b11c:	c0490fdb 	.word	0xc0490fdb
 800b120:	33bbbd2e 	.word	0x33bbbd2e
 800b124:	3fc90fdb 	.word	0x3fc90fdb
 800b128:	3f490fdb 	.word	0x3f490fdb

0800b12c <__ieee754_rem_pio2f>:
 800b12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b130:	4a9d      	ldr	r2, [pc, #628]	; (800b3a8 <__ieee754_rem_pio2f+0x27c>)
 800b132:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800b136:	4295      	cmp	r5, r2
 800b138:	b087      	sub	sp, #28
 800b13a:	460c      	mov	r4, r1
 800b13c:	4607      	mov	r7, r0
 800b13e:	dc04      	bgt.n	800b14a <__ieee754_rem_pio2f+0x1e>
 800b140:	2300      	movs	r3, #0
 800b142:	6020      	str	r0, [r4, #0]
 800b144:	604b      	str	r3, [r1, #4]
 800b146:	2600      	movs	r6, #0
 800b148:	e01a      	b.n	800b180 <__ieee754_rem_pio2f+0x54>
 800b14a:	4a98      	ldr	r2, [pc, #608]	; (800b3ac <__ieee754_rem_pio2f+0x280>)
 800b14c:	4295      	cmp	r5, r2
 800b14e:	dc4b      	bgt.n	800b1e8 <__ieee754_rem_pio2f+0xbc>
 800b150:	2800      	cmp	r0, #0
 800b152:	4997      	ldr	r1, [pc, #604]	; (800b3b0 <__ieee754_rem_pio2f+0x284>)
 800b154:	f025 050f 	bic.w	r5, r5, #15
 800b158:	4e96      	ldr	r6, [pc, #600]	; (800b3b4 <__ieee754_rem_pio2f+0x288>)
 800b15a:	dd23      	ble.n	800b1a4 <__ieee754_rem_pio2f+0x78>
 800b15c:	f7f5 fc9e 	bl	8000a9c <__aeabi_fsub>
 800b160:	42b5      	cmp	r5, r6
 800b162:	4607      	mov	r7, r0
 800b164:	d010      	beq.n	800b188 <__ieee754_rem_pio2f+0x5c>
 800b166:	4994      	ldr	r1, [pc, #592]	; (800b3b8 <__ieee754_rem_pio2f+0x28c>)
 800b168:	f7f5 fc98 	bl	8000a9c <__aeabi_fsub>
 800b16c:	4601      	mov	r1, r0
 800b16e:	6020      	str	r0, [r4, #0]
 800b170:	4638      	mov	r0, r7
 800b172:	f7f5 fc93 	bl	8000a9c <__aeabi_fsub>
 800b176:	4990      	ldr	r1, [pc, #576]	; (800b3b8 <__ieee754_rem_pio2f+0x28c>)
 800b178:	f7f5 fc90 	bl	8000a9c <__aeabi_fsub>
 800b17c:	2601      	movs	r6, #1
 800b17e:	6060      	str	r0, [r4, #4]
 800b180:	4630      	mov	r0, r6
 800b182:	b007      	add	sp, #28
 800b184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b188:	498c      	ldr	r1, [pc, #560]	; (800b3bc <__ieee754_rem_pio2f+0x290>)
 800b18a:	f7f5 fc87 	bl	8000a9c <__aeabi_fsub>
 800b18e:	498c      	ldr	r1, [pc, #560]	; (800b3c0 <__ieee754_rem_pio2f+0x294>)
 800b190:	4605      	mov	r5, r0
 800b192:	f7f5 fc83 	bl	8000a9c <__aeabi_fsub>
 800b196:	4601      	mov	r1, r0
 800b198:	6020      	str	r0, [r4, #0]
 800b19a:	4628      	mov	r0, r5
 800b19c:	f7f5 fc7e 	bl	8000a9c <__aeabi_fsub>
 800b1a0:	4987      	ldr	r1, [pc, #540]	; (800b3c0 <__ieee754_rem_pio2f+0x294>)
 800b1a2:	e7e9      	b.n	800b178 <__ieee754_rem_pio2f+0x4c>
 800b1a4:	f7f5 fc7c 	bl	8000aa0 <__addsf3>
 800b1a8:	42b5      	cmp	r5, r6
 800b1aa:	4607      	mov	r7, r0
 800b1ac:	d00e      	beq.n	800b1cc <__ieee754_rem_pio2f+0xa0>
 800b1ae:	4982      	ldr	r1, [pc, #520]	; (800b3b8 <__ieee754_rem_pio2f+0x28c>)
 800b1b0:	f7f5 fc76 	bl	8000aa0 <__addsf3>
 800b1b4:	4601      	mov	r1, r0
 800b1b6:	6020      	str	r0, [r4, #0]
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	f7f5 fc6f 	bl	8000a9c <__aeabi_fsub>
 800b1be:	497e      	ldr	r1, [pc, #504]	; (800b3b8 <__ieee754_rem_pio2f+0x28c>)
 800b1c0:	f7f5 fc6e 	bl	8000aa0 <__addsf3>
 800b1c4:	f04f 36ff 	mov.w	r6, #4294967295
 800b1c8:	6060      	str	r0, [r4, #4]
 800b1ca:	e7d9      	b.n	800b180 <__ieee754_rem_pio2f+0x54>
 800b1cc:	497b      	ldr	r1, [pc, #492]	; (800b3bc <__ieee754_rem_pio2f+0x290>)
 800b1ce:	f7f5 fc67 	bl	8000aa0 <__addsf3>
 800b1d2:	497b      	ldr	r1, [pc, #492]	; (800b3c0 <__ieee754_rem_pio2f+0x294>)
 800b1d4:	4605      	mov	r5, r0
 800b1d6:	f7f5 fc63 	bl	8000aa0 <__addsf3>
 800b1da:	4601      	mov	r1, r0
 800b1dc:	6020      	str	r0, [r4, #0]
 800b1de:	4628      	mov	r0, r5
 800b1e0:	f7f5 fc5c 	bl	8000a9c <__aeabi_fsub>
 800b1e4:	4976      	ldr	r1, [pc, #472]	; (800b3c0 <__ieee754_rem_pio2f+0x294>)
 800b1e6:	e7eb      	b.n	800b1c0 <__ieee754_rem_pio2f+0x94>
 800b1e8:	4a76      	ldr	r2, [pc, #472]	; (800b3c4 <__ieee754_rem_pio2f+0x298>)
 800b1ea:	4295      	cmp	r5, r2
 800b1ec:	f300 808c 	bgt.w	800b308 <__ieee754_rem_pio2f+0x1dc>
 800b1f0:	f000 fdf0 	bl	800bdd4 <fabsf>
 800b1f4:	4974      	ldr	r1, [pc, #464]	; (800b3c8 <__ieee754_rem_pio2f+0x29c>)
 800b1f6:	4680      	mov	r8, r0
 800b1f8:	f7f5 fd5a 	bl	8000cb0 <__aeabi_fmul>
 800b1fc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b200:	f7f5 fc4e 	bl	8000aa0 <__addsf3>
 800b204:	f7f5 ff30 	bl	8001068 <__aeabi_f2iz>
 800b208:	4606      	mov	r6, r0
 800b20a:	f7f5 fcfd 	bl	8000c08 <__aeabi_i2f>
 800b20e:	4968      	ldr	r1, [pc, #416]	; (800b3b0 <__ieee754_rem_pio2f+0x284>)
 800b210:	4682      	mov	sl, r0
 800b212:	f7f5 fd4d 	bl	8000cb0 <__aeabi_fmul>
 800b216:	4601      	mov	r1, r0
 800b218:	4640      	mov	r0, r8
 800b21a:	f7f5 fc3f 	bl	8000a9c <__aeabi_fsub>
 800b21e:	4966      	ldr	r1, [pc, #408]	; (800b3b8 <__ieee754_rem_pio2f+0x28c>)
 800b220:	4680      	mov	r8, r0
 800b222:	4650      	mov	r0, sl
 800b224:	f7f5 fd44 	bl	8000cb0 <__aeabi_fmul>
 800b228:	2e1f      	cmp	r6, #31
 800b22a:	4681      	mov	r9, r0
 800b22c:	dc0c      	bgt.n	800b248 <__ieee754_rem_pio2f+0x11c>
 800b22e:	4a67      	ldr	r2, [pc, #412]	; (800b3cc <__ieee754_rem_pio2f+0x2a0>)
 800b230:	1e71      	subs	r1, r6, #1
 800b232:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b236:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d004      	beq.n	800b248 <__ieee754_rem_pio2f+0x11c>
 800b23e:	4649      	mov	r1, r9
 800b240:	4640      	mov	r0, r8
 800b242:	f7f5 fc2b 	bl	8000a9c <__aeabi_fsub>
 800b246:	e009      	b.n	800b25c <__ieee754_rem_pio2f+0x130>
 800b248:	4649      	mov	r1, r9
 800b24a:	4640      	mov	r0, r8
 800b24c:	f7f5 fc26 	bl	8000a9c <__aeabi_fsub>
 800b250:	15ed      	asrs	r5, r5, #23
 800b252:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b256:	1aeb      	subs	r3, r5, r3
 800b258:	2b08      	cmp	r3, #8
 800b25a:	dc01      	bgt.n	800b260 <__ieee754_rem_pio2f+0x134>
 800b25c:	6020      	str	r0, [r4, #0]
 800b25e:	e024      	b.n	800b2aa <__ieee754_rem_pio2f+0x17e>
 800b260:	4956      	ldr	r1, [pc, #344]	; (800b3bc <__ieee754_rem_pio2f+0x290>)
 800b262:	4650      	mov	r0, sl
 800b264:	f7f5 fd24 	bl	8000cb0 <__aeabi_fmul>
 800b268:	4681      	mov	r9, r0
 800b26a:	4601      	mov	r1, r0
 800b26c:	4640      	mov	r0, r8
 800b26e:	f7f5 fc15 	bl	8000a9c <__aeabi_fsub>
 800b272:	4601      	mov	r1, r0
 800b274:	4683      	mov	fp, r0
 800b276:	4640      	mov	r0, r8
 800b278:	f7f5 fc10 	bl	8000a9c <__aeabi_fsub>
 800b27c:	4649      	mov	r1, r9
 800b27e:	f7f5 fc0d 	bl	8000a9c <__aeabi_fsub>
 800b282:	4680      	mov	r8, r0
 800b284:	494e      	ldr	r1, [pc, #312]	; (800b3c0 <__ieee754_rem_pio2f+0x294>)
 800b286:	4650      	mov	r0, sl
 800b288:	f7f5 fd12 	bl	8000cb0 <__aeabi_fmul>
 800b28c:	4641      	mov	r1, r8
 800b28e:	f7f5 fc05 	bl	8000a9c <__aeabi_fsub>
 800b292:	4601      	mov	r1, r0
 800b294:	4681      	mov	r9, r0
 800b296:	4658      	mov	r0, fp
 800b298:	f7f5 fc00 	bl	8000a9c <__aeabi_fsub>
 800b29c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b2a0:	1aed      	subs	r5, r5, r3
 800b2a2:	2d19      	cmp	r5, #25
 800b2a4:	dc15      	bgt.n	800b2d2 <__ieee754_rem_pio2f+0x1a6>
 800b2a6:	46d8      	mov	r8, fp
 800b2a8:	6020      	str	r0, [r4, #0]
 800b2aa:	6825      	ldr	r5, [r4, #0]
 800b2ac:	4640      	mov	r0, r8
 800b2ae:	4629      	mov	r1, r5
 800b2b0:	f7f5 fbf4 	bl	8000a9c <__aeabi_fsub>
 800b2b4:	4649      	mov	r1, r9
 800b2b6:	f7f5 fbf1 	bl	8000a9c <__aeabi_fsub>
 800b2ba:	2f00      	cmp	r7, #0
 800b2bc:	6060      	str	r0, [r4, #4]
 800b2be:	f6bf af5f 	bge.w	800b180 <__ieee754_rem_pio2f+0x54>
 800b2c2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800b2c6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b2ca:	6025      	str	r5, [r4, #0]
 800b2cc:	6060      	str	r0, [r4, #4]
 800b2ce:	4276      	negs	r6, r6
 800b2d0:	e756      	b.n	800b180 <__ieee754_rem_pio2f+0x54>
 800b2d2:	493f      	ldr	r1, [pc, #252]	; (800b3d0 <__ieee754_rem_pio2f+0x2a4>)
 800b2d4:	4650      	mov	r0, sl
 800b2d6:	f7f5 fceb 	bl	8000cb0 <__aeabi_fmul>
 800b2da:	4605      	mov	r5, r0
 800b2dc:	4601      	mov	r1, r0
 800b2de:	4658      	mov	r0, fp
 800b2e0:	f7f5 fbdc 	bl	8000a9c <__aeabi_fsub>
 800b2e4:	4601      	mov	r1, r0
 800b2e6:	4680      	mov	r8, r0
 800b2e8:	4658      	mov	r0, fp
 800b2ea:	f7f5 fbd7 	bl	8000a9c <__aeabi_fsub>
 800b2ee:	4629      	mov	r1, r5
 800b2f0:	f7f5 fbd4 	bl	8000a9c <__aeabi_fsub>
 800b2f4:	4605      	mov	r5, r0
 800b2f6:	4937      	ldr	r1, [pc, #220]	; (800b3d4 <__ieee754_rem_pio2f+0x2a8>)
 800b2f8:	4650      	mov	r0, sl
 800b2fa:	f7f5 fcd9 	bl	8000cb0 <__aeabi_fmul>
 800b2fe:	4629      	mov	r1, r5
 800b300:	f7f5 fbcc 	bl	8000a9c <__aeabi_fsub>
 800b304:	4681      	mov	r9, r0
 800b306:	e79a      	b.n	800b23e <__ieee754_rem_pio2f+0x112>
 800b308:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b30c:	db05      	blt.n	800b31a <__ieee754_rem_pio2f+0x1ee>
 800b30e:	4601      	mov	r1, r0
 800b310:	f7f5 fbc4 	bl	8000a9c <__aeabi_fsub>
 800b314:	6060      	str	r0, [r4, #4]
 800b316:	6020      	str	r0, [r4, #0]
 800b318:	e715      	b.n	800b146 <__ieee754_rem_pio2f+0x1a>
 800b31a:	15ee      	asrs	r6, r5, #23
 800b31c:	3e86      	subs	r6, #134	; 0x86
 800b31e:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800b322:	4628      	mov	r0, r5
 800b324:	f7f5 fea0 	bl	8001068 <__aeabi_f2iz>
 800b328:	f7f5 fc6e 	bl	8000c08 <__aeabi_i2f>
 800b32c:	4601      	mov	r1, r0
 800b32e:	9003      	str	r0, [sp, #12]
 800b330:	4628      	mov	r0, r5
 800b332:	f7f5 fbb3 	bl	8000a9c <__aeabi_fsub>
 800b336:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b33a:	f7f5 fcb9 	bl	8000cb0 <__aeabi_fmul>
 800b33e:	4680      	mov	r8, r0
 800b340:	f7f5 fe92 	bl	8001068 <__aeabi_f2iz>
 800b344:	f7f5 fc60 	bl	8000c08 <__aeabi_i2f>
 800b348:	4601      	mov	r1, r0
 800b34a:	9004      	str	r0, [sp, #16]
 800b34c:	4605      	mov	r5, r0
 800b34e:	4640      	mov	r0, r8
 800b350:	f7f5 fba4 	bl	8000a9c <__aeabi_fsub>
 800b354:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b358:	f7f5 fcaa 	bl	8000cb0 <__aeabi_fmul>
 800b35c:	2100      	movs	r1, #0
 800b35e:	9005      	str	r0, [sp, #20]
 800b360:	f7f5 fe3a 	bl	8000fd8 <__aeabi_fcmpeq>
 800b364:	b1e8      	cbz	r0, 800b3a2 <__ieee754_rem_pio2f+0x276>
 800b366:	2100      	movs	r1, #0
 800b368:	4628      	mov	r0, r5
 800b36a:	f7f5 fe35 	bl	8000fd8 <__aeabi_fcmpeq>
 800b36e:	2800      	cmp	r0, #0
 800b370:	bf14      	ite	ne
 800b372:	2301      	movne	r3, #1
 800b374:	2302      	moveq	r3, #2
 800b376:	4a18      	ldr	r2, [pc, #96]	; (800b3d8 <__ieee754_rem_pio2f+0x2ac>)
 800b378:	4621      	mov	r1, r4
 800b37a:	9201      	str	r2, [sp, #4]
 800b37c:	2202      	movs	r2, #2
 800b37e:	a803      	add	r0, sp, #12
 800b380:	9200      	str	r2, [sp, #0]
 800b382:	4632      	mov	r2, r6
 800b384:	f000 f910 	bl	800b5a8 <__kernel_rem_pio2f>
 800b388:	2f00      	cmp	r7, #0
 800b38a:	4606      	mov	r6, r0
 800b38c:	f6bf aef8 	bge.w	800b180 <__ieee754_rem_pio2f+0x54>
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b396:	6023      	str	r3, [r4, #0]
 800b398:	6863      	ldr	r3, [r4, #4]
 800b39a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b39e:	6063      	str	r3, [r4, #4]
 800b3a0:	e795      	b.n	800b2ce <__ieee754_rem_pio2f+0x1a2>
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	e7e7      	b.n	800b376 <__ieee754_rem_pio2f+0x24a>
 800b3a6:	bf00      	nop
 800b3a8:	3f490fd8 	.word	0x3f490fd8
 800b3ac:	4016cbe3 	.word	0x4016cbe3
 800b3b0:	3fc90f80 	.word	0x3fc90f80
 800b3b4:	3fc90fd0 	.word	0x3fc90fd0
 800b3b8:	37354443 	.word	0x37354443
 800b3bc:	37354400 	.word	0x37354400
 800b3c0:	2e85a308 	.word	0x2e85a308
 800b3c4:	43490f80 	.word	0x43490f80
 800b3c8:	3f22f984 	.word	0x3f22f984
 800b3cc:	0800c178 	.word	0x0800c178
 800b3d0:	2e85a300 	.word	0x2e85a300
 800b3d4:	248d3132 	.word	0x248d3132
 800b3d8:	0800c1f8 	.word	0x0800c1f8

0800b3dc <__ieee754_sqrtf>:
 800b3dc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b3e0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b3e4:	b570      	push	{r4, r5, r6, lr}
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	d309      	bcc.n	800b400 <__ieee754_sqrtf+0x24>
 800b3ec:	4601      	mov	r1, r0
 800b3ee:	f7f5 fc5f 	bl	8000cb0 <__aeabi_fmul>
 800b3f2:	4601      	mov	r1, r0
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f7f5 fb53 	bl	8000aa0 <__addsf3>
 800b3fa:	4604      	mov	r4, r0
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	bd70      	pop	{r4, r5, r6, pc}
 800b400:	2a00      	cmp	r2, #0
 800b402:	d0fb      	beq.n	800b3fc <__ieee754_sqrtf+0x20>
 800b404:	2800      	cmp	r0, #0
 800b406:	da06      	bge.n	800b416 <__ieee754_sqrtf+0x3a>
 800b408:	4601      	mov	r1, r0
 800b40a:	f7f5 fb47 	bl	8000a9c <__aeabi_fsub>
 800b40e:	4601      	mov	r1, r0
 800b410:	f7f5 fd02 	bl	8000e18 <__aeabi_fdiv>
 800b414:	e7f1      	b.n	800b3fa <__ieee754_sqrtf+0x1e>
 800b416:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800b41a:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800b41e:	d204      	bcs.n	800b42a <__ieee754_sqrtf+0x4e>
 800b420:	2200      	movs	r2, #0
 800b422:	0219      	lsls	r1, r3, #8
 800b424:	d529      	bpl.n	800b47a <__ieee754_sqrtf+0x9e>
 800b426:	3a01      	subs	r2, #1
 800b428:	1aa4      	subs	r4, r4, r2
 800b42a:	3c7f      	subs	r4, #127	; 0x7f
 800b42c:	07e2      	lsls	r2, r4, #31
 800b42e:	f04f 0200 	mov.w	r2, #0
 800b432:	ea4f 0164 	mov.w	r1, r4, asr #1
 800b436:	4616      	mov	r6, r2
 800b438:	f04f 0419 	mov.w	r4, #25
 800b43c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800b440:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b444:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b448:	bf48      	it	mi
 800b44a:	005b      	lslmi	r3, r3, #1
 800b44c:	005b      	lsls	r3, r3, #1
 800b44e:	1835      	adds	r5, r6, r0
 800b450:	429d      	cmp	r5, r3
 800b452:	bfde      	ittt	le
 800b454:	182e      	addle	r6, r5, r0
 800b456:	1b5b      	suble	r3, r3, r5
 800b458:	1812      	addle	r2, r2, r0
 800b45a:	3c01      	subs	r4, #1
 800b45c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b460:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b464:	d1f3      	bne.n	800b44e <__ieee754_sqrtf+0x72>
 800b466:	b113      	cbz	r3, 800b46e <__ieee754_sqrtf+0x92>
 800b468:	3201      	adds	r2, #1
 800b46a:	f022 0201 	bic.w	r2, r2, #1
 800b46e:	1054      	asrs	r4, r2, #1
 800b470:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800b474:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800b478:	e7c0      	b.n	800b3fc <__ieee754_sqrtf+0x20>
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	3201      	adds	r2, #1
 800b47e:	e7d0      	b.n	800b422 <__ieee754_sqrtf+0x46>

0800b480 <__kernel_cosf>:
 800b480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b484:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800b488:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800b48c:	4606      	mov	r6, r0
 800b48e:	460f      	mov	r7, r1
 800b490:	da03      	bge.n	800b49a <__kernel_cosf+0x1a>
 800b492:	f7f5 fde9 	bl	8001068 <__aeabi_f2iz>
 800b496:	2800      	cmp	r0, #0
 800b498:	d070      	beq.n	800b57c <__kernel_cosf+0xfc>
 800b49a:	4631      	mov	r1, r6
 800b49c:	4630      	mov	r0, r6
 800b49e:	f7f5 fc07 	bl	8000cb0 <__aeabi_fmul>
 800b4a2:	4605      	mov	r5, r0
 800b4a4:	4937      	ldr	r1, [pc, #220]	; (800b584 <__kernel_cosf+0x104>)
 800b4a6:	f7f5 fc03 	bl	8000cb0 <__aeabi_fmul>
 800b4aa:	4937      	ldr	r1, [pc, #220]	; (800b588 <__kernel_cosf+0x108>)
 800b4ac:	f7f5 faf8 	bl	8000aa0 <__addsf3>
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	f7f5 fbfd 	bl	8000cb0 <__aeabi_fmul>
 800b4b6:	4935      	ldr	r1, [pc, #212]	; (800b58c <__kernel_cosf+0x10c>)
 800b4b8:	f7f5 faf0 	bl	8000a9c <__aeabi_fsub>
 800b4bc:	4629      	mov	r1, r5
 800b4be:	f7f5 fbf7 	bl	8000cb0 <__aeabi_fmul>
 800b4c2:	4933      	ldr	r1, [pc, #204]	; (800b590 <__kernel_cosf+0x110>)
 800b4c4:	f7f5 faec 	bl	8000aa0 <__addsf3>
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	f7f5 fbf1 	bl	8000cb0 <__aeabi_fmul>
 800b4ce:	4931      	ldr	r1, [pc, #196]	; (800b594 <__kernel_cosf+0x114>)
 800b4d0:	f7f5 fae4 	bl	8000a9c <__aeabi_fsub>
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	f7f5 fbeb 	bl	8000cb0 <__aeabi_fmul>
 800b4da:	492f      	ldr	r1, [pc, #188]	; (800b598 <__kernel_cosf+0x118>)
 800b4dc:	f7f5 fae0 	bl	8000aa0 <__addsf3>
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	f7f5 fbe5 	bl	8000cb0 <__aeabi_fmul>
 800b4e6:	4b2d      	ldr	r3, [pc, #180]	; (800b59c <__kernel_cosf+0x11c>)
 800b4e8:	4680      	mov	r8, r0
 800b4ea:	429c      	cmp	r4, r3
 800b4ec:	dc1d      	bgt.n	800b52a <__kernel_cosf+0xaa>
 800b4ee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	f7f5 fbdc 	bl	8000cb0 <__aeabi_fmul>
 800b4f8:	4641      	mov	r1, r8
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	f7f5 fbd7 	bl	8000cb0 <__aeabi_fmul>
 800b502:	4639      	mov	r1, r7
 800b504:	4605      	mov	r5, r0
 800b506:	4630      	mov	r0, r6
 800b508:	f7f5 fbd2 	bl	8000cb0 <__aeabi_fmul>
 800b50c:	4601      	mov	r1, r0
 800b50e:	4628      	mov	r0, r5
 800b510:	f7f5 fac4 	bl	8000a9c <__aeabi_fsub>
 800b514:	4601      	mov	r1, r0
 800b516:	4620      	mov	r0, r4
 800b518:	f7f5 fac0 	bl	8000a9c <__aeabi_fsub>
 800b51c:	4601      	mov	r1, r0
 800b51e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b522:	f7f5 fabb 	bl	8000a9c <__aeabi_fsub>
 800b526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b52a:	4b1d      	ldr	r3, [pc, #116]	; (800b5a0 <__kernel_cosf+0x120>)
 800b52c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b530:	429c      	cmp	r4, r3
 800b532:	bfcc      	ite	gt
 800b534:	4c1b      	ldrgt	r4, [pc, #108]	; (800b5a4 <__kernel_cosf+0x124>)
 800b536:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800b53a:	4621      	mov	r1, r4
 800b53c:	f7f5 faae 	bl	8000a9c <__aeabi_fsub>
 800b540:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b544:	4681      	mov	r9, r0
 800b546:	4628      	mov	r0, r5
 800b548:	f7f5 fbb2 	bl	8000cb0 <__aeabi_fmul>
 800b54c:	4621      	mov	r1, r4
 800b54e:	f7f5 faa5 	bl	8000a9c <__aeabi_fsub>
 800b552:	4641      	mov	r1, r8
 800b554:	4604      	mov	r4, r0
 800b556:	4628      	mov	r0, r5
 800b558:	f7f5 fbaa 	bl	8000cb0 <__aeabi_fmul>
 800b55c:	4639      	mov	r1, r7
 800b55e:	4605      	mov	r5, r0
 800b560:	4630      	mov	r0, r6
 800b562:	f7f5 fba5 	bl	8000cb0 <__aeabi_fmul>
 800b566:	4601      	mov	r1, r0
 800b568:	4628      	mov	r0, r5
 800b56a:	f7f5 fa97 	bl	8000a9c <__aeabi_fsub>
 800b56e:	4601      	mov	r1, r0
 800b570:	4620      	mov	r0, r4
 800b572:	f7f5 fa93 	bl	8000a9c <__aeabi_fsub>
 800b576:	4601      	mov	r1, r0
 800b578:	4648      	mov	r0, r9
 800b57a:	e7d2      	b.n	800b522 <__kernel_cosf+0xa2>
 800b57c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b584:	ad47d74e 	.word	0xad47d74e
 800b588:	310f74f6 	.word	0x310f74f6
 800b58c:	3493f27c 	.word	0x3493f27c
 800b590:	37d00d01 	.word	0x37d00d01
 800b594:	3ab60b61 	.word	0x3ab60b61
 800b598:	3d2aaaab 	.word	0x3d2aaaab
 800b59c:	3e999999 	.word	0x3e999999
 800b5a0:	3f480000 	.word	0x3f480000
 800b5a4:	3e900000 	.word	0x3e900000

0800b5a8 <__kernel_rem_pio2f>:
 800b5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ac:	b0d9      	sub	sp, #356	; 0x164
 800b5ae:	9304      	str	r3, [sp, #16]
 800b5b0:	9101      	str	r1, [sp, #4]
 800b5b2:	4bb4      	ldr	r3, [pc, #720]	; (800b884 <__kernel_rem_pio2f+0x2dc>)
 800b5b4:	9962      	ldr	r1, [sp, #392]	; 0x188
 800b5b6:	1ed4      	subs	r4, r2, #3
 800b5b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b5bc:	2500      	movs	r5, #0
 800b5be:	9302      	str	r3, [sp, #8]
 800b5c0:	9b04      	ldr	r3, [sp, #16]
 800b5c2:	f04f 0b00 	mov.w	fp, #0
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	9303      	str	r3, [sp, #12]
 800b5ca:	2308      	movs	r3, #8
 800b5cc:	fb94 f4f3 	sdiv	r4, r4, r3
 800b5d0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b5d4:	1c66      	adds	r6, r4, #1
 800b5d6:	9b02      	ldr	r3, [sp, #8]
 800b5d8:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 800b5dc:	9a03      	ldr	r2, [sp, #12]
 800b5de:	9005      	str	r0, [sp, #20]
 800b5e0:	eb03 0802 	add.w	r8, r3, r2
 800b5e4:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800b5e6:	1aa7      	subs	r7, r4, r2
 800b5e8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b5ec:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 800b5f0:	4545      	cmp	r5, r8
 800b5f2:	dd10      	ble.n	800b616 <__kernel_rem_pio2f+0x6e>
 800b5f4:	2500      	movs	r5, #0
 800b5f6:	f04f 0b00 	mov.w	fp, #0
 800b5fa:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 800b5fe:	9b02      	ldr	r3, [sp, #8]
 800b600:	429d      	cmp	r5, r3
 800b602:	dc28      	bgt.n	800b656 <__kernel_rem_pio2f+0xae>
 800b604:	9b04      	ldr	r3, [sp, #16]
 800b606:	46d9      	mov	r9, fp
 800b608:	eb03 0805 	add.w	r8, r3, r5
 800b60c:	ab1c      	add	r3, sp, #112	; 0x70
 800b60e:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800b612:	2700      	movs	r7, #0
 800b614:	e018      	b.n	800b648 <__kernel_rem_pio2f+0xa0>
 800b616:	42ef      	cmn	r7, r5
 800b618:	d407      	bmi.n	800b62a <__kernel_rem_pio2f+0x82>
 800b61a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b61e:	f7f5 faf3 	bl	8000c08 <__aeabi_i2f>
 800b622:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
 800b626:	3501      	adds	r5, #1
 800b628:	e7e2      	b.n	800b5f0 <__kernel_rem_pio2f+0x48>
 800b62a:	4658      	mov	r0, fp
 800b62c:	e7f9      	b.n	800b622 <__kernel_rem_pio2f+0x7a>
 800b62e:	9b05      	ldr	r3, [sp, #20]
 800b630:	f858 1d04 	ldr.w	r1, [r8, #-4]!
 800b634:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b638:	f7f5 fb3a 	bl	8000cb0 <__aeabi_fmul>
 800b63c:	4601      	mov	r1, r0
 800b63e:	4648      	mov	r0, r9
 800b640:	f7f5 fa2e 	bl	8000aa0 <__addsf3>
 800b644:	4681      	mov	r9, r0
 800b646:	3701      	adds	r7, #1
 800b648:	9b03      	ldr	r3, [sp, #12]
 800b64a:	429f      	cmp	r7, r3
 800b64c:	ddef      	ble.n	800b62e <__kernel_rem_pio2f+0x86>
 800b64e:	f84a 9025 	str.w	r9, [sl, r5, lsl #2]
 800b652:	3501      	adds	r5, #1
 800b654:	e7d3      	b.n	800b5fe <__kernel_rem_pio2f+0x56>
 800b656:	9b02      	ldr	r3, [sp, #8]
 800b658:	aa08      	add	r2, sp, #32
 800b65a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b65e:	9307      	str	r3, [sp, #28]
 800b660:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800b662:	9f02      	ldr	r7, [sp, #8]
 800b664:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b668:	9306      	str	r3, [sp, #24]
 800b66a:	46ba      	mov	sl, r7
 800b66c:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 800b670:	ab58      	add	r3, sp, #352	; 0x160
 800b672:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800b676:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800b67a:	ad07      	add	r5, sp, #28
 800b67c:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800b680:	f1ba 0f00 	cmp.w	sl, #0
 800b684:	dc57      	bgt.n	800b736 <__kernel_rem_pio2f+0x18e>
 800b686:	4631      	mov	r1, r6
 800b688:	4620      	mov	r0, r4
 800b68a:	f000 fba7 	bl	800bddc <scalbnf>
 800b68e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800b692:	4604      	mov	r4, r0
 800b694:	f7f5 fb0c 	bl	8000cb0 <__aeabi_fmul>
 800b698:	f7ff fbca 	bl	800ae30 <floorf>
 800b69c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800b6a0:	f7f5 fb06 	bl	8000cb0 <__aeabi_fmul>
 800b6a4:	4601      	mov	r1, r0
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f7f5 f9f8 	bl	8000a9c <__aeabi_fsub>
 800b6ac:	4604      	mov	r4, r0
 800b6ae:	f7f5 fcdb 	bl	8001068 <__aeabi_f2iz>
 800b6b2:	4680      	mov	r8, r0
 800b6b4:	f7f5 faa8 	bl	8000c08 <__aeabi_i2f>
 800b6b8:	4601      	mov	r1, r0
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f7f5 f9ee 	bl	8000a9c <__aeabi_fsub>
 800b6c0:	2e00      	cmp	r6, #0
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	dd55      	ble.n	800b772 <__kernel_rem_pio2f+0x1ca>
 800b6c6:	1e7b      	subs	r3, r7, #1
 800b6c8:	aa08      	add	r2, sp, #32
 800b6ca:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800b6ce:	f1c6 0208 	rsb	r2, r6, #8
 800b6d2:	fa45 f002 	asr.w	r0, r5, r2
 800b6d6:	4480      	add	r8, r0
 800b6d8:	4090      	lsls	r0, r2
 800b6da:	1a2d      	subs	r5, r5, r0
 800b6dc:	aa08      	add	r2, sp, #32
 800b6de:	f1c6 0007 	rsb	r0, r6, #7
 800b6e2:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800b6e6:	4105      	asrs	r5, r0
 800b6e8:	2d00      	cmp	r5, #0
 800b6ea:	dd50      	ble.n	800b78e <__kernel_rem_pio2f+0x1e6>
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	4691      	mov	r9, r2
 800b6f0:	f108 0801 	add.w	r8, r8, #1
 800b6f4:	4297      	cmp	r7, r2
 800b6f6:	f300 8085 	bgt.w	800b804 <__kernel_rem_pio2f+0x25c>
 800b6fa:	2e00      	cmp	r6, #0
 800b6fc:	dd05      	ble.n	800b70a <__kernel_rem_pio2f+0x162>
 800b6fe:	2e01      	cmp	r6, #1
 800b700:	f000 8097 	beq.w	800b832 <__kernel_rem_pio2f+0x28a>
 800b704:	2e02      	cmp	r6, #2
 800b706:	f000 809e 	beq.w	800b846 <__kernel_rem_pio2f+0x29e>
 800b70a:	2d02      	cmp	r5, #2
 800b70c:	d13f      	bne.n	800b78e <__kernel_rem_pio2f+0x1e6>
 800b70e:	4621      	mov	r1, r4
 800b710:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b714:	f7f5 f9c2 	bl	8000a9c <__aeabi_fsub>
 800b718:	4604      	mov	r4, r0
 800b71a:	f1b9 0f00 	cmp.w	r9, #0
 800b71e:	d036      	beq.n	800b78e <__kernel_rem_pio2f+0x1e6>
 800b720:	4631      	mov	r1, r6
 800b722:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b726:	f000 fb59 	bl	800bddc <scalbnf>
 800b72a:	4601      	mov	r1, r0
 800b72c:	4620      	mov	r0, r4
 800b72e:	f7f5 f9b5 	bl	8000a9c <__aeabi_fsub>
 800b732:	4604      	mov	r4, r0
 800b734:	e02b      	b.n	800b78e <__kernel_rem_pio2f+0x1e6>
 800b736:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b73a:	4620      	mov	r0, r4
 800b73c:	f7f5 fab8 	bl	8000cb0 <__aeabi_fmul>
 800b740:	f7f5 fc92 	bl	8001068 <__aeabi_f2iz>
 800b744:	f7f5 fa60 	bl	8000c08 <__aeabi_i2f>
 800b748:	4641      	mov	r1, r8
 800b74a:	4683      	mov	fp, r0
 800b74c:	f7f5 fab0 	bl	8000cb0 <__aeabi_fmul>
 800b750:	4601      	mov	r1, r0
 800b752:	4620      	mov	r0, r4
 800b754:	f7f5 f9a2 	bl	8000a9c <__aeabi_fsub>
 800b758:	f7f5 fc86 	bl	8001068 <__aeabi_f2iz>
 800b75c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b760:	f845 0f04 	str.w	r0, [r5, #4]!
 800b764:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800b768:	4658      	mov	r0, fp
 800b76a:	f7f5 f999 	bl	8000aa0 <__addsf3>
 800b76e:	4604      	mov	r4, r0
 800b770:	e786      	b.n	800b680 <__kernel_rem_pio2f+0xd8>
 800b772:	d105      	bne.n	800b780 <__kernel_rem_pio2f+0x1d8>
 800b774:	1e7b      	subs	r3, r7, #1
 800b776:	aa08      	add	r2, sp, #32
 800b778:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800b77c:	122d      	asrs	r5, r5, #8
 800b77e:	e7b3      	b.n	800b6e8 <__kernel_rem_pio2f+0x140>
 800b780:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b784:	f7f5 fc46 	bl	8001014 <__aeabi_fcmpge>
 800b788:	2800      	cmp	r0, #0
 800b78a:	d139      	bne.n	800b800 <__kernel_rem_pio2f+0x258>
 800b78c:	4605      	mov	r5, r0
 800b78e:	2100      	movs	r1, #0
 800b790:	4620      	mov	r0, r4
 800b792:	f7f5 fc21 	bl	8000fd8 <__aeabi_fcmpeq>
 800b796:	2800      	cmp	r0, #0
 800b798:	f000 8098 	beq.w	800b8cc <__kernel_rem_pio2f+0x324>
 800b79c:	1e7c      	subs	r4, r7, #1
 800b79e:	4623      	mov	r3, r4
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	9902      	ldr	r1, [sp, #8]
 800b7a4:	428b      	cmp	r3, r1
 800b7a6:	da55      	bge.n	800b854 <__kernel_rem_pio2f+0x2ac>
 800b7a8:	2a00      	cmp	r2, #0
 800b7aa:	d16e      	bne.n	800b88a <__kernel_rem_pio2f+0x2e2>
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	f06f 0103 	mvn.w	r1, #3
 800b7b2:	fb01 f203 	mul.w	r2, r1, r3
 800b7b6:	9807      	ldr	r0, [sp, #28]
 800b7b8:	5882      	ldr	r2, [r0, r2]
 800b7ba:	2a00      	cmp	r2, #0
 800b7bc:	d050      	beq.n	800b860 <__kernel_rem_pio2f+0x2b8>
 800b7be:	f06f 0803 	mvn.w	r8, #3
 800b7c2:	9a04      	ldr	r2, [sp, #16]
 800b7c4:	1c7d      	adds	r5, r7, #1
 800b7c6:	19d4      	adds	r4, r2, r7
 800b7c8:	aa58      	add	r2, sp, #352	; 0x160
 800b7ca:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b7ce:	3cf4      	subs	r4, #244	; 0xf4
 800b7d0:	441f      	add	r7, r3
 800b7d2:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800b7d6:	42bd      	cmp	r5, r7
 800b7d8:	f73f af47 	bgt.w	800b66a <__kernel_rem_pio2f+0xc2>
 800b7dc:	9b06      	ldr	r3, [sp, #24]
 800b7de:	f04f 0a00 	mov.w	sl, #0
 800b7e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7e6:	f7f5 fa0f 	bl	8000c08 <__aeabi_i2f>
 800b7ea:	f04f 0b00 	mov.w	fp, #0
 800b7ee:	f844 0f04 	str.w	r0, [r4, #4]!
 800b7f2:	9b03      	ldr	r3, [sp, #12]
 800b7f4:	459a      	cmp	sl, r3
 800b7f6:	dd35      	ble.n	800b864 <__kernel_rem_pio2f+0x2bc>
 800b7f8:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 800b7fc:	3501      	adds	r5, #1
 800b7fe:	e7ea      	b.n	800b7d6 <__kernel_rem_pio2f+0x22e>
 800b800:	2502      	movs	r5, #2
 800b802:	e773      	b.n	800b6ec <__kernel_rem_pio2f+0x144>
 800b804:	ab08      	add	r3, sp, #32
 800b806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b80a:	f1b9 0f00 	cmp.w	r9, #0
 800b80e:	d109      	bne.n	800b824 <__kernel_rem_pio2f+0x27c>
 800b810:	b12b      	cbz	r3, 800b81e <__kernel_rem_pio2f+0x276>
 800b812:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b816:	a908      	add	r1, sp, #32
 800b818:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b81c:	2301      	movs	r3, #1
 800b81e:	3201      	adds	r2, #1
 800b820:	4699      	mov	r9, r3
 800b822:	e767      	b.n	800b6f4 <__kernel_rem_pio2f+0x14c>
 800b824:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800b828:	a908      	add	r1, sp, #32
 800b82a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b82e:	464b      	mov	r3, r9
 800b830:	e7f5      	b.n	800b81e <__kernel_rem_pio2f+0x276>
 800b832:	1e7a      	subs	r2, r7, #1
 800b834:	ab08      	add	r3, sp, #32
 800b836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b83a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b83e:	a908      	add	r1, sp, #32
 800b840:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b844:	e761      	b.n	800b70a <__kernel_rem_pio2f+0x162>
 800b846:	1e7a      	subs	r2, r7, #1
 800b848:	ab08      	add	r3, sp, #32
 800b84a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b84e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b852:	e7f4      	b.n	800b83e <__kernel_rem_pio2f+0x296>
 800b854:	a908      	add	r1, sp, #32
 800b856:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b85a:	3b01      	subs	r3, #1
 800b85c:	430a      	orrs	r2, r1
 800b85e:	e7a0      	b.n	800b7a2 <__kernel_rem_pio2f+0x1fa>
 800b860:	3301      	adds	r3, #1
 800b862:	e7a6      	b.n	800b7b2 <__kernel_rem_pio2f+0x20a>
 800b864:	fb08 f30a 	mul.w	r3, r8, sl
 800b868:	9a05      	ldr	r2, [sp, #20]
 800b86a:	58e0      	ldr	r0, [r4, r3]
 800b86c:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800b870:	f7f5 fa1e 	bl	8000cb0 <__aeabi_fmul>
 800b874:	4601      	mov	r1, r0
 800b876:	4658      	mov	r0, fp
 800b878:	f7f5 f912 	bl	8000aa0 <__addsf3>
 800b87c:	f10a 0a01 	add.w	sl, sl, #1
 800b880:	4683      	mov	fp, r0
 800b882:	e7b6      	b.n	800b7f2 <__kernel_rem_pio2f+0x24a>
 800b884:	0800c53c 	.word	0x0800c53c
 800b888:	3c01      	subs	r4, #1
 800b88a:	ab08      	add	r3, sp, #32
 800b88c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b890:	3e08      	subs	r6, #8
 800b892:	2b00      	cmp	r3, #0
 800b894:	d0f8      	beq.n	800b888 <__kernel_rem_pio2f+0x2e0>
 800b896:	4631      	mov	r1, r6
 800b898:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b89c:	f000 fa9e 	bl	800bddc <scalbnf>
 800b8a0:	46a1      	mov	r9, r4
 800b8a2:	4682      	mov	sl, r0
 800b8a4:	f04f 576e 	mov.w	r7, #998244352	; 0x3b800000
 800b8a8:	ae44      	add	r6, sp, #272	; 0x110
 800b8aa:	f1b9 0f00 	cmp.w	r9, #0
 800b8ae:	da3f      	bge.n	800b930 <__kernel_rem_pio2f+0x388>
 800b8b0:	2700      	movs	r7, #0
 800b8b2:	f04f 0b00 	mov.w	fp, #0
 800b8b6:	4b82      	ldr	r3, [pc, #520]	; (800bac0 <__kernel_rem_pio2f+0x518>)
 800b8b8:	aa30      	add	r2, sp, #192	; 0xc0
 800b8ba:	ebb4 0a07 	subs.w	sl, r4, r7
 800b8be:	d462      	bmi.n	800b986 <__kernel_rem_pio2f+0x3de>
 800b8c0:	a944      	add	r1, sp, #272	; 0x110
 800b8c2:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 800b8c6:	46d9      	mov	r9, fp
 800b8c8:	2600      	movs	r6, #0
 800b8ca:	e053      	b.n	800b974 <__kernel_rem_pio2f+0x3cc>
 800b8cc:	4271      	negs	r1, r6
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f000 fa84 	bl	800bddc <scalbnf>
 800b8d4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b8d8:	4604      	mov	r4, r0
 800b8da:	f7f5 fb9b 	bl	8001014 <__aeabi_fcmpge>
 800b8de:	b1f8      	cbz	r0, 800b920 <__kernel_rem_pio2f+0x378>
 800b8e0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f7f5 f9e3 	bl	8000cb0 <__aeabi_fmul>
 800b8ea:	f7f5 fbbd 	bl	8001068 <__aeabi_f2iz>
 800b8ee:	f7f5 f98b 	bl	8000c08 <__aeabi_i2f>
 800b8f2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b8f6:	4681      	mov	r9, r0
 800b8f8:	f7f5 f9da 	bl	8000cb0 <__aeabi_fmul>
 800b8fc:	4601      	mov	r1, r0
 800b8fe:	4620      	mov	r0, r4
 800b900:	f7f5 f8cc 	bl	8000a9c <__aeabi_fsub>
 800b904:	f7f5 fbb0 	bl	8001068 <__aeabi_f2iz>
 800b908:	ab08      	add	r3, sp, #32
 800b90a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b90e:	4648      	mov	r0, r9
 800b910:	f7f5 fbaa 	bl	8001068 <__aeabi_f2iz>
 800b914:	1c7c      	adds	r4, r7, #1
 800b916:	ab08      	add	r3, sp, #32
 800b918:	3608      	adds	r6, #8
 800b91a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b91e:	e7ba      	b.n	800b896 <__kernel_rem_pio2f+0x2ee>
 800b920:	4620      	mov	r0, r4
 800b922:	f7f5 fba1 	bl	8001068 <__aeabi_f2iz>
 800b926:	ab08      	add	r3, sp, #32
 800b928:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b92c:	463c      	mov	r4, r7
 800b92e:	e7b2      	b.n	800b896 <__kernel_rem_pio2f+0x2ee>
 800b930:	ab08      	add	r3, sp, #32
 800b932:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800b936:	f7f5 f967 	bl	8000c08 <__aeabi_i2f>
 800b93a:	4651      	mov	r1, sl
 800b93c:	f7f5 f9b8 	bl	8000cb0 <__aeabi_fmul>
 800b940:	4639      	mov	r1, r7
 800b942:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 800b946:	4650      	mov	r0, sl
 800b948:	f7f5 f9b2 	bl	8000cb0 <__aeabi_fmul>
 800b94c:	f109 39ff 	add.w	r9, r9, #4294967295
 800b950:	4682      	mov	sl, r0
 800b952:	e7aa      	b.n	800b8aa <__kernel_rem_pio2f+0x302>
 800b954:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b958:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 800b95c:	9204      	str	r2, [sp, #16]
 800b95e:	9303      	str	r3, [sp, #12]
 800b960:	f7f5 f9a6 	bl	8000cb0 <__aeabi_fmul>
 800b964:	4601      	mov	r1, r0
 800b966:	4648      	mov	r0, r9
 800b968:	f7f5 f89a 	bl	8000aa0 <__addsf3>
 800b96c:	4681      	mov	r9, r0
 800b96e:	9a04      	ldr	r2, [sp, #16]
 800b970:	9b03      	ldr	r3, [sp, #12]
 800b972:	3601      	adds	r6, #1
 800b974:	9902      	ldr	r1, [sp, #8]
 800b976:	428e      	cmp	r6, r1
 800b978:	dc01      	bgt.n	800b97e <__kernel_rem_pio2f+0x3d6>
 800b97a:	42be      	cmp	r6, r7
 800b97c:	ddea      	ble.n	800b954 <__kernel_rem_pio2f+0x3ac>
 800b97e:	f842 9027 	str.w	r9, [r2, r7, lsl #2]
 800b982:	3701      	adds	r7, #1
 800b984:	e799      	b.n	800b8ba <__kernel_rem_pio2f+0x312>
 800b986:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800b988:	2b03      	cmp	r3, #3
 800b98a:	d826      	bhi.n	800b9da <__kernel_rem_pio2f+0x432>
 800b98c:	e8df f003 	tbb	[pc, r3]
 800b990:	2a02021c 	.word	0x2a02021c
 800b994:	4626      	mov	r6, r4
 800b996:	2000      	movs	r0, #0
 800b998:	af30      	add	r7, sp, #192	; 0xc0
 800b99a:	2e00      	cmp	r6, #0
 800b99c:	da40      	bge.n	800ba20 <__kernel_rem_pio2f+0x478>
 800b99e:	2d00      	cmp	r5, #0
 800b9a0:	d044      	beq.n	800ba2c <__kernel_rem_pio2f+0x484>
 800b9a2:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800b9a6:	9a01      	ldr	r2, [sp, #4]
 800b9a8:	af58      	add	r7, sp, #352	; 0x160
 800b9aa:	4601      	mov	r1, r0
 800b9ac:	6013      	str	r3, [r2, #0]
 800b9ae:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 800b9b2:	f7f5 f873 	bl	8000a9c <__aeabi_fsub>
 800b9b6:	2601      	movs	r6, #1
 800b9b8:	42b4      	cmp	r4, r6
 800b9ba:	da39      	bge.n	800ba30 <__kernel_rem_pio2f+0x488>
 800b9bc:	b10d      	cbz	r5, 800b9c2 <__kernel_rem_pio2f+0x41a>
 800b9be:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b9c2:	9b01      	ldr	r3, [sp, #4]
 800b9c4:	6058      	str	r0, [r3, #4]
 800b9c6:	e008      	b.n	800b9da <__kernel_rem_pio2f+0x432>
 800b9c8:	2000      	movs	r0, #0
 800b9ca:	ae30      	add	r6, sp, #192	; 0xc0
 800b9cc:	2c00      	cmp	r4, #0
 800b9ce:	da21      	bge.n	800ba14 <__kernel_rem_pio2f+0x46c>
 800b9d0:	b10d      	cbz	r5, 800b9d6 <__kernel_rem_pio2f+0x42e>
 800b9d2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b9d6:	9b01      	ldr	r3, [sp, #4]
 800b9d8:	6018      	str	r0, [r3, #0]
 800b9da:	f008 0007 	and.w	r0, r8, #7
 800b9de:	b059      	add	sp, #356	; 0x164
 800b9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e4:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800b9e8:	eb0a 0684 	add.w	r6, sl, r4, lsl #2
 800b9ec:	4637      	mov	r7, r6
 800b9ee:	46a1      	mov	r9, r4
 800b9f0:	f1b9 0f00 	cmp.w	r9, #0
 800b9f4:	dc22      	bgt.n	800ba3c <__kernel_rem_pio2f+0x494>
 800b9f6:	4627      	mov	r7, r4
 800b9f8:	2f01      	cmp	r7, #1
 800b9fa:	dc38      	bgt.n	800ba6e <__kernel_rem_pio2f+0x4c6>
 800b9fc:	2000      	movs	r0, #0
 800b9fe:	2c01      	cmp	r4, #1
 800ba00:	dc4c      	bgt.n	800ba9c <__kernel_rem_pio2f+0x4f4>
 800ba02:	2d00      	cmp	r5, #0
 800ba04:	d150      	bne.n	800baa8 <__kernel_rem_pio2f+0x500>
 800ba06:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800ba08:	9a01      	ldr	r2, [sp, #4]
 800ba0a:	6013      	str	r3, [r2, #0]
 800ba0c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800ba0e:	6053      	str	r3, [r2, #4]
 800ba10:	6090      	str	r0, [r2, #8]
 800ba12:	e7e2      	b.n	800b9da <__kernel_rem_pio2f+0x432>
 800ba14:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800ba18:	f7f5 f842 	bl	8000aa0 <__addsf3>
 800ba1c:	3c01      	subs	r4, #1
 800ba1e:	e7d5      	b.n	800b9cc <__kernel_rem_pio2f+0x424>
 800ba20:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800ba24:	f7f5 f83c 	bl	8000aa0 <__addsf3>
 800ba28:	3e01      	subs	r6, #1
 800ba2a:	e7b6      	b.n	800b99a <__kernel_rem_pio2f+0x3f2>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	e7ba      	b.n	800b9a6 <__kernel_rem_pio2f+0x3fe>
 800ba30:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800ba34:	f7f5 f834 	bl	8000aa0 <__addsf3>
 800ba38:	3601      	adds	r6, #1
 800ba3a:	e7bd      	b.n	800b9b8 <__kernel_rem_pio2f+0x410>
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ba42:	4619      	mov	r1, r3
 800ba44:	4610      	mov	r0, r2
 800ba46:	9303      	str	r3, [sp, #12]
 800ba48:	9202      	str	r2, [sp, #8]
 800ba4a:	f7f5 f829 	bl	8000aa0 <__addsf3>
 800ba4e:	9a02      	ldr	r2, [sp, #8]
 800ba50:	4601      	mov	r1, r0
 800ba52:	4683      	mov	fp, r0
 800ba54:	4610      	mov	r0, r2
 800ba56:	f7f5 f821 	bl	8000a9c <__aeabi_fsub>
 800ba5a:	9b03      	ldr	r3, [sp, #12]
 800ba5c:	f109 39ff 	add.w	r9, r9, #4294967295
 800ba60:	4619      	mov	r1, r3
 800ba62:	f7f5 f81d 	bl	8000aa0 <__addsf3>
 800ba66:	6038      	str	r0, [r7, #0]
 800ba68:	f847 bd04 	str.w	fp, [r7, #-4]!
 800ba6c:	e7c0      	b.n	800b9f0 <__kernel_rem_pio2f+0x448>
 800ba6e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ba72:	f8d6 b000 	ldr.w	fp, [r6]
 800ba76:	4618      	mov	r0, r3
 800ba78:	4659      	mov	r1, fp
 800ba7a:	9302      	str	r3, [sp, #8]
 800ba7c:	f7f5 f810 	bl	8000aa0 <__addsf3>
 800ba80:	9b02      	ldr	r3, [sp, #8]
 800ba82:	4601      	mov	r1, r0
 800ba84:	4681      	mov	r9, r0
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7f5 f808 	bl	8000a9c <__aeabi_fsub>
 800ba8c:	4659      	mov	r1, fp
 800ba8e:	f7f5 f807 	bl	8000aa0 <__addsf3>
 800ba92:	3f01      	subs	r7, #1
 800ba94:	6030      	str	r0, [r6, #0]
 800ba96:	f846 9d04 	str.w	r9, [r6, #-4]!
 800ba9a:	e7ad      	b.n	800b9f8 <__kernel_rem_pio2f+0x450>
 800ba9c:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 800baa0:	f7f4 fffe 	bl	8000aa0 <__addsf3>
 800baa4:	3c01      	subs	r4, #1
 800baa6:	e7aa      	b.n	800b9fe <__kernel_rem_pio2f+0x456>
 800baa8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800baaa:	9a01      	ldr	r2, [sp, #4]
 800baac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bab0:	6013      	str	r3, [r2, #0]
 800bab2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800bab4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bab8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800babc:	6053      	str	r3, [r2, #4]
 800babe:	e7a7      	b.n	800ba10 <__kernel_rem_pio2f+0x468>
 800bac0:	0800c510 	.word	0x0800c510

0800bac4 <__kernel_sinf>:
 800bac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bac8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800bacc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bad0:	4604      	mov	r4, r0
 800bad2:	460f      	mov	r7, r1
 800bad4:	4691      	mov	r9, r2
 800bad6:	da03      	bge.n	800bae0 <__kernel_sinf+0x1c>
 800bad8:	f7f5 fac6 	bl	8001068 <__aeabi_f2iz>
 800badc:	2800      	cmp	r0, #0
 800bade:	d035      	beq.n	800bb4c <__kernel_sinf+0x88>
 800bae0:	4621      	mov	r1, r4
 800bae2:	4620      	mov	r0, r4
 800bae4:	f7f5 f8e4 	bl	8000cb0 <__aeabi_fmul>
 800bae8:	4605      	mov	r5, r0
 800baea:	4601      	mov	r1, r0
 800baec:	4620      	mov	r0, r4
 800baee:	f7f5 f8df 	bl	8000cb0 <__aeabi_fmul>
 800baf2:	4929      	ldr	r1, [pc, #164]	; (800bb98 <__kernel_sinf+0xd4>)
 800baf4:	4606      	mov	r6, r0
 800baf6:	4628      	mov	r0, r5
 800baf8:	f7f5 f8da 	bl	8000cb0 <__aeabi_fmul>
 800bafc:	4927      	ldr	r1, [pc, #156]	; (800bb9c <__kernel_sinf+0xd8>)
 800bafe:	f7f4 ffcd 	bl	8000a9c <__aeabi_fsub>
 800bb02:	4629      	mov	r1, r5
 800bb04:	f7f5 f8d4 	bl	8000cb0 <__aeabi_fmul>
 800bb08:	4925      	ldr	r1, [pc, #148]	; (800bba0 <__kernel_sinf+0xdc>)
 800bb0a:	f7f4 ffc9 	bl	8000aa0 <__addsf3>
 800bb0e:	4629      	mov	r1, r5
 800bb10:	f7f5 f8ce 	bl	8000cb0 <__aeabi_fmul>
 800bb14:	4923      	ldr	r1, [pc, #140]	; (800bba4 <__kernel_sinf+0xe0>)
 800bb16:	f7f4 ffc1 	bl	8000a9c <__aeabi_fsub>
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	f7f5 f8c8 	bl	8000cb0 <__aeabi_fmul>
 800bb20:	4921      	ldr	r1, [pc, #132]	; (800bba8 <__kernel_sinf+0xe4>)
 800bb22:	f7f4 ffbd 	bl	8000aa0 <__addsf3>
 800bb26:	4680      	mov	r8, r0
 800bb28:	f1b9 0f00 	cmp.w	r9, #0
 800bb2c:	d111      	bne.n	800bb52 <__kernel_sinf+0x8e>
 800bb2e:	4601      	mov	r1, r0
 800bb30:	4628      	mov	r0, r5
 800bb32:	f7f5 f8bd 	bl	8000cb0 <__aeabi_fmul>
 800bb36:	491d      	ldr	r1, [pc, #116]	; (800bbac <__kernel_sinf+0xe8>)
 800bb38:	f7f4 ffb0 	bl	8000a9c <__aeabi_fsub>
 800bb3c:	4631      	mov	r1, r6
 800bb3e:	f7f5 f8b7 	bl	8000cb0 <__aeabi_fmul>
 800bb42:	4601      	mov	r1, r0
 800bb44:	4620      	mov	r0, r4
 800bb46:	f7f4 ffab 	bl	8000aa0 <__addsf3>
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb52:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bb56:	4638      	mov	r0, r7
 800bb58:	f7f5 f8aa 	bl	8000cb0 <__aeabi_fmul>
 800bb5c:	4641      	mov	r1, r8
 800bb5e:	4681      	mov	r9, r0
 800bb60:	4630      	mov	r0, r6
 800bb62:	f7f5 f8a5 	bl	8000cb0 <__aeabi_fmul>
 800bb66:	4601      	mov	r1, r0
 800bb68:	4648      	mov	r0, r9
 800bb6a:	f7f4 ff97 	bl	8000a9c <__aeabi_fsub>
 800bb6e:	4629      	mov	r1, r5
 800bb70:	f7f5 f89e 	bl	8000cb0 <__aeabi_fmul>
 800bb74:	4639      	mov	r1, r7
 800bb76:	f7f4 ff91 	bl	8000a9c <__aeabi_fsub>
 800bb7a:	490c      	ldr	r1, [pc, #48]	; (800bbac <__kernel_sinf+0xe8>)
 800bb7c:	4605      	mov	r5, r0
 800bb7e:	4630      	mov	r0, r6
 800bb80:	f7f5 f896 	bl	8000cb0 <__aeabi_fmul>
 800bb84:	4601      	mov	r1, r0
 800bb86:	4628      	mov	r0, r5
 800bb88:	f7f4 ff8a 	bl	8000aa0 <__addsf3>
 800bb8c:	4601      	mov	r1, r0
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f7f4 ff84 	bl	8000a9c <__aeabi_fsub>
 800bb94:	e7d9      	b.n	800bb4a <__kernel_sinf+0x86>
 800bb96:	bf00      	nop
 800bb98:	2f2ec9d3 	.word	0x2f2ec9d3
 800bb9c:	32d72f34 	.word	0x32d72f34
 800bba0:	3638ef1b 	.word	0x3638ef1b
 800bba4:	39500d01 	.word	0x39500d01
 800bba8:	3c088889 	.word	0x3c088889
 800bbac:	3e2aaaab 	.word	0x3e2aaaab

0800bbb0 <matherr>:
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	4770      	bx	lr

0800bbb4 <atanf>:
 800bbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800bbbc:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	4607      	mov	r7, r0
 800bbc4:	db0e      	blt.n	800bbe4 <atanf+0x30>
 800bbc6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800bbca:	dd04      	ble.n	800bbd6 <atanf+0x22>
 800bbcc:	4601      	mov	r1, r0
 800bbce:	f7f4 ff67 	bl	8000aa0 <__addsf3>
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	e003      	b.n	800bbde <atanf+0x2a>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	f300 80d2 	bgt.w	800bd80 <atanf+0x1cc>
 800bbdc:	4c69      	ldr	r4, [pc, #420]	; (800bd84 <atanf+0x1d0>)
 800bbde:	4620      	mov	r0, r4
 800bbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe4:	4b68      	ldr	r3, [pc, #416]	; (800bd88 <atanf+0x1d4>)
 800bbe6:	429d      	cmp	r5, r3
 800bbe8:	dc0e      	bgt.n	800bc08 <atanf+0x54>
 800bbea:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800bbee:	da08      	bge.n	800bc02 <atanf+0x4e>
 800bbf0:	4966      	ldr	r1, [pc, #408]	; (800bd8c <atanf+0x1d8>)
 800bbf2:	f7f4 ff55 	bl	8000aa0 <__addsf3>
 800bbf6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bbfa:	f7f5 fa15 	bl	8001028 <__aeabi_fcmpgt>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	d1ed      	bne.n	800bbde <atanf+0x2a>
 800bc02:	f04f 36ff 	mov.w	r6, #4294967295
 800bc06:	e01c      	b.n	800bc42 <atanf+0x8e>
 800bc08:	f000 f8e4 	bl	800bdd4 <fabsf>
 800bc0c:	4b60      	ldr	r3, [pc, #384]	; (800bd90 <atanf+0x1dc>)
 800bc0e:	4604      	mov	r4, r0
 800bc10:	429d      	cmp	r5, r3
 800bc12:	dc7c      	bgt.n	800bd0e <atanf+0x15a>
 800bc14:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800bc18:	429d      	cmp	r5, r3
 800bc1a:	dc67      	bgt.n	800bcec <atanf+0x138>
 800bc1c:	4601      	mov	r1, r0
 800bc1e:	f7f4 ff3f 	bl	8000aa0 <__addsf3>
 800bc22:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bc26:	f7f4 ff39 	bl	8000a9c <__aeabi_fsub>
 800bc2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800bc2e:	4605      	mov	r5, r0
 800bc30:	4620      	mov	r0, r4
 800bc32:	f7f4 ff35 	bl	8000aa0 <__addsf3>
 800bc36:	4601      	mov	r1, r0
 800bc38:	4628      	mov	r0, r5
 800bc3a:	f7f5 f8ed 	bl	8000e18 <__aeabi_fdiv>
 800bc3e:	2600      	movs	r6, #0
 800bc40:	4604      	mov	r4, r0
 800bc42:	4621      	mov	r1, r4
 800bc44:	4620      	mov	r0, r4
 800bc46:	f7f5 f833 	bl	8000cb0 <__aeabi_fmul>
 800bc4a:	4601      	mov	r1, r0
 800bc4c:	4680      	mov	r8, r0
 800bc4e:	f7f5 f82f 	bl	8000cb0 <__aeabi_fmul>
 800bc52:	4605      	mov	r5, r0
 800bc54:	494f      	ldr	r1, [pc, #316]	; (800bd94 <atanf+0x1e0>)
 800bc56:	f7f5 f82b 	bl	8000cb0 <__aeabi_fmul>
 800bc5a:	494f      	ldr	r1, [pc, #316]	; (800bd98 <atanf+0x1e4>)
 800bc5c:	f7f4 ff20 	bl	8000aa0 <__addsf3>
 800bc60:	4629      	mov	r1, r5
 800bc62:	f7f5 f825 	bl	8000cb0 <__aeabi_fmul>
 800bc66:	494d      	ldr	r1, [pc, #308]	; (800bd9c <atanf+0x1e8>)
 800bc68:	f7f4 ff1a 	bl	8000aa0 <__addsf3>
 800bc6c:	4629      	mov	r1, r5
 800bc6e:	f7f5 f81f 	bl	8000cb0 <__aeabi_fmul>
 800bc72:	494b      	ldr	r1, [pc, #300]	; (800bda0 <atanf+0x1ec>)
 800bc74:	f7f4 ff14 	bl	8000aa0 <__addsf3>
 800bc78:	4629      	mov	r1, r5
 800bc7a:	f7f5 f819 	bl	8000cb0 <__aeabi_fmul>
 800bc7e:	4949      	ldr	r1, [pc, #292]	; (800bda4 <atanf+0x1f0>)
 800bc80:	f7f4 ff0e 	bl	8000aa0 <__addsf3>
 800bc84:	4629      	mov	r1, r5
 800bc86:	f7f5 f813 	bl	8000cb0 <__aeabi_fmul>
 800bc8a:	4947      	ldr	r1, [pc, #284]	; (800bda8 <atanf+0x1f4>)
 800bc8c:	f7f4 ff08 	bl	8000aa0 <__addsf3>
 800bc90:	4641      	mov	r1, r8
 800bc92:	f7f5 f80d 	bl	8000cb0 <__aeabi_fmul>
 800bc96:	4945      	ldr	r1, [pc, #276]	; (800bdac <atanf+0x1f8>)
 800bc98:	4680      	mov	r8, r0
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	f7f5 f808 	bl	8000cb0 <__aeabi_fmul>
 800bca0:	4943      	ldr	r1, [pc, #268]	; (800bdb0 <atanf+0x1fc>)
 800bca2:	f7f4 fefb 	bl	8000a9c <__aeabi_fsub>
 800bca6:	4629      	mov	r1, r5
 800bca8:	f7f5 f802 	bl	8000cb0 <__aeabi_fmul>
 800bcac:	4941      	ldr	r1, [pc, #260]	; (800bdb4 <atanf+0x200>)
 800bcae:	f7f4 fef5 	bl	8000a9c <__aeabi_fsub>
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	f7f4 fffc 	bl	8000cb0 <__aeabi_fmul>
 800bcb8:	493f      	ldr	r1, [pc, #252]	; (800bdb8 <atanf+0x204>)
 800bcba:	f7f4 feef 	bl	8000a9c <__aeabi_fsub>
 800bcbe:	4629      	mov	r1, r5
 800bcc0:	f7f4 fff6 	bl	8000cb0 <__aeabi_fmul>
 800bcc4:	493d      	ldr	r1, [pc, #244]	; (800bdbc <atanf+0x208>)
 800bcc6:	f7f4 fee9 	bl	8000a9c <__aeabi_fsub>
 800bcca:	4629      	mov	r1, r5
 800bccc:	f7f4 fff0 	bl	8000cb0 <__aeabi_fmul>
 800bcd0:	1c73      	adds	r3, r6, #1
 800bcd2:	4601      	mov	r1, r0
 800bcd4:	4640      	mov	r0, r8
 800bcd6:	d139      	bne.n	800bd4c <atanf+0x198>
 800bcd8:	f7f4 fee2 	bl	8000aa0 <__addsf3>
 800bcdc:	4621      	mov	r1, r4
 800bcde:	f7f4 ffe7 	bl	8000cb0 <__aeabi_fmul>
 800bce2:	4601      	mov	r1, r0
 800bce4:	4620      	mov	r0, r4
 800bce6:	f7f4 fed9 	bl	8000a9c <__aeabi_fsub>
 800bcea:	e772      	b.n	800bbd2 <atanf+0x1e>
 800bcec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bcf0:	f7f4 fed4 	bl	8000a9c <__aeabi_fsub>
 800bcf4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bcf8:	4605      	mov	r5, r0
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f7f4 fed0 	bl	8000aa0 <__addsf3>
 800bd00:	4601      	mov	r1, r0
 800bd02:	4628      	mov	r0, r5
 800bd04:	f7f5 f888 	bl	8000e18 <__aeabi_fdiv>
 800bd08:	2601      	movs	r6, #1
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	e799      	b.n	800bc42 <atanf+0x8e>
 800bd0e:	4b2c      	ldr	r3, [pc, #176]	; (800bdc0 <atanf+0x20c>)
 800bd10:	429d      	cmp	r5, r3
 800bd12:	dc14      	bgt.n	800bd3e <atanf+0x18a>
 800bd14:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800bd18:	f7f4 fec0 	bl	8000a9c <__aeabi_fsub>
 800bd1c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800bd20:	4605      	mov	r5, r0
 800bd22:	4620      	mov	r0, r4
 800bd24:	f7f4 ffc4 	bl	8000cb0 <__aeabi_fmul>
 800bd28:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bd2c:	f7f4 feb8 	bl	8000aa0 <__addsf3>
 800bd30:	4601      	mov	r1, r0
 800bd32:	4628      	mov	r0, r5
 800bd34:	f7f5 f870 	bl	8000e18 <__aeabi_fdiv>
 800bd38:	2602      	movs	r6, #2
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	e781      	b.n	800bc42 <atanf+0x8e>
 800bd3e:	4601      	mov	r1, r0
 800bd40:	4820      	ldr	r0, [pc, #128]	; (800bdc4 <atanf+0x210>)
 800bd42:	f7f5 f869 	bl	8000e18 <__aeabi_fdiv>
 800bd46:	2603      	movs	r6, #3
 800bd48:	4604      	mov	r4, r0
 800bd4a:	e77a      	b.n	800bc42 <atanf+0x8e>
 800bd4c:	f7f4 fea8 	bl	8000aa0 <__addsf3>
 800bd50:	4621      	mov	r1, r4
 800bd52:	f7f4 ffad 	bl	8000cb0 <__aeabi_fmul>
 800bd56:	4b1c      	ldr	r3, [pc, #112]	; (800bdc8 <atanf+0x214>)
 800bd58:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800bd5c:	f7f4 fe9e 	bl	8000a9c <__aeabi_fsub>
 800bd60:	4621      	mov	r1, r4
 800bd62:	f7f4 fe9b 	bl	8000a9c <__aeabi_fsub>
 800bd66:	4b19      	ldr	r3, [pc, #100]	; (800bdcc <atanf+0x218>)
 800bd68:	4601      	mov	r1, r0
 800bd6a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bd6e:	f7f4 fe95 	bl	8000a9c <__aeabi_fsub>
 800bd72:	2f00      	cmp	r7, #0
 800bd74:	4604      	mov	r4, r0
 800bd76:	f6bf af32 	bge.w	800bbde <atanf+0x2a>
 800bd7a:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800bd7e:	e72e      	b.n	800bbde <atanf+0x2a>
 800bd80:	4c13      	ldr	r4, [pc, #76]	; (800bdd0 <atanf+0x21c>)
 800bd82:	e72c      	b.n	800bbde <atanf+0x2a>
 800bd84:	bfc90fdb 	.word	0xbfc90fdb
 800bd88:	3edfffff 	.word	0x3edfffff
 800bd8c:	7149f2ca 	.word	0x7149f2ca
 800bd90:	3f97ffff 	.word	0x3f97ffff
 800bd94:	3c8569d7 	.word	0x3c8569d7
 800bd98:	3d4bda59 	.word	0x3d4bda59
 800bd9c:	3d886b35 	.word	0x3d886b35
 800bda0:	3dba2e6e 	.word	0x3dba2e6e
 800bda4:	3e124925 	.word	0x3e124925
 800bda8:	3eaaaaab 	.word	0x3eaaaaab
 800bdac:	bd15a221 	.word	0xbd15a221
 800bdb0:	3d6ef16b 	.word	0x3d6ef16b
 800bdb4:	3d9d8795 	.word	0x3d9d8795
 800bdb8:	3de38e38 	.word	0x3de38e38
 800bdbc:	3e4ccccd 	.word	0x3e4ccccd
 800bdc0:	401bffff 	.word	0x401bffff
 800bdc4:	bf800000 	.word	0xbf800000
 800bdc8:	0800c558 	.word	0x0800c558
 800bdcc:	0800c548 	.word	0x0800c548
 800bdd0:	3fc90fdb 	.word	0x3fc90fdb

0800bdd4 <fabsf>:
 800bdd4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bdd8:	4770      	bx	lr
	...

0800bddc <scalbnf>:
 800bddc:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800bde0:	b510      	push	{r4, lr}
 800bde2:	4602      	mov	r2, r0
 800bde4:	460c      	mov	r4, r1
 800bde6:	d028      	beq.n	800be3a <scalbnf+0x5e>
 800bde8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bdec:	d304      	bcc.n	800bdf8 <scalbnf+0x1c>
 800bdee:	4601      	mov	r1, r0
 800bdf0:	f7f4 fe56 	bl	8000aa0 <__addsf3>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	e020      	b.n	800be3a <scalbnf+0x5e>
 800bdf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdfc:	d215      	bcs.n	800be2a <scalbnf+0x4e>
 800bdfe:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800be02:	f7f4 ff55 	bl	8000cb0 <__aeabi_fmul>
 800be06:	4b18      	ldr	r3, [pc, #96]	; (800be68 <scalbnf+0x8c>)
 800be08:	4602      	mov	r2, r0
 800be0a:	429c      	cmp	r4, r3
 800be0c:	db22      	blt.n	800be54 <scalbnf+0x78>
 800be0e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800be12:	3b19      	subs	r3, #25
 800be14:	4423      	add	r3, r4
 800be16:	2bfe      	cmp	r3, #254	; 0xfe
 800be18:	dd09      	ble.n	800be2e <scalbnf+0x52>
 800be1a:	4611      	mov	r1, r2
 800be1c:	4813      	ldr	r0, [pc, #76]	; (800be6c <scalbnf+0x90>)
 800be1e:	f000 f829 	bl	800be74 <copysignf>
 800be22:	4912      	ldr	r1, [pc, #72]	; (800be6c <scalbnf+0x90>)
 800be24:	f7f4 ff44 	bl	8000cb0 <__aeabi_fmul>
 800be28:	e7e4      	b.n	800bdf4 <scalbnf+0x18>
 800be2a:	0ddb      	lsrs	r3, r3, #23
 800be2c:	e7f2      	b.n	800be14 <scalbnf+0x38>
 800be2e:	2b00      	cmp	r3, #0
 800be30:	dd05      	ble.n	800be3e <scalbnf+0x62>
 800be32:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800be36:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800be3a:	4610      	mov	r0, r2
 800be3c:	bd10      	pop	{r4, pc}
 800be3e:	f113 0f16 	cmn.w	r3, #22
 800be42:	da09      	bge.n	800be58 <scalbnf+0x7c>
 800be44:	f24c 3350 	movw	r3, #50000	; 0xc350
 800be48:	429c      	cmp	r4, r3
 800be4a:	4611      	mov	r1, r2
 800be4c:	dce6      	bgt.n	800be1c <scalbnf+0x40>
 800be4e:	4808      	ldr	r0, [pc, #32]	; (800be70 <scalbnf+0x94>)
 800be50:	f000 f810 	bl	800be74 <copysignf>
 800be54:	4906      	ldr	r1, [pc, #24]	; (800be70 <scalbnf+0x94>)
 800be56:	e7e5      	b.n	800be24 <scalbnf+0x48>
 800be58:	3319      	adds	r3, #25
 800be5a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800be5e:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800be62:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800be66:	e7dd      	b.n	800be24 <scalbnf+0x48>
 800be68:	ffff3cb0 	.word	0xffff3cb0
 800be6c:	7149f2ca 	.word	0x7149f2ca
 800be70:	0da24260 	.word	0x0da24260

0800be74 <copysignf>:
 800be74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800be78:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800be7c:	4308      	orrs	r0, r1
 800be7e:	4770      	bx	lr

0800be80 <__errno>:
 800be80:	4b01      	ldr	r3, [pc, #4]	; (800be88 <__errno+0x8>)
 800be82:	6818      	ldr	r0, [r3, #0]
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop
 800be88:	200000f0 	.word	0x200000f0

0800be8c <_init>:
 800be8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be8e:	bf00      	nop
 800be90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be92:	bc08      	pop	{r3}
 800be94:	469e      	mov	lr, r3
 800be96:	4770      	bx	lr

0800be98 <_fini>:
 800be98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9a:	bf00      	nop
 800be9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be9e:	bc08      	pop	{r3}
 800bea0:	469e      	mov	lr, r3
 800bea2:	4770      	bx	lr
